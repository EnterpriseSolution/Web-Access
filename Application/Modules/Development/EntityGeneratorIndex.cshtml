@using DapperCodeGenerator.Core.Enumerations
@model DapperCodeGenerator.Web.Models.ApplicationState

@{
    ViewData["Title"] = "Dapper Code Generator";
}

<form class="mt-3" asp-controller="Databases" asp-action="Refresh" method="get">
    <div class="form-group">
        <label for="connectionType">Connection Type</label>
        <select class="form-control"
                asp-for="DbConnectionType"
                id="connectionType"
                name="connectionType"
                onchange="document.location.href = `/Development/Entity/SelectConnectionType?connectionType=${this.options[this.selectedIndex].value}`;">
            <option selected>@DbConnectionTypes.MsSql</option>
            <option>@DbConnectionTypes.Postgres</option>
            <option>@DbConnectionTypes.Oracle</option>
        </select>
    </div>
    <div class="form-group">
        <label for="connectionString">Connection String</label>
        <input class="form-control" id="connectionString" name="connectionString" placeholder="@Model.ConnectionString" value="@Model.ConnectionString">
    </div>
    <button type="button" id="btnConnect" class="btn btn-primary">Connect</button>
</form>

@if (Model.Databases==null ||  Model.Databases.Count == 0)
{
    <div class="mt-5 alert alert-warning" role="alert">
        No databases found. If you know the server you are connecting to has databases, this may be due to an invalid connection string.
    </div>
}

@if (Model.Databases != null  &&  Model.Databases.Count > 0)
{
    <h3 class="mt-5">Database(s)</h3>
    <select class="form-control"
            onchange="document.location.href = `/Development/Entity/SelectDatabase?databaseName=${this.options[this.selectedIndex].value}`;">
        <option>Select Database...</option>
        @foreach (var db in Model.Databases)
        {
            <option value="@db.DatabaseName">@db.DatabaseName</option>
        }
    </select>
}

@if (Model.SelectedDatabase != null)
{
    <div class="mt-5">
        <span class="btn-group btn-group-sm float-right">
            @Html.Partial("~/Modules/Development/Partials/_GeneratedTablesDataModelsModal.cshtml", Model.SelectedDatabase)
            @Html.Partial("~/Modules/Development/Partials/_GeneratedTablesDapperModal.cshtml", Model.SelectedDatabase)
        </span>
        <h4><strong>@Model.SelectedDatabase.DatabaseName</strong> Database</h4>
    </div>

    <table class="table table-striped table-bordered table-hover">
        <thead class="thead-light">
        <tr>
            <th scope="col">#</th>
            <th scope="col">Table Name</th>
        </tr>
        </thead>
        <tbody>
        @for (var i = 1; i <= Model.SelectedDatabase.Tables.Count; i++)
        {
            var table = Model.SelectedDatabase.Tables[i - 1];

            <tr>
                <th class="align-middle" scope="row">@i</th>
                <td>
                    <span class="align-middle">@table.TableName</span>
                    <span class="btn-group btn-group-sm float-right">
                        @Html.Partial("~/Modules/Development/Partials/_GeneratedTableDataModelModal.cshtml", table)
                        @Html.Partial("~/Modules/Development/Partials/_GeneratedTableDapperModal.cshtml", table)
                    </span>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


<script type="text/javascript">
    
    function selectElementContents(el) {
        if (document.body.createTextRange) {
            const textRange = document.body.createTextRange();
            textRange.moveToElementText(el);
            textRange.select();
            textRange.execCommand('Copy');
        }
        else if (window.getSelection && document.createRange) {
            const range = document.createRange();
            range.selectNodeContents(el);
            const sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            try {
                const successful = document.execCommand('copy');
                const msg = successful ? 'successful' : 'unsuccessful';
                console.log(`Copy ${msg}`);
            } catch (err) {
                console.log('Copy unsuccessful');
            }
        }
    }

    function make_copy_button(el, iconOnly) {
        const copyBtn = document.createElement('button');
        copyBtn.classList.add('btn', 'btn-sm', 'btn-info');
        el.parentNode.insertBefore(copyBtn, el.nextSibling);
        copyBtn.onclick = function () { selectElementContents(el); };

        // IE 4+, Chrome 42+, Firefox 41+, Opera 29+
        const icon = '<i class="material-icons md-18 align-middle">content_copy</i>';

        if (iconOnly) {
            copyBtn.classList.add('ml-2');
            copyBtn.innerHTML = icon;
        } else {
            copyBtn.classList.add('mt-2');
            copyBtn.innerHTML = `Copy Code <span>${icon}</span>`;
        }

        // Safari, older Chrome, Firefox and Opera
        if (!document.queryCommandSupported('copy') && parseInt(navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./)[2]) < 42) {
            copyBtn.disabled = true;
        }
    }

    document.querySelectorAll('h5 code').forEach((el) => {
        make_copy_button(el, true);
    });

    document.querySelectorAll('pre code').forEach((el) => {
        make_copy_button(el, false);
    });

    jQuery(function () {
        $('#btnConnect').click(function (e) {
            var parm = {
                connectionType: 1,
                connectionString: $("#connectionString").val()
            };
            var url = "/Development/Entity/Refresh";
            $.get(url, parm,
                function (response) {
                    console.log("get", response);
                });
        });

    });
</script>

<style type="text/css">
    body {
        padding-top: 4em;
    }

    .modal {
        padding: 1em;
    }

    .modal-dialog {
        min-width: 100%;
        min-height: 100%;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
    }

    .modal-content {
        min-width: 100%;
        min-height: 100%;
        width: 100%;
        height: 100%;
        overflow: auto;
    }

    .material-icons.md-18 {
        font-size: 18px;
    }

    .material-icons.md-24 {
        font-size: 24px;
    }

    .material-icons.md-36 {
        font-size: 36px;
    }

    .material-icons.md-48 {
        font-size: 48px;
    }

    h5 code {
        font-size: 100%;
        color: black !important;
        margin: 0 !important;
        padding: 0 !important;
    }

    pre code {
        display: block;
        padding: 1em;
        background-color: #e9ecef;
        overflow: auto;
    }
</style>
