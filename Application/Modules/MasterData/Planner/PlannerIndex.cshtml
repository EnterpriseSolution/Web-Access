@{
    ViewData["Title"] = Serenity.LocalText.Get("Db.MasterData.Planner.EntityPlural");
}

<div class="panel-group" id="accordion">
    <div class="panel panel-default" id="panel1">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" data-target="#collapseOne" href="#collapseOne">
                    Inventory Balance Enquiry
                </a>
            </h4>
        </div>

        <div id="collapseOne" class="panel-collapse collapse in">
            <div class="panel-body">
                <!-- Horizontal Form -->
                <div class="box box-info">
                    <div class="box-header with-border">
                        <h3 class="box-title">Horizontal Form</h3>
                    </div><!-- /.box-header -->
                    <!-- form start -->
                    <form class="form-horizontal">
                        <div class="box-body">
                            <div class="form-group">
                                <label for="inputEmail3" class="col-sm-2 control-label">Email</label>
                                <div class="col-sm-10">
                                    <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="inputPassword3" class="col-sm-2 control-label">Password</label>
                                <div class="col-sm-10">
                                    <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-offset-2 col-sm-10">
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox"> Remember me
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div><!-- /.box-body -->
                        <div class="box-footer">
                            <button type="submit" class="btn btn-default">Cancel</button>
                            <button type="submit" class="btn btn-info pull-right">Sign in</button>
                        </div><!-- /.box-footer -->
                    </form>
                </div><!-- /.box -->
            </div>
        </div>
    </div>
</div>

<div id="GridDiv"></div>

<style type="text/css">
    .panel-heading a:after {
        font-family:'Glyphicons Halflings';
        content:"\e114";
        float: right;
        color: grey;
    }
    .panel-heading a.collapsed:after {
        content:"\e080";
    }
</style>
<script type="text/javascript">
    
    //// define some minimum height/width/padding before resizing
    //var DATAGRID_MIN_HEIGHT = 180;
    //var DATAGRID_MIN_WIDTH = 300;
    //var DATAGRID_BOTTOM_PADDING = 20;
    ///** Attach an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space
    // * Options: we could also provide a % factor to resize on each height/width independently
    // */
    //function attachAutoResizeDataGrid(grid, gridId, gridContainerId) {
    //    var gridDomElm = $('#' + gridId);
    //    if (!gridDomElm || typeof gridDomElm.offset() === "undefined") {
    //        // if we can't find the grid to resize, return without attaching anything
    //        return null;
    //    }
    //    //-- 1st resize the datagrid size on first load (because the onResize is not triggered on first page load)
    //    resizeToFitBrowserWindow(grid, gridId, gridContainerId);
    //    //-- 2nd attach a trigger on the Window DOM element, so that it happens also when resizing after first load
    //    $(window).on("resize", function () {
    //        // for some yet unknown reason, calling the resize twice removes any stuttering/flickering when changing the height and makes it much smoother
    //        resizeToFitBrowserWindow(grid, gridId, gridContainerId);
    //        resizeToFitBrowserWindow(grid, gridId, gridContainerId);
    //    });
    //    // in a SPA (Single Page App) environment you SHOULD also call the destroyAutoResize()
    //};

    ///* destroy the resizer when user leaves the page */
    //function destroyAutoResize() {
    //    $(window).trigger('resize').off('resize');
    //}

    ///**
    //* Private function, calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation
    //* object gridOptions
    //*/
    //function calculateGridNewDimensions(gridId, gridContainerId) {
    //    var availableHeight = $(window).height() - $('#' + gridId).offset().top - DATAGRID_BOTTOM_PADDING;
    //    var availableWidth = $('#' + gridContainerId).width();
    //    var newHeight = availableHeight;
    //    var newWidth = availableWidth;
    //    // we want to keep a minimum datagrid size, apply these minimum if required
    //    if (newHeight < DATAGRID_MIN_HEIGHT) {
    //        newHeight = DATAGRID_MIN_HEIGHT;
    //    }
    //    if (newWidth < DATAGRID_MIN_WIDTH) {
    //        newWidth = DATAGRID_MIN_WIDTH;
    //    }
    //    return {
    //        height: newHeight,
    //        width: newWidth
    //    };
    //}
    ///** resize the datagrid to fit the browser height & width */
    //function resizeToFitBrowserWindow(grid, gridId, gridContainerId) {
    //    // calculate new available sizes but with minimum height of 220px
    //    var newSizes = calculateGridNewDimensions(gridId, gridContainerId);
    //    if (newSizes) {
    //        // apply these new height/width to the datagrid
    //        $('#' + gridId).height(newSizes.height);
    //        $('#' + gridId).width(newSizes.width);
    //        // resize the slickgrid canvas on all browser except some IE versions
    //        // exclude all IE below IE11
    //        if (new RegExp('MSIE [6-8]').exec(navigator.userAgent) === null && grid) {
    //            grid.resizeCanvas();
    //        }
    //    }
    //}

    var grid;
    jQuery(function () {
        grid = new Matrix.MasterData.PlannerGrid($('#GridDiv'), {});
        grid.init();

        //attachAutoResizeDataGrid(grid, "GridDiv", "gridContainer");

        Q.initFullHeightGridPage($('#GridDiv'));
        

        $('.panel').on('shown.bs.collapse', function () {
            //after menu opens
            Q.initFullHeightGridPage($('#GridDiv'));
        });

        $('.panel').on('hidden.bs.collapse', function () {
            Q.initFullHeightGridPage($('#GridDiv'));
        });

        //$('.panel')
        //    .on('hidden.bs.collapse',
        //        function(e) {
        //            //alert('Event fired on #' + e.currentTarget.id);
        //            //$("#GridDiv").resizable();
        //            //grid.updateRowCount();
        //            //grid.render();
        //            //grid.invalidate();
        //            //grid.render();
        //            Q.initFullHeightGridPage($('#GridDiv'));
        //        });
    });
</script>

@*There are 2 codes here to notice

1.Show 2.Shown 3.Hide 4.Hidden

So the code goes as below

$('#accordion').on('show.bs.collapse', function () {
//on clicking the accordion menu
});

$('#accordion').on('hide.bs.collapse', function () {
//on clicking the accordion menu
});
So now if we use Hidden and Shown we can trigger after the accordion menu content closes or open up completely

$('#accordion').on('shown.bs.collapse', function () {
//after menu opens
});

$('#accordion').on('hidden.bs.collapse', function () {
//after menu closes
});*@