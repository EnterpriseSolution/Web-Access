/// <reference path="../../../Serenity/Serenity.TypeScript.CodeGeneration/Serenity.CodeGeneration.d.ts" />
/// <reference types="jquery" />
/// <reference types="jqueryui" />
declare namespace Matrix.Administration {
    interface ColumnEntity {
        Field?: string;
        Caption?: string;
        Width?: number;
    }
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
    class CompanyForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CompanyForm {
        CompanyCode: Serenity.StringEditor;
        CompanyName: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        DbServer: Serenity.StringEditor;
        DbDatabase: Serenity.StringEditor;
        DbUser: Serenity.StringEditor;
        DbPassword: Serenity.StringEditor;
    }
}
declare namespace Matrix.Administration {
    interface CompanyRow {
        Recnum?: number;
        CompanyCode?: string;
        CompanyName?: string;
        Suspended?: boolean;
        DbServer?: string;
        DbDatabase?: string;
        DbUser?: string;
        DbPassword?: string;
        DbDriver?: string;
        DbReptDriver?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        AcctAnlys1Opt?: string;
        AcctAnlys2Opt?: string;
        AcctAnlys3Opt?: string;
        AcctAnlys4Opt?: string;
        VochAnlys1Opt?: string;
        VochAnlys2Opt?: string;
        VochAnlys3Opt?: string;
        VochAnlys4Opt?: string;
        VochAnlys5Opt?: string;
        VochAnlys6Opt?: string;
        ItemAnlys1Opt?: string;
        ItemAnlys2Opt?: string;
        ItemAnlys3Opt?: string;
        ItemAnlys4Opt?: string;
        CustAnlys1Opt?: string;
        CustAnlys2Opt?: string;
        CustAnlys3Opt?: string;
        CustAnlys4Opt?: string;
        VendAnlys1Opt?: string;
        VendAnlys2Opt?: string;
        VendAnlys3Opt?: string;
        VendAnlys4Opt?: string;
        SaleAnlys1Opt?: string;
        SaleAnlys2Opt?: string;
        SaleAnlys3Opt?: string;
        SaleAnlys4Opt?: string;
        SaleAnlys5Opt?: string;
        SaleAnlys6Opt?: string;
        PurcAnlys1Opt?: string;
        PurcAnlys2Opt?: string;
        PurcAnlys3Opt?: string;
        PurcAnlys4Opt?: string;
        PurcAnlys5Opt?: string;
        PurcAnlys6Opt?: string;
        MvmtAnlys1Opt?: string;
        MvmtAnlys2Opt?: string;
        MvmtAnlys3Opt?: string;
        MvmtAnlys4Opt?: string;
        MvmtAnlys5Opt?: string;
        MvmtAnlys6Opt?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        JordAnlys1Opt?: string;
        JordAnlys2Opt?: string;
        JordAnlys3Opt?: string;
        JordAnlys4Opt?: string;
        JordAnlys5Opt?: string;
        JordAnlys6Opt?: string;
        VochAnlys7Opt?: string;
        VochAnlys8Opt?: string;
        SaleAnlys7Opt?: string;
        SaleAnlys8Opt?: string;
        PurcAnlys7Opt?: string;
        PurcAnlys8Opt?: string;
        MvmtAnlys7Opt?: string;
        MvmtAnlys8Opt?: string;
        JordAnlys7Opt?: string;
        JordAnlys8Opt?: string;
        ArAnlys1Opt?: string;
        ArAnlys2Opt?: string;
        ArAnlys3Opt?: string;
        ArAnlys4Opt?: string;
        ArAnlys5Opt?: string;
        ArAnlys6Opt?: string;
        ArAnlys7Opt?: string;
        ArAnlys8Opt?: string;
        ApAnlys1Opt?: string;
        ApAnlys2Opt?: string;
        ApAnlys3Opt?: string;
        ApAnlys4Opt?: string;
        ApAnlys5Opt?: string;
        ApAnlys6Opt?: string;
        ApAnlys7Opt?: string;
        ApAnlys8Opt?: string;
        Odbc?: string;
        MasterCompany?: string;
        AcctAnlys5Opt?: string;
        AcctAnlys6Opt?: string;
        AcctAnlys7Opt?: string;
        AcctAnlys8Opt?: string;
        AcctAnlys9Opt?: string;
        AcctAnlys10Opt?: string;
        ItemAnlys5Opt?: string;
        ItemAnlys6Opt?: string;
        ItemAnlys7Opt?: string;
        ItemAnlys8Opt?: string;
        ItemAnlys9Opt?: string;
        ItemAnlys10Opt?: string;
        CustAnlys5Opt?: string;
        CustAnlys6Opt?: string;
        CustAnlys7Opt?: string;
        CustAnlys8Opt?: string;
        CustAnlys9Opt?: string;
        CustAnlys10Opt?: string;
        VendAnlys5Opt?: string;
        VendAnlys6Opt?: string;
        VendAnlys7Opt?: string;
        VendAnlys8Opt?: string;
        VendAnlys9Opt?: string;
        VendAnlys10Opt?: string;
        SaleAnlys9Opt?: string;
        SaleAnlys10Opt?: string;
        SaleAnlys11Opt?: string;
        SaleAnlys12Opt?: string;
        SaleAnlys13Opt?: string;
        SaleAnlys14Opt?: string;
        SaleAnlys15Opt?: string;
        SaleAnlys16Opt?: string;
        SaleAnlys17Opt?: string;
        SaleAnlys18Opt?: string;
        SaleAnlys19Opt?: string;
        SaleAnlys20Opt?: string;
        PurcAnlys9Opt?: string;
        PurcAnlys10Opt?: string;
        PurcAnlys11Opt?: string;
        PurcAnlys12Opt?: string;
        PurcAnlys13Opt?: string;
        PurcAnlys14Opt?: string;
        PurcAnlys15Opt?: string;
        PurcAnlys16Opt?: string;
        PurcAnlys17Opt?: string;
        PurcAnlys18Opt?: string;
        PurcAnlys19Opt?: string;
        PurcAnlys20Opt?: string;
        MvmtAnlys9Opt?: string;
        MvmtAnlys10Opt?: string;
        MvmtAnlys11Opt?: string;
        MvmtAnlys12Opt?: string;
        MvmtAnlys13Opt?: string;
        MvmtAnlys14Opt?: string;
        MvmtAnlys15Opt?: string;
        MvmtAnlys16Opt?: string;
        MvmtAnlys17Opt?: string;
        MvmtAnlys18Opt?: string;
        MvmtAnlys19Opt?: string;
        MvmtAnlys20Opt?: string;
        JordAnlys9Opt?: string;
        JordAnlys10Opt?: string;
        JordAnlys11Opt?: string;
        JordAnlys12Opt?: string;
        JordAnlys13Opt?: string;
        JordAnlys14Opt?: string;
        JordAnlys15Opt?: string;
        JordAnlys16Opt?: string;
        JordAnlys17Opt?: string;
        JordAnlys18Opt?: string;
        JordAnlys19Opt?: string;
        JordAnlys20Opt?: string;
        ArAnlys9Opt?: string;
        ArAnlys10Opt?: string;
        ArAnlys11Opt?: string;
        ArAnlys12Opt?: string;
        ArAnlys13Opt?: string;
        ArAnlys14Opt?: string;
        ArAnlys15Opt?: string;
        ArAnlys16Opt?: string;
        ArAnlys17Opt?: string;
        ArAnlys18Opt?: string;
        ArAnlys19Opt?: string;
        ArAnlys20Opt?: string;
        ApAnlys9Opt?: string;
        ApAnlys10Opt?: string;
        ApAnlys11Opt?: string;
        ApAnlys12Opt?: string;
        ApAnlys13Opt?: string;
        ApAnlys14Opt?: string;
        ApAnlys15Opt?: string;
        ApAnlys16Opt?: string;
        ApAnlys17Opt?: string;
        ApAnlys18Opt?: string;
        ApAnlys19Opt?: string;
        ApAnlys20Opt?: string;
        VochAnlys9Opt?: string;
        VochAnlys10Opt?: string;
        VochAnlys11Opt?: string;
        VochAnlys12Opt?: string;
        VochAnlys13Opt?: string;
        VochAnlys14Opt?: string;
        VochAnlys15Opt?: string;
        VochAnlys16Opt?: string;
        VochAnlys17Opt?: string;
        VochAnlys18Opt?: string;
        VochAnlys19Opt?: string;
        VochAnlys20Opt?: string;
        OlapServer?: string;
        OlapDatabase?: string;
        ExpiryDate?: string;
        MaxUsers?: number;
    }
    namespace CompanyRow {
        const idProperty = "CompanyCode";
        const nameProperty = "CompanyName";
        const localTextPrefix = "Administration.Company";
        const lookupKey = "Administration.Company";
        function getLookup(): Q.Lookup<CompanyRow>;
        namespace Fields {
            const Recnum: string;
            const CompanyCode: string;
            const CompanyName: string;
            const Suspended: string;
            const DbServer: string;
            const DbDatabase: string;
            const DbUser: string;
            const DbPassword: string;
            const DbDriver: string;
            const DbReptDriver: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const AcctAnlys1Opt: string;
            const AcctAnlys2Opt: string;
            const AcctAnlys3Opt: string;
            const AcctAnlys4Opt: string;
            const VochAnlys1Opt: string;
            const VochAnlys2Opt: string;
            const VochAnlys3Opt: string;
            const VochAnlys4Opt: string;
            const VochAnlys5Opt: string;
            const VochAnlys6Opt: string;
            const ItemAnlys1Opt: string;
            const ItemAnlys2Opt: string;
            const ItemAnlys3Opt: string;
            const ItemAnlys4Opt: string;
            const CustAnlys1Opt: string;
            const CustAnlys2Opt: string;
            const CustAnlys3Opt: string;
            const CustAnlys4Opt: string;
            const VendAnlys1Opt: string;
            const VendAnlys2Opt: string;
            const VendAnlys3Opt: string;
            const VendAnlys4Opt: string;
            const SaleAnlys1Opt: string;
            const SaleAnlys2Opt: string;
            const SaleAnlys3Opt: string;
            const SaleAnlys4Opt: string;
            const SaleAnlys5Opt: string;
            const SaleAnlys6Opt: string;
            const PurcAnlys1Opt: string;
            const PurcAnlys2Opt: string;
            const PurcAnlys3Opt: string;
            const PurcAnlys4Opt: string;
            const PurcAnlys5Opt: string;
            const PurcAnlys6Opt: string;
            const MvmtAnlys1Opt: string;
            const MvmtAnlys2Opt: string;
            const MvmtAnlys3Opt: string;
            const MvmtAnlys4Opt: string;
            const MvmtAnlys5Opt: string;
            const MvmtAnlys6Opt: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const JordAnlys1Opt: string;
            const JordAnlys2Opt: string;
            const JordAnlys3Opt: string;
            const JordAnlys4Opt: string;
            const JordAnlys5Opt: string;
            const JordAnlys6Opt: string;
            const VochAnlys7Opt: string;
            const VochAnlys8Opt: string;
            const SaleAnlys7Opt: string;
            const SaleAnlys8Opt: string;
            const PurcAnlys7Opt: string;
            const PurcAnlys8Opt: string;
            const MvmtAnlys7Opt: string;
            const MvmtAnlys8Opt: string;
            const JordAnlys7Opt: string;
            const JordAnlys8Opt: string;
            const ArAnlys1Opt: string;
            const ArAnlys2Opt: string;
            const ArAnlys3Opt: string;
            const ArAnlys4Opt: string;
            const ArAnlys5Opt: string;
            const ArAnlys6Opt: string;
            const ArAnlys7Opt: string;
            const ArAnlys8Opt: string;
            const ApAnlys1Opt: string;
            const ApAnlys2Opt: string;
            const ApAnlys3Opt: string;
            const ApAnlys4Opt: string;
            const ApAnlys5Opt: string;
            const ApAnlys6Opt: string;
            const ApAnlys7Opt: string;
            const ApAnlys8Opt: string;
            const Odbc: string;
            const MasterCompany: string;
            const AcctAnlys5Opt: string;
            const AcctAnlys6Opt: string;
            const AcctAnlys7Opt: string;
            const AcctAnlys8Opt: string;
            const AcctAnlys9Opt: string;
            const AcctAnlys10Opt: string;
            const ItemAnlys5Opt: string;
            const ItemAnlys6Opt: string;
            const ItemAnlys7Opt: string;
            const ItemAnlys8Opt: string;
            const ItemAnlys9Opt: string;
            const ItemAnlys10Opt: string;
            const CustAnlys5Opt: string;
            const CustAnlys6Opt: string;
            const CustAnlys7Opt: string;
            const CustAnlys8Opt: string;
            const CustAnlys9Opt: string;
            const CustAnlys10Opt: string;
            const VendAnlys5Opt: string;
            const VendAnlys6Opt: string;
            const VendAnlys7Opt: string;
            const VendAnlys8Opt: string;
            const VendAnlys9Opt: string;
            const VendAnlys10Opt: string;
            const SaleAnlys9Opt: string;
            const SaleAnlys10Opt: string;
            const SaleAnlys11Opt: string;
            const SaleAnlys12Opt: string;
            const SaleAnlys13Opt: string;
            const SaleAnlys14Opt: string;
            const SaleAnlys15Opt: string;
            const SaleAnlys16Opt: string;
            const SaleAnlys17Opt: string;
            const SaleAnlys18Opt: string;
            const SaleAnlys19Opt: string;
            const SaleAnlys20Opt: string;
            const PurcAnlys9Opt: string;
            const PurcAnlys10Opt: string;
            const PurcAnlys11Opt: string;
            const PurcAnlys12Opt: string;
            const PurcAnlys13Opt: string;
            const PurcAnlys14Opt: string;
            const PurcAnlys15Opt: string;
            const PurcAnlys16Opt: string;
            const PurcAnlys17Opt: string;
            const PurcAnlys18Opt: string;
            const PurcAnlys19Opt: string;
            const PurcAnlys20Opt: string;
            const MvmtAnlys9Opt: string;
            const MvmtAnlys10Opt: string;
            const MvmtAnlys11Opt: string;
            const MvmtAnlys12Opt: string;
            const MvmtAnlys13Opt: string;
            const MvmtAnlys14Opt: string;
            const MvmtAnlys15Opt: string;
            const MvmtAnlys16Opt: string;
            const MvmtAnlys17Opt: string;
            const MvmtAnlys18Opt: string;
            const MvmtAnlys19Opt: string;
            const MvmtAnlys20Opt: string;
            const JordAnlys9Opt: string;
            const JordAnlys10Opt: string;
            const JordAnlys11Opt: string;
            const JordAnlys12Opt: string;
            const JordAnlys13Opt: string;
            const JordAnlys14Opt: string;
            const JordAnlys15Opt: string;
            const JordAnlys16Opt: string;
            const JordAnlys17Opt: string;
            const JordAnlys18Opt: string;
            const JordAnlys19Opt: string;
            const JordAnlys20Opt: string;
            const ArAnlys9Opt: string;
            const ArAnlys10Opt: string;
            const ArAnlys11Opt: string;
            const ArAnlys12Opt: string;
            const ArAnlys13Opt: string;
            const ArAnlys14Opt: string;
            const ArAnlys15Opt: string;
            const ArAnlys16Opt: string;
            const ArAnlys17Opt: string;
            const ArAnlys18Opt: string;
            const ArAnlys19Opt: string;
            const ArAnlys20Opt: string;
            const ApAnlys9Opt: string;
            const ApAnlys10Opt: string;
            const ApAnlys11Opt: string;
            const ApAnlys12Opt: string;
            const ApAnlys13Opt: string;
            const ApAnlys14Opt: string;
            const ApAnlys15Opt: string;
            const ApAnlys16Opt: string;
            const ApAnlys17Opt: string;
            const ApAnlys18Opt: string;
            const ApAnlys19Opt: string;
            const ApAnlys20Opt: string;
            const VochAnlys9Opt: string;
            const VochAnlys10Opt: string;
            const VochAnlys11Opt: string;
            const VochAnlys12Opt: string;
            const VochAnlys13Opt: string;
            const VochAnlys14Opt: string;
            const VochAnlys15Opt: string;
            const VochAnlys16Opt: string;
            const VochAnlys17Opt: string;
            const VochAnlys18Opt: string;
            const VochAnlys19Opt: string;
            const VochAnlys20Opt: string;
            const OlapServer: string;
            const OlapDatabase: string;
            const ExpiryDate: string;
            const MaxUsers: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace CompanyService {
        const baseUrl = "Administration/Company";
        function Create(request: Serenity.SaveRequest<CompanyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CompanyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CompanyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CompanyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Administration {
    interface ItemLookupRequest extends Serenity.ServiceRequest {
        LookupName?: string;
        LookupFilter?: string;
        CurrentPageIndex?: number;
        PageCount?: number;
    }
}
declare namespace Matrix.Administration {
    interface ItemLookupResponse extends Serenity.ServiceResponse {
        Columns?: ColumnEntity[];
        RowData?: any;
        PageCount?: number;
        CurrentPageIndex?: number;
        Description?: string;
        KeyField1?: string;
        KeyField2?: string;
        KeyField3?: string;
    }
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
    class LookupDialogFilterColumnDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface LookupDialogFilterColumnDetailForm {
        FilterName: Serenity.StringEditor;
        EntryNo: Serenity.IntegerEditor;
        FieldName: Serenity.StringEditor;
    }
}
declare namespace Matrix.Administration {
    interface LookupDialogFilterColumnDetailRow {
        LookupName?: string;
        FilterName?: string;
        EntryNo?: number;
        FieldName?: string;
    }
    namespace LookupDialogFilterColumnDetailRow {
        const idProperty = "LookupName";
        const nameProperty = "LookupName";
        const localTextPrefix = "Administration.LookupDialogFilterColumnDetail";
        namespace Fields {
            const LookupName: string;
            const FilterName: string;
            const EntryNo: string;
            const FieldName: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace LookupDialogFilterColumnDetailService {
        const baseUrl = "Administration/LookupDialogFilterColumnDetail";
        function Create(request: Serenity.SaveRequest<LookupDialogFilterColumnDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<LookupDialogFilterColumnDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<LookupDialogFilterColumnDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<LookupDialogFilterColumnDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
    class LookupDialogFilterDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface LookupDialogFilterDetailForm {
        FilterName: Serenity.StringEditor;
        EntryNo: Serenity.IntegerEditor;
        EntityName: Serenity.StringEditor;
        FieldName: Serenity.StringEditor;
        FieldValue: Serenity.StringEditor;
        Operator: Serenity.IntegerEditor;
    }
}
declare namespace Matrix.Administration {
    interface LookupDialogFilterDetailRow {
        LookupName?: string;
        FilterName?: string;
        EntryNo?: number;
        EntityName?: string;
        FieldName?: string;
        FieldValue?: string;
        Operator?: number;
    }
    namespace LookupDialogFilterDetailRow {
        const idProperty = "LookupName";
        const nameProperty = "LookupName";
        const localTextPrefix = "Administration.LookupDialogFilterDetail";
        namespace Fields {
            const LookupName: string;
            const FilterName: string;
            const EntryNo: string;
            const EntityName: string;
            const FieldName: string;
            const FieldValue: string;
            const Operator: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace LookupDialogFilterDetailService {
        const baseUrl = "Administration/LookupDialogFilterDetail";
        function Create(request: Serenity.SaveRequest<LookupDialogFilterDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<LookupDialogFilterDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<LookupDialogFilterDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<LookupDialogFilterDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Administration {
    class LookupDialogFilterForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface LookupDialogFilterForm {
        FilterName: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Filter: Serenity.StringEditor;
    }
}
declare namespace Matrix.Administration {
    interface LookupDialogFilterRow {
        LookupName?: string;
        FilterName?: string;
        Description?: string;
        Filter?: string;
        LookupNameDescription?: string;
        LookupNameQueryId?: string;
        LookupNameKeyField1?: string;
        LookupNameKeyField2?: string;
        LookupNameKeyField3?: string;
        LookupNameSuspended?: boolean;
        LookupNameCreatedBy?: string;
        LookupNameCreatedDate?: string;
        LookupNameRevisedBy?: string;
        LookupNameRevisedDate?: string;
    }
    namespace LookupDialogFilterRow {
        const idProperty = "LookupName";
        const nameProperty = "LookupName";
        const localTextPrefix = "Administration.LookupDialogFilter";
        namespace Fields {
            const LookupName: string;
            const FilterName: string;
            const Description: string;
            const Filter: string;
            const LookupNameDescription: string;
            const LookupNameQueryId: string;
            const LookupNameKeyField1: string;
            const LookupNameKeyField2: string;
            const LookupNameKeyField3: string;
            const LookupNameSuspended: string;
            const LookupNameCreatedBy: string;
            const LookupNameCreatedDate: string;
            const LookupNameRevisedBy: string;
            const LookupNameRevisedDate: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace LookupDialogFilterService {
        const baseUrl = "Administration/LookupDialogFilter";
        function Create(request: Serenity.SaveRequest<LookupDialogFilterRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<LookupDialogFilterRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<LookupDialogFilterRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<LookupDialogFilterRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Administration {
    class LookupDialogForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface LookupDialogForm {
        Description: Serenity.StringEditor;
        QueryId: Serenity.StringEditor;
        KeyField1: Serenity.StringEditor;
        KeyField2: Serenity.StringEditor;
        KeyField3: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        CreatedBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
    }
}
declare namespace Matrix.Administration {
    interface LookupDialogRow {
        LookupName?: string;
        Description?: string;
        QueryId?: string;
        KeyField1?: string;
        KeyField2?: string;
        KeyField3?: string;
        Suspended?: boolean;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
    }
    namespace LookupDialogRow {
        const idProperty = "LookupName";
        const nameProperty = "LookupName";
        const localTextPrefix = "Administration.LookupDialog";
        namespace Fields {
            const LookupName: string;
            const Description: string;
            const QueryId: string;
            const KeyField1: string;
            const KeyField2: string;
            const KeyField3: string;
            const Suspended: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace LookupDialogService {
        const baseUrl = "Administration/LookupDialog";
        function Create(request: Serenity.SaveRequest<LookupDialogRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<LookupDialogRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<LookupDialogRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<LookupDialogRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
    class TranslationForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface TranslationForm {
        LanguageCode: Serenity.EnumEditor;
        KeyText: Serenity.StringEditor;
        DisplayText: Serenity.StringEditor;
    }
}
declare namespace Matrix.Administration {
    interface TranslationRow {
        LanguageCode?: string;
        KeyText?: string;
        DisplayText?: string;
    }
    namespace TranslationRow {
        const nameProperty = "DisplayText";
        const localTextPrefix = "Administration.Translation";
        namespace Fields {
            const LanguageCode: string;
            const KeyText: string;
            const DisplayText: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace TranslationService {
        const baseUrl = "Administration/Translation";
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<TranslationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<TranslationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Lookup(request: ItemLookupRequest, onSuccess?: (response: ItemLookupResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Retrieve: string;
            const List: string;
            const Lookup: string;
        }
    }
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
}
declare namespace Matrix.Administration {
    class UserDefinedQueryForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface UserDefinedQueryForm {
        Description: Serenity.StringEditor;
        CreatedBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        AllowDuplicates: Serenity.BooleanEditor;
        Suspended: Serenity.BooleanEditor;
        DataSource: Serenity.IntegerEditor;
        UseAsEnquiry: Serenity.BooleanEditor;
        UseAsLookup: Serenity.BooleanEditor;
        UseAsAlert: Serenity.BooleanEditor;
        UseAsComparation: Serenity.BooleanEditor;
        FunctionCode: Serenity.StringEditor;
        PrimaryKeyFields: Serenity.StringEditor;
        CustomerNoEntityName: Serenity.StringEditor;
        CustomerNoFieldName: Serenity.StringEditor;
        VendorNoEntityName: Serenity.StringEditor;
        VendorNoFieldName: Serenity.StringEditor;
        Filter: Serenity.StringEditor;
        Sql: Serenity.StringEditor;
    }
}
declare namespace Matrix.Administration {
    interface UserDefinedQueryRow {
        QueryId?: string;
        Description?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        AllowDuplicates?: boolean;
        Suspended?: boolean;
        DataSource?: number;
        UseAsEnquiry?: boolean;
        UseAsLookup?: boolean;
        UseAsAlert?: boolean;
        UseAsComparation?: boolean;
        FunctionCode?: string;
        PrimaryKeyFields?: string;
        CustomerNoEntityName?: string;
        CustomerNoFieldName?: string;
        VendorNoEntityName?: string;
        VendorNoFieldName?: string;
        Filter?: string;
        Sql?: string;
    }
    namespace UserDefinedQueryRow {
        const idProperty = "QueryId";
        const nameProperty = "Description";
        const localTextPrefix = "Administration.UserDefinedQuery";
        namespace Fields {
            const QueryId: string;
            const Description: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const AllowDuplicates: string;
            const Suspended: string;
            const DataSource: string;
            const UseAsEnquiry: string;
            const UseAsLookup: string;
            const UseAsAlert: string;
            const UseAsComparation: string;
            const FunctionCode: string;
            const PrimaryKeyFields: string;
            const CustomerNoEntityName: string;
            const CustomerNoFieldName: string;
            const VendorNoEntityName: string;
            const VendorNoFieldName: string;
            const Filter: string;
            const Sql: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace UserDefinedQueryService {
        const baseUrl = "Administration/UserDefinedQuery";
        function Create(request: Serenity.SaveRequest<UserDefinedQueryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<UserDefinedQueryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<UserDefinedQueryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<UserDefinedQueryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Administration {
    class UserForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface UserForm {
        UserId: Serenity.StringEditor;
        Username: Serenity.StringEditor;
        Email: Serenity.EmailEditor;
        Password: Serenity.PasswordEditor;
    }
}
declare namespace Matrix.Administration {
    interface UserRow {
        UserId?: string;
        Username?: string;
        UserGroup?: string;
        Email?: string;
        Suspended?: boolean;
        Password?: string;
    }
    namespace UserRow {
        const idProperty = "UserId";
        const nameProperty = "Username";
        const localTextPrefix = "Administration.User";
        const lookupKey = "Administration.User";
        function getLookup(): Q.Lookup<UserRow>;
        namespace Fields {
            const UserId: string;
            const Username: string;
            const UserGroup: string;
            const Email: string;
            const Suspended: string;
            const Password: string;
        }
    }
}
declare namespace Matrix.Administration {
    namespace UserService {
        const baseUrl = "Administration/User";
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Undelete(request: Serenity.UndeleteRequest, onSuccess?: (response: Serenity.UndeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<UserRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<UserRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Delete: string;
            const Undelete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix {
    enum AllocationMethod {
        ActualCost = 65,
        FifoAllocation = 70,
        LifoAllocation = 76,
        NoAllocation = 78,
    }
    class AllocationMethodOption {
        Mapping: KeyedCollection<string>;
        constructor();
    }
}
declare namespace Matrix.Basic {
}
declare namespace Matrix.Basic {
    class CompanyParameterForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CompanyParameterForm {
        CompanyName: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        PostCode: Serenity.StringEditor;
        TelNo: Serenity.StringEditor;
        FaxNo: Serenity.StringEditor;
        Email: Serenity.StringEditor;
        TaxAcctNo: Serenity.StringEditor;
        BusRegNo: Serenity.StringEditor;
        AltName: Serenity.StringEditor;
        AltAddress: Serenity.StringEditor;
        AltAddress2: Serenity.StringEditor;
        AltAddress3: Serenity.StringEditor;
        AltAddress4: Serenity.StringEditor;
        VerifySettings: Serenity.BooleanEditor;
        BranchNo: Serenity.StringEditor;
        NoOfPeriods: Serenity.DecimalEditor;
        CurrentPeriod: Serenity.StringEditor;
        OpenPrdFrom: Serenity.StringEditor;
        OpenPrdTo: Serenity.StringEditor;
        BaseCurrency: Serenity.StringEditor;
        AllocMethod: Serenity.StringEditor;
        ItmNoLen: Serenity.DecimalEditor;
        ItmNoGridLen: Serenity.DecimalEditor;
        BomNoGridLen: Serenity.DecimalEditor;
        AllowEntries: Serenity.StringEditor;
        LineNoEntry: Serenity.StringEditor;
        WithInspection: Serenity.StringEditor;
        WithDept: Serenity.StringEditor;
        WithCostCtr: Serenity.StringEditor;
        WithAccpac: Serenity.StringEditor;
        AccpacIgrp: Serenity.StringEditor;
        WithBinCtrl: Serenity.StringEditor;
        WithLot: Serenity.StringEditor;
        WithSqlAttm: Serenity.StringEditor;
        AcctRetEarn: Serenity.StringEditor;
        AcctCurEarn: Serenity.StringEditor;
        AcctEndBs: Serenity.StringEditor;
        LocReceiving: Serenity.StringEditor;
        LocShipment: Serenity.StringEditor;
        LocPos: Serenity.StringEditor;
        LocMaterial: Serenity.StringEditor;
        LocProduce: Serenity.StringEditor;
        IcRevaluation: Serenity.StringEditor;
        FgStdCosting: Serenity.StringEditor;
        CostingMethod: Serenity.StringEditor;
        AllowLotOpt: Serenity.StringEditor;
        PmntFundCode: Serenity.StringEditor;
        RcptFundCode: Serenity.StringEditor;
        SalesPayTerms: Serenity.StringEditor;
        PurchPayTerms: Serenity.StringEditor;
        ItemGroup: Serenity.StringEditor;
        CustomerGroup: Serenity.StringEditor;
        VendorGroup: Serenity.StringEditor;
        SlsoMultiship: Serenity.StringEditor;
        SlsoResv: Serenity.StringEditor;
        SlsoAssortment: Serenity.StringEditor;
        SlsoDeposits: Serenity.StringEditor;
        SlsoMeasures: Serenity.StringEditor;
        SlsoAutoPo: Serenity.StringEditor;
        SlsoAutoJob: Serenity.StringEditor;
        SlsoExtInst: Serenity.StringEditor;
        SlsoExtDesc: Serenity.StringEditor;
        SlsoReqSman: Serenity.StringEditor;
        SlsoText1: Serenity.StringEditor;
        SlsoText2: Serenity.StringEditor;
        SlsoText3: Serenity.StringEditor;
        SlsoText4: Serenity.StringEditor;
        SlsoDueLead: Serenity.DecimalEditor;
        SlsoSchLead: Serenity.DecimalEditor;
        SlsoQuoteDays: Serenity.DecimalEditor;
        SlshCutDays: Serenity.DecimalEditor;
        SlsoAddrCode: Serenity.StringEditor;
        SlsoAddrType: Serenity.StringEditor;
        SlsoShipVia: Serenity.StringEditor;
        SlsoShipTerms: Serenity.StringEditor;
        PupoMultiship: Serenity.StringEditor;
        PupoDeposits: Serenity.StringEditor;
        PupoMeasures: Serenity.StringEditor;
        PupoReqBuyer: Serenity.StringEditor;
        PupoLineDisc: Serenity.StringEditor;
        PupoReorder: Serenity.StringEditor;
        PupoText1: Serenity.StringEditor;
        PupoText2: Serenity.StringEditor;
        PupoText3: Serenity.StringEditor;
        PupoText4: Serenity.StringEditor;
        PupoCutDays: Serenity.DecimalEditor;
        PupoBuyer: Serenity.StringEditor;
        PupoShipVia: Serenity.StringEditor;
        PupoShipTerms: Serenity.StringEditor;
        ProdEcnReq: Serenity.StringEditor;
        ProdByprod: Serenity.StringEditor;
        ProdPictDesc1: Serenity.StringEditor;
        ProdPictDesc2: Serenity.StringEditor;
        ProdPictDesc3: Serenity.StringEditor;
        ProdPictDesc4: Serenity.StringEditor;
        ProdWeightUom: Serenity.StringEditor;
        ProdDimenUom: Serenity.StringEditor;
        ProdScrapRate: Serenity.DecimalEditor;
        ProdStdLsize: Serenity.DecimalEditor;
        ProdMinLsize: Serenity.DecimalEditor;
        ProdMaxLsize: Serenity.DecimalEditor;
        ProdStdOutput: Serenity.DecimalEditor;
        ShopWksCover: Serenity.DecimalEditor;
        MrpHorzDate: Serenity.DateEditor;
        ShopPlanner: Serenity.StringEditor;
        ShopJobCat: Serenity.StringEditor;
        PrpmText1: Serenity.StringEditor;
        PrpmText2: Serenity.StringEditor;
        PrpmText3: Serenity.StringEditor;
        PrpmText4: Serenity.StringEditor;
        MrpCount: Serenity.DecimalEditor;
        MrpRefNo: Serenity.StringEditor;
        MrpRunDate: Serenity.DateEditor;
        IcReceipts: Serenity.StringEditor;
        IcIssuance: Serenity.StringEditor;
        IcTransfer: Serenity.StringEditor;
        IcAdjustment: Serenity.StringEditor;
        MvtSlShipment: Serenity.StringEditor;
        MvtSlReturn: Serenity.StringEditor;
        MvtPuReceipt: Serenity.StringEditor;
        MvtPuInspect: Serenity.StringEditor;
        MvtPuReturn: Serenity.StringEditor;
        VochArInvo: Serenity.StringEditor;
        VochArMemo: Serenity.StringEditor;
        VochArAdj: Serenity.StringEditor;
        VochArPay: Serenity.StringEditor;
        GlHdrTxt: Serenity.StringEditor;
        GlRefEntry: Serenity.StringEditor;
        GlDtlTxt: Serenity.StringEditor;
        GlLrefEntry: Serenity.StringEditor;
        GlRefLabel: Serenity.StringEditor;
        GlLrefLabel: Serenity.StringEditor;
    }
}
declare namespace Matrix.Basic {
    interface CompanyParameterRow {
        Recnum?: number;
        CompanyName?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        PostCode?: string;
        TelNo?: string;
        FaxNo?: string;
        Email?: string;
        TaxAcctNo?: string;
        BusRegNo?: string;
        DrevisedDate?: string;
        DrevisedBy?: string;
        BranchNo?: string;
        BaseCurrency?: string;
        NoOfPeriods?: number;
        CurrentPeriod?: string;
        OpenPrdFrom?: string;
        OpenPrdTo?: string;
        AllowEntries?: string;
        AcctRetEarn?: string;
        AcctCurEarn?: string;
        AcctEndBs?: string;
        LocReceiving?: string;
        LocShipment?: string;
        LocPos?: string;
        LocMaterial?: string;
        LocProduce?: string;
        IcRevaluation?: string;
        FgStdCosting?: string;
        AllocMethod?: string;
        CostingMethod?: string;
        AllowLotOpt?: string;
        PmntFundCode?: string;
        RcptFundCode?: string;
        SalesPayTerms?: string;
        PurchPayTerms?: string;
        ItemGroup?: string;
        CustomerGroup?: string;
        VendorGroup?: string;
        SlCgtaxCode?: string;
        SlCltaxCode?: string;
        SlVgtaxCode?: string;
        SlVltaxCode?: string;
        SlItaxCode?: string;
        PuCgtaxCode?: string;
        PuCltaxCode?: string;
        PuVgtaxCode?: string;
        PuVltaxCode?: string;
        PuItaxCode?: string;
        WithTaxation?: string;
        ProcSalesGtax?: string;
        ProcSalesLtax?: string;
        ProcPurchGtax?: string;
        ProcPurchLtax?: string;
        TrevisedDate?: string;
        TrevisedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        AltName?: string;
        AltAddress?: string;
        AltAddress2?: string;
        AltAddress3?: string;
        AltAddress4?: string;
        MainBranPath?: string;
        MainBranCount?: number;
        OnlineBranUpd?: string;
        WithCostCtr?: string;
        WithDept?: string;
        WithBinCtrl?: string;
        WithInspection?: string;
        AcctItmAsset?: string;
        AcctItmWip?: string;
        AcctItmConsum?: string;
        AcctItmScrap?: string;
        AcctItmPvar?: string;
        AcctItmReval?: string;
        AcctItmVaria?: string;
        AcctItmSales?: string;
        AcctItmSlret?: string;
        AcctItmSldisc?: string;
        AcctItmCogs?: string;
        AcctItmPurch?: string;
        AcctItmPuret?: string;
        AcctItmPudisc?: string;
        AcctItmPutax?: string;
        AcctMvtIssue?: string;
        AcctMvtRcpt?: string;
        AcctMvtAdj?: string;
        AcctSlsMisc?: string;
        AcctSlsMscret?: string;
        AcctSlsTrdisc?: string;
        AcctSlsLntax?: string;
        AcctSlsGrtax?: string;
        AcctPurMisc?: string;
        AcctPurMscret?: string;
        AcctPurTrdisc?: string;
        AcctPurGrtax?: string;
        AcctArCash?: string;
        AcctArCust?: string;
        AcctArDisc?: string;
        AcctArAdj?: string;
        AcctArForex?: string;
        AcctApCash?: string;
        AcctApVend?: string;
        AcctApDisc?: string;
        AcctApAdj?: string;
        AcctApForex?: string;
        AcctApVaria?: string;
        AcctMachine?: string;
        AcctEnergy?: string;
        AcctWater?: string;
        AcctRental?: string;
        AcctLabor?: string;
        AcctInlab?: string;
        AcctInmat?: string;
        AcctMisc?: string;
        AcctSuspAr?: string;
        AcctSuspAp?: string;
        AcctSuspIc?: string;
        AcctSuspPr?: string;
        AcctSuspFa?: string;
        AcctSuspSub?: string;
        AcctSuspIncom?: string;
        AcctSuspExpen?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        BrevisedDate?: string;
        BrevisedBy?: string;
        DeptProd?: string;
        DeptSales?: string;
        DeptPurch?: string;
        NoOfShift?: number;
        Shift1Hrs?: number;
        Shift2Hrs?: number;
        Shift3Hrs?: number;
        Shift1Start?: string;
        Shift2Start?: string;
        Shift3Start?: string;
        FirstWeekDay?: number;
        CanReceive1?: string;
        CanReceive2?: string;
        CanReceive3?: string;
        CanReceive4?: string;
        CanReceive5?: string;
        CanReceive6?: string;
        CanReceive7?: string;
        CanShip1?: string;
        CanShip2?: string;
        CanShip3?: string;
        CanShip4?: string;
        CanShip5?: string;
        CanShip6?: string;
        CanShip7?: string;
        IsHoliday1?: string;
        IsHoliday2?: string;
        IsHoliday3?: string;
        IsHoliday4?: string;
        IsHoliday5?: string;
        IsHoliday6?: string;
        IsHoliday7?: string;
        HalfDay1?: string;
        HalfDay2?: string;
        HalfDay3?: string;
        HalfDay4?: string;
        HalfDay5?: string;
        HalfDay6?: string;
        HalfDay7?: string;
        CrevisedDate?: string;
        CrevisedBy?: string;
        LogNoShip?: number;
        LogNoDlry?: number;
        LogNoMvmt?: number;
        LogNoArOpen?: number;
        LogNoApOpen?: number;
        LogNoLedg?: number;
        InvtCostAvail?: number;
        InvtCostLdg?: number;
        OnSalesCount?: number;
        OnPurchCount?: number;
        OnJobCount?: number;
        ArInvoAmtBal?: number;
        ArOpenAmtBal?: number;
        ArNetAmtBal?: number;
        ApInvoAmtBal?: number;
        ApOpenAmtBal?: number;
        ApNetAmtBal?: number;
        VerifySettings?: boolean;
        LogoBmp?: string;
        XconnectOn?: string;
        UloadPath?: string;
        UloadBatchNo?: number;
        DloadPath?: string;
        DloadBatchNo?: number;
        DloadRecnum?: number;
        DloadCommand?: string;
        UloadCommand?: string;
        CompanyCode?: string;
        WithBtob?: string;
        WithIms?: string;
        LineNoEntry?: string;
        AcctItmSubcon?: string;
        WithAccpac?: string;
        AccpacIgrp?: string;
        SaleAnlysInt?: string;
        PurcAnlysInt?: string;
        ProdAnlysInt?: string;
        MvmtAnlysInt?: string;
        AnlysCat1?: string;
        AnlysCat2?: string;
        AnlysCat3?: string;
        AnlysCat4?: string;
        AnlysInt?: string;
        ItmNoGridLen?: number;
        BomNoGridLen?: number;
        EnableLot?: string;
        EnableSerial?: string;
        LotNoLength?: number;
        SerialNoLength?: number;
        NextLotNo?: number;
        NextSerialNo?: number;
        MaxLotSize?: number;
        LotNoPrefix?: string;
        SerialNoPrefix?: string;
        WithLot?: string;
        ItmNoLen?: number;
        RecordLock?: string;
        UserLog?: string;
        ScalePrice?: number;
        NegStock?: string;
        WithSqlAttm?: string;
        WithResetLot?: string;
        WithResetSerial?: string;
        PrevResetLotDate?: string;
        PrevResetSerialDate?: string;
        AnlysCat5?: string;
        AnlysCat6?: string;
        AnlysCat7?: string;
        AnlysCat8?: string;
        AnlysCat9?: string;
        AnlysCat10?: string;
        CostSheetTabDescription1?: string;
        CostSheetTabDescription2?: string;
        CostSheetTabDescription3?: string;
        CostSheetTabDescription4?: string;
        CostSheetTabDescription5?: string;
        CostSheetTabDescription6?: string;
        CostSheetTabDescription7?: string;
        AcctArTemp?: string;
        AcctApTemp?: string;
        PlanOrdDefLastPoPrice?: boolean;
        PortalUrl?: string;
        KayueNextPoNo?: number;
        LotNoUdfLabel01?: string;
        LotNoUdfLabel02?: string;
        LotNoUdfLabel03?: string;
        LotNoUdfLabel04?: string;
        LotNoUdfLabel05?: string;
        BscPoOverBudgetPassword?: string;
        AcctArDeposit?: string;
        AcctApDeposit?: string;
        WithServerAttm?: string;
        FtpHost?: string;
        FtpUserId?: string;
        FtpPassword?: string;
        FtpNamePattern?: string;
        ImplementUomUppercase?: string;
        IntegratedEmailWithMsssageBox?: string;
        Cfg?: string;
    }
    namespace CompanyParameterRow {
        const idProperty = "Recnum";
        const nameProperty = "CompanyName";
        const localTextPrefix = "BasicInformation.CompanyParameter";
        namespace Fields {
            const Recnum: string;
            const CompanyName: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const PostCode: string;
            const TelNo: string;
            const FaxNo: string;
            const Email: string;
            const TaxAcctNo: string;
            const BusRegNo: string;
            const DrevisedDate: string;
            const DrevisedBy: string;
            const BranchNo: string;
            const BaseCurrency: string;
            const NoOfPeriods: string;
            const CurrentPeriod: string;
            const OpenPrdFrom: string;
            const OpenPrdTo: string;
            const AllowEntries: string;
            const AcctRetEarn: string;
            const AcctCurEarn: string;
            const AcctEndBs: string;
            const LocReceiving: string;
            const LocShipment: string;
            const LocPos: string;
            const LocMaterial: string;
            const LocProduce: string;
            const IcRevaluation: string;
            const FgStdCosting: string;
            const AllocMethod: string;
            const CostingMethod: string;
            const AllowLotOpt: string;
            const PmntFundCode: string;
            const RcptFundCode: string;
            const SalesPayTerms: string;
            const PurchPayTerms: string;
            const ItemGroup: string;
            const CustomerGroup: string;
            const VendorGroup: string;
            const SlCgtaxCode: string;
            const SlCltaxCode: string;
            const SlVgtaxCode: string;
            const SlVltaxCode: string;
            const SlItaxCode: string;
            const PuCgtaxCode: string;
            const PuCltaxCode: string;
            const PuVgtaxCode: string;
            const PuVltaxCode: string;
            const PuItaxCode: string;
            const WithTaxation: string;
            const ProcSalesGtax: string;
            const ProcSalesLtax: string;
            const ProcPurchGtax: string;
            const ProcPurchLtax: string;
            const TrevisedDate: string;
            const TrevisedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const AltName: string;
            const AltAddress: string;
            const AltAddress2: string;
            const AltAddress3: string;
            const AltAddress4: string;
            const MainBranPath: string;
            const MainBranCount: string;
            const OnlineBranUpd: string;
            const WithCostCtr: string;
            const WithDept: string;
            const WithBinCtrl: string;
            const WithInspection: string;
            const AcctItmAsset: string;
            const AcctItmWip: string;
            const AcctItmConsum: string;
            const AcctItmScrap: string;
            const AcctItmPvar: string;
            const AcctItmReval: string;
            const AcctItmVaria: string;
            const AcctItmSales: string;
            const AcctItmSlret: string;
            const AcctItmSldisc: string;
            const AcctItmCogs: string;
            const AcctItmPurch: string;
            const AcctItmPuret: string;
            const AcctItmPudisc: string;
            const AcctItmPutax: string;
            const AcctMvtIssue: string;
            const AcctMvtRcpt: string;
            const AcctMvtAdj: string;
            const AcctSlsMisc: string;
            const AcctSlsMscret: string;
            const AcctSlsTrdisc: string;
            const AcctSlsLntax: string;
            const AcctSlsGrtax: string;
            const AcctPurMisc: string;
            const AcctPurMscret: string;
            const AcctPurTrdisc: string;
            const AcctPurGrtax: string;
            const AcctArCash: string;
            const AcctArCust: string;
            const AcctArDisc: string;
            const AcctArAdj: string;
            const AcctArForex: string;
            const AcctApCash: string;
            const AcctApVend: string;
            const AcctApDisc: string;
            const AcctApAdj: string;
            const AcctApForex: string;
            const AcctApVaria: string;
            const AcctMachine: string;
            const AcctEnergy: string;
            const AcctWater: string;
            const AcctRental: string;
            const AcctLabor: string;
            const AcctInlab: string;
            const AcctInmat: string;
            const AcctMisc: string;
            const AcctSuspAr: string;
            const AcctSuspAp: string;
            const AcctSuspIc: string;
            const AcctSuspPr: string;
            const AcctSuspFa: string;
            const AcctSuspSub: string;
            const AcctSuspIncom: string;
            const AcctSuspExpen: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const BrevisedDate: string;
            const BrevisedBy: string;
            const DeptProd: string;
            const DeptSales: string;
            const DeptPurch: string;
            const NoOfShift: string;
            const Shift1Hrs: string;
            const Shift2Hrs: string;
            const Shift3Hrs: string;
            const Shift1Start: string;
            const Shift2Start: string;
            const Shift3Start: string;
            const FirstWeekDay: string;
            const CanReceive1: string;
            const CanReceive2: string;
            const CanReceive3: string;
            const CanReceive4: string;
            const CanReceive5: string;
            const CanReceive6: string;
            const CanReceive7: string;
            const CanShip1: string;
            const CanShip2: string;
            const CanShip3: string;
            const CanShip4: string;
            const CanShip5: string;
            const CanShip6: string;
            const CanShip7: string;
            const IsHoliday1: string;
            const IsHoliday2: string;
            const IsHoliday3: string;
            const IsHoliday4: string;
            const IsHoliday5: string;
            const IsHoliday6: string;
            const IsHoliday7: string;
            const HalfDay1: string;
            const HalfDay2: string;
            const HalfDay3: string;
            const HalfDay4: string;
            const HalfDay5: string;
            const HalfDay6: string;
            const HalfDay7: string;
            const CrevisedDate: string;
            const CrevisedBy: string;
            const LogNoShip: string;
            const LogNoDlry: string;
            const LogNoMvmt: string;
            const LogNoArOpen: string;
            const LogNoApOpen: string;
            const LogNoLedg: string;
            const InvtCostAvail: string;
            const InvtCostLdg: string;
            const OnSalesCount: string;
            const OnPurchCount: string;
            const OnJobCount: string;
            const ArInvoAmtBal: string;
            const ArOpenAmtBal: string;
            const ArNetAmtBal: string;
            const ApInvoAmtBal: string;
            const ApOpenAmtBal: string;
            const ApNetAmtBal: string;
            const VerifySettings: string;
            const LogoBmp: string;
            const XconnectOn: string;
            const UloadPath: string;
            const UloadBatchNo: string;
            const DloadPath: string;
            const DloadBatchNo: string;
            const DloadRecnum: string;
            const DloadCommand: string;
            const UloadCommand: string;
            const CompanyCode: string;
            const WithBtob: string;
            const WithIms: string;
            const LineNoEntry: string;
            const AcctItmSubcon: string;
            const WithAccpac: string;
            const AccpacIgrp: string;
            const SaleAnlysInt: string;
            const PurcAnlysInt: string;
            const ProdAnlysInt: string;
            const MvmtAnlysInt: string;
            const AnlysCat1: string;
            const AnlysCat2: string;
            const AnlysCat3: string;
            const AnlysCat4: string;
            const AnlysInt: string;
            const ItmNoGridLen: string;
            const BomNoGridLen: string;
            const EnableLot: string;
            const EnableSerial: string;
            const LotNoLength: string;
            const SerialNoLength: string;
            const NextLotNo: string;
            const NextSerialNo: string;
            const MaxLotSize: string;
            const LotNoPrefix: string;
            const SerialNoPrefix: string;
            const WithLot: string;
            const ItmNoLen: string;
            const RecordLock: string;
            const UserLog: string;
            const ScalePrice: string;
            const NegStock: string;
            const WithSqlAttm: string;
            const WithResetLot: string;
            const WithResetSerial: string;
            const PrevResetLotDate: string;
            const PrevResetSerialDate: string;
            const AnlysCat5: string;
            const AnlysCat6: string;
            const AnlysCat7: string;
            const AnlysCat8: string;
            const AnlysCat9: string;
            const AnlysCat10: string;
            const CostSheetTabDescription1: string;
            const CostSheetTabDescription2: string;
            const CostSheetTabDescription3: string;
            const CostSheetTabDescription4: string;
            const CostSheetTabDescription5: string;
            const CostSheetTabDescription6: string;
            const CostSheetTabDescription7: string;
            const AcctArTemp: string;
            const AcctApTemp: string;
            const PlanOrdDefLastPoPrice: string;
            const PortalUrl: string;
            const KayueNextPoNo: string;
            const LotNoUdfLabel01: string;
            const LotNoUdfLabel02: string;
            const LotNoUdfLabel03: string;
            const LotNoUdfLabel04: string;
            const LotNoUdfLabel05: string;
            const BscPoOverBudgetPassword: string;
            const AcctArDeposit: string;
            const AcctApDeposit: string;
            const WithServerAttm: string;
            const FtpHost: string;
            const FtpUserId: string;
            const FtpPassword: string;
            const FtpNamePattern: string;
            const ImplementUomUppercase: string;
            const IntegratedEmailWithMsssageBox: string;
            const Cfg: string;
        }
    }
}
declare namespace Matrix.Basic {
    namespace CompanyParameterService {
        const baseUrl = "BasicInformation/CompanyParameter";
        function Create(request: Serenity.SaveRequest<CompanyParameterRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CompanyParameterRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CompanyParameterRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CompanyParameterRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Basic {
}
declare namespace Matrix.Basic {
    class CompanySettingForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CompanySettingForm {
        SlInit: Serenity.StringEditor;
        SlsoMultiship: Serenity.StringEditor;
        SlsoResv: Serenity.StringEditor;
        SlsoAssortment: Serenity.StringEditor;
        SlsoDeposits: Serenity.StringEditor;
        SlsoMeasures: Serenity.StringEditor;
        SlsoPtax: Serenity.StringEditor;
        SlsoAtax: Serenity.StringEditor;
        SlsoGtax: Serenity.StringEditor;
        SlsoLineDisc: Serenity.StringEditor;
        SlsoAutoPo: Serenity.StringEditor;
        SlsoAutoJob: Serenity.StringEditor;
        SlsoExtInst: Serenity.StringEditor;
        SlsoExtDesc: Serenity.StringEditor;
        SlsoFixedUom: Serenity.StringEditor;
        SlsoReqSman: Serenity.StringEditor;
        SlsoSman: Serenity.StringEditor;
        SlsoText1: Serenity.StringEditor;
        SlsoText2: Serenity.StringEditor;
        SlsoText3: Serenity.StringEditor;
        SlsoText4: Serenity.StringEditor;
        SlsoDueLead: Serenity.DecimalEditor;
        SlsoSchLead: Serenity.DecimalEditor;
        SlsoAddrCode: Serenity.StringEditor;
        SlsoAddrType: Serenity.StringEditor;
        SlsoQuoteDays: Serenity.DecimalEditor;
        SlshCutDays: Serenity.DecimalEditor;
        SlsoShipVia: Serenity.StringEditor;
        SlsoShipTerms: Serenity.StringEditor;
        SlRevisedDate: Serenity.DateEditor;
        SlRevisedBy: Serenity.StringEditor;
        PuInit: Serenity.StringEditor;
        PupoMultiship: Serenity.StringEditor;
        PupoDeposits: Serenity.StringEditor;
        PupoMeasures: Serenity.StringEditor;
        PupoPtax: Serenity.StringEditor;
        PupoAtax: Serenity.StringEditor;
        PupoGtax: Serenity.StringEditor;
        PupoLineDisc: Serenity.StringEditor;
        PupoExtInst: Serenity.StringEditor;
        PupoExtDesc: Serenity.StringEditor;
        PupoFixedUom: Serenity.StringEditor;
        PupoText1: Serenity.StringEditor;
        PupoText2: Serenity.StringEditor;
        PupoText3: Serenity.StringEditor;
        PupoText4: Serenity.StringEditor;
        PupoCutDays: Serenity.DecimalEditor;
        PupoReorder: Serenity.StringEditor;
        PupoReqBuyer: Serenity.StringEditor;
        PupoBuyer: Serenity.StringEditor;
        PupoShipVia: Serenity.StringEditor;
        PupoShipTerms: Serenity.StringEditor;
        PuRevisedDate: Serenity.DateEditor;
        PuRevisedBy: Serenity.StringEditor;
        ProdInit: Serenity.StringEditor;
        ProdEcnReq: Serenity.StringEditor;
        ProdByprod: Serenity.StringEditor;
        ProdScrapRate: Serenity.DecimalEditor;
        ProdPictDesc1: Serenity.StringEditor;
        ProdPictDesc2: Serenity.StringEditor;
        ProdPictDesc3: Serenity.StringEditor;
        ProdPictDesc4: Serenity.StringEditor;
        ProdWeightUom: Serenity.StringEditor;
        ProdDimenUom: Serenity.StringEditor;
        ProdFixedWtum: Serenity.StringEditor;
        ProdFixedDmum: Serenity.StringEditor;
        ProdStdLsize: Serenity.DecimalEditor;
        ProdMinLsize: Serenity.DecimalEditor;
        ProdMaxLsize: Serenity.DecimalEditor;
        ProdStdOutput: Serenity.DecimalEditor;
        PrRevisedDate: Serenity.DateEditor;
        PrRevisedBy: Serenity.StringEditor;
        ShopReqJcat: Serenity.StringEditor;
        ShopWksCover: Serenity.DecimalEditor;
        ShopPlanner: Serenity.StringEditor;
        ShopDefPlnr: Serenity.StringEditor;
        ShopMpsHorz: Serenity.DecimalEditor;
        ShopPurLtime: Serenity.DecimalEditor;
        ShopPurLunit: Serenity.StringEditor;
        ShopJobCat: Serenity.StringEditor;
        ShopMrpHorz: Serenity.DecimalEditor;
        ShRevisedDate: Serenity.DateEditor;
        ShRevisedBy: Serenity.StringEditor;
        MrpCount: Serenity.DecimalEditor;
        MrpRefNo: Serenity.StringEditor;
        MrpRunDate: Serenity.DateEditor;
        MrpHorzDate: Serenity.DateEditor;
        IcInit: Serenity.StringEditor;
        IcReceipts: Serenity.StringEditor;
        IcIssuance: Serenity.StringEditor;
        IcTransfer: Serenity.StringEditor;
        IcAdjustment: Serenity.StringEditor;
        IcRevisedDate: Serenity.DateEditor;
        IcRevisedBy: Serenity.StringEditor;
        PrJobSched: Serenity.StringEditor;
        PrByProd: Serenity.StringEditor;
        PrJobBatches: Serenity.StringEditor;
        LastResvNo: Serenity.DecimalEditor;
        NoMrpFence: Serenity.StringEditor;
        MvtRmIssue: Serenity.StringEditor;
        MvtSpIssue: Serenity.StringEditor;
        MvtFgReturn: Serenity.StringEditor;
        MvtRmReturn: Serenity.StringEditor;
        MvtSlShipment: Serenity.StringEditor;
        MvtSlReturn: Serenity.StringEditor;
        MvtPuReceipt: Serenity.StringEditor;
        MvtPuInspect: Serenity.StringEditor;
        MvtPuReturn: Serenity.StringEditor;
        GlInit: Serenity.StringEditor;
        GlHdrTxt: Serenity.StringEditor;
        GlDtlTxt: Serenity.StringEditor;
        GlRefEntry: Serenity.StringEditor;
        GlRefLabel: Serenity.StringEditor;
        GlLrefEntry: Serenity.StringEditor;
        GlLrefLabel: Serenity.StringEditor;
        GlExchComp: Serenity.StringEditor;
        GlRevisedBy: Serenity.StringEditor;
        GlRevisedDate: Serenity.DateEditor;
        VochArInvo: Serenity.StringEditor;
        VochArMemo: Serenity.StringEditor;
        VochArAdj: Serenity.StringEditor;
        VochArPay: Serenity.StringEditor;
        VochArAlloc: Serenity.StringEditor;
        VochArInvocan: Serenity.StringEditor;
        VochArPaycan: Serenity.StringEditor;
        VochApInvo: Serenity.StringEditor;
        VochApMemo: Serenity.StringEditor;
        VochApAdj: Serenity.StringEditor;
        VochApPay: Serenity.StringEditor;
        VochApAlloc: Serenity.StringEditor;
        VochApInvocan: Serenity.StringEditor;
        VochApPaycan: Serenity.StringEditor;
        VochIcIssue: Serenity.StringEditor;
        VochIcRcpt: Serenity.StringEditor;
        VochIcAdj: Serenity.StringEditor;
        VochPrIssue: Serenity.StringEditor;
        VochPrReturn: Serenity.StringEditor;
        VochPrProd: Serenity.StringEditor;
        VochPrSubcon: Serenity.StringEditor;
        VochPayroll: Serenity.StringEditor;
        VochCommission: Serenity.StringEditor;
        VochFaAcquire: Serenity.StringEditor;
        VochFaDeprec: Serenity.StringEditor;
        VochFaMaint: Serenity.StringEditor;
        VochFaDispo: Serenity.StringEditor;
        ArBcountInvo: Serenity.DecimalEditor;
        ArBcountMemo: Serenity.DecimalEditor;
        ArBcountAdj: Serenity.DecimalEditor;
        ArBcountPay: Serenity.DecimalEditor;
        ArBcountAlloc: Serenity.DecimalEditor;
        ApBcountInvo: Serenity.DecimalEditor;
        ApBcountMemo: Serenity.DecimalEditor;
        ApBcountAdj: Serenity.DecimalEditor;
        ApBcountPay: Serenity.DecimalEditor;
        ApBcountAlloc: Serenity.DecimalEditor;
        CostInit: Serenity.StringEditor;
        CostBasis: Serenity.StringEditor;
        CostRmPrMul: Serenity.DecimalEditor;
        CostLbPrMul: Serenity.DecimalEditor;
        CostOvPrMul: Serenity.DecimalEditor;
        CostRmSlMul: Serenity.DecimalEditor;
        CostLbSlMul: Serenity.DecimalEditor;
        CostOvSlMul: Serenity.DecimalEditor;
        CostRevisedBy: Serenity.StringEditor;
        CostRevDate: Serenity.DateEditor;
        PrCostVerify: Serenity.StringEditor;
        PrCostEdit: Serenity.StringEditor;
        CommisType: Serenity.StringEditor;
        SlsoCustItem: Serenity.StringEditor;
        SlsoPkgType: Serenity.StringEditor;
        IcAutoShip: Serenity.StringEditor;
        IcAutoSlret: Serenity.StringEditor;
        IcAutoGrn: Serenity.StringEditor;
        IcAutoQc: Serenity.StringEditor;
        IcAutoPuret: Serenity.StringEditor;
        IcAutoWorkc: Serenity.StringEditor;
        ApOvrideRate: Serenity.StringEditor;
        SlsoSchEntry: Serenity.StringEditor;
        PupoSchEntry: Serenity.StringEditor;
        SlsoContact: Serenity.StringEditor;
        SlsoOrdrPack: Serenity.StringEditor;
        MaxUsers: Serenity.DecimalEditor;
        MmuKey: Serenity.StringEditor;
        AcctAnlys1: Serenity.StringEditor;
        AcctAnlys2: Serenity.StringEditor;
        AcctAnlys3: Serenity.StringEditor;
        AcctAnlys4: Serenity.StringEditor;
        VochAnlys1: Serenity.StringEditor;
        VochAnlys2: Serenity.StringEditor;
        VochAnlys3: Serenity.StringEditor;
        VochAnlys4: Serenity.StringEditor;
        VochAnlys5: Serenity.StringEditor;
        VochAnlys6: Serenity.StringEditor;
        ItemAnlys1: Serenity.StringEditor;
        ItemAnlys2: Serenity.StringEditor;
        ItemAnlys3: Serenity.StringEditor;
        ItemAnlys4: Serenity.StringEditor;
        CustAnlys1: Serenity.StringEditor;
        CustAnlys2: Serenity.StringEditor;
        CustAnlys3: Serenity.StringEditor;
        CustAnlys4: Serenity.StringEditor;
        VendAnlys1: Serenity.StringEditor;
        VendAnlys2: Serenity.StringEditor;
        VendAnlys3: Serenity.StringEditor;
        VendAnlys4: Serenity.StringEditor;
        SaleAnlys1: Serenity.StringEditor;
        SaleAnlys2: Serenity.StringEditor;
        SaleAnlys3: Serenity.StringEditor;
        SaleAnlys4: Serenity.StringEditor;
        SaleAnlys5: Serenity.StringEditor;
        SaleAnlys6: Serenity.StringEditor;
        PurcAnlys1: Serenity.StringEditor;
        PurcAnlys2: Serenity.StringEditor;
        PurcAnlys3: Serenity.StringEditor;
        PurcAnlys4: Serenity.StringEditor;
        PurcAnlys5: Serenity.StringEditor;
        PurcAnlys6: Serenity.StringEditor;
        MvmtAnlys1: Serenity.StringEditor;
        MvmtAnlys2: Serenity.StringEditor;
        MvmtAnlys3: Serenity.StringEditor;
        MvmtAnlys4: Serenity.StringEditor;
        MvmtAnlys5: Serenity.StringEditor;
        MvmtAnlys6: Serenity.StringEditor;
        NrevisedDate: Serenity.DateEditor;
        NrevisedBy: Serenity.StringEditor;
        ShipWtUom: Serenity.StringEditor;
        ShipDimUom: Serenity.StringEditor;
        ItemPacking: Serenity.StringEditor;
        NoOvhdAcctg: Serenity.StringEditor;
        NoVariaAcctg: Serenity.StringEditor;
        NoFgAcctg: Serenity.StringEditor;
        FgCostLimit: Serenity.StringEditor;
        AllowDescChg: Serenity.StringEditor;
        NoLaborAcctg: Serenity.StringEditor;
        NoSubconAcctg: Serenity.StringEditor;
        ReorderIsNew: Serenity.StringEditor;
        DefInspStd: Serenity.StringEditor;
        DefInspLvl: Serenity.StringEditor;
        DefAqlLvlMaj: Serenity.StringEditor;
        DefAqlLvlMin: Serenity.StringEditor;
        ReturnEmail: Serenity.StringEditor;
        SmtpServer: Serenity.StringEditor;
        WebSetting1: Serenity.StringEditor;
        WebSetting2: Serenity.StringEditor;
        WebSetting3: Serenity.StringEditor;
        WebSetting4: Serenity.StringEditor;
        PupoPriceCtrl: Serenity.StringEditor;
        JordAnlys1: Serenity.StringEditor;
        JordAnlys2: Serenity.StringEditor;
        JordAnlys3: Serenity.StringEditor;
        JordAnlys4: Serenity.StringEditor;
        JordAnlys5: Serenity.StringEditor;
        JordAnlys6: Serenity.StringEditor;
        ProdPosEntry: Serenity.StringEditor;
        GlarText1: Serenity.StringEditor;
        GlarText2: Serenity.StringEditor;
        GlarText3: Serenity.StringEditor;
        GlarText4: Serenity.StringEditor;
        PrJobClose: Serenity.StringEditor;
        SlsoUnfullPackResponse: Serenity.StringEditor;
        SlsoDefMultiShip: Serenity.StringEditor;
        SlsoDefAutoPo: Serenity.StringEditor;
        SlsoDefAutoJo: Serenity.StringEditor;
        SlpaExtDesc: Serenity.StringEditor;
        PupoDueLead: Serenity.DecimalEditor;
        PupoSchLead: Serenity.DecimalEditor;
        PrMultiIssue: Serenity.StringEditor;
        ProdSepRoute: Serenity.StringEditor;
        ProdHideWcSubcon: Serenity.StringEditor;
        CopyTextFromSo: Serenity.StringEditor;
        PrpmText1: Serenity.StringEditor;
        PrpmText2: Serenity.StringEditor;
        PrpmText3: Serenity.StringEditor;
        PrpmText4: Serenity.StringEditor;
        PrpmExtInst: Serenity.StringEditor;
        BomVerLen: Serenity.IntegerEditor;
        ProdPoPrice: Serenity.StringEditor;
        SaleAnlys7: Serenity.StringEditor;
        SaleAnlys8: Serenity.StringEditor;
        PurcAnlys7: Serenity.StringEditor;
        PurcAnlys8: Serenity.StringEditor;
        MvmtAnlys7: Serenity.StringEditor;
        MvmtAnlys8: Serenity.StringEditor;
        VochAnlys7: Serenity.StringEditor;
        VochAnlys8: Serenity.StringEditor;
        JordAnlys7: Serenity.StringEditor;
        JordAnlys8: Serenity.StringEditor;
        ArAnlys1: Serenity.StringEditor;
        ArAnlys2: Serenity.StringEditor;
        ArAnlys3: Serenity.StringEditor;
        ArAnlys4: Serenity.StringEditor;
        ArAnlys5: Serenity.StringEditor;
        ArAnlys6: Serenity.StringEditor;
        ArAnlys7: Serenity.StringEditor;
        ArAnlys8: Serenity.StringEditor;
        ApAnlys1: Serenity.StringEditor;
        ApAnlys2: Serenity.StringEditor;
        ApAnlys3: Serenity.StringEditor;
        ApAnlys4: Serenity.StringEditor;
        ApAnlys5: Serenity.StringEditor;
        ApAnlys6: Serenity.StringEditor;
        ApAnlys7: Serenity.StringEditor;
        ApAnlys8: Serenity.StringEditor;
        SlAddInfo: Serenity.StringEditor;
        PuAddInfo: Serenity.StringEditor;
        PrAddInfo: Serenity.StringEditor;
        IcAddInfo: Serenity.StringEditor;
        ChkMatIss: Serenity.StringEditor;
        IcDefStdCost: Serenity.StringEditor;
        CheckCustpo: Serenity.StringEditor;
        CtlFgRtn: Serenity.StringEditor;
        VochArRefund: Serenity.StringEditor;
        VochApRefund: Serenity.StringEditor;
        SlsoDn: Serenity.StringEditor;
        AutoIncBy: Serenity.DecimalEditor;
        QuoGenMultiSo: Serenity.StringEditor;
        PuReceiveAll: Serenity.StringEditor;
        PrpmItemMasterScrap: Serenity.StringEditor;
        IcDisableCommit: Serenity.StringEditor;
        ProdDefMatRemarks: Serenity.StringEditor;
        SlsoUpdateQtyFromSch: Serenity.StringEditor;
        PupoUpdateQtyFromSch: Serenity.StringEditor;
        SlsoDefaultBasePrice: Serenity.StringEditor;
        SlsoDiscountByCustomer: Serenity.StringEditor;
        PrpmMaxQtyInStorage: Serenity.StringEditor;
        IcDefCostType: Serenity.StringEditor;
        ProdBomCreateItem: Serenity.StringEditor;
        PupoRtvLoc: Serenity.StringEditor;
        PrpmUseAllMatLastWc: Serenity.StringEditor;
        IcNoDefCharge: Serenity.StringEditor;
        ProdDefPhantomBom: Serenity.StringEditor;
        SlsoNeedCmApproval: Serenity.StringEditor;
        PupoNeedVmApproval: Serenity.StringEditor;
        ProdNeedBomApproval: Serenity.StringEditor;
        ProdNeedImApproval: Serenity.StringEditor;
        PrpmNeedScrapReason: Serenity.StringEditor;
        PrpmMustBackflush: Serenity.StringEditor;
        PupoAutoOrderLink: Serenity.StringEditor;
        PrpmAutoOrderLink: Serenity.StringEditor;
        PrpeAllowChgJob: Serenity.StringEditor;
        VochPrInspect: Serenity.StringEditor;
        VochPrRework: Serenity.StringEditor;
        ProdNeedPlanRlseApproval: Serenity.StringEditor;
        PrpmIncludeScrapInMmi: Serenity.StringEditor;
        ProdScrapLoc: Serenity.StringEditor;
        MvtPrScrap: Serenity.StringEditor;
        SlNeedClApproval: Serenity.StringEditor;
        WarnOnMatConsum: Serenity.StringEditor;
        IcimAutogenLot: Serenity.StringEditor;
        IcimAutogenSerial: Serenity.StringEditor;
        ItemAnlys5: Serenity.StringEditor;
        ItemAnlys6: Serenity.StringEditor;
        ItemAnlys7: Serenity.StringEditor;
        ItemAnlys8: Serenity.StringEditor;
        ItemAnlys9: Serenity.StringEditor;
        ItemAnlys10: Serenity.StringEditor;
        CustAnlys5: Serenity.StringEditor;
        CustAnlys6: Serenity.StringEditor;
        CustAnlys7: Serenity.StringEditor;
        CustAnlys8: Serenity.StringEditor;
        CustAnlys9: Serenity.StringEditor;
        CustAnlys10: Serenity.StringEditor;
        VendAnlys5: Serenity.StringEditor;
        VendAnlys6: Serenity.StringEditor;
        VendAnlys7: Serenity.StringEditor;
        VendAnlys8: Serenity.StringEditor;
        VendAnlys9: Serenity.StringEditor;
        VendAnlys10: Serenity.StringEditor;
        AcctAnlys5: Serenity.StringEditor;
        AcctAnlys6: Serenity.StringEditor;
        AcctAnlys7: Serenity.StringEditor;
        AcctAnlys8: Serenity.StringEditor;
        AcctAnlys9: Serenity.StringEditor;
        AcctAnlys10: Serenity.StringEditor;
        SaleAnlys9: Serenity.StringEditor;
        SaleAnlys10: Serenity.StringEditor;
        SaleAnlys11: Serenity.StringEditor;
        SaleAnlys12: Serenity.StringEditor;
        SaleAnlys13: Serenity.StringEditor;
        SaleAnlys14: Serenity.StringEditor;
        SaleAnlys15: Serenity.StringEditor;
        SaleAnlys16: Serenity.StringEditor;
        SaleAnlys17: Serenity.StringEditor;
        SaleAnlys18: Serenity.StringEditor;
        SaleAnlys19: Serenity.StringEditor;
        SaleAnlys20: Serenity.StringEditor;
        PurcAnlys9: Serenity.StringEditor;
        PurcAnlys10: Serenity.StringEditor;
        PurcAnlys11: Serenity.StringEditor;
        PurcAnlys12: Serenity.StringEditor;
        PurcAnlys13: Serenity.StringEditor;
        PurcAnlys14: Serenity.StringEditor;
        PurcAnlys15: Serenity.StringEditor;
        PurcAnlys16: Serenity.StringEditor;
        PurcAnlys17: Serenity.StringEditor;
        PurcAnlys18: Serenity.StringEditor;
        PurcAnlys19: Serenity.StringEditor;
        PurcAnlys20: Serenity.StringEditor;
        MvmtAnlys9: Serenity.StringEditor;
        MvmtAnlys10: Serenity.StringEditor;
        MvmtAnlys11: Serenity.StringEditor;
        MvmtAnlys12: Serenity.StringEditor;
        MvmtAnlys13: Serenity.StringEditor;
        MvmtAnlys14: Serenity.StringEditor;
        MvmtAnlys15: Serenity.StringEditor;
        MvmtAnlys16: Serenity.StringEditor;
        MvmtAnlys17: Serenity.StringEditor;
        MvmtAnlys18: Serenity.StringEditor;
        MvmtAnlys19: Serenity.StringEditor;
        MvmtAnlys20: Serenity.StringEditor;
        VochAnlys9: Serenity.StringEditor;
        VochAnlys10: Serenity.StringEditor;
        VochAnlys11: Serenity.StringEditor;
        VochAnlys12: Serenity.StringEditor;
        VochAnlys13: Serenity.StringEditor;
        VochAnlys14: Serenity.StringEditor;
        VochAnlys15: Serenity.StringEditor;
        VochAnlys16: Serenity.StringEditor;
        VochAnlys17: Serenity.StringEditor;
        VochAnlys18: Serenity.StringEditor;
        VochAnlys19: Serenity.StringEditor;
        VochAnlys20: Serenity.StringEditor;
        JordAnlys9: Serenity.StringEditor;
        JordAnlys10: Serenity.StringEditor;
        JordAnlys11: Serenity.StringEditor;
        JordAnlys12: Serenity.StringEditor;
        JordAnlys13: Serenity.StringEditor;
        JordAnlys14: Serenity.StringEditor;
        JordAnlys15: Serenity.StringEditor;
        JordAnlys16: Serenity.StringEditor;
        JordAnlys17: Serenity.StringEditor;
        JordAnlys18: Serenity.StringEditor;
        JordAnlys19: Serenity.StringEditor;
        JordAnlys20: Serenity.StringEditor;
        ArAnlys9: Serenity.StringEditor;
        ArAnlys10: Serenity.StringEditor;
        ArAnlys11: Serenity.StringEditor;
        ArAnlys12: Serenity.StringEditor;
        ArAnlys13: Serenity.StringEditor;
        ArAnlys14: Serenity.StringEditor;
        ArAnlys15: Serenity.StringEditor;
        ArAnlys16: Serenity.StringEditor;
        ArAnlys17: Serenity.StringEditor;
        ArAnlys18: Serenity.StringEditor;
        ArAnlys19: Serenity.StringEditor;
        ArAnlys20: Serenity.StringEditor;
        ApAnlys9: Serenity.StringEditor;
        ApAnlys10: Serenity.StringEditor;
        ApAnlys11: Serenity.StringEditor;
        ApAnlys12: Serenity.StringEditor;
        ApAnlys13: Serenity.StringEditor;
        ApAnlys14: Serenity.StringEditor;
        ApAnlys15: Serenity.StringEditor;
        ApAnlys16: Serenity.StringEditor;
        ApAnlys17: Serenity.StringEditor;
        ApAnlys18: Serenity.StringEditor;
        ApAnlys19: Serenity.StringEditor;
        ApAnlys20: Serenity.StringEditor;
        PrpeMoldAuditTrail: Serenity.BooleanEditor;
        IcimIssueByAvailableQty: Serenity.BooleanEditor;
        PrpmJamendIssueControl: Serenity.BooleanEditor;
        PrAutoMultiSpareIssue: Serenity.BooleanEditor;
        SlShipmentPriceControl: Serenity.BooleanEditor;
        ArMultiSettle: Serenity.BooleanEditor;
        PupoDefMultiship: Serenity.BooleanEditor;
        PupoDefReorder: Serenity.BooleanEditor;
        SlsoDefReorder: Serenity.BooleanEditor;
        VochByVdate: Serenity.BooleanEditor;
        PupoTaxTerms: Serenity.BooleanEditor;
        SampleAcct: Serenity.StringEditor;
        CtlFgRtnTotQty: Serenity.BooleanEditor;
        AllowMultiWc: Serenity.BooleanEditor;
        PoaIgnoreMinQty: Serenity.BooleanEditor;
        GrnMatCost: Serenity.BooleanEditor;
        GrnLotNoImport: Serenity.BooleanEditor;
        IssueMaterialsByRouting: Serenity.BooleanEditor;
        ConsumeMatInLastRouting: Serenity.BooleanEditor;
        DefAqlLvlCritical: Serenity.StringEditor;
        DefInspLvlSp: Serenity.StringEditor;
        DefAqlLvlCriticalSp: Serenity.StringEditor;
        DefAqlLvlMajSp: Serenity.StringEditor;
        DefAqlLvlMinSp: Serenity.StringEditor;
        WcAutoMatReturn: Serenity.BooleanEditor;
        ArInvMultiPayTerms: Serenity.BooleanEditor;
        IcAdjCodeAPcent: Serenity.DecimalEditor;
        IcAdjCodeBPcent: Serenity.DecimalEditor;
        IcAdjCodeCPcent: Serenity.DecimalEditor;
        TailorIncludeJob: Serenity.BooleanEditor;
        JoMultiSource: Serenity.BooleanEditor;
        ShowShipmentInfoInPacking: Serenity.BooleanEditor;
        MrpWithReorderPt: Serenity.BooleanEditor;
        AllowFollowListWithoutMi: Serenity.BooleanEditor;
        PrMultiFollowList: Serenity.BooleanEditor;
        SqietkMatBalSubtractCommit: Serenity.BooleanEditor;
        SoLineAutoIncBy: Serenity.DecimalEditor;
        PoLineAutoIncBy: Serenity.DecimalEditor;
        PuOverRcptByLine: Serenity.BooleanEditor;
        PuLmeCost: Serenity.BooleanEditor;
        SoaUpdatePendingShipment: Serenity.BooleanEditor;
        PrMatIssueOnAvailPercent: Serenity.DecimalEditor;
        JobHourlyRate: Serenity.DecimalEditor;
        ItemCustomProdCodeRequired: Serenity.BooleanEditor;
        IcimAutogenLotIssue: Serenity.BooleanEditor;
        IcimAutogenSerialIssue: Serenity.BooleanEditor;
        ShipmentInfoFromFirstOrder: Serenity.BooleanEditor;
        MrpExcludeLeadtime: Serenity.BooleanEditor;
        ItemPrelotSopo: Serenity.BooleanEditor;
        SlsoCtrlBtmCeil: Serenity.BooleanEditor;
        WcOverAcceptedLot: Serenity.BooleanEditor;
        SlsoAutoResv: Serenity.BooleanEditor;
        PercentA: Serenity.DecimalEditor;
        PercentB: Serenity.DecimalEditor;
        PercentC: Serenity.DecimalEditor;
        EntryPostedRequirdBeforePrint: Serenity.StringEditor;
    }
}
declare namespace Matrix.Basic {
    interface CompanySettingRow {
        Recnum?: number;
        SlInit?: string;
        SlsoMultiship?: string;
        SlsoResv?: string;
        SlsoAssortment?: string;
        SlsoDeposits?: string;
        SlsoMeasures?: string;
        SlsoPtax?: string;
        SlsoAtax?: string;
        SlsoGtax?: string;
        SlsoLineDisc?: string;
        SlsoAutoPo?: string;
        SlsoAutoJob?: string;
        SlsoExtInst?: string;
        SlsoExtDesc?: string;
        SlsoFixedUom?: string;
        SlsoReqSman?: string;
        SlsoSman?: string;
        SlsoText1?: string;
        SlsoText2?: string;
        SlsoText3?: string;
        SlsoText4?: string;
        SlsoDueLead?: number;
        SlsoSchLead?: number;
        SlsoAddrCode?: string;
        SlsoAddrType?: string;
        SlsoQuoteDays?: number;
        SlshCutDays?: number;
        SlsoShipVia?: string;
        SlsoShipTerms?: string;
        SlRevisedDate?: string;
        SlRevisedBy?: string;
        PuInit?: string;
        PupoMultiship?: string;
        PupoDeposits?: string;
        PupoMeasures?: string;
        PupoPtax?: string;
        PupoAtax?: string;
        PupoGtax?: string;
        PupoLineDisc?: string;
        PupoExtInst?: string;
        PupoExtDesc?: string;
        PupoFixedUom?: string;
        PupoText1?: string;
        PupoText2?: string;
        PupoText3?: string;
        PupoText4?: string;
        PupoCutDays?: number;
        PupoReorder?: string;
        PupoReqBuyer?: string;
        PupoBuyer?: string;
        PupoShipVia?: string;
        PupoShipTerms?: string;
        PuRevisedDate?: string;
        PuRevisedBy?: string;
        ProdInit?: string;
        ProdEcnReq?: string;
        ProdByprod?: string;
        ProdScrapRate?: number;
        ProdPictDesc1?: string;
        ProdPictDesc2?: string;
        ProdPictDesc3?: string;
        ProdPictDesc4?: string;
        ProdWeightUom?: string;
        ProdDimenUom?: string;
        ProdFixedWtum?: string;
        ProdFixedDmum?: string;
        ProdStdLsize?: number;
        ProdMinLsize?: number;
        ProdMaxLsize?: number;
        ProdStdOutput?: number;
        PrRevisedDate?: string;
        PrRevisedBy?: string;
        ShopReqJcat?: string;
        ShopWksCover?: number;
        ShopPlanner?: string;
        ShopDefPlnr?: string;
        ShopMpsHorz?: number;
        ShopPurLtime?: number;
        ShopPurLunit?: string;
        ShopJobCat?: string;
        ShopMrpHorz?: number;
        ShRevisedDate?: string;
        ShRevisedBy?: string;
        MrpCount?: number;
        MrpRefNo?: string;
        MrpRunDate?: string;
        MrpHorzDate?: string;
        IcInit?: string;
        IcReceipts?: string;
        IcIssuance?: string;
        IcTransfer?: string;
        IcAdjustment?: string;
        IcRevisedDate?: string;
        IcRevisedBy?: string;
        PrJobSched?: string;
        PrByProd?: string;
        PrJobBatches?: string;
        LastResvNo?: number;
        NoMrpFence?: string;
        MvtRmIssue?: string;
        MvtSpIssue?: string;
        MvtFgReturn?: string;
        MvtRmReturn?: string;
        MvtSlShipment?: string;
        MvtSlReturn?: string;
        MvtPuReceipt?: string;
        MvtPuInspect?: string;
        MvtPuReturn?: string;
        GlInit?: string;
        GlHdrTxt?: string;
        GlDtlTxt?: string;
        GlRefEntry?: string;
        GlRefLabel?: string;
        GlLrefEntry?: string;
        GlLrefLabel?: string;
        GlExchComp?: string;
        GlRevisedBy?: string;
        GlRevisedDate?: string;
        VochArInvo?: string;
        VochArMemo?: string;
        VochArAdj?: string;
        VochArPay?: string;
        VochArAlloc?: string;
        VochArInvocan?: string;
        VochArPaycan?: string;
        VochApInvo?: string;
        VochApMemo?: string;
        VochApAdj?: string;
        VochApPay?: string;
        VochApAlloc?: string;
        VochApInvocan?: string;
        VochApPaycan?: string;
        VochIcIssue?: string;
        VochIcRcpt?: string;
        VochIcAdj?: string;
        VochPrIssue?: string;
        VochPrReturn?: string;
        VochPrProd?: string;
        VochPrSubcon?: string;
        VochPayroll?: string;
        VochCommission?: string;
        VochFaAcquire?: string;
        VochFaDeprec?: string;
        VochFaMaint?: string;
        VochFaDispo?: string;
        ArBcountInvo?: number;
        ArBcountMemo?: number;
        ArBcountAdj?: number;
        ArBcountPay?: number;
        ArBcountAlloc?: number;
        ApBcountInvo?: number;
        ApBcountMemo?: number;
        ApBcountAdj?: number;
        ApBcountPay?: number;
        ApBcountAlloc?: number;
        CostInit?: string;
        CostBasis?: string;
        CostRmPrMul?: number;
        CostLbPrMul?: number;
        CostOvPrMul?: number;
        CostRmSlMul?: number;
        CostLbSlMul?: number;
        CostOvSlMul?: number;
        CostRevisedBy?: string;
        CostRevDate?: string;
        PrCostVerify?: string;
        PrCostEdit?: string;
        CommisType?: string;
        SlsoCustItem?: string;
        SlsoPkgType?: string;
        IcAutoShip?: string;
        IcAutoSlret?: string;
        IcAutoGrn?: string;
        IcAutoQc?: string;
        IcAutoPuret?: string;
        IcAutoWorkc?: string;
        ApOvrideRate?: string;
        SlsoSchEntry?: string;
        PupoSchEntry?: string;
        SlsoContact?: string;
        SlsoOrdrPack?: string;
        MaxUsers?: number;
        MmuKey?: string;
        AcctAnlys1?: string;
        AcctAnlys2?: string;
        AcctAnlys3?: string;
        AcctAnlys4?: string;
        VochAnlys1?: string;
        VochAnlys2?: string;
        VochAnlys3?: string;
        VochAnlys4?: string;
        VochAnlys5?: string;
        VochAnlys6?: string;
        ItemAnlys1?: string;
        ItemAnlys2?: string;
        ItemAnlys3?: string;
        ItemAnlys4?: string;
        CustAnlys1?: string;
        CustAnlys2?: string;
        CustAnlys3?: string;
        CustAnlys4?: string;
        VendAnlys1?: string;
        VendAnlys2?: string;
        VendAnlys3?: string;
        VendAnlys4?: string;
        SaleAnlys1?: string;
        SaleAnlys2?: string;
        SaleAnlys3?: string;
        SaleAnlys4?: string;
        SaleAnlys5?: string;
        SaleAnlys6?: string;
        PurcAnlys1?: string;
        PurcAnlys2?: string;
        PurcAnlys3?: string;
        PurcAnlys4?: string;
        PurcAnlys5?: string;
        PurcAnlys6?: string;
        MvmtAnlys1?: string;
        MvmtAnlys2?: string;
        MvmtAnlys3?: string;
        MvmtAnlys4?: string;
        MvmtAnlys5?: string;
        MvmtAnlys6?: string;
        NrevisedDate?: string;
        NrevisedBy?: string;
        ShipWtUom?: string;
        ShipDimUom?: string;
        ItemPacking?: string;
        NoOvhdAcctg?: string;
        NoVariaAcctg?: string;
        NoFgAcctg?: string;
        FgCostLimit?: string;
        AllowDescChg?: string;
        NoLaborAcctg?: string;
        NoSubconAcctg?: string;
        ReorderIsNew?: string;
        DefInspStd?: string;
        DefInspLvl?: string;
        DefAqlLvlMaj?: string;
        DefAqlLvlMin?: string;
        ReturnEmail?: string;
        SmtpServer?: string;
        WebSetting1?: string;
        WebSetting2?: string;
        WebSetting3?: string;
        WebSetting4?: string;
        PupoPriceCtrl?: string;
        JordAnlys1?: string;
        JordAnlys2?: string;
        JordAnlys3?: string;
        JordAnlys4?: string;
        JordAnlys5?: string;
        JordAnlys6?: string;
        ProdPosEntry?: string;
        GlarText1?: string;
        GlarText2?: string;
        GlarText3?: string;
        GlarText4?: string;
        PrJobClose?: string;
        SlsoUnfullPackResponse?: string;
        SlsoDefMultiShip?: string;
        SlsoDefAutoPo?: string;
        SlsoDefAutoJo?: string;
        SlpaExtDesc?: string;
        PupoDueLead?: number;
        PupoSchLead?: number;
        PrMultiIssue?: string;
        ProdSepRoute?: string;
        ProdHideWcSubcon?: string;
        CopyTextFromSo?: string;
        PrpmText1?: string;
        PrpmText2?: string;
        PrpmText3?: string;
        PrpmText4?: string;
        PrpmExtInst?: string;
        BomVerLen?: number;
        ProdPoPrice?: string;
        SaleAnlys7?: string;
        SaleAnlys8?: string;
        PurcAnlys7?: string;
        PurcAnlys8?: string;
        MvmtAnlys7?: string;
        MvmtAnlys8?: string;
        VochAnlys7?: string;
        VochAnlys8?: string;
        JordAnlys7?: string;
        JordAnlys8?: string;
        ArAnlys1?: string;
        ArAnlys2?: string;
        ArAnlys3?: string;
        ArAnlys4?: string;
        ArAnlys5?: string;
        ArAnlys6?: string;
        ArAnlys7?: string;
        ArAnlys8?: string;
        ApAnlys1?: string;
        ApAnlys2?: string;
        ApAnlys3?: string;
        ApAnlys4?: string;
        ApAnlys5?: string;
        ApAnlys6?: string;
        ApAnlys7?: string;
        ApAnlys8?: string;
        SlAddInfo?: string;
        PuAddInfo?: string;
        PrAddInfo?: string;
        IcAddInfo?: string;
        ChkMatIss?: string;
        IcDefStdCost?: string;
        CheckCustpo?: string;
        CtlFgRtn?: string;
        VochArRefund?: string;
        VochApRefund?: string;
        SlsoDn?: string;
        AutoIncBy?: number;
        QuoGenMultiSo?: string;
        PuReceiveAll?: string;
        PrpmItemMasterScrap?: string;
        IcDisableCommit?: string;
        ProdDefMatRemarks?: string;
        SlsoUpdateQtyFromSch?: string;
        PupoUpdateQtyFromSch?: string;
        SlsoDefaultBasePrice?: string;
        SlsoDiscountByCustomer?: string;
        PrpmMaxQtyInStorage?: string;
        IcDefCostType?: string;
        ProdBomCreateItem?: string;
        PupoRtvLoc?: string;
        PrpmUseAllMatLastWc?: string;
        IcNoDefCharge?: string;
        ProdDefPhantomBom?: string;
        SlsoNeedCmApproval?: string;
        PupoNeedVmApproval?: string;
        ProdNeedBomApproval?: string;
        ProdNeedImApproval?: string;
        PrpmNeedScrapReason?: string;
        PrpmMustBackflush?: string;
        PupoAutoOrderLink?: string;
        PrpmAutoOrderLink?: string;
        PrpeAllowChgJob?: string;
        VochPrInspect?: string;
        VochPrRework?: string;
        ProdNeedPlanRlseApproval?: string;
        PrpmIncludeScrapInMmi?: string;
        ProdScrapLoc?: string;
        MvtPrScrap?: string;
        SlNeedClApproval?: string;
        WarnOnMatConsum?: string;
        IcimAutogenLot?: string;
        IcimAutogenSerial?: string;
        ItemAnlys5?: string;
        ItemAnlys6?: string;
        ItemAnlys7?: string;
        ItemAnlys8?: string;
        ItemAnlys9?: string;
        ItemAnlys10?: string;
        CustAnlys5?: string;
        CustAnlys6?: string;
        CustAnlys7?: string;
        CustAnlys8?: string;
        CustAnlys9?: string;
        CustAnlys10?: string;
        VendAnlys5?: string;
        VendAnlys6?: string;
        VendAnlys7?: string;
        VendAnlys8?: string;
        VendAnlys9?: string;
        VendAnlys10?: string;
        AcctAnlys5?: string;
        AcctAnlys6?: string;
        AcctAnlys7?: string;
        AcctAnlys8?: string;
        AcctAnlys9?: string;
        AcctAnlys10?: string;
        SaleAnlys9?: string;
        SaleAnlys10?: string;
        SaleAnlys11?: string;
        SaleAnlys12?: string;
        SaleAnlys13?: string;
        SaleAnlys14?: string;
        SaleAnlys15?: string;
        SaleAnlys16?: string;
        SaleAnlys17?: string;
        SaleAnlys18?: string;
        SaleAnlys19?: string;
        SaleAnlys20?: string;
        PurcAnlys9?: string;
        PurcAnlys10?: string;
        PurcAnlys11?: string;
        PurcAnlys12?: string;
        PurcAnlys13?: string;
        PurcAnlys14?: string;
        PurcAnlys15?: string;
        PurcAnlys16?: string;
        PurcAnlys17?: string;
        PurcAnlys18?: string;
        PurcAnlys19?: string;
        PurcAnlys20?: string;
        MvmtAnlys9?: string;
        MvmtAnlys10?: string;
        MvmtAnlys11?: string;
        MvmtAnlys12?: string;
        MvmtAnlys13?: string;
        MvmtAnlys14?: string;
        MvmtAnlys15?: string;
        MvmtAnlys16?: string;
        MvmtAnlys17?: string;
        MvmtAnlys18?: string;
        MvmtAnlys19?: string;
        MvmtAnlys20?: string;
        VochAnlys9?: string;
        VochAnlys10?: string;
        VochAnlys11?: string;
        VochAnlys12?: string;
        VochAnlys13?: string;
        VochAnlys14?: string;
        VochAnlys15?: string;
        VochAnlys16?: string;
        VochAnlys17?: string;
        VochAnlys18?: string;
        VochAnlys19?: string;
        VochAnlys20?: string;
        JordAnlys9?: string;
        JordAnlys10?: string;
        JordAnlys11?: string;
        JordAnlys12?: string;
        JordAnlys13?: string;
        JordAnlys14?: string;
        JordAnlys15?: string;
        JordAnlys16?: string;
        JordAnlys17?: string;
        JordAnlys18?: string;
        JordAnlys19?: string;
        JordAnlys20?: string;
        ArAnlys9?: string;
        ArAnlys10?: string;
        ArAnlys11?: string;
        ArAnlys12?: string;
        ArAnlys13?: string;
        ArAnlys14?: string;
        ArAnlys15?: string;
        ArAnlys16?: string;
        ArAnlys17?: string;
        ArAnlys18?: string;
        ArAnlys19?: string;
        ArAnlys20?: string;
        ApAnlys9?: string;
        ApAnlys10?: string;
        ApAnlys11?: string;
        ApAnlys12?: string;
        ApAnlys13?: string;
        ApAnlys14?: string;
        ApAnlys15?: string;
        ApAnlys16?: string;
        ApAnlys17?: string;
        ApAnlys18?: string;
        ApAnlys19?: string;
        ApAnlys20?: string;
        PrpeMoldAuditTrail?: boolean;
        IcimIssueByAvailableQty?: boolean;
        PrpmJamendIssueControl?: boolean;
        PrAutoMultiSpareIssue?: boolean;
        SlShipmentPriceControl?: boolean;
        ArMultiSettle?: boolean;
        PupoDefMultiship?: boolean;
        PupoDefReorder?: boolean;
        SlsoDefReorder?: boolean;
        VochByVdate?: boolean;
        PupoTaxTerms?: boolean;
        SampleAcct?: string;
        CtlFgRtnTotQty?: boolean;
        AllowMultiWc?: boolean;
        PoaIgnoreMinQty?: boolean;
        GrnMatCost?: boolean;
        GrnLotNoImport?: boolean;
        IssueMaterialsByRouting?: boolean;
        ConsumeMatInLastRouting?: boolean;
        DefAqlLvlCritical?: string;
        DefInspLvlSp?: string;
        DefAqlLvlCriticalSp?: string;
        DefAqlLvlMajSp?: string;
        DefAqlLvlMinSp?: string;
        WcAutoMatReturn?: boolean;
        ArInvMultiPayTerms?: boolean;
        IcAdjCodeAPcent?: number;
        IcAdjCodeBPcent?: number;
        IcAdjCodeCPcent?: number;
        TailorIncludeJob?: boolean;
        JoMultiSource?: boolean;
        ShowShipmentInfoInPacking?: boolean;
        MrpWithReorderPt?: boolean;
        AllowFollowListWithoutMi?: boolean;
        PrMultiFollowList?: boolean;
        SqietkMatBalSubtractCommit?: boolean;
        SoLineAutoIncBy?: number;
        PoLineAutoIncBy?: number;
        PuOverRcptByLine?: boolean;
        PuLmeCost?: boolean;
        SoaUpdatePendingShipment?: boolean;
        PrMatIssueOnAvailPercent?: number;
        JobHourlyRate?: number;
        ItemCustomProdCodeRequired?: boolean;
        IcimAutogenLotIssue?: boolean;
        IcimAutogenSerialIssue?: boolean;
        ShipmentInfoFromFirstOrder?: boolean;
        MrpExcludeLeadtime?: boolean;
        ItemPrelotSopo?: boolean;
        SlsoCtrlBtmCeil?: boolean;
        WcOverAcceptedLot?: boolean;
        SlsoAutoResv?: boolean;
        PercentA?: number;
        PercentB?: number;
        PercentC?: number;
        EntryPostedRequirdBeforePrint?: string;
    }
    namespace CompanySettingRow {
        const idProperty = "Recnum";
        const nameProperty = "SlInit";
        const localTextPrefix = "BasicInformation.CompanySetting";
        namespace Fields {
            const Recnum: string;
            const SlInit: string;
            const SlsoMultiship: string;
            const SlsoResv: string;
            const SlsoAssortment: string;
            const SlsoDeposits: string;
            const SlsoMeasures: string;
            const SlsoPtax: string;
            const SlsoAtax: string;
            const SlsoGtax: string;
            const SlsoLineDisc: string;
            const SlsoAutoPo: string;
            const SlsoAutoJob: string;
            const SlsoExtInst: string;
            const SlsoExtDesc: string;
            const SlsoFixedUom: string;
            const SlsoReqSman: string;
            const SlsoSman: string;
            const SlsoText1: string;
            const SlsoText2: string;
            const SlsoText3: string;
            const SlsoText4: string;
            const SlsoDueLead: string;
            const SlsoSchLead: string;
            const SlsoAddrCode: string;
            const SlsoAddrType: string;
            const SlsoQuoteDays: string;
            const SlshCutDays: string;
            const SlsoShipVia: string;
            const SlsoShipTerms: string;
            const SlRevisedDate: string;
            const SlRevisedBy: string;
            const PuInit: string;
            const PupoMultiship: string;
            const PupoDeposits: string;
            const PupoMeasures: string;
            const PupoPtax: string;
            const PupoAtax: string;
            const PupoGtax: string;
            const PupoLineDisc: string;
            const PupoExtInst: string;
            const PupoExtDesc: string;
            const PupoFixedUom: string;
            const PupoText1: string;
            const PupoText2: string;
            const PupoText3: string;
            const PupoText4: string;
            const PupoCutDays: string;
            const PupoReorder: string;
            const PupoReqBuyer: string;
            const PupoBuyer: string;
            const PupoShipVia: string;
            const PupoShipTerms: string;
            const PuRevisedDate: string;
            const PuRevisedBy: string;
            const ProdInit: string;
            const ProdEcnReq: string;
            const ProdByprod: string;
            const ProdScrapRate: string;
            const ProdPictDesc1: string;
            const ProdPictDesc2: string;
            const ProdPictDesc3: string;
            const ProdPictDesc4: string;
            const ProdWeightUom: string;
            const ProdDimenUom: string;
            const ProdFixedWtum: string;
            const ProdFixedDmum: string;
            const ProdStdLsize: string;
            const ProdMinLsize: string;
            const ProdMaxLsize: string;
            const ProdStdOutput: string;
            const PrRevisedDate: string;
            const PrRevisedBy: string;
            const ShopReqJcat: string;
            const ShopWksCover: string;
            const ShopPlanner: string;
            const ShopDefPlnr: string;
            const ShopMpsHorz: string;
            const ShopPurLtime: string;
            const ShopPurLunit: string;
            const ShopJobCat: string;
            const ShopMrpHorz: string;
            const ShRevisedDate: string;
            const ShRevisedBy: string;
            const MrpCount: string;
            const MrpRefNo: string;
            const MrpRunDate: string;
            const MrpHorzDate: string;
            const IcInit: string;
            const IcReceipts: string;
            const IcIssuance: string;
            const IcTransfer: string;
            const IcAdjustment: string;
            const IcRevisedDate: string;
            const IcRevisedBy: string;
            const PrJobSched: string;
            const PrByProd: string;
            const PrJobBatches: string;
            const LastResvNo: string;
            const NoMrpFence: string;
            const MvtRmIssue: string;
            const MvtSpIssue: string;
            const MvtFgReturn: string;
            const MvtRmReturn: string;
            const MvtSlShipment: string;
            const MvtSlReturn: string;
            const MvtPuReceipt: string;
            const MvtPuInspect: string;
            const MvtPuReturn: string;
            const GlInit: string;
            const GlHdrTxt: string;
            const GlDtlTxt: string;
            const GlRefEntry: string;
            const GlRefLabel: string;
            const GlLrefEntry: string;
            const GlLrefLabel: string;
            const GlExchComp: string;
            const GlRevisedBy: string;
            const GlRevisedDate: string;
            const VochArInvo: string;
            const VochArMemo: string;
            const VochArAdj: string;
            const VochArPay: string;
            const VochArAlloc: string;
            const VochArInvocan: string;
            const VochArPaycan: string;
            const VochApInvo: string;
            const VochApMemo: string;
            const VochApAdj: string;
            const VochApPay: string;
            const VochApAlloc: string;
            const VochApInvocan: string;
            const VochApPaycan: string;
            const VochIcIssue: string;
            const VochIcRcpt: string;
            const VochIcAdj: string;
            const VochPrIssue: string;
            const VochPrReturn: string;
            const VochPrProd: string;
            const VochPrSubcon: string;
            const VochPayroll: string;
            const VochCommission: string;
            const VochFaAcquire: string;
            const VochFaDeprec: string;
            const VochFaMaint: string;
            const VochFaDispo: string;
            const ArBcountInvo: string;
            const ArBcountMemo: string;
            const ArBcountAdj: string;
            const ArBcountPay: string;
            const ArBcountAlloc: string;
            const ApBcountInvo: string;
            const ApBcountMemo: string;
            const ApBcountAdj: string;
            const ApBcountPay: string;
            const ApBcountAlloc: string;
            const CostInit: string;
            const CostBasis: string;
            const CostRmPrMul: string;
            const CostLbPrMul: string;
            const CostOvPrMul: string;
            const CostRmSlMul: string;
            const CostLbSlMul: string;
            const CostOvSlMul: string;
            const CostRevisedBy: string;
            const CostRevDate: string;
            const PrCostVerify: string;
            const PrCostEdit: string;
            const CommisType: string;
            const SlsoCustItem: string;
            const SlsoPkgType: string;
            const IcAutoShip: string;
            const IcAutoSlret: string;
            const IcAutoGrn: string;
            const IcAutoQc: string;
            const IcAutoPuret: string;
            const IcAutoWorkc: string;
            const ApOvrideRate: string;
            const SlsoSchEntry: string;
            const PupoSchEntry: string;
            const SlsoContact: string;
            const SlsoOrdrPack: string;
            const MaxUsers: string;
            const MmuKey: string;
            const AcctAnlys1: string;
            const AcctAnlys2: string;
            const AcctAnlys3: string;
            const AcctAnlys4: string;
            const VochAnlys1: string;
            const VochAnlys2: string;
            const VochAnlys3: string;
            const VochAnlys4: string;
            const VochAnlys5: string;
            const VochAnlys6: string;
            const ItemAnlys1: string;
            const ItemAnlys2: string;
            const ItemAnlys3: string;
            const ItemAnlys4: string;
            const CustAnlys1: string;
            const CustAnlys2: string;
            const CustAnlys3: string;
            const CustAnlys4: string;
            const VendAnlys1: string;
            const VendAnlys2: string;
            const VendAnlys3: string;
            const VendAnlys4: string;
            const SaleAnlys1: string;
            const SaleAnlys2: string;
            const SaleAnlys3: string;
            const SaleAnlys4: string;
            const SaleAnlys5: string;
            const SaleAnlys6: string;
            const PurcAnlys1: string;
            const PurcAnlys2: string;
            const PurcAnlys3: string;
            const PurcAnlys4: string;
            const PurcAnlys5: string;
            const PurcAnlys6: string;
            const MvmtAnlys1: string;
            const MvmtAnlys2: string;
            const MvmtAnlys3: string;
            const MvmtAnlys4: string;
            const MvmtAnlys5: string;
            const MvmtAnlys6: string;
            const NrevisedDate: string;
            const NrevisedBy: string;
            const ShipWtUom: string;
            const ShipDimUom: string;
            const ItemPacking: string;
            const NoOvhdAcctg: string;
            const NoVariaAcctg: string;
            const NoFgAcctg: string;
            const FgCostLimit: string;
            const AllowDescChg: string;
            const NoLaborAcctg: string;
            const NoSubconAcctg: string;
            const ReorderIsNew: string;
            const DefInspStd: string;
            const DefInspLvl: string;
            const DefAqlLvlMaj: string;
            const DefAqlLvlMin: string;
            const ReturnEmail: string;
            const SmtpServer: string;
            const WebSetting1: string;
            const WebSetting2: string;
            const WebSetting3: string;
            const WebSetting4: string;
            const PupoPriceCtrl: string;
            const JordAnlys1: string;
            const JordAnlys2: string;
            const JordAnlys3: string;
            const JordAnlys4: string;
            const JordAnlys5: string;
            const JordAnlys6: string;
            const ProdPosEntry: string;
            const GlarText1: string;
            const GlarText2: string;
            const GlarText3: string;
            const GlarText4: string;
            const PrJobClose: string;
            const SlsoUnfullPackResponse: string;
            const SlsoDefMultiShip: string;
            const SlsoDefAutoPo: string;
            const SlsoDefAutoJo: string;
            const SlpaExtDesc: string;
            const PupoDueLead: string;
            const PupoSchLead: string;
            const PrMultiIssue: string;
            const ProdSepRoute: string;
            const ProdHideWcSubcon: string;
            const CopyTextFromSo: string;
            const PrpmText1: string;
            const PrpmText2: string;
            const PrpmText3: string;
            const PrpmText4: string;
            const PrpmExtInst: string;
            const BomVerLen: string;
            const ProdPoPrice: string;
            const SaleAnlys7: string;
            const SaleAnlys8: string;
            const PurcAnlys7: string;
            const PurcAnlys8: string;
            const MvmtAnlys7: string;
            const MvmtAnlys8: string;
            const VochAnlys7: string;
            const VochAnlys8: string;
            const JordAnlys7: string;
            const JordAnlys8: string;
            const ArAnlys1: string;
            const ArAnlys2: string;
            const ArAnlys3: string;
            const ArAnlys4: string;
            const ArAnlys5: string;
            const ArAnlys6: string;
            const ArAnlys7: string;
            const ArAnlys8: string;
            const ApAnlys1: string;
            const ApAnlys2: string;
            const ApAnlys3: string;
            const ApAnlys4: string;
            const ApAnlys5: string;
            const ApAnlys6: string;
            const ApAnlys7: string;
            const ApAnlys8: string;
            const SlAddInfo: string;
            const PuAddInfo: string;
            const PrAddInfo: string;
            const IcAddInfo: string;
            const ChkMatIss: string;
            const IcDefStdCost: string;
            const CheckCustpo: string;
            const CtlFgRtn: string;
            const VochArRefund: string;
            const VochApRefund: string;
            const SlsoDn: string;
            const AutoIncBy: string;
            const QuoGenMultiSo: string;
            const PuReceiveAll: string;
            const PrpmItemMasterScrap: string;
            const IcDisableCommit: string;
            const ProdDefMatRemarks: string;
            const SlsoUpdateQtyFromSch: string;
            const PupoUpdateQtyFromSch: string;
            const SlsoDefaultBasePrice: string;
            const SlsoDiscountByCustomer: string;
            const PrpmMaxQtyInStorage: string;
            const IcDefCostType: string;
            const ProdBomCreateItem: string;
            const PupoRtvLoc: string;
            const PrpmUseAllMatLastWc: string;
            const IcNoDefCharge: string;
            const ProdDefPhantomBom: string;
            const SlsoNeedCmApproval: string;
            const PupoNeedVmApproval: string;
            const ProdNeedBomApproval: string;
            const ProdNeedImApproval: string;
            const PrpmNeedScrapReason: string;
            const PrpmMustBackflush: string;
            const PupoAutoOrderLink: string;
            const PrpmAutoOrderLink: string;
            const PrpeAllowChgJob: string;
            const VochPrInspect: string;
            const VochPrRework: string;
            const ProdNeedPlanRlseApproval: string;
            const PrpmIncludeScrapInMmi: string;
            const ProdScrapLoc: string;
            const MvtPrScrap: string;
            const SlNeedClApproval: string;
            const WarnOnMatConsum: string;
            const IcimAutogenLot: string;
            const IcimAutogenSerial: string;
            const ItemAnlys5: string;
            const ItemAnlys6: string;
            const ItemAnlys7: string;
            const ItemAnlys8: string;
            const ItemAnlys9: string;
            const ItemAnlys10: string;
            const CustAnlys5: string;
            const CustAnlys6: string;
            const CustAnlys7: string;
            const CustAnlys8: string;
            const CustAnlys9: string;
            const CustAnlys10: string;
            const VendAnlys5: string;
            const VendAnlys6: string;
            const VendAnlys7: string;
            const VendAnlys8: string;
            const VendAnlys9: string;
            const VendAnlys10: string;
            const AcctAnlys5: string;
            const AcctAnlys6: string;
            const AcctAnlys7: string;
            const AcctAnlys8: string;
            const AcctAnlys9: string;
            const AcctAnlys10: string;
            const SaleAnlys9: string;
            const SaleAnlys10: string;
            const SaleAnlys11: string;
            const SaleAnlys12: string;
            const SaleAnlys13: string;
            const SaleAnlys14: string;
            const SaleAnlys15: string;
            const SaleAnlys16: string;
            const SaleAnlys17: string;
            const SaleAnlys18: string;
            const SaleAnlys19: string;
            const SaleAnlys20: string;
            const PurcAnlys9: string;
            const PurcAnlys10: string;
            const PurcAnlys11: string;
            const PurcAnlys12: string;
            const PurcAnlys13: string;
            const PurcAnlys14: string;
            const PurcAnlys15: string;
            const PurcAnlys16: string;
            const PurcAnlys17: string;
            const PurcAnlys18: string;
            const PurcAnlys19: string;
            const PurcAnlys20: string;
            const MvmtAnlys9: string;
            const MvmtAnlys10: string;
            const MvmtAnlys11: string;
            const MvmtAnlys12: string;
            const MvmtAnlys13: string;
            const MvmtAnlys14: string;
            const MvmtAnlys15: string;
            const MvmtAnlys16: string;
            const MvmtAnlys17: string;
            const MvmtAnlys18: string;
            const MvmtAnlys19: string;
            const MvmtAnlys20: string;
            const VochAnlys9: string;
            const VochAnlys10: string;
            const VochAnlys11: string;
            const VochAnlys12: string;
            const VochAnlys13: string;
            const VochAnlys14: string;
            const VochAnlys15: string;
            const VochAnlys16: string;
            const VochAnlys17: string;
            const VochAnlys18: string;
            const VochAnlys19: string;
            const VochAnlys20: string;
            const JordAnlys9: string;
            const JordAnlys10: string;
            const JordAnlys11: string;
            const JordAnlys12: string;
            const JordAnlys13: string;
            const JordAnlys14: string;
            const JordAnlys15: string;
            const JordAnlys16: string;
            const JordAnlys17: string;
            const JordAnlys18: string;
            const JordAnlys19: string;
            const JordAnlys20: string;
            const ArAnlys9: string;
            const ArAnlys10: string;
            const ArAnlys11: string;
            const ArAnlys12: string;
            const ArAnlys13: string;
            const ArAnlys14: string;
            const ArAnlys15: string;
            const ArAnlys16: string;
            const ArAnlys17: string;
            const ArAnlys18: string;
            const ArAnlys19: string;
            const ArAnlys20: string;
            const ApAnlys9: string;
            const ApAnlys10: string;
            const ApAnlys11: string;
            const ApAnlys12: string;
            const ApAnlys13: string;
            const ApAnlys14: string;
            const ApAnlys15: string;
            const ApAnlys16: string;
            const ApAnlys17: string;
            const ApAnlys18: string;
            const ApAnlys19: string;
            const ApAnlys20: string;
            const PrpeMoldAuditTrail: string;
            const IcimIssueByAvailableQty: string;
            const PrpmJamendIssueControl: string;
            const PrAutoMultiSpareIssue: string;
            const SlShipmentPriceControl: string;
            const ArMultiSettle: string;
            const PupoDefMultiship: string;
            const PupoDefReorder: string;
            const SlsoDefReorder: string;
            const VochByVdate: string;
            const PupoTaxTerms: string;
            const SampleAcct: string;
            const CtlFgRtnTotQty: string;
            const AllowMultiWc: string;
            const PoaIgnoreMinQty: string;
            const GrnMatCost: string;
            const GrnLotNoImport: string;
            const IssueMaterialsByRouting: string;
            const ConsumeMatInLastRouting: string;
            const DefAqlLvlCritical: string;
            const DefInspLvlSp: string;
            const DefAqlLvlCriticalSp: string;
            const DefAqlLvlMajSp: string;
            const DefAqlLvlMinSp: string;
            const WcAutoMatReturn: string;
            const ArInvMultiPayTerms: string;
            const IcAdjCodeAPcent: string;
            const IcAdjCodeBPcent: string;
            const IcAdjCodeCPcent: string;
            const TailorIncludeJob: string;
            const JoMultiSource: string;
            const ShowShipmentInfoInPacking: string;
            const MrpWithReorderPt: string;
            const AllowFollowListWithoutMi: string;
            const PrMultiFollowList: string;
            const SqietkMatBalSubtractCommit: string;
            const SoLineAutoIncBy: string;
            const PoLineAutoIncBy: string;
            const PuOverRcptByLine: string;
            const PuLmeCost: string;
            const SoaUpdatePendingShipment: string;
            const PrMatIssueOnAvailPercent: string;
            const JobHourlyRate: string;
            const ItemCustomProdCodeRequired: string;
            const IcimAutogenLotIssue: string;
            const IcimAutogenSerialIssue: string;
            const ShipmentInfoFromFirstOrder: string;
            const MrpExcludeLeadtime: string;
            const ItemPrelotSopo: string;
            const SlsoCtrlBtmCeil: string;
            const WcOverAcceptedLot: string;
            const SlsoAutoResv: string;
            const PercentA: string;
            const PercentB: string;
            const PercentC: string;
            const EntryPostedRequirdBeforePrint: string;
        }
    }
}
declare namespace Matrix.Basic {
    namespace CompanySettingService {
        const baseUrl = "BasicInformation/CompanySetting";
        function Create(request: Serenity.SaveRequest<CompanySettingRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CompanySettingRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CompanySettingRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CompanySettingRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Common.Pages {
    interface UploadResponse extends Serenity.ServiceResponse {
        TemporaryFile?: string;
        Size?: number;
        IsImage?: boolean;
        Width?: number;
        Height?: number;
    }
}
declare namespace Matrix.Common {
    interface UserPreferenceRetrieveRequest extends Serenity.ServiceRequest {
        PreferenceType?: string;
        Name?: string;
    }
}
declare namespace Matrix.Common {
    interface UserPreferenceRetrieveResponse extends Serenity.ServiceResponse {
        Value?: string;
    }
}
declare namespace Matrix.Common {
    interface UserPreferenceRow {
        UserPreferenceId?: number;
        UserId?: string;
        PreferenceType?: string;
        Name?: string;
        Value?: string;
    }
    namespace UserPreferenceRow {
        const idProperty = "UserPreferenceId";
        const nameProperty = "Name";
        const localTextPrefix = "Common.UserPreference";
        namespace Fields {
            const UserPreferenceId: string;
            const UserId: string;
            const PreferenceType: string;
            const Name: string;
            const Value: string;
        }
    }
}
declare namespace Matrix.Common {
    namespace UserPreferenceService {
        const baseUrl = "Common/UserPreference";
        function Update(request: UserPreferenceUpdateRequest, onSuccess?: (response: Serenity.ServiceResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: UserPreferenceRetrieveRequest, onSuccess?: (response: UserPreferenceRetrieveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Update: string;
            const Retrieve: string;
        }
    }
}
declare namespace Matrix.Common {
    interface UserPreferenceUpdateRequest extends Serenity.ServiceRequest {
        PreferenceType?: string;
        Name?: string;
        Value?: string;
    }
}
declare namespace Matrix.Document {
}
declare namespace Matrix.Document {
    class AttachmentForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AttachmentForm {
        MasterTable: Serenity.StringEditor;
        MasterKey: Serenity.DecimalEditor;
        FileType: Serenity.StringEditor;
        FilePath: Serenity.StringEditor;
        CreatedBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        Description: Serenity.StringEditor;
        KeySegment1: Serenity.StringEditor;
        KeySegment2: Serenity.StringEditor;
        KeySegment3: Serenity.StringEditor;
        KeySegment4: Serenity.StringEditor;
        KeySegment5: Serenity.StringEditor;
        AttmSize: Serenity.DecimalEditor;
        AttmFile: Serenity.StringEditor;
        UploadedBy: Serenity.StringEditor;
        UploadedDate: Serenity.DateEditor;
        Md5Hash: Serenity.StringEditor;
    }
}
declare namespace Matrix.Document {
    interface AttachmentRow {
        Recnum?: number;
        MasterTable?: string;
        MasterKey?: number;
        FileType?: string;
        FilePath?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        Description?: string;
        KeySegment1?: string;
        KeySegment2?: string;
        KeySegment3?: string;
        KeySegment4?: string;
        KeySegment5?: string;
        AttmSize?: number;
        AttmFile?: number[];
        UploadedBy?: string;
        UploadedDate?: string;
        Md5Hash?: string;
    }
    namespace AttachmentRow {
        const idProperty = "Recnum";
        const nameProperty = "MasterTable";
        const localTextPrefix = "Document.Attachment";
        namespace Fields {
            const Recnum: string;
            const MasterTable: string;
            const MasterKey: string;
            const FileType: string;
            const FilePath: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const Description: string;
            const KeySegment1: string;
            const KeySegment2: string;
            const KeySegment3: string;
            const KeySegment4: string;
            const KeySegment5: string;
            const AttmSize: string;
            const AttmFile: string;
            const UploadedBy: string;
            const UploadedDate: string;
            const Md5Hash: string;
        }
    }
}
declare namespace Matrix.Document {
    namespace AttachmentService {
        const baseUrl = "Document/Attachment";
        function Create(request: Serenity.SaveRequest<AttachmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AttachmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AttachmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AttachmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
    class CurrencyForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CurrencyForm {
        Ccy: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        DefaultRate: Serenity.DecimalEditor;
        DetailList: MasterData.ExchangeRateDetailEditor;
    }
}
declare namespace Matrix.Enterprise {
    interface CurrencyRow {
        Recnum?: number;
        Ccy?: string;
        Description?: string;
        Suspended?: boolean;
        DefaultRate?: number;
        AcctArForex?: string;
        AcctApForex?: string;
        LastEntryNo?: number;
        RateUseCount?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        ApInvoBal?: number;
        ApOpenBal?: number;
        ApNetBal?: number;
        ApLinvoBal?: number;
        ApLopenBal?: number;
        ApLnetBal?: number;
        ArInvoBal?: number;
        ArOpenBal?: number;
        ArNetBal?: number;
        ArLinvoBal?: number;
        ArLopenBal?: number;
        ArLnetBal?: number;
        DetailList?: MasterData.ExchangeRateRow[];
    }
    namespace CurrencyRow {
        const idProperty = "Ccy";
        const nameProperty = "Description";
        const localTextPrefix = "Enterprise.Currency";
        namespace Fields {
            const Recnum: string;
            const Ccy: string;
            const Description: string;
            const Suspended: string;
            const DefaultRate: string;
            const AcctArForex: string;
            const AcctApForex: string;
            const LastEntryNo: string;
            const RateUseCount: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const ApInvoBal: string;
            const ApOpenBal: string;
            const ApNetBal: string;
            const ApLinvoBal: string;
            const ApLopenBal: string;
            const ApLnetBal: string;
            const ArInvoBal: string;
            const ArOpenBal: string;
            const ArNetBal: string;
            const ArLinvoBal: string;
            const ArLopenBal: string;
            const ArLnetBal: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    namespace CurrencyService {
        const baseUrl = "Enterprise/Currency";
        function Create(request: Serenity.SaveRequest<CurrencyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CurrencyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CurrencyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CurrencyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
    class CustomerGroupForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CustomerGroupForm {
        CustomerGroup: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        UseAltNames: Serenity.BooleanEditor;
        WithCrLimit: Serenity.BooleanEditor;
        PaymentCcy: Serenity.StringEditor;
        PayTerms: Serenity.StringEditor;
        PriceCode: Serenity.StringEditor;
        CreditLimit: Serenity.DecimalEditor;
        TradeDiscount: Serenity.DecimalEditor;
        CustomerCount: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Enterprise {
    interface CustomerGroupRow {
        Recnum?: number;
        CustomerGroup?: string;
        Description?: string;
        Suspended?: boolean;
        AcctArCust?: string;
        AcctArDisc?: string;
        AcctArAdj?: string;
        AcctSlsTrdisc?: string;
        GtaxCode?: string;
        LtaxCode?: string;
        PaymentCcy?: string;
        PayTerms?: string;
        PriceCode?: string;
        UseAltNames?: boolean;
        WithCrLimit?: boolean;
        CreditLimit?: number;
        TradeDiscount?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        CustomerCount?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        TrevisedDate?: string;
        TrevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        AcctCustSltax?: string;
        SltaxPcent?: number;
        Anlys5?: string;
        Anlys6?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        AcctTemp?: string;
        ClientCompanyName?: string;
        ClientAddress1?: string;
        ClientAddress2?: string;
        ClientAddress3?: string;
        ClientAddress4?: string;
        ClientAddress5?: string;
        ClientTelNo?: string;
        ClientFaxNo?: string;
        ClientEmailAddress?: string;
        ClientContactPerson?: string;
        ClientContactTitle?: string;
        ClientRemarks?: string;
        AcctArDeposit?: string;
    }
    namespace CustomerGroupRow {
        const idProperty = "CustomerGroup";
        const nameProperty = "CustomerGroup";
        const localTextPrefix = "Enterprise.CustomerGroup";
        namespace Fields {
            const Recnum: string;
            const CustomerGroup: string;
            const Description: string;
            const Suspended: string;
            const AcctArCust: string;
            const AcctArDisc: string;
            const AcctArAdj: string;
            const AcctSlsTrdisc: string;
            const GtaxCode: string;
            const LtaxCode: string;
            const PaymentCcy: string;
            const PayTerms: string;
            const PriceCode: string;
            const UseAltNames: string;
            const WithCrLimit: string;
            const CreditLimit: string;
            const TradeDiscount: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const CustomerCount: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const TrevisedDate: string;
            const TrevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const AcctCustSltax: string;
            const SltaxPcent: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const AcctTemp: string;
            const ClientCompanyName: string;
            const ClientAddress1: string;
            const ClientAddress2: string;
            const ClientAddress3: string;
            const ClientAddress4: string;
            const ClientAddress5: string;
            const ClientTelNo: string;
            const ClientFaxNo: string;
            const ClientEmailAddress: string;
            const ClientContactPerson: string;
            const ClientContactTitle: string;
            const ClientRemarks: string;
            const AcctArDeposit: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    namespace CustomerGroupService {
        const baseUrl = "Enterprise/CustomerGroup";
        function Create(request: Serenity.SaveRequest<CustomerGroupRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CustomerGroupRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CustomerGroupRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CustomerGroupRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
    class DepartmentForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface DepartmentForm {
        Dept: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.Enterprise {
    interface DepartmentRow {
        Recnum?: number;
        Dept?: string;
        Description?: string;
        Suspended?: boolean;
        AcctMvtIssue?: string;
        AcctMvtRcpt?: string;
        AcctPurMisc?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace DepartmentRow {
        const idProperty = "Dept";
        const nameProperty = "Description";
        const localTextPrefix = "Enterprise.Department";
        namespace Fields {
            const Recnum: string;
            const Dept: string;
            const Description: string;
            const Suspended: string;
            const AcctMvtIssue: string;
            const AcctMvtRcpt: string;
            const AcctPurMisc: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    namespace DepartmentService {
        const baseUrl = "Enterprise/Department";
        function Create(request: Serenity.SaveRequest<DepartmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<DepartmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<DepartmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<DepartmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
    class ItemGroupForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ItemGroupForm {
        ItemGroup: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Product: Serenity.BooleanEditor;
        Material: Serenity.BooleanEditor;
        Inspected: Serenity.BooleanEditor;
        AllocMethod: Serenity.EnumEditor;
        MakeOrBuy: Serenity.BooleanEditor;
        ScrapRate: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Enterprise {
    interface ItemGroupRow {
        ItemGroup?: string;
        Description?: string;
        Suspended?: boolean;
        Product?: boolean;
        Material?: boolean;
        Inspected?: boolean;
        ItemType?: string;
        AllocMethod?: string;
        MakeOrBuy?: boolean;
        ScrapRate?: number;
    }
    namespace ItemGroupRow {
        const idProperty = "ItemGroup";
        const nameProperty = "Description";
        const localTextPrefix = "Enterprise.ItemGroup";
        const lookupKey = "Enterprise.ItemGroupLookup";
        function getLookup(): Q.Lookup<ItemGroupRow>;
        namespace Fields {
            const ItemGroup: string;
            const Description: string;
            const Suspended: string;
            const Product: string;
            const Material: string;
            const Inspected: string;
            const ItemType: string;
            const AllocMethod: string;
            const MakeOrBuy: string;
            const ScrapRate: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    namespace ItemGroupService {
        const baseUrl = "Enterprise/ItemGroup";
        function Create(request: Serenity.SaveRequest<ItemGroupRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ItemGroupRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ItemGroupRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ItemGroupRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
    class JobCategoryForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface JobCategoryForm {
        Category: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Priority: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Enterprise {
    interface JobCategoryRow {
        Recnum?: number;
        Category?: string;
        Description?: string;
        Suspended?: boolean;
        Priority?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace JobCategoryRow {
        const idProperty = "Category";
        const nameProperty = "Description";
        const localTextPrefix = "Enterprise.JobCategory";
        namespace Fields {
            const Recnum: string;
            const Category: string;
            const Description: string;
            const Suspended: string;
            const Priority: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    namespace JobCategoryService {
        const baseUrl = "Enterprise/JobCategory";
        function Create(request: Serenity.SaveRequest<JobCategoryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<JobCategoryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<JobCategoryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<JobCategoryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
    class VendorForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VendorForm {
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        VendorGroup: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        PostCode: Serenity.StringEditor;
        TelNo: Serenity.StringEditor;
        FaxNo: Serenity.StringEditor;
        Email: Serenity.StringEditor;
        ContactPerson: Serenity.StringEditor;
        ContactTitle: Serenity.StringEditor;
        AltVendorName: Serenity.StringEditor;
        AltAddress: Serenity.StringEditor;
        AltAddress2: Serenity.StringEditor;
        AltAddress3: Serenity.StringEditor;
        AltAddress4: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        UseAltNames: Serenity.StringEditor;
        UseAltDesc: Serenity.StringEditor;
        OrderCcy: Serenity.StringEditor;
        PayTerms: Serenity.StringEditor;
        BuyerCode: Serenity.StringEditor;
        LeadTime: Serenity.DecimalEditor;
        PutaxPcent: Serenity.DecimalEditor;
        TaxationLv: Serenity.StringEditor;
        BankName: Serenity.StringEditor;
        BankAcctNo: Serenity.StringEditor;
        RefCompanyCode: Serenity.StringEditor;
        RefCustomerNo: Serenity.StringEditor;
        RefIntegrateComments: Serenity.BooleanEditor;
        RefIntegrateAnlys: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.Enterprise {
}
declare namespace Matrix.Enterprise {
    class VendorGroupForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VendorGroupForm {
        VendorGroup: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        UseAltNames: Serenity.BooleanEditor;
        OrderCcy: Serenity.StringEditor;
        PayTerms: Serenity.StringEditor;
        TradeDiscount: Serenity.DecimalEditor;
        VendorCount: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Enterprise {
    interface VendorGroupRow {
        Recnum?: number;
        VendorGroup?: string;
        Description?: string;
        Suspended?: boolean;
        AcctApVend?: string;
        AcctApDisc?: string;
        AcctApAdj?: string;
        AcctPurTrdisc?: string;
        GtaxCode?: string;
        LtaxCode?: string;
        OrderCcy?: string;
        PayTerms?: string;
        UseAltNames?: boolean;
        WithCrLimit?: string;
        CreditLimit?: number;
        TradeDiscount?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        VendorCount?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        TrevisedDate?: string;
        TrevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        PutaxPcent?: number;
        AcctVendPutax?: string;
        Anlys5?: string;
        Anlys6?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        AcctTemp?: string;
        AcctApDeposit?: string;
    }
    namespace VendorGroupRow {
        const idProperty = "VendorGroup";
        const nameProperty = "Description";
        const localTextPrefix = "Enterprise.VendorGroup";
        namespace Fields {
            const Recnum: string;
            const VendorGroup: string;
            const Description: string;
            const Suspended: string;
            const AcctApVend: string;
            const AcctApDisc: string;
            const AcctApAdj: string;
            const AcctPurTrdisc: string;
            const GtaxCode: string;
            const LtaxCode: string;
            const OrderCcy: string;
            const PayTerms: string;
            const UseAltNames: string;
            const WithCrLimit: string;
            const CreditLimit: string;
            const TradeDiscount: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const VendorCount: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const TrevisedDate: string;
            const TrevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const PutaxPcent: string;
            const AcctVendPutax: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const AcctTemp: string;
            const AcctApDeposit: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    namespace VendorGroupService {
        const baseUrl = "Enterprise/VendorGroup";
        function Create(request: Serenity.SaveRequest<VendorGroupRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VendorGroupRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VendorGroupRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VendorGroupRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    interface VendorRow {
        Recnum?: number;
        VendorNo?: string;
        VendorName?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        PostCode?: string;
        TelNo?: string;
        FaxNo?: string;
        Email?: string;
        Suspended?: boolean;
        VendorGroup?: string;
        OrderCcy?: string;
        PayTerms?: string;
        GtaxCode?: string;
        LtaxCode?: string;
        AcctApVend?: string;
        AcctApDisc?: string;
        AcctApAdj?: string;
        AcctPurTrdisc?: string;
        UseAltNames?: string;
        WithCrLimit?: boolean;
        CreditLimit?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        ContactPerson?: string;
        ContactTitle?: string;
        TradeDiscount?: number;
        LeadTime?: number;
        BankName?: string;
        BankAcctNo?: string;
        AltVendorName?: string;
        AltAddress?: string;
        AltAddress2?: string;
        AltAddress3?: string;
        AltAddress4?: string;
        WithBacklog?: string;
        WithBalance?: string;
        OnOrderCount?: number;
        InvoAmtBal?: number;
        OpenAmtBal?: number;
        NetAmtBal?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        TrevisedDate?: string;
        TrevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        UseAltDesc?: string;
        PurPriceCtrl?: string;
        PurMaxDev?: number;
        PendAmtOrd?: number;
        PendAmtInv?: number;
        BuyerCode?: string;
        TaxationLv?: string;
        PutaxPcent?: number;
        AcctVendPutax?: string;
        IsApproved?: string;
        ApprovedBy?: string;
        Preapprove?: string;
        ApprovedDate?: string;
        Anlys5?: string;
        Anlys6?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        AcctTemp?: string;
        RefCompanyCode?: string;
        RefCustomerNo?: string;
        RefIntegrateComments?: boolean;
        RefIntegrateAnlys?: boolean;
        TaxTerms?: string;
        CustomTerms?: string;
        OverReceiptPcent?: number;
        AcctApDeposit?: string;
        VendorGroupRecnum?: number;
        VendorGroupDescription?: string;
        VendorGroupSuspended?: string;
        VendorGroupAcctApVend?: string;
        VendorGroupAcctApDisc?: string;
        VendorGroupAcctApAdj?: string;
        VendorGroupAcctPurTrdisc?: string;
        VendorGroupGtaxCode?: string;
        VendorGroupLtaxCode?: string;
        VendorGroupOrderCcy?: string;
        VendorGroupPayTerms?: string;
        VendorGroupUseAltNames?: string;
        VendorGroupWithCrLimit?: string;
        VendorGroupCreditLimit?: number;
        VendorGroupTradeDiscount?: number;
        VendorGroupAnlys1?: string;
        VendorGroupAnlys2?: string;
        VendorGroupAnlys3?: string;
        VendorGroupAnlys4?: string;
        VendorGroupVendorCount?: number;
        VendorGroupCreatedDate?: string;
        VendorGroupCreatedBy?: string;
        VendorGroupRevisedDate?: string;
        VendorGroupRevisedBy?: string;
        VendorGroupArevisedDate?: string;
        VendorGroupArevisedBy?: string;
        VendorGroupTrevisedDate?: string;
        VendorGroupTrevisedBy?: string;
        VendorGroupOwnerBranch?: string;
        VendorGroupSourceBranch?: string;
        VendorGroupPutaxPcent?: number;
        VendorGroupAcctVendPutax?: string;
        VendorGroupAnlys5?: string;
        VendorGroupAnlys6?: string;
        VendorGroupAnlys7?: string;
        VendorGroupAnlys8?: string;
        VendorGroupAnlys9?: string;
        VendorGroupAnlys10?: string;
        VendorGroupAcctTemp?: string;
        VendorGroupAcctApDeposit?: string;
    }
    namespace VendorRow {
        const idProperty = "VendorNo";
        const nameProperty = "VendorName";
        const localTextPrefix = "Enterprise.Vendor";
        const lookupKey = "Enterprise.VendorLookup";
        function getLookup(): Q.Lookup<VendorRow>;
        namespace Fields {
            const Recnum: string;
            const VendorNo: string;
            const VendorName: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const PostCode: string;
            const TelNo: string;
            const FaxNo: string;
            const Email: string;
            const Suspended: string;
            const VendorGroup: string;
            const OrderCcy: string;
            const PayTerms: string;
            const GtaxCode: string;
            const LtaxCode: string;
            const AcctApVend: string;
            const AcctApDisc: string;
            const AcctApAdj: string;
            const AcctPurTrdisc: string;
            const UseAltNames: string;
            const WithCrLimit: string;
            const CreditLimit: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const ContactPerson: string;
            const ContactTitle: string;
            const TradeDiscount: string;
            const LeadTime: string;
            const BankName: string;
            const BankAcctNo: string;
            const AltVendorName: string;
            const AltAddress: string;
            const AltAddress2: string;
            const AltAddress3: string;
            const AltAddress4: string;
            const WithBacklog: string;
            const WithBalance: string;
            const OnOrderCount: string;
            const InvoAmtBal: string;
            const OpenAmtBal: string;
            const NetAmtBal: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const TrevisedDate: string;
            const TrevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const UseAltDesc: string;
            const PurPriceCtrl: string;
            const PurMaxDev: string;
            const PendAmtOrd: string;
            const PendAmtInv: string;
            const BuyerCode: string;
            const TaxationLv: string;
            const PutaxPcent: string;
            const AcctVendPutax: string;
            const IsApproved: string;
            const ApprovedBy: string;
            const Preapprove: string;
            const ApprovedDate: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const AcctTemp: string;
            const RefCompanyCode: string;
            const RefCustomerNo: string;
            const RefIntegrateComments: string;
            const RefIntegrateAnlys: string;
            const TaxTerms: string;
            const CustomTerms: string;
            const OverReceiptPcent: string;
            const AcctApDeposit: string;
            const VendorGroupRecnum: string;
            const VendorGroupDescription: string;
            const VendorGroupSuspended: string;
            const VendorGroupAcctApVend: string;
            const VendorGroupAcctApDisc: string;
            const VendorGroupAcctApAdj: string;
            const VendorGroupAcctPurTrdisc: string;
            const VendorGroupGtaxCode: string;
            const VendorGroupLtaxCode: string;
            const VendorGroupOrderCcy: string;
            const VendorGroupPayTerms: string;
            const VendorGroupUseAltNames: string;
            const VendorGroupWithCrLimit: string;
            const VendorGroupCreditLimit: string;
            const VendorGroupTradeDiscount: string;
            const VendorGroupAnlys1: string;
            const VendorGroupAnlys2: string;
            const VendorGroupAnlys3: string;
            const VendorGroupAnlys4: string;
            const VendorGroupVendorCount: string;
            const VendorGroupCreatedDate: string;
            const VendorGroupCreatedBy: string;
            const VendorGroupRevisedDate: string;
            const VendorGroupRevisedBy: string;
            const VendorGroupArevisedDate: string;
            const VendorGroupArevisedBy: string;
            const VendorGroupTrevisedDate: string;
            const VendorGroupTrevisedBy: string;
            const VendorGroupOwnerBranch: string;
            const VendorGroupSourceBranch: string;
            const VendorGroupPutaxPcent: string;
            const VendorGroupAcctVendPutax: string;
            const VendorGroupAnlys5: string;
            const VendorGroupAnlys6: string;
            const VendorGroupAnlys7: string;
            const VendorGroupAnlys8: string;
            const VendorGroupAnlys9: string;
            const VendorGroupAnlys10: string;
            const VendorGroupAcctTemp: string;
            const VendorGroupAcctApDeposit: string;
        }
    }
}
declare namespace Matrix.Enterprise {
    namespace VendorService {
        const baseUrl = "Enterprise/Vendor";
        function Create(request: Serenity.SaveRequest<VendorRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VendorRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VendorRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VendorRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    interface MenuItemRow {
        Recnum?: number;
        UserGroup?: string;
        ProcessCode?: string;
        FunctionCode?: string;
        Description?: string;
        MenuType?: string;
        MenuCode?: string;
        UlRow?: number;
        UlCol?: number;
        LrRow?: number;
        LrCol?: number;
        ResponseType?: string;
        PolicyCode?: string;
        Suspended?: string;
    }
    namespace MenuItemRow {
        const idProperty = "Recnum";
        const nameProperty = "UserGroup";
        const localTextPrefix = "EnterpriseSys.MenuItem";
        namespace Fields {
            const Recnum: string;
            const UserGroup: string;
            const ProcessCode: string;
            const FunctionCode: string;
            const Description: string;
            const MenuType: string;
            const MenuCode: string;
            const UlRow: string;
            const UlCol: string;
            const LrRow: string;
            const LrCol: string;
            const ResponseType: string;
            const PolicyCode: string;
            const Suspended: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    interface MenuRow {
        Recnum?: number;
        UserGroup?: string;
        ProcessCode?: string;
        Description?: string;
        Node?: string;
        MenuCode?: string;
        MenuLevel?: number;
        ImageFile?: string;
        Suspended?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        CloseIcon?: number;
        OpenIcon?: number;
        UserGroupRecnum?: number;
        UserGroupDescription?: string;
        UserGroupSuspended?: string;
        UserGroupCreatedDate?: string;
        UserGroupCreatedBy?: string;
        UserGroupRevisedDate?: string;
        UserGroupRevisedBy?: string;
        UserGroupOwnerBranch?: string;
        UserGroupSourceBranch?: string;
        UserGroupLastModuleNo?: number;
        UserGroupEmail?: string;
        UserGroupViewOnly?: boolean;
    }
    namespace MenuRow {
        const idProperty = "Recnum";
        const nameProperty = "UserGroup";
        const localTextPrefix = "EnterpriseSys.Menu";
        namespace Fields {
            const Recnum: string;
            const UserGroup: string;
            const ProcessCode: string;
            const Description: string;
            const Node: string;
            const MenuCode: string;
            const MenuLevel: string;
            const ImageFile: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const CloseIcon: string;
            const OpenIcon: string;
            const UserGroupRecnum: string;
            const UserGroupDescription: string;
            const UserGroupSuspended: string;
            const UserGroupCreatedDate: string;
            const UserGroupCreatedBy: string;
            const UserGroupRevisedDate: string;
            const UserGroupRevisedBy: string;
            const UserGroupOwnerBranch: string;
            const UserGroupSourceBranch: string;
            const UserGroupLastModuleNo: string;
            const UserGroupEmail: string;
            const UserGroupViewOnly: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    interface MenuTypeRow {
        Recnum?: number;
        UserGroup?: string;
        ProcessCode?: string;
        MenuType?: string;
        Description?: string;
        MenuCode?: string;
        Suspended?: string;
        CloseIcon?: number;
        OpenIcon?: number;
    }
    namespace MenuTypeRow {
        const idProperty = "Recnum";
        const nameProperty = "UserGroup";
        const localTextPrefix = "EnterpriseSys.MenuType";
        namespace Fields {
            const Recnum: string;
            const UserGroup: string;
            const ProcessCode: string;
            const MenuType: string;
            const Description: string;
            const MenuCode: string;
            const Suspended: string;
            const CloseIcon: string;
            const OpenIcon: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    interface ReportDetailRequest extends Serenity.ServiceRequest {
        ReportId?: string;
    }
}
declare namespace Matrix.EnterpriseSys {
    interface ReportDetailResponse extends Serenity.ServiceResponse {
        Rows?: ReportDialogOptionRow[];
    }
}
declare namespace Matrix.EnterpriseSys {
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ReportDialogForm {
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        FilterBySalesmanCode: Serenity.BooleanEditor;
        FilterByBuyerCode: Serenity.BooleanEditor;
        ReportType: Serenity.IntegerEditor;
        DataSource: Serenity.IntegerEditor;
        ItemDetailList: ReportDialogOptionEditor;
    }
}
declare namespace Matrix.EnterpriseSys {
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogOptionForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ReportDialogOptionForm {
        OptionNo: Serenity.IntegerEditor;
        SeqNo: Serenity.IntegerEditor;
        Caption: Serenity.StringEditor;
        FieldName: Serenity.StringEditor;
        FieldType: Serenity.IntegerEditor;
        Style: Serenity.IntegerEditor;
        DataType: Serenity.IntegerEditor;
        CapsLock: Serenity.BooleanEditor;
        LookupName: Serenity.StringEditor;
        LookupFilterName: Serenity.StringEditor;
        Required: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.EnterpriseSys {
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogOptionItemForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ReportDialogOptionItemForm {
        OptionNo: Serenity.IntegerEditor;
        EntryNo: Serenity.IntegerEditor;
        Caption: Serenity.StringEditor;
        Value: Serenity.StringEditor;
    }
}
declare namespace Matrix.EnterpriseSys {
    interface ReportDialogOptionItemRow {
        ReportId?: string;
        OptionNo?: number;
        EntryNo?: number;
        Caption?: string;
        Value?: string;
    }
    namespace ReportDialogOptionItemRow {
        const idProperty = "ReportId";
        const nameProperty = "ReportId";
        const localTextPrefix = "EnterpriseSys.ReportDialogOptionItem";
        namespace Fields {
            const ReportId: string;
            const OptionNo: string;
            const EntryNo: string;
            const Caption: string;
            const Value: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    namespace ReportDialogOptionItemService {
        const baseUrl = "EnterpriseSys/ReportDialogOptionItem";
        function Create(request: Serenity.SaveRequest<ReportDialogOptionItemRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ReportDialogOptionItemRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ReportDialogOptionItemRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ReportDialogOptionItemRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    interface ReportDialogOptionRow {
        ReportId?: string;
        OptionNo?: number;
        SeqNo?: number;
        Caption?: string;
        FieldName?: string;
        FieldType?: number;
        Style?: number;
        DataType?: number;
        CapsLock?: boolean;
        LookupName?: string;
        LookupFilterName?: string;
        Required?: boolean;
    }
    namespace ReportDialogOptionRow {
        const idProperty = "OptionNo";
        const nameProperty = "Caption";
        const localTextPrefix = "EnterpriseSys.ReportDialogOption";
        namespace Fields {
            const ReportId: string;
            const OptionNo: string;
            const SeqNo: string;
            const Caption: string;
            const FieldName: string;
            const FieldType: string;
            const Style: string;
            const DataType: string;
            const CapsLock: string;
            const LookupName: string;
            const LookupFilterName: string;
            const Required: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    namespace ReportDialogOptionService {
        const baseUrl = "EnterpriseSys/ReportDialogOption";
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ReportDialogOptionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ReportDialogOptionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    interface ReportDialogRow {
        ReportId?: string;
        Description?: string;
        Suspended?: boolean;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        FilterBySalesmanCode?: boolean;
        FilterByBuyerCode?: boolean;
        ReportType?: number;
        DataSource?: number;
        ItemDetailList?: ReportDialogOptionRow[];
    }
    namespace ReportDialogRow {
        const idProperty = "ReportId";
        const nameProperty = "Description";
        const localTextPrefix = "EnterpriseSys.ReportDialog";
        namespace Fields {
            const ReportId: string;
            const Description: string;
            const Suspended: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const FilterBySalesmanCode: string;
            const FilterByBuyerCode: string;
            const ReportType: string;
            const DataSource: string;
            const ItemDetailList: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    namespace ReportDialogService {
        const baseUrl = "EnterpriseSys/ReportDialog";
        function Create(request: Serenity.SaveRequest<ReportDialogRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ReportDialogRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ReportDialogRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ReportDialogRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function ReportDetail(request: ReportDetailRequest, onSuccess?: (response: ReportDetailResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function ReportPreview(request: ReportPreviewRequest, onSuccess?: (response: ReportDetailResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
            const ReportDetail: string;
            const ReportPreview: string;
        }
    }
}
declare namespace Matrix.EnterpriseSys {
    interface ReportPreviewRequest extends Serenity.ServiceRequest {
        ReportId?: string;
        Values?: ReportPreviewUserInput[];
    }
}
declare namespace Matrix.EnterpriseSys {
    interface ReportPreviewUserInput {
        OptionNo?: number;
        Value?: any;
    }
}
declare namespace Matrix.Enterprisesys {
    interface SystemFunctionRow {
        Recnum?: number;
        ModuleCode?: string;
        FunctionNo?: number;
        FunctionCode?: string;
        Description?: string;
        Suspended?: string;
        SeriesOption?: string;
        SeriesCode?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Icon?: number;
        File?: string;
        Page?: number;
        Attachment?: string;
        Extension?: string;
        ModuleCodeRecnum?: number;
        ModuleCodeDescription?: string;
        ModuleCodeDesktopBmp?: string;
        ModuleCodeInstalled?: string;
        ModuleCodeLastLineNo?: number;
        ModuleCodeCreatedDate?: string;
        ModuleCodeCreatedBy?: string;
        ModuleCodeRevisedDate?: string;
        ModuleCodeRevisedBy?: string;
        ModuleCodeOwnerBranch?: string;
        ModuleCodeSourceBranch?: string;
    }
    namespace SystemFunctionRow {
        const idProperty = "FunctionCode";
        const nameProperty = "Description";
        const localTextPrefix = "Enterprisesys.SystemFunction";
        namespace Fields {
            const Recnum: string;
            const ModuleCode: string;
            const FunctionNo: string;
            const FunctionCode: string;
            const Description: string;
            const Suspended: string;
            const SeriesOption: string;
            const SeriesCode: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Icon: string;
            const File: string;
            const Page: string;
            const Attachment: string;
            const Extension: string;
            const ModuleCodeRecnum: string;
            const ModuleCodeDescription: string;
            const ModuleCodeDesktopBmp: string;
            const ModuleCodeInstalled: string;
            const ModuleCodeLastLineNo: string;
            const ModuleCodeCreatedDate: string;
            const ModuleCodeCreatedBy: string;
            const ModuleCodeRevisedDate: string;
            const ModuleCodeRevisedBy: string;
            const ModuleCodeOwnerBranch: string;
            const ModuleCodeSourceBranch: string;
        }
    }
}
declare namespace Matrix {
    interface ExcelImportRequest extends Serenity.ServiceRequest {
        FileName?: string;
    }
}
declare namespace Matrix {
    interface ExcelImportResponse extends Serenity.ServiceResponse {
        Inserted?: number;
        Updated?: number;
        ErrorList?: string[];
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountReconciliationAdjustmentForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountReconciliationAdjustmentForm {
        AdjAcctNo: Serenity.StringEditor;
        RefNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        AcctNo: Serenity.StringEditor;
        CostCentre: Serenity.StringEditor;
        Dept: Serenity.StringEditor;
        LineRef: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        Debit: Serenity.DecimalEditor;
        Credit: Serenity.DecimalEditor;
        CompLdgDebit: Serenity.DecimalEditor;
        CompLdgCredit: Serenity.DecimalEditor;
        LedgerDebit: Serenity.DecimalEditor;
        LedgerCredit: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        Particulars: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountReconciliationAdjustmentRow {
        Recnum?: number;
        AdjAcctNo?: string;
        RefNo?: string;
        LineNo?: number;
        AcctNo?: string;
        CostCentre?: string;
        Dept?: string;
        LineRef?: string;
        Ccy?: string;
        ExchRate?: number;
        Debit?: number;
        Credit?: number;
        CompLdgDebit?: number;
        CompLdgCredit?: number;
        LedgerDebit?: number;
        LedgerCredit?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
    }
    namespace AccountReconciliationAdjustmentRow {
        const idProperty = "Recnum";
        const nameProperty = "AdjAcctNo";
        const localTextPrefix = "Finance.AccountReconciliationAdjustment";
        namespace Fields {
            const Recnum: string;
            const AdjAcctNo: string;
            const RefNo: string;
            const LineNo: string;
            const AcctNo: string;
            const CostCentre: string;
            const Dept: string;
            const LineRef: string;
            const Ccy: string;
            const ExchRate: string;
            const Debit: string;
            const Credit: string;
            const CompLdgDebit: string;
            const CompLdgCredit: string;
            const LedgerDebit: string;
            const LedgerCredit: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountReconciliationAdjustmentService {
        const baseUrl = "Finance/AccountReconciliationAdjustment";
        function Create(request: Serenity.SaveRequest<AccountReconciliationAdjustmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountReconciliationAdjustmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountReconciliationAdjustmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountReconciliationAdjustmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountReconciliationDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountReconciliationDetailForm {
        AcctNo: Serenity.StringEditor;
        RefNo: Serenity.StringEditor;
        VoucherDate: Serenity.DateEditor;
        JournalNo: Serenity.DecimalEditor;
        LineNo: Serenity.DecimalEditor;
        VoucherType: Serenity.StringEditor;
        VoucherNo: Serenity.StringEditor;
        Reference: Serenity.StringEditor;
        LineRef: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Debit: Serenity.DecimalEditor;
        Credit: Serenity.DecimalEditor;
        LedgerAmt: Serenity.DecimalEditor;
        Sign: Serenity.StringEditor;
        IncludeThis: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        Particulars: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountReconciliationDetailRow {
        Recnum?: number;
        AcctNo?: string;
        RefNo?: string;
        VoucherDate?: string;
        JournalNo?: number;
        LineNo?: number;
        VoucherType?: string;
        VoucherNo?: string;
        Reference?: string;
        LineRef?: string;
        Ccy?: string;
        Debit?: number;
        Credit?: number;
        LedgerAmt?: number;
        Sign?: string;
        IncludeThis?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
    }
    namespace AccountReconciliationDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.AccountReconciliationDetail";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const RefNo: string;
            const VoucherDate: string;
            const JournalNo: string;
            const LineNo: string;
            const VoucherType: string;
            const VoucherNo: string;
            const Reference: string;
            const LineRef: string;
            const Ccy: string;
            const Debit: string;
            const Credit: string;
            const LedgerAmt: string;
            const Sign: string;
            const IncludeThis: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountReconciliationDetailService {
        const baseUrl = "Finance/AccountReconciliationDetail";
        function Create(request: Serenity.SaveRequest<AccountReconciliationDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountReconciliationDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountReconciliationDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountReconciliationDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    class AccountReconciliationForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountReconciliationForm {
        AcctNo: Serenity.StringEditor;
        RefNo: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        AcctName: Serenity.StringEditor;
        TranDate: Serenity.DateEditor;
        BeginAmt: Serenity.DecimalEditor;
        BeginSign: Serenity.StringEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        AllocDebit: Serenity.DecimalEditor;
        AllocCredit: Serenity.DecimalEditor;
        AdjustDebit: Serenity.DecimalEditor;
        AdjustCredit: Serenity.DecimalEditor;
        EndAmt: Serenity.DecimalEditor;
        EndSign: Serenity.StringEditor;
        EndAllocAmt: Serenity.DecimalEditor;
        EndAllocSign: Serenity.StringEditor;
        DetailCount: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        CutoffDate: Serenity.DateEditor;
        PostedDate: Serenity.DateEditor;
        PostedBy: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountReconciliationRow {
        Recnum?: number;
        AcctNo?: string;
        RefNo?: string;
        Posted?: string;
        AcctName?: string;
        TranDate?: string;
        BeginAmt?: number;
        BeginSign?: string;
        TotalDebit?: number;
        TotalCredit?: number;
        AllocDebit?: number;
        AllocCredit?: number;
        AdjustDebit?: number;
        AdjustCredit?: number;
        EndAmt?: number;
        EndSign?: string;
        EndAllocAmt?: number;
        EndAllocSign?: string;
        DetailCount?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        CutoffDate?: string;
        PostedDate?: string;
        PostedBy?: string;
    }
    namespace AccountReconciliationRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.AccountReconciliation";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const RefNo: string;
            const Posted: string;
            const AcctName: string;
            const TranDate: string;
            const BeginAmt: string;
            const BeginSign: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const AllocDebit: string;
            const AllocCredit: string;
            const AdjustDebit: string;
            const AdjustCredit: string;
            const EndAmt: string;
            const EndSign: string;
            const EndAllocAmt: string;
            const EndAllocSign: string;
            const DetailCount: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const CutoffDate: string;
            const PostedDate: string;
            const PostedBy: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountReconciliationService {
        const baseUrl = "Finance/AccountReconciliation";
        function Create(request: Serenity.SaveRequest<AccountReconciliationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountReconciliationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountReconciliationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountReconciliationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayableInvoiceDetailForm {
        ControlNo: Serenity.StringEditor;
        GrnNo: Serenity.StringEditor;
        EntryNo: Serenity.DecimalEditor;
        Posted: Serenity.StringEditor;
        Returned: Serenity.StringEditor;
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        Qty: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        Ptax: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        AtaxAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        PtaxAmt: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocPtaxAmt: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        LocAtaxAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        GrnItemAmt: Serenity.DecimalEditor;
        LgrnItemAmt: Serenity.DecimalEditor;
        VariaAmt: Serenity.DecimalEditor;
        LocVariaAmt: Serenity.DecimalEditor;
        AcctPurchase: Serenity.StringEditor;
        AcctLdisc: Serenity.StringEditor;
        AcctPtax: Serenity.StringEditor;
        AcctAtax: Serenity.StringEditor;
        AcctVariance: Serenity.StringEditor;
        ReturnQty: Serenity.DecimalEditor;
        ReturnAmt: Serenity.DecimalEditor;
        LreturnAmt: Serenity.DecimalEditor;
        PutaxPcent: Serenity.DecimalEditor;
        PutaxAmt: Serenity.DecimalEditor;
        LocPutaxAmt: Serenity.DecimalEditor;
        AcctPutax: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayableInvoiceDetailRow {
        Recnum?: number;
        ControlNo?: string;
        GrnNo?: string;
        EntryNo?: number;
        Posted?: string;
        Returned?: string;
        OrderNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        Qty?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        GrnItemAmt?: number;
        LgrnItemAmt?: number;
        VariaAmt?: number;
        LocVariaAmt?: number;
        AcctPurchase?: string;
        AcctLdisc?: string;
        AcctPtax?: string;
        AcctAtax?: string;
        AcctVariance?: string;
        ReturnQty?: number;
        ReturnAmt?: number;
        LreturnAmt?: number;
        PutaxPcent?: number;
        PutaxAmt?: number;
        LocPutaxAmt?: number;
        AcctPutax?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        ControlNoRecnum?: number;
        ControlNoMiscellaneous?: string;
        ControlNoPosted?: string;
        ControlNoClosed?: string;
        ControlNoReturned?: string;
        ControlNoVendorNo?: string;
        ControlNoVendorName?: string;
        ControlNoInvoiceNo?: string;
        ControlNoInvoiceDate?: string;
        ControlNoReceivedDate?: string;
        ControlNoPeriod?: string;
        ControlNoFiscalYear?: number;
        ControlNoPeriodNo?: number;
        ControlNoPayTerms?: string;
        ControlNoDiscPercent?: number;
        ControlNoDiscDays?: number;
        ControlNoNetDays?: number;
        ControlNoDiscountDate?: string;
        ControlNoDueDate?: string;
        ControlNoPlannedDate?: string;
        ControlNoPaymentBranch?: string;
        ControlNoCcy?: string;
        ControlNoExchRate?: number;
        ControlNoTotPriceAmt?: number;
        ControlNoTotPtaxAmt?: number;
        ControlNoTotExtPrice?: number;
        ControlNoTotLdiscAmt?: number;
        ControlNoTotAtaxAmt?: number;
        ControlNoTotItemAmt?: number;
        ControlNoTotTdiscAmt?: number;
        ControlNoNetTradeAmt?: number;
        ControlNoTotChgsAmt?: number;
        ControlNoNetOrdrAmt?: number;
        ControlNoTotGtaxAmt?: number;
        ControlNoNetInvoAmt?: number;
        ControlNoDpsApplied?: number;
        ControlNoNetBalAmt?: number;
        ControlNoLocPriceAmt?: number;
        ControlNoLocPtaxAmt?: number;
        ControlNoLocExtPrice?: number;
        ControlNoLocLdiscAmt?: number;
        ControlNoLocAtaxAmt?: number;
        ControlNoLocItemAmt?: number;
        ControlNoLocTdiscAmt?: number;
        ControlNoLocChgsAmt?: number;
        ControlNoLocGtaxAmt?: number;
        ControlNoLocInvoAmt?: number;
        ControlNoLocDpsApplied?: number;
        ControlNoGrnNetAmt?: number;
        ControlNoLgrnNetAmt?: number;
        ControlNoVariaAmt?: number;
        ControlNoLvariaAmt?: number;
        ControlNoItemVariaAmt?: number;
        ControlNoLitemVariaAmt?: number;
        ControlNoChgsVariaAmt?: number;
        ControlNoLchgsVariaAmt?: number;
        ControlNoLastLineNo?: number;
        ControlNoCreatedDate?: string;
        ControlNoCreatedBy?: string;
        ControlNoRevisedDate?: string;
        ControlNoRevisedBy?: string;
        ControlNoPostedDate?: string;
        ControlNoPostedBy?: string;
        ControlNoHold?: string;
        ControlNoHoldUntil?: string;
        ControlNoHoldDate?: string;
        ControlNoHoldBy?: string;
        ControlNoAcctVendor?: string;
        ControlNoAcctTdisc?: string;
        ControlNoAcctGtax?: string;
        ControlNoAcctVariance?: string;
        ControlNoSettledAmt?: number;
        ControlNoLsettledAmt?: number;
        ControlNoTermDiscAmt?: number;
        ControlNoLtermDiscAmt?: number;
        ControlNoReturnAmt?: number;
        ControlNoLreturnAmt?: number;
        ControlNoBalAmt?: number;
        ControlNoBalAmtLocal?: number;
        ControlNoOverAllocAmt?: number;
        ControlNoLoverAllocAmt?: number;
        ControlNoBatchSelect?: string;
        ControlNoGlLink?: string;
        ControlNoGlLinkType?: string;
        ControlNoGlLinkNo?: string;
        ControlNoLastLogNo?: number;
        ControlNoLockType?: string;
        ControlNoLockRefNo?: string;
        ControlNoHoldReason?: string;
        ControlNoOwnerBranch?: string;
        ControlNoSourceBranch?: string;
        ControlNoParticulars?: string;
        ControlNoCheckCrlimit?: string;
        ControlNoCheckCrbal?: number;
        ControlNoAcctPutax?: string;
        ControlNoPutaxType?: string;
        ControlNoGputaxPcent?: number;
        ControlNoTotGputaxAmt?: number;
        ControlNoTotLputaxAmt?: number;
        ControlNoLocGputaxAmt?: number;
        ControlNoLocLputaxAmt?: number;
        ControlNoGrnPutaxType?: string;
        ControlNoGrnGputaxPcent?: number;
        ControlNoGrnCount?: number;
        ControlNoAiLink?: string;
        ControlNoAiLinkType?: string;
        ControlNoAiLinkNo?: string;
        ControlNoAnlys9?: string;
        ControlNoAnlys10?: string;
        ControlNoAnlys11?: string;
        ControlNoAnlys12?: string;
        ControlNoAnlys13?: string;
        ControlNoAnlys14?: string;
        ControlNoAnlys15?: string;
        ControlNoAnlys16?: string;
        ControlNoAnlys17?: string;
        ControlNoAnlys18?: string;
        ControlNoPoNo?: string;
        ControlNoOriginCountry?: string;
    }
    namespace AccountsPayableInvoiceDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "ControlNo";
        const localTextPrefix = "Finance.AccountsPayableInvoiceDetail";
        namespace Fields {
            const Recnum: string;
            const ControlNo: string;
            const GrnNo: string;
            const EntryNo: string;
            const Posted: string;
            const Returned: string;
            const OrderNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const Qty: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const GrnItemAmt: string;
            const LgrnItemAmt: string;
            const VariaAmt: string;
            const LocVariaAmt: string;
            const AcctPurchase: string;
            const AcctLdisc: string;
            const AcctPtax: string;
            const AcctAtax: string;
            const AcctVariance: string;
            const ReturnQty: string;
            const ReturnAmt: string;
            const LreturnAmt: string;
            const PutaxPcent: string;
            const PutaxAmt: string;
            const LocPutaxAmt: string;
            const AcctPutax: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const ControlNoRecnum: string;
            const ControlNoMiscellaneous: string;
            const ControlNoPosted: string;
            const ControlNoClosed: string;
            const ControlNoReturned: string;
            const ControlNoVendorNo: string;
            const ControlNoVendorName: string;
            const ControlNoInvoiceNo: string;
            const ControlNoInvoiceDate: string;
            const ControlNoReceivedDate: string;
            const ControlNoPeriod: string;
            const ControlNoFiscalYear: string;
            const ControlNoPeriodNo: string;
            const ControlNoPayTerms: string;
            const ControlNoDiscPercent: string;
            const ControlNoDiscDays: string;
            const ControlNoNetDays: string;
            const ControlNoDiscountDate: string;
            const ControlNoDueDate: string;
            const ControlNoPlannedDate: string;
            const ControlNoPaymentBranch: string;
            const ControlNoCcy: string;
            const ControlNoExchRate: string;
            const ControlNoTotPriceAmt: string;
            const ControlNoTotPtaxAmt: string;
            const ControlNoTotExtPrice: string;
            const ControlNoTotLdiscAmt: string;
            const ControlNoTotAtaxAmt: string;
            const ControlNoTotItemAmt: string;
            const ControlNoTotTdiscAmt: string;
            const ControlNoNetTradeAmt: string;
            const ControlNoTotChgsAmt: string;
            const ControlNoNetOrdrAmt: string;
            const ControlNoTotGtaxAmt: string;
            const ControlNoNetInvoAmt: string;
            const ControlNoDpsApplied: string;
            const ControlNoNetBalAmt: string;
            const ControlNoLocPriceAmt: string;
            const ControlNoLocPtaxAmt: string;
            const ControlNoLocExtPrice: string;
            const ControlNoLocLdiscAmt: string;
            const ControlNoLocAtaxAmt: string;
            const ControlNoLocItemAmt: string;
            const ControlNoLocTdiscAmt: string;
            const ControlNoLocChgsAmt: string;
            const ControlNoLocGtaxAmt: string;
            const ControlNoLocInvoAmt: string;
            const ControlNoLocDpsApplied: string;
            const ControlNoGrnNetAmt: string;
            const ControlNoLgrnNetAmt: string;
            const ControlNoVariaAmt: string;
            const ControlNoLvariaAmt: string;
            const ControlNoItemVariaAmt: string;
            const ControlNoLitemVariaAmt: string;
            const ControlNoChgsVariaAmt: string;
            const ControlNoLchgsVariaAmt: string;
            const ControlNoLastLineNo: string;
            const ControlNoCreatedDate: string;
            const ControlNoCreatedBy: string;
            const ControlNoRevisedDate: string;
            const ControlNoRevisedBy: string;
            const ControlNoPostedDate: string;
            const ControlNoPostedBy: string;
            const ControlNoHold: string;
            const ControlNoHoldUntil: string;
            const ControlNoHoldDate: string;
            const ControlNoHoldBy: string;
            const ControlNoAcctVendor: string;
            const ControlNoAcctTdisc: string;
            const ControlNoAcctGtax: string;
            const ControlNoAcctVariance: string;
            const ControlNoSettledAmt: string;
            const ControlNoLsettledAmt: string;
            const ControlNoTermDiscAmt: string;
            const ControlNoLtermDiscAmt: string;
            const ControlNoReturnAmt: string;
            const ControlNoLreturnAmt: string;
            const ControlNoBalAmt: string;
            const ControlNoBalAmtLocal: string;
            const ControlNoOverAllocAmt: string;
            const ControlNoLoverAllocAmt: string;
            const ControlNoBatchSelect: string;
            const ControlNoGlLink: string;
            const ControlNoGlLinkType: string;
            const ControlNoGlLinkNo: string;
            const ControlNoLastLogNo: string;
            const ControlNoLockType: string;
            const ControlNoLockRefNo: string;
            const ControlNoHoldReason: string;
            const ControlNoOwnerBranch: string;
            const ControlNoSourceBranch: string;
            const ControlNoParticulars: string;
            const ControlNoCheckCrlimit: string;
            const ControlNoCheckCrbal: string;
            const ControlNoAcctPutax: string;
            const ControlNoPutaxType: string;
            const ControlNoGputaxPcent: string;
            const ControlNoTotGputaxAmt: string;
            const ControlNoTotLputaxAmt: string;
            const ControlNoLocGputaxAmt: string;
            const ControlNoLocLputaxAmt: string;
            const ControlNoGrnPutaxType: string;
            const ControlNoGrnGputaxPcent: string;
            const ControlNoGrnCount: string;
            const ControlNoAiLink: string;
            const ControlNoAiLinkType: string;
            const ControlNoAiLinkNo: string;
            const ControlNoAnlys9: string;
            const ControlNoAnlys10: string;
            const ControlNoAnlys11: string;
            const ControlNoAnlys12: string;
            const ControlNoAnlys13: string;
            const ControlNoAnlys14: string;
            const ControlNoAnlys15: string;
            const ControlNoAnlys16: string;
            const ControlNoAnlys17: string;
            const ControlNoAnlys18: string;
            const ControlNoPoNo: string;
            const ControlNoOriginCountry: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayableInvoiceDetailService {
        const baseUrl = "Finance/AccountsPayableInvoiceDetail";
        function Create(request: Serenity.SaveRequest<AccountsPayableInvoiceDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayableInvoiceDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayableInvoiceDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayableInvoiceDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayableInvoiceForm {
        ControlNo: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        InvoiceNo: Serenity.StringEditor;
        InvoiceDate: Serenity.DateEditor;
        ReceivedDate: Serenity.DateEditor;
        Period: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PayTerms: Serenity.StringEditor;
        DiscPercent: Serenity.DecimalEditor;
        DiscDays: Serenity.DecimalEditor;
        NetDays: Serenity.DecimalEditor;
        DiscountDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        PlannedDate: Serenity.DateEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        DetailList: AccountsPayableInvoiceOrderEditor;
        ItemDetailList: AccountsPayableInvoiceDetailEditor;
        Particulars: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceOrderForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayableInvoiceOrderForm {
        ControlNo: Serenity.StringEditor;
        GrnNo: Serenity.StringEditor;
        OrderNo: Serenity.StringEditor;
        TotPriceAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TotExtPrice: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        TotAtaxAmt: Serenity.DecimalEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetOrdrAmt: Serenity.DecimalEditor;
        TotGtaxAmt: Serenity.DecimalEditor;
        NetInvoAmt: Serenity.DecimalEditor;
        DpsCover: Serenity.DecimalEditor;
        DpsPcent: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        LocDpsApplied: Serenity.DecimalEditor;
        PutaxType: Serenity.StringEditor;
        GputaxPcent: Serenity.DecimalEditor;
        TotGputaxAmt: Serenity.DecimalEditor;
        TotLputaxAmt: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        Anlys13: Serenity.StringEditor;
        Anlys14: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayableInvoiceOrderRow {
        Recnum?: number;
        ControlNo?: string;
        GrnNo?: string;
        OrderNo?: string;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetInvoAmt?: number;
        DpsCover?: number;
        DpsPcent?: number;
        DpsApplied?: number;
        NetBalAmt?: number;
        LocDpsApplied?: number;
        PutaxType?: string;
        GputaxPcent?: number;
        TotGputaxAmt?: number;
        TotLputaxAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        ControlNoRecnum?: number;
        ControlNoMiscellaneous?: string;
        ControlNoPosted?: string;
        ControlNoClosed?: string;
        ControlNoReturned?: string;
        ControlNoVendorNo?: string;
        ControlNoVendorName?: string;
        ControlNoInvoiceNo?: string;
        ControlNoInvoiceDate?: string;
        ControlNoReceivedDate?: string;
        ControlNoPeriod?: string;
        ControlNoFiscalYear?: number;
        ControlNoPeriodNo?: number;
        ControlNoPayTerms?: string;
        ControlNoDiscPercent?: number;
        ControlNoDiscDays?: number;
        ControlNoNetDays?: number;
        ControlNoDiscountDate?: string;
        ControlNoDueDate?: string;
        ControlNoPlannedDate?: string;
        ControlNoPaymentBranch?: string;
        ControlNoCcy?: string;
        ControlNoExchRate?: number;
        ControlNoTotPriceAmt?: number;
        ControlNoTotPtaxAmt?: number;
        ControlNoTotExtPrice?: number;
        ControlNoTotLdiscAmt?: number;
        ControlNoTotAtaxAmt?: number;
        ControlNoTotItemAmt?: number;
        ControlNoTotTdiscAmt?: number;
        ControlNoNetTradeAmt?: number;
        ControlNoTotChgsAmt?: number;
        ControlNoNetOrdrAmt?: number;
        ControlNoTotGtaxAmt?: number;
        ControlNoNetInvoAmt?: number;
        ControlNoDpsApplied?: number;
        ControlNoNetBalAmt?: number;
        ControlNoLocPriceAmt?: number;
        ControlNoLocPtaxAmt?: number;
        ControlNoLocExtPrice?: number;
        ControlNoLocLdiscAmt?: number;
        ControlNoLocAtaxAmt?: number;
        ControlNoLocItemAmt?: number;
        ControlNoLocTdiscAmt?: number;
        ControlNoLocChgsAmt?: number;
        ControlNoLocGtaxAmt?: number;
        ControlNoLocInvoAmt?: number;
        ControlNoLocDpsApplied?: number;
        ControlNoGrnNetAmt?: number;
        ControlNoLgrnNetAmt?: number;
        ControlNoVariaAmt?: number;
        ControlNoLvariaAmt?: number;
        ControlNoItemVariaAmt?: number;
        ControlNoLitemVariaAmt?: number;
        ControlNoChgsVariaAmt?: number;
        ControlNoLchgsVariaAmt?: number;
        ControlNoLastLineNo?: number;
        ControlNoCreatedDate?: string;
        ControlNoCreatedBy?: string;
        ControlNoRevisedDate?: string;
        ControlNoRevisedBy?: string;
        ControlNoPostedDate?: string;
        ControlNoPostedBy?: string;
        ControlNoHold?: string;
        ControlNoHoldUntil?: string;
        ControlNoHoldDate?: string;
        ControlNoHoldBy?: string;
        ControlNoAcctVendor?: string;
        ControlNoAcctTdisc?: string;
        ControlNoAcctGtax?: string;
        ControlNoAcctVariance?: string;
        ControlNoSettledAmt?: number;
        ControlNoLsettledAmt?: number;
        ControlNoTermDiscAmt?: number;
        ControlNoLtermDiscAmt?: number;
        ControlNoReturnAmt?: number;
        ControlNoLreturnAmt?: number;
        ControlNoBalAmt?: number;
        ControlNoBalAmtLocal?: number;
        ControlNoOverAllocAmt?: number;
        ControlNoLoverAllocAmt?: number;
        ControlNoBatchSelect?: string;
        ControlNoGlLink?: string;
        ControlNoGlLinkType?: string;
        ControlNoGlLinkNo?: string;
        ControlNoLastLogNo?: number;
        ControlNoLockType?: string;
        ControlNoLockRefNo?: string;
        ControlNoHoldReason?: string;
        ControlNoOwnerBranch?: string;
        ControlNoSourceBranch?: string;
        ControlNoParticulars?: string;
        ControlNoCheckCrlimit?: string;
        ControlNoCheckCrbal?: number;
        ControlNoAcctPutax?: string;
        ControlNoPutaxType?: string;
        ControlNoGputaxPcent?: number;
        ControlNoTotGputaxAmt?: number;
        ControlNoTotLputaxAmt?: number;
        ControlNoLocGputaxAmt?: number;
        ControlNoLocLputaxAmt?: number;
        ControlNoGrnPutaxType?: string;
        ControlNoGrnGputaxPcent?: number;
        ControlNoGrnCount?: number;
        ControlNoAiLink?: string;
        ControlNoAiLinkType?: string;
        ControlNoAiLinkNo?: string;
        ControlNoAnlys9?: string;
        ControlNoAnlys10?: string;
        ControlNoAnlys11?: string;
        ControlNoAnlys12?: string;
        ControlNoAnlys13?: string;
        ControlNoAnlys14?: string;
        ControlNoAnlys15?: string;
        ControlNoAnlys16?: string;
        ControlNoAnlys17?: string;
        ControlNoAnlys18?: string;
        ControlNoPoNo?: string;
        ControlNoOriginCountry?: string;
    }
    namespace AccountsPayableInvoiceOrderRow {
        const idProperty = "Recnum";
        const nameProperty = "ControlNo";
        const localTextPrefix = "Finance.AccountsPayableInvoiceOrder";
        namespace Fields {
            const Recnum: string;
            const ControlNo: string;
            const GrnNo: string;
            const OrderNo: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetInvoAmt: string;
            const DpsCover: string;
            const DpsPcent: string;
            const DpsApplied: string;
            const NetBalAmt: string;
            const LocDpsApplied: string;
            const PutaxType: string;
            const GputaxPcent: string;
            const TotGputaxAmt: string;
            const TotLputaxAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const ControlNoRecnum: string;
            const ControlNoMiscellaneous: string;
            const ControlNoPosted: string;
            const ControlNoClosed: string;
            const ControlNoReturned: string;
            const ControlNoVendorNo: string;
            const ControlNoVendorName: string;
            const ControlNoInvoiceNo: string;
            const ControlNoInvoiceDate: string;
            const ControlNoReceivedDate: string;
            const ControlNoPeriod: string;
            const ControlNoFiscalYear: string;
            const ControlNoPeriodNo: string;
            const ControlNoPayTerms: string;
            const ControlNoDiscPercent: string;
            const ControlNoDiscDays: string;
            const ControlNoNetDays: string;
            const ControlNoDiscountDate: string;
            const ControlNoDueDate: string;
            const ControlNoPlannedDate: string;
            const ControlNoPaymentBranch: string;
            const ControlNoCcy: string;
            const ControlNoExchRate: string;
            const ControlNoTotPriceAmt: string;
            const ControlNoTotPtaxAmt: string;
            const ControlNoTotExtPrice: string;
            const ControlNoTotLdiscAmt: string;
            const ControlNoTotAtaxAmt: string;
            const ControlNoTotItemAmt: string;
            const ControlNoTotTdiscAmt: string;
            const ControlNoNetTradeAmt: string;
            const ControlNoTotChgsAmt: string;
            const ControlNoNetOrdrAmt: string;
            const ControlNoTotGtaxAmt: string;
            const ControlNoNetInvoAmt: string;
            const ControlNoDpsApplied: string;
            const ControlNoNetBalAmt: string;
            const ControlNoLocPriceAmt: string;
            const ControlNoLocPtaxAmt: string;
            const ControlNoLocExtPrice: string;
            const ControlNoLocLdiscAmt: string;
            const ControlNoLocAtaxAmt: string;
            const ControlNoLocItemAmt: string;
            const ControlNoLocTdiscAmt: string;
            const ControlNoLocChgsAmt: string;
            const ControlNoLocGtaxAmt: string;
            const ControlNoLocInvoAmt: string;
            const ControlNoLocDpsApplied: string;
            const ControlNoGrnNetAmt: string;
            const ControlNoLgrnNetAmt: string;
            const ControlNoVariaAmt: string;
            const ControlNoLvariaAmt: string;
            const ControlNoItemVariaAmt: string;
            const ControlNoLitemVariaAmt: string;
            const ControlNoChgsVariaAmt: string;
            const ControlNoLchgsVariaAmt: string;
            const ControlNoLastLineNo: string;
            const ControlNoCreatedDate: string;
            const ControlNoCreatedBy: string;
            const ControlNoRevisedDate: string;
            const ControlNoRevisedBy: string;
            const ControlNoPostedDate: string;
            const ControlNoPostedBy: string;
            const ControlNoHold: string;
            const ControlNoHoldUntil: string;
            const ControlNoHoldDate: string;
            const ControlNoHoldBy: string;
            const ControlNoAcctVendor: string;
            const ControlNoAcctTdisc: string;
            const ControlNoAcctGtax: string;
            const ControlNoAcctVariance: string;
            const ControlNoSettledAmt: string;
            const ControlNoLsettledAmt: string;
            const ControlNoTermDiscAmt: string;
            const ControlNoLtermDiscAmt: string;
            const ControlNoReturnAmt: string;
            const ControlNoLreturnAmt: string;
            const ControlNoBalAmt: string;
            const ControlNoBalAmtLocal: string;
            const ControlNoOverAllocAmt: string;
            const ControlNoLoverAllocAmt: string;
            const ControlNoBatchSelect: string;
            const ControlNoGlLink: string;
            const ControlNoGlLinkType: string;
            const ControlNoGlLinkNo: string;
            const ControlNoLastLogNo: string;
            const ControlNoLockType: string;
            const ControlNoLockRefNo: string;
            const ControlNoHoldReason: string;
            const ControlNoOwnerBranch: string;
            const ControlNoSourceBranch: string;
            const ControlNoParticulars: string;
            const ControlNoCheckCrlimit: string;
            const ControlNoCheckCrbal: string;
            const ControlNoAcctPutax: string;
            const ControlNoPutaxType: string;
            const ControlNoGputaxPcent: string;
            const ControlNoTotGputaxAmt: string;
            const ControlNoTotLputaxAmt: string;
            const ControlNoLocGputaxAmt: string;
            const ControlNoLocLputaxAmt: string;
            const ControlNoGrnPutaxType: string;
            const ControlNoGrnGputaxPcent: string;
            const ControlNoGrnCount: string;
            const ControlNoAiLink: string;
            const ControlNoAiLinkType: string;
            const ControlNoAiLinkNo: string;
            const ControlNoAnlys9: string;
            const ControlNoAnlys10: string;
            const ControlNoAnlys11: string;
            const ControlNoAnlys12: string;
            const ControlNoAnlys13: string;
            const ControlNoAnlys14: string;
            const ControlNoAnlys15: string;
            const ControlNoAnlys16: string;
            const ControlNoAnlys17: string;
            const ControlNoAnlys18: string;
            const ControlNoPoNo: string;
            const ControlNoOriginCountry: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayableInvoiceOrderService {
        const baseUrl = "Finance/AccountsPayableInvoiceOrder";
        function Create(request: Serenity.SaveRequest<AccountsPayableInvoiceOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayableInvoiceOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayableInvoiceOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayableInvoiceOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayableInvoiceRow {
        DetailList?: AccountsPayableInvoiceOrderRow[];
        ItemDetailList?: AccountsPayableInvoiceDetailRow[];
        Recnum?: number;
        ControlNo?: string;
        Miscellaneous?: string;
        Posted?: string;
        Closed?: string;
        Returned?: string;
        VendorNo?: string;
        VendorName?: string;
        InvoiceNo?: string;
        InvoiceDate?: string;
        ReceivedDate?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        PayTerms?: string;
        DiscPercent?: number;
        DiscDays?: number;
        NetDays?: number;
        DiscountDate?: string;
        DueDate?: string;
        PlannedDate?: string;
        PaymentBranch?: string;
        Ccy?: string;
        ExchRate?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetInvoAmt?: number;
        DpsApplied?: number;
        NetBalAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocTdiscAmt?: number;
        LocChgsAmt?: number;
        LocGtaxAmt?: number;
        LocInvoAmt?: number;
        LocDpsApplied?: number;
        GrnNetAmt?: number;
        LgrnNetAmt?: number;
        VariaAmt?: number;
        LvariaAmt?: number;
        ItemVariaAmt?: number;
        LitemVariaAmt?: number;
        ChgsVariaAmt?: number;
        LchgsVariaAmt?: number;
        LastLineNo?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        Hold?: string;
        HoldUntil?: string;
        HoldDate?: string;
        HoldBy?: string;
        AcctVendor?: string;
        AcctTdisc?: string;
        AcctGtax?: string;
        AcctVariance?: string;
        SettledAmt?: number;
        LsettledAmt?: number;
        TermDiscAmt?: number;
        LtermDiscAmt?: number;
        ReturnAmt?: number;
        LreturnAmt?: number;
        BalAmt?: number;
        BalAmtLocal?: number;
        OverAllocAmt?: number;
        LoverAllocAmt?: number;
        BatchSelect?: string;
        GlLink?: string;
        GlLinkType?: string;
        GlLinkNo?: string;
        LastLogNo?: number;
        LockType?: string;
        LockRefNo?: string;
        HoldReason?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
        CheckCrlimit?: string;
        CheckCrbal?: number;
        AcctPutax?: string;
        PutaxType?: string;
        GputaxPcent?: number;
        TotGputaxAmt?: number;
        TotLputaxAmt?: number;
        LocGputaxAmt?: number;
        LocLputaxAmt?: number;
        GrnPutaxType?: string;
        GrnGputaxPcent?: number;
        GrnCount?: number;
        AiLink?: string;
        AiLinkType?: string;
        AiLinkNo?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        PoNo?: string;
        OriginCountry?: string;
    }
    namespace AccountsPayableInvoiceRow {
        const idProperty = "ControlNo";
        const nameProperty = "ControlNo";
        const localTextPrefix = "Finance.AccountsPayableInvoice";
        namespace Fields {
            const DetailList: string;
            const ItemDetailList: string;
            const Recnum: string;
            const ControlNo: string;
            const Miscellaneous: string;
            const Posted: string;
            const Closed: string;
            const Returned: string;
            const VendorNo: string;
            const VendorName: string;
            const InvoiceNo: string;
            const InvoiceDate: string;
            const ReceivedDate: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const PayTerms: string;
            const DiscPercent: string;
            const DiscDays: string;
            const NetDays: string;
            const DiscountDate: string;
            const DueDate: string;
            const PlannedDate: string;
            const PaymentBranch: string;
            const Ccy: string;
            const ExchRate: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetInvoAmt: string;
            const DpsApplied: string;
            const NetBalAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocTdiscAmt: string;
            const LocChgsAmt: string;
            const LocGtaxAmt: string;
            const LocInvoAmt: string;
            const LocDpsApplied: string;
            const GrnNetAmt: string;
            const LgrnNetAmt: string;
            const VariaAmt: string;
            const LvariaAmt: string;
            const ItemVariaAmt: string;
            const LitemVariaAmt: string;
            const ChgsVariaAmt: string;
            const LchgsVariaAmt: string;
            const LastLineNo: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const Hold: string;
            const HoldUntil: string;
            const HoldDate: string;
            const HoldBy: string;
            const AcctVendor: string;
            const AcctTdisc: string;
            const AcctGtax: string;
            const AcctVariance: string;
            const SettledAmt: string;
            const LsettledAmt: string;
            const TermDiscAmt: string;
            const LtermDiscAmt: string;
            const ReturnAmt: string;
            const LreturnAmt: string;
            const BalAmt: string;
            const BalAmtLocal: string;
            const OverAllocAmt: string;
            const LoverAllocAmt: string;
            const BatchSelect: string;
            const GlLink: string;
            const GlLinkType: string;
            const GlLinkNo: string;
            const LastLogNo: string;
            const LockType: string;
            const LockRefNo: string;
            const HoldReason: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
            const CheckCrlimit: string;
            const CheckCrbal: string;
            const AcctPutax: string;
            const PutaxType: string;
            const GputaxPcent: string;
            const TotGputaxAmt: string;
            const TotLputaxAmt: string;
            const LocGputaxAmt: string;
            const LocLputaxAmt: string;
            const GrnPutaxType: string;
            const GrnGputaxPcent: string;
            const GrnCount: string;
            const AiLink: string;
            const AiLinkType: string;
            const AiLinkNo: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const PoNo: string;
            const OriginCountry: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayableInvoiceService {
        const baseUrl = "Finance/AccountsPayableInvoice";
        function Create(request: Serenity.SaveRequest<AccountsPayableInvoiceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayableInvoiceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayableInvoiceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayableInvoiceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceSummaryForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayableInvoiceSummaryForm {
        ControlNo: Serenity.StringEditor;
        GrnNo: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        Returned: Serenity.StringEditor;
        DoNo: Serenity.StringEditor;
        ReceivedDate: Serenity.DateEditor;
        Loc: Serenity.StringEditor;
        Inspected: Serenity.StringEditor;
        TotPriceAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TotExtPrice: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        TotAtaxAmt: Serenity.DecimalEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetOrdrAmt: Serenity.DecimalEditor;
        TotGtaxAmt: Serenity.DecimalEditor;
        NetInvoAmt: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocPtaxAmt: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        LocAtaxAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        LocTdiscAmt: Serenity.DecimalEditor;
        LocChgsAmt: Serenity.DecimalEditor;
        LocGtaxAmt: Serenity.DecimalEditor;
        LocInvoAmt: Serenity.DecimalEditor;
        LocDpsApplied: Serenity.DecimalEditor;
        GrnNetAmt: Serenity.DecimalEditor;
        LgrnNetAmt: Serenity.DecimalEditor;
        VariaAmt: Serenity.DecimalEditor;
        LocalVariaAmt: Serenity.DecimalEditor;
        ItemVariaAmt: Serenity.DecimalEditor;
        LitemVariaAmt: Serenity.DecimalEditor;
        ChgsVariaAmt: Serenity.DecimalEditor;
        LchgsVariaAmt: Serenity.DecimalEditor;
        PutaxType: Serenity.StringEditor;
        GputaxPcent: Serenity.DecimalEditor;
        TotGputaxAmt: Serenity.DecimalEditor;
        TotLputaxAmt: Serenity.DecimalEditor;
        LocGputaxAmt: Serenity.DecimalEditor;
        LocLputaxAmt: Serenity.DecimalEditor;
        PoPutaxType: Serenity.StringEditor;
        PoGputaxPcent: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayableInvoiceSummaryRow {
        Recnum?: number;
        ControlNo?: string;
        GrnNo?: string;
        Posted?: string;
        Returned?: string;
        DoNo?: string;
        ReceivedDate?: string;
        Loc?: string;
        Inspected?: string;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetInvoAmt?: number;
        DpsApplied?: number;
        NetBalAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocTdiscAmt?: number;
        LocChgsAmt?: number;
        LocGtaxAmt?: number;
        LocInvoAmt?: number;
        LocDpsApplied?: number;
        GrnNetAmt?: number;
        LgrnNetAmt?: number;
        VariaAmt?: number;
        LocalVariaAmt?: number;
        ItemVariaAmt?: number;
        LitemVariaAmt?: number;
        ChgsVariaAmt?: number;
        LchgsVariaAmt?: number;
        PutaxType?: string;
        GputaxPcent?: number;
        TotGputaxAmt?: number;
        TotLputaxAmt?: number;
        LocGputaxAmt?: number;
        LocLputaxAmt?: number;
        PoPutaxType?: string;
        PoGputaxPcent?: number;
        ControlNoRecnum?: number;
        ControlNoMiscellaneous?: string;
        ControlNoPosted?: string;
        ControlNoClosed?: string;
        ControlNoReturned?: string;
        ControlNoVendorNo?: string;
        ControlNoVendorName?: string;
        ControlNoInvoiceNo?: string;
        ControlNoInvoiceDate?: string;
        ControlNoReceivedDate?: string;
        ControlNoPeriod?: string;
        ControlNoFiscalYear?: number;
        ControlNoPeriodNo?: number;
        ControlNoPayTerms?: string;
        ControlNoDiscPercent?: number;
        ControlNoDiscDays?: number;
        ControlNoNetDays?: number;
        ControlNoDiscountDate?: string;
        ControlNoDueDate?: string;
        ControlNoPlannedDate?: string;
        ControlNoPaymentBranch?: string;
        ControlNoCcy?: string;
        ControlNoExchRate?: number;
        ControlNoTotPriceAmt?: number;
        ControlNoTotPtaxAmt?: number;
        ControlNoTotExtPrice?: number;
        ControlNoTotLdiscAmt?: number;
        ControlNoTotAtaxAmt?: number;
        ControlNoTotItemAmt?: number;
        ControlNoTotTdiscAmt?: number;
        ControlNoNetTradeAmt?: number;
        ControlNoTotChgsAmt?: number;
        ControlNoNetOrdrAmt?: number;
        ControlNoTotGtaxAmt?: number;
        ControlNoNetInvoAmt?: number;
        ControlNoDpsApplied?: number;
        ControlNoNetBalAmt?: number;
        ControlNoLocPriceAmt?: number;
        ControlNoLocPtaxAmt?: number;
        ControlNoLocExtPrice?: number;
        ControlNoLocLdiscAmt?: number;
        ControlNoLocAtaxAmt?: number;
        ControlNoLocItemAmt?: number;
        ControlNoLocTdiscAmt?: number;
        ControlNoLocChgsAmt?: number;
        ControlNoLocGtaxAmt?: number;
        ControlNoLocInvoAmt?: number;
        ControlNoLocDpsApplied?: number;
        ControlNoGrnNetAmt?: number;
        ControlNoLgrnNetAmt?: number;
        ControlNoVariaAmt?: number;
        ControlNoLvariaAmt?: number;
        ControlNoItemVariaAmt?: number;
        ControlNoLitemVariaAmt?: number;
        ControlNoChgsVariaAmt?: number;
        ControlNoLchgsVariaAmt?: number;
        ControlNoLastLineNo?: number;
        ControlNoCreatedDate?: string;
        ControlNoCreatedBy?: string;
        ControlNoRevisedDate?: string;
        ControlNoRevisedBy?: string;
        ControlNoPostedDate?: string;
        ControlNoPostedBy?: string;
        ControlNoHold?: string;
        ControlNoHoldUntil?: string;
        ControlNoHoldDate?: string;
        ControlNoHoldBy?: string;
        ControlNoAcctVendor?: string;
        ControlNoAcctTdisc?: string;
        ControlNoAcctGtax?: string;
        ControlNoAcctVariance?: string;
        ControlNoSettledAmt?: number;
        ControlNoLsettledAmt?: number;
        ControlNoTermDiscAmt?: number;
        ControlNoLtermDiscAmt?: number;
        ControlNoReturnAmt?: number;
        ControlNoLreturnAmt?: number;
        ControlNoBalAmt?: number;
        ControlNoBalAmtLocal?: number;
        ControlNoOverAllocAmt?: number;
        ControlNoLoverAllocAmt?: number;
        ControlNoBatchSelect?: string;
        ControlNoGlLink?: string;
        ControlNoGlLinkType?: string;
        ControlNoGlLinkNo?: string;
        ControlNoLastLogNo?: number;
        ControlNoLockType?: string;
        ControlNoLockRefNo?: string;
        ControlNoHoldReason?: string;
        ControlNoOwnerBranch?: string;
        ControlNoSourceBranch?: string;
        ControlNoParticulars?: string;
        ControlNoCheckCrlimit?: string;
        ControlNoCheckCrbal?: number;
        ControlNoAcctPutax?: string;
        ControlNoPutaxType?: string;
        ControlNoGputaxPcent?: number;
        ControlNoTotGputaxAmt?: number;
        ControlNoTotLputaxAmt?: number;
        ControlNoLocGputaxAmt?: number;
        ControlNoLocLputaxAmt?: number;
        ControlNoGrnPutaxType?: string;
        ControlNoGrnGputaxPcent?: number;
        ControlNoGrnCount?: number;
        ControlNoAiLink?: string;
        ControlNoAiLinkType?: string;
        ControlNoAiLinkNo?: string;
        ControlNoAnlys9?: string;
        ControlNoAnlys10?: string;
        ControlNoAnlys11?: string;
        ControlNoAnlys12?: string;
        ControlNoAnlys13?: string;
        ControlNoAnlys14?: string;
        ControlNoAnlys15?: string;
        ControlNoAnlys16?: string;
        ControlNoAnlys17?: string;
        ControlNoAnlys18?: string;
        ControlNoPoNo?: string;
        ControlNoOriginCountry?: string;
    }
    namespace AccountsPayableInvoiceSummaryRow {
        const idProperty = "Recnum";
        const nameProperty = "ControlNo";
        const localTextPrefix = "Finance.AccountsPayableInvoiceSummary";
        namespace Fields {
            const Recnum: string;
            const ControlNo: string;
            const GrnNo: string;
            const Posted: string;
            const Returned: string;
            const DoNo: string;
            const ReceivedDate: string;
            const Loc: string;
            const Inspected: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetInvoAmt: string;
            const DpsApplied: string;
            const NetBalAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocTdiscAmt: string;
            const LocChgsAmt: string;
            const LocGtaxAmt: string;
            const LocInvoAmt: string;
            const LocDpsApplied: string;
            const GrnNetAmt: string;
            const LgrnNetAmt: string;
            const VariaAmt: string;
            const LocalVariaAmt: string;
            const ItemVariaAmt: string;
            const LitemVariaAmt: string;
            const ChgsVariaAmt: string;
            const LchgsVariaAmt: string;
            const PutaxType: string;
            const GputaxPcent: string;
            const TotGputaxAmt: string;
            const TotLputaxAmt: string;
            const LocGputaxAmt: string;
            const LocLputaxAmt: string;
            const PoPutaxType: string;
            const PoGputaxPcent: string;
            const ControlNoRecnum: string;
            const ControlNoMiscellaneous: string;
            const ControlNoPosted: string;
            const ControlNoClosed: string;
            const ControlNoReturned: string;
            const ControlNoVendorNo: string;
            const ControlNoVendorName: string;
            const ControlNoInvoiceNo: string;
            const ControlNoInvoiceDate: string;
            const ControlNoReceivedDate: string;
            const ControlNoPeriod: string;
            const ControlNoFiscalYear: string;
            const ControlNoPeriodNo: string;
            const ControlNoPayTerms: string;
            const ControlNoDiscPercent: string;
            const ControlNoDiscDays: string;
            const ControlNoNetDays: string;
            const ControlNoDiscountDate: string;
            const ControlNoDueDate: string;
            const ControlNoPlannedDate: string;
            const ControlNoPaymentBranch: string;
            const ControlNoCcy: string;
            const ControlNoExchRate: string;
            const ControlNoTotPriceAmt: string;
            const ControlNoTotPtaxAmt: string;
            const ControlNoTotExtPrice: string;
            const ControlNoTotLdiscAmt: string;
            const ControlNoTotAtaxAmt: string;
            const ControlNoTotItemAmt: string;
            const ControlNoTotTdiscAmt: string;
            const ControlNoNetTradeAmt: string;
            const ControlNoTotChgsAmt: string;
            const ControlNoNetOrdrAmt: string;
            const ControlNoTotGtaxAmt: string;
            const ControlNoNetInvoAmt: string;
            const ControlNoDpsApplied: string;
            const ControlNoNetBalAmt: string;
            const ControlNoLocPriceAmt: string;
            const ControlNoLocPtaxAmt: string;
            const ControlNoLocExtPrice: string;
            const ControlNoLocLdiscAmt: string;
            const ControlNoLocAtaxAmt: string;
            const ControlNoLocItemAmt: string;
            const ControlNoLocTdiscAmt: string;
            const ControlNoLocChgsAmt: string;
            const ControlNoLocGtaxAmt: string;
            const ControlNoLocInvoAmt: string;
            const ControlNoLocDpsApplied: string;
            const ControlNoGrnNetAmt: string;
            const ControlNoLgrnNetAmt: string;
            const ControlNoVariaAmt: string;
            const ControlNoLvariaAmt: string;
            const ControlNoItemVariaAmt: string;
            const ControlNoLitemVariaAmt: string;
            const ControlNoChgsVariaAmt: string;
            const ControlNoLchgsVariaAmt: string;
            const ControlNoLastLineNo: string;
            const ControlNoCreatedDate: string;
            const ControlNoCreatedBy: string;
            const ControlNoRevisedDate: string;
            const ControlNoRevisedBy: string;
            const ControlNoPostedDate: string;
            const ControlNoPostedBy: string;
            const ControlNoHold: string;
            const ControlNoHoldUntil: string;
            const ControlNoHoldDate: string;
            const ControlNoHoldBy: string;
            const ControlNoAcctVendor: string;
            const ControlNoAcctTdisc: string;
            const ControlNoAcctGtax: string;
            const ControlNoAcctVariance: string;
            const ControlNoSettledAmt: string;
            const ControlNoLsettledAmt: string;
            const ControlNoTermDiscAmt: string;
            const ControlNoLtermDiscAmt: string;
            const ControlNoReturnAmt: string;
            const ControlNoLreturnAmt: string;
            const ControlNoBalAmt: string;
            const ControlNoBalAmtLocal: string;
            const ControlNoOverAllocAmt: string;
            const ControlNoLoverAllocAmt: string;
            const ControlNoBatchSelect: string;
            const ControlNoGlLink: string;
            const ControlNoGlLinkType: string;
            const ControlNoGlLinkNo: string;
            const ControlNoLastLogNo: string;
            const ControlNoLockType: string;
            const ControlNoLockRefNo: string;
            const ControlNoHoldReason: string;
            const ControlNoOwnerBranch: string;
            const ControlNoSourceBranch: string;
            const ControlNoParticulars: string;
            const ControlNoCheckCrlimit: string;
            const ControlNoCheckCrbal: string;
            const ControlNoAcctPutax: string;
            const ControlNoPutaxType: string;
            const ControlNoGputaxPcent: string;
            const ControlNoTotGputaxAmt: string;
            const ControlNoTotLputaxAmt: string;
            const ControlNoLocGputaxAmt: string;
            const ControlNoLocLputaxAmt: string;
            const ControlNoGrnPutaxType: string;
            const ControlNoGrnGputaxPcent: string;
            const ControlNoGrnCount: string;
            const ControlNoAiLink: string;
            const ControlNoAiLinkType: string;
            const ControlNoAiLinkNo: string;
            const ControlNoAnlys9: string;
            const ControlNoAnlys10: string;
            const ControlNoAnlys11: string;
            const ControlNoAnlys12: string;
            const ControlNoAnlys13: string;
            const ControlNoAnlys14: string;
            const ControlNoAnlys15: string;
            const ControlNoAnlys16: string;
            const ControlNoAnlys17: string;
            const ControlNoAnlys18: string;
            const ControlNoPoNo: string;
            const ControlNoOriginCountry: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayableInvoiceSummaryService {
        const baseUrl = "Finance/AccountsPayableInvoiceSummary";
        function Create(request: Serenity.SaveRequest<AccountsPayableInvoiceSummaryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayableInvoiceSummaryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayableInvoiceSummaryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayableInvoiceSummaryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsPayableJournalForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayableJournalForm {
        EntryNo: Serenity.DecimalEditor;
        VendorNo: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        TranDate: Serenity.DateEditor;
        TranType: Serenity.StringEditor;
        RefNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        TotalAmt: Serenity.DecimalEditor;
        Credit: Serenity.DecimalEditor;
        Debit: Serenity.DecimalEditor;
        LocalCredit: Serenity.DecimalEditor;
        LocalDebit: Serenity.DecimalEditor;
        LocalBalance: Serenity.DecimalEditor;
        Particulars: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayableJournalRow {
        Recnum?: number;
        EntryNo?: number;
        VendorNo?: string;
        Period?: string;
        TranDate?: string;
        TranType?: string;
        RefNo?: string;
        Ccy?: string;
        ExchRate?: number;
        TotalAmt?: number;
        Credit?: number;
        Debit?: number;
        LocalCredit?: number;
        LocalDebit?: number;
        LocalBalance?: number;
        Particulars?: string;
    }
    namespace AccountsPayableJournalRow {
        const idProperty = "Recnum";
        const nameProperty = "VendorNo";
        const localTextPrefix = "Finance.AccountsPayableJournal";
        namespace Fields {
            const Recnum: string;
            const EntryNo: string;
            const VendorNo: string;
            const Period: string;
            const TranDate: string;
            const TranType: string;
            const RefNo: string;
            const Ccy: string;
            const ExchRate: string;
            const TotalAmt: string;
            const Credit: string;
            const Debit: string;
            const LocalCredit: string;
            const LocalDebit: string;
            const LocalBalance: string;
            const Particulars: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayableJournalService {
        const baseUrl = "Finance/AccountsPayableJournal";
        function Create(request: Serenity.SaveRequest<AccountsPayableJournalRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayableJournalRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayableJournalRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayableJournalRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsPayableLedgerForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayableLedgerForm {
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        Summary: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        VendorNo2: Serenity.StringEditor;
        Ccy2: Serenity.StringEditor;
        FiscalYear: Serenity.DecimalEditor;
        PeriodNo: Serenity.DecimalEditor;
        InvoAmt: Serenity.DecimalEditor;
        MemoAmt: Serenity.DecimalEditor;
        AdjAmt: Serenity.DecimalEditor;
        PayAmt: Serenity.DecimalEditor;
        DiscAmt: Serenity.DecimalEditor;
        DiffAmt: Serenity.DecimalEditor;
        BalBeg: Serenity.DecimalEditor;
        Credit: Serenity.DecimalEditor;
        Debit: Serenity.DecimalEditor;
        BalEnd: Serenity.DecimalEditor;
        LocalInvoAmt: Serenity.DecimalEditor;
        LocalMemoAmt: Serenity.DecimalEditor;
        LocalAdjAmt: Serenity.DecimalEditor;
        LocalPayAmt: Serenity.DecimalEditor;
        LocalDiscAmt: Serenity.DecimalEditor;
        LocalDiffAmt: Serenity.DecimalEditor;
        LocalBalBeg: Serenity.DecimalEditor;
        LocalCredit: Serenity.DecimalEditor;
        LocalDebit: Serenity.DecimalEditor;
        LocalBalEnd: Serenity.DecimalEditor;
        RfdAmt: Serenity.DecimalEditor;
        LocalRfdAmt: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayableLedgerRow {
        Recnum?: number;
        VendorNo?: string;
        VendorName?: string;
        Summary?: string;
        Ccy?: string;
        Period?: string;
        VendorNo2?: string;
        Ccy2?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        InvoAmt?: number;
        MemoAmt?: number;
        AdjAmt?: number;
        PayAmt?: number;
        DiscAmt?: number;
        DiffAmt?: number;
        BalBeg?: number;
        Credit?: number;
        Debit?: number;
        BalEnd?: number;
        LocalInvoAmt?: number;
        LocalMemoAmt?: number;
        LocalAdjAmt?: number;
        LocalPayAmt?: number;
        LocalDiscAmt?: number;
        LocalDiffAmt?: number;
        LocalBalBeg?: number;
        LocalCredit?: number;
        LocalDebit?: number;
        LocalBalEnd?: number;
        RfdAmt?: number;
        LocalRfdAmt?: number;
    }
    namespace AccountsPayableLedgerRow {
        const idProperty = "Recnum";
        const nameProperty = "VendorNo";
        const localTextPrefix = "Finance.AccountsPayableLedger";
        namespace Fields {
            const Recnum: string;
            const VendorNo: string;
            const VendorName: string;
            const Summary: string;
            const Ccy: string;
            const Period: string;
            const VendorNo2: string;
            const Ccy2: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const InvoAmt: string;
            const MemoAmt: string;
            const AdjAmt: string;
            const PayAmt: string;
            const DiscAmt: string;
            const DiffAmt: string;
            const BalBeg: string;
            const Credit: string;
            const Debit: string;
            const BalEnd: string;
            const LocalInvoAmt: string;
            const LocalMemoAmt: string;
            const LocalAdjAmt: string;
            const LocalPayAmt: string;
            const LocalDiscAmt: string;
            const LocalDiffAmt: string;
            const LocalBalBeg: string;
            const LocalCredit: string;
            const LocalDebit: string;
            const LocalBalEnd: string;
            const RfdAmt: string;
            const LocalRfdAmt: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayableLedgerService {
        const baseUrl = "Finance/AccountsPayableLedger";
        function Create(request: Serenity.SaveRequest<AccountsPayableLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayableLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayableLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayableLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentCurrencyForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayablePaymentCurrencyForm {
        RefNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        BalAmt: Serenity.DecimalEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayablePaymentCurrencyRow {
        Recnum?: number;
        RefNo?: string;
        Ccy?: string;
        Description?: string;
        ExchRate?: number;
        BalAmt?: number;
        RevisedDate?: string;
        RevisedBy?: string;
    }
    namespace AccountsPayablePaymentCurrencyRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Finance.AccountsPayablePaymentCurrency";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const Ccy: string;
            const Description: string;
            const ExchRate: string;
            const BalAmt: string;
            const RevisedDate: string;
            const RevisedBy: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayablePaymentCurrencyService {
        const baseUrl = "Finance/AccountsPayablePaymentCurrency";
        function Create(request: Serenity.SaveRequest<AccountsPayablePaymentCurrencyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayablePaymentCurrencyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayablePaymentCurrencyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayablePaymentCurrencyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayablePaymentDetailForm {
        RefNo: Serenity.StringEditor;
        InvoCtrlNo: Serenity.StringEditor;
        InvoiceNo: Serenity.StringEditor;
        InvoiceDate: Serenity.DateEditor;
        DiscountDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        DiscPercent: Serenity.DecimalEditor;
        Ccy: Serenity.StringEditor;
        InvoExchRate: Serenity.DecimalEditor;
        PayExchRate: Serenity.DecimalEditor;
        Settle: Serenity.StringEditor;
        BalAmt: Serenity.DecimalEditor;
        BalAmtInvo: Serenity.DecimalEditor;
        DiscAmt: Serenity.DecimalEditor;
        DiscAmtInvo: Serenity.DecimalEditor;
        DueAmt: Serenity.DecimalEditor;
        DueAmtInvo: Serenity.DecimalEditor;
        DueAmtLocal: Serenity.DecimalEditor;
        AppliedAmt: Serenity.DecimalEditor;
        AppliedAmtLoc: Serenity.DecimalEditor;
        SettledAmt: Serenity.DecimalEditor;
        ForexGainAmt: Serenity.DecimalEditor;
        EndAmt: Serenity.DecimalEditor;
        EndAmtLocal: Serenity.DecimalEditor;
        Posted: Serenity.StringEditor;
        LogNo: Serenity.DecimalEditor;
        LastLogNo: Serenity.DecimalEditor;
        PaidDate: Serenity.DateEditor;
        AppliedAmtInv: Serenity.DecimalEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        InvRoundDiff: Serenity.DecimalEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayablePaymentDetailRow {
        Recnum?: number;
        RefNo?: string;
        InvoCtrlNo?: string;
        InvoiceNo?: string;
        InvoiceDate?: string;
        DiscountDate?: string;
        DueDate?: string;
        DiscPercent?: number;
        Ccy?: string;
        InvoExchRate?: number;
        PayExchRate?: number;
        Settle?: string;
        BalAmt?: number;
        BalAmtInvo?: number;
        DiscAmt?: number;
        DiscAmtInvo?: number;
        DueAmt?: number;
        DueAmtInvo?: number;
        DueAmtLocal?: number;
        AppliedAmt?: number;
        AppliedAmtLoc?: number;
        SettledAmt?: number;
        ForexGainAmt?: number;
        EndAmt?: number;
        EndAmtLocal?: number;
        Posted?: string;
        LogNo?: number;
        LastLogNo?: number;
        PaidDate?: string;
        AppliedAmtInv?: number;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        InvRoundDiff?: number;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        RefNoRecnum?: number;
        RefNoDeposit?: string;
        RefNoPosted?: string;
        RefNoVendorNo?: string;
        RefNoVendorName?: string;
        RefNoOrderNo?: string;
        RefNoPaidDate?: string;
        RefNoPeriod?: string;
        RefNoFiscalYear?: number;
        RefNoPeriodNo?: number;
        RefNoFundCode?: string;
        RefNoPayee?: string;
        RefNoChequeNo?: string;
        RefNoCcy?: string;
        RefNoExchRate?: number;
        RefNoSameCurrency?: string;
        RefNoPaidAmt?: number;
        RefNoPaidAmtLocal?: number;
        RefNoBalAmt?: number;
        RefNoDiscAmt?: number;
        RefNoDueAmt?: number;
        RefNoDueAmtLocal?: number;
        RefNoAppliedAmt?: number;
        RefNoAppliedAmtLoc?: number;
        RefNoSettledAmt?: number;
        RefNoForexGainAmt?: number;
        RefNoEndAmt?: number;
        RefNoEndAmtLocal?: number;
        RefNoUnusedAmt?: number;
        RefNoUnusedAmtLoc?: number;
        RefNoAppliedLocCpd?: number;
        RefNoRoundDiff?: number;
        RefNoCreatedDate?: string;
        RefNoCreatedBy?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoPostedDate?: string;
        RefNoPostedBy?: string;
        RefNoAcctVendor?: string;
        RefNoAcctCash?: string;
        RefNoAcctForexDiff?: string;
        RefNoAcctTermDisc?: string;
        RefNoAcctRoundDiff?: string;
        RefNoBatchSelect?: string;
        RefNoGlLink?: string;
        RefNoGlLinkType?: string;
        RefNoGlLinkNo?: string;
        RefNoFixedCcy?: string;
        RefNoDefaultCcy?: string;
        RefNoPaidLocalCpd?: number;
        RefNoOwnerBranch?: string;
        RefNoSourceBranch?: string;
        RefNoCanEdit?: string;
        RefNoDiscAmtInvo?: number;
        RefNoTotalDebit?: number;
        RefNoTotalCredit?: number;
        RefNoLastAdjCount?: number;
        RefNoCcyInv?: string;
        RefNoExchRateInv?: number;
        RefNoAppliedAmtInv?: number;
        RefNoBankAmt?: number;
        RefNoAnlys1?: string;
        RefNoAnlys2?: string;
        RefNoAnlys7?: string;
        RefNoAnlys8?: string;
        RefNoRemarks?: string;
        RefNoToOpen?: string;
        RefNoToRound?: string;
        RefNoGbvendInvoAmtDiff?: number;
        RefNoGbvendOpenAmtDiff?: number;
        RefNoApledgTotalDebit?: number;
        RefNoApledgTotalCredit?: number;
        RefNoAllowCancel?: string;
        RefNoChargeAmt?: number;
        RefNoChargeAmtLocal?: number;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
        RefNoAcctDeposit?: string;
        InvoCtrlNoRecnum?: number;
        InvoCtrlNoMiscellaneous?: string;
        InvoCtrlNoPosted?: string;
        InvoCtrlNoClosed?: string;
        InvoCtrlNoReturned?: string;
        InvoCtrlNoVendorNo?: string;
        InvoCtrlNoVendorName?: string;
        InvoCtrlNoInvoiceNo?: string;
        InvoCtrlNoInvoiceDate?: string;
        InvoCtrlNoReceivedDate?: string;
        InvoCtrlNoPeriod?: string;
        InvoCtrlNoFiscalYear?: number;
        InvoCtrlNoPeriodNo?: number;
        InvoCtrlNoPayTerms?: string;
        InvoCtrlNoDiscPercent?: number;
        InvoCtrlNoDiscDays?: number;
        InvoCtrlNoNetDays?: number;
        InvoCtrlNoDiscountDate?: string;
        InvoCtrlNoDueDate?: string;
        InvoCtrlNoPlannedDate?: string;
        InvoCtrlNoPaymentBranch?: string;
        InvoCtrlNoCcy?: string;
        InvoCtrlNoExchRate?: number;
        InvoCtrlNoTotPriceAmt?: number;
        InvoCtrlNoTotPtaxAmt?: number;
        InvoCtrlNoTotExtPrice?: number;
        InvoCtrlNoTotLdiscAmt?: number;
        InvoCtrlNoTotAtaxAmt?: number;
        InvoCtrlNoTotItemAmt?: number;
        InvoCtrlNoTotTdiscAmt?: number;
        InvoCtrlNoNetTradeAmt?: number;
        InvoCtrlNoTotChgsAmt?: number;
        InvoCtrlNoNetOrdrAmt?: number;
        InvoCtrlNoTotGtaxAmt?: number;
        InvoCtrlNoNetInvoAmt?: number;
        InvoCtrlNoDpsApplied?: number;
        InvoCtrlNoNetBalAmt?: number;
        InvoCtrlNoLocPriceAmt?: number;
        InvoCtrlNoLocPtaxAmt?: number;
        InvoCtrlNoLocExtPrice?: number;
        InvoCtrlNoLocLdiscAmt?: number;
        InvoCtrlNoLocAtaxAmt?: number;
        InvoCtrlNoLocItemAmt?: number;
        InvoCtrlNoLocTdiscAmt?: number;
        InvoCtrlNoLocChgsAmt?: number;
        InvoCtrlNoLocGtaxAmt?: number;
        InvoCtrlNoLocInvoAmt?: number;
        InvoCtrlNoLocDpsApplied?: number;
        InvoCtrlNoGrnNetAmt?: number;
        InvoCtrlNoLgrnNetAmt?: number;
        InvoCtrlNoVariaAmt?: number;
        InvoCtrlNoLvariaAmt?: number;
        InvoCtrlNoItemVariaAmt?: number;
        InvoCtrlNoLitemVariaAmt?: number;
        InvoCtrlNoChgsVariaAmt?: number;
        InvoCtrlNoLchgsVariaAmt?: number;
        InvoCtrlNoLastLineNo?: number;
        InvoCtrlNoCreatedDate?: string;
        InvoCtrlNoCreatedBy?: string;
        InvoCtrlNoRevisedDate?: string;
        InvoCtrlNoRevisedBy?: string;
        InvoCtrlNoPostedDate?: string;
        InvoCtrlNoPostedBy?: string;
        InvoCtrlNoHold?: string;
        InvoCtrlNoHoldUntil?: string;
        InvoCtrlNoHoldDate?: string;
        InvoCtrlNoHoldBy?: string;
        InvoCtrlNoAcctVendor?: string;
        InvoCtrlNoAcctTdisc?: string;
        InvoCtrlNoAcctGtax?: string;
        InvoCtrlNoAcctVariance?: string;
        InvoCtrlNoSettledAmt?: number;
        InvoCtrlNoLsettledAmt?: number;
        InvoCtrlNoTermDiscAmt?: number;
        InvoCtrlNoLtermDiscAmt?: number;
        InvoCtrlNoReturnAmt?: number;
        InvoCtrlNoLreturnAmt?: number;
        InvoCtrlNoBalAmt?: number;
        InvoCtrlNoBalAmtLocal?: number;
        InvoCtrlNoOverAllocAmt?: number;
        InvoCtrlNoLoverAllocAmt?: number;
        InvoCtrlNoBatchSelect?: string;
        InvoCtrlNoGlLink?: string;
        InvoCtrlNoGlLinkType?: string;
        InvoCtrlNoGlLinkNo?: string;
        InvoCtrlNoLastLogNo?: number;
        InvoCtrlNoLockType?: string;
        InvoCtrlNoLockRefNo?: string;
        InvoCtrlNoHoldReason?: string;
        InvoCtrlNoOwnerBranch?: string;
        InvoCtrlNoSourceBranch?: string;
        InvoCtrlNoParticulars?: string;
        InvoCtrlNoCheckCrlimit?: string;
        InvoCtrlNoCheckCrbal?: number;
        InvoCtrlNoAcctPutax?: string;
        InvoCtrlNoPutaxType?: string;
        InvoCtrlNoGputaxPcent?: number;
        InvoCtrlNoTotGputaxAmt?: number;
        InvoCtrlNoTotLputaxAmt?: number;
        InvoCtrlNoLocGputaxAmt?: number;
        InvoCtrlNoLocLputaxAmt?: number;
        InvoCtrlNoGrnPutaxType?: string;
        InvoCtrlNoGrnGputaxPcent?: number;
        InvoCtrlNoGrnCount?: number;
        InvoCtrlNoAiLink?: string;
        InvoCtrlNoAiLinkType?: string;
        InvoCtrlNoAiLinkNo?: string;
        InvoCtrlNoAnlys9?: string;
        InvoCtrlNoAnlys10?: string;
        InvoCtrlNoAnlys11?: string;
        InvoCtrlNoAnlys12?: string;
        InvoCtrlNoAnlys13?: string;
        InvoCtrlNoAnlys14?: string;
        InvoCtrlNoAnlys15?: string;
        InvoCtrlNoAnlys16?: string;
        InvoCtrlNoAnlys17?: string;
        InvoCtrlNoAnlys18?: string;
        InvoCtrlNoPoNo?: string;
        InvoCtrlNoOriginCountry?: string;
    }
    namespace AccountsPayablePaymentDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Finance.AccountsPayablePaymentDetail";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const InvoCtrlNo: string;
            const InvoiceNo: string;
            const InvoiceDate: string;
            const DiscountDate: string;
            const DueDate: string;
            const DiscPercent: string;
            const Ccy: string;
            const InvoExchRate: string;
            const PayExchRate: string;
            const Settle: string;
            const BalAmt: string;
            const BalAmtInvo: string;
            const DiscAmt: string;
            const DiscAmtInvo: string;
            const DueAmt: string;
            const DueAmtInvo: string;
            const DueAmtLocal: string;
            const AppliedAmt: string;
            const AppliedAmtLoc: string;
            const SettledAmt: string;
            const ForexGainAmt: string;
            const EndAmt: string;
            const EndAmtLocal: string;
            const Posted: string;
            const LogNo: string;
            const LastLogNo: string;
            const PaidDate: string;
            const AppliedAmtInv: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const InvRoundDiff: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const RefNoRecnum: string;
            const RefNoDeposit: string;
            const RefNoPosted: string;
            const RefNoVendorNo: string;
            const RefNoVendorName: string;
            const RefNoOrderNo: string;
            const RefNoPaidDate: string;
            const RefNoPeriod: string;
            const RefNoFiscalYear: string;
            const RefNoPeriodNo: string;
            const RefNoFundCode: string;
            const RefNoPayee: string;
            const RefNoChequeNo: string;
            const RefNoCcy: string;
            const RefNoExchRate: string;
            const RefNoSameCurrency: string;
            const RefNoPaidAmt: string;
            const RefNoPaidAmtLocal: string;
            const RefNoBalAmt: string;
            const RefNoDiscAmt: string;
            const RefNoDueAmt: string;
            const RefNoDueAmtLocal: string;
            const RefNoAppliedAmt: string;
            const RefNoAppliedAmtLoc: string;
            const RefNoSettledAmt: string;
            const RefNoForexGainAmt: string;
            const RefNoEndAmt: string;
            const RefNoEndAmtLocal: string;
            const RefNoUnusedAmt: string;
            const RefNoUnusedAmtLoc: string;
            const RefNoAppliedLocCpd: string;
            const RefNoRoundDiff: string;
            const RefNoCreatedDate: string;
            const RefNoCreatedBy: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoPostedDate: string;
            const RefNoPostedBy: string;
            const RefNoAcctVendor: string;
            const RefNoAcctCash: string;
            const RefNoAcctForexDiff: string;
            const RefNoAcctTermDisc: string;
            const RefNoAcctRoundDiff: string;
            const RefNoBatchSelect: string;
            const RefNoGlLink: string;
            const RefNoGlLinkType: string;
            const RefNoGlLinkNo: string;
            const RefNoFixedCcy: string;
            const RefNoDefaultCcy: string;
            const RefNoPaidLocalCpd: string;
            const RefNoOwnerBranch: string;
            const RefNoSourceBranch: string;
            const RefNoCanEdit: string;
            const RefNoDiscAmtInvo: string;
            const RefNoTotalDebit: string;
            const RefNoTotalCredit: string;
            const RefNoLastAdjCount: string;
            const RefNoCcyInv: string;
            const RefNoExchRateInv: string;
            const RefNoAppliedAmtInv: string;
            const RefNoBankAmt: string;
            const RefNoAnlys1: string;
            const RefNoAnlys2: string;
            const RefNoAnlys7: string;
            const RefNoAnlys8: string;
            const RefNoRemarks: string;
            const RefNoToOpen: string;
            const RefNoToRound: string;
            const RefNoGbvendInvoAmtDiff: string;
            const RefNoGbvendOpenAmtDiff: string;
            const RefNoApledgTotalDebit: string;
            const RefNoApledgTotalCredit: string;
            const RefNoAllowCancel: string;
            const RefNoChargeAmt: string;
            const RefNoChargeAmtLocal: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
            const RefNoAcctDeposit: string;
            const InvoCtrlNoRecnum: string;
            const InvoCtrlNoMiscellaneous: string;
            const InvoCtrlNoPosted: string;
            const InvoCtrlNoClosed: string;
            const InvoCtrlNoReturned: string;
            const InvoCtrlNoVendorNo: string;
            const InvoCtrlNoVendorName: string;
            const InvoCtrlNoInvoiceNo: string;
            const InvoCtrlNoInvoiceDate: string;
            const InvoCtrlNoReceivedDate: string;
            const InvoCtrlNoPeriod: string;
            const InvoCtrlNoFiscalYear: string;
            const InvoCtrlNoPeriodNo: string;
            const InvoCtrlNoPayTerms: string;
            const InvoCtrlNoDiscPercent: string;
            const InvoCtrlNoDiscDays: string;
            const InvoCtrlNoNetDays: string;
            const InvoCtrlNoDiscountDate: string;
            const InvoCtrlNoDueDate: string;
            const InvoCtrlNoPlannedDate: string;
            const InvoCtrlNoPaymentBranch: string;
            const InvoCtrlNoCcy: string;
            const InvoCtrlNoExchRate: string;
            const InvoCtrlNoTotPriceAmt: string;
            const InvoCtrlNoTotPtaxAmt: string;
            const InvoCtrlNoTotExtPrice: string;
            const InvoCtrlNoTotLdiscAmt: string;
            const InvoCtrlNoTotAtaxAmt: string;
            const InvoCtrlNoTotItemAmt: string;
            const InvoCtrlNoTotTdiscAmt: string;
            const InvoCtrlNoNetTradeAmt: string;
            const InvoCtrlNoTotChgsAmt: string;
            const InvoCtrlNoNetOrdrAmt: string;
            const InvoCtrlNoTotGtaxAmt: string;
            const InvoCtrlNoNetInvoAmt: string;
            const InvoCtrlNoDpsApplied: string;
            const InvoCtrlNoNetBalAmt: string;
            const InvoCtrlNoLocPriceAmt: string;
            const InvoCtrlNoLocPtaxAmt: string;
            const InvoCtrlNoLocExtPrice: string;
            const InvoCtrlNoLocLdiscAmt: string;
            const InvoCtrlNoLocAtaxAmt: string;
            const InvoCtrlNoLocItemAmt: string;
            const InvoCtrlNoLocTdiscAmt: string;
            const InvoCtrlNoLocChgsAmt: string;
            const InvoCtrlNoLocGtaxAmt: string;
            const InvoCtrlNoLocInvoAmt: string;
            const InvoCtrlNoLocDpsApplied: string;
            const InvoCtrlNoGrnNetAmt: string;
            const InvoCtrlNoLgrnNetAmt: string;
            const InvoCtrlNoVariaAmt: string;
            const InvoCtrlNoLvariaAmt: string;
            const InvoCtrlNoItemVariaAmt: string;
            const InvoCtrlNoLitemVariaAmt: string;
            const InvoCtrlNoChgsVariaAmt: string;
            const InvoCtrlNoLchgsVariaAmt: string;
            const InvoCtrlNoLastLineNo: string;
            const InvoCtrlNoCreatedDate: string;
            const InvoCtrlNoCreatedBy: string;
            const InvoCtrlNoRevisedDate: string;
            const InvoCtrlNoRevisedBy: string;
            const InvoCtrlNoPostedDate: string;
            const InvoCtrlNoPostedBy: string;
            const InvoCtrlNoHold: string;
            const InvoCtrlNoHoldUntil: string;
            const InvoCtrlNoHoldDate: string;
            const InvoCtrlNoHoldBy: string;
            const InvoCtrlNoAcctVendor: string;
            const InvoCtrlNoAcctTdisc: string;
            const InvoCtrlNoAcctGtax: string;
            const InvoCtrlNoAcctVariance: string;
            const InvoCtrlNoSettledAmt: string;
            const InvoCtrlNoLsettledAmt: string;
            const InvoCtrlNoTermDiscAmt: string;
            const InvoCtrlNoLtermDiscAmt: string;
            const InvoCtrlNoReturnAmt: string;
            const InvoCtrlNoLreturnAmt: string;
            const InvoCtrlNoBalAmt: string;
            const InvoCtrlNoBalAmtLocal: string;
            const InvoCtrlNoOverAllocAmt: string;
            const InvoCtrlNoLoverAllocAmt: string;
            const InvoCtrlNoBatchSelect: string;
            const InvoCtrlNoGlLink: string;
            const InvoCtrlNoGlLinkType: string;
            const InvoCtrlNoGlLinkNo: string;
            const InvoCtrlNoLastLogNo: string;
            const InvoCtrlNoLockType: string;
            const InvoCtrlNoLockRefNo: string;
            const InvoCtrlNoHoldReason: string;
            const InvoCtrlNoOwnerBranch: string;
            const InvoCtrlNoSourceBranch: string;
            const InvoCtrlNoParticulars: string;
            const InvoCtrlNoCheckCrlimit: string;
            const InvoCtrlNoCheckCrbal: string;
            const InvoCtrlNoAcctPutax: string;
            const InvoCtrlNoPutaxType: string;
            const InvoCtrlNoGputaxPcent: string;
            const InvoCtrlNoTotGputaxAmt: string;
            const InvoCtrlNoTotLputaxAmt: string;
            const InvoCtrlNoLocGputaxAmt: string;
            const InvoCtrlNoLocLputaxAmt: string;
            const InvoCtrlNoGrnPutaxType: string;
            const InvoCtrlNoGrnGputaxPcent: string;
            const InvoCtrlNoGrnCount: string;
            const InvoCtrlNoAiLink: string;
            const InvoCtrlNoAiLinkType: string;
            const InvoCtrlNoAiLinkNo: string;
            const InvoCtrlNoAnlys9: string;
            const InvoCtrlNoAnlys10: string;
            const InvoCtrlNoAnlys11: string;
            const InvoCtrlNoAnlys12: string;
            const InvoCtrlNoAnlys13: string;
            const InvoCtrlNoAnlys14: string;
            const InvoCtrlNoAnlys15: string;
            const InvoCtrlNoAnlys16: string;
            const InvoCtrlNoAnlys17: string;
            const InvoCtrlNoAnlys18: string;
            const InvoCtrlNoPoNo: string;
            const InvoCtrlNoOriginCountry: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayablePaymentDetailService {
        const baseUrl = "Finance/AccountsPayablePaymentDetail";
        function Create(request: Serenity.SaveRequest<AccountsPayablePaymentDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayablePaymentDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayablePaymentDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayablePaymentDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsPayablePaymentForm {
        RefNo: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        FundCode: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PaidAmt: Serenity.DecimalEditor;
        DetailList: AccountsPayablePaymentDetailEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsPayablePaymentRow {
        DetailList?: AccountsPayablePaymentDetailRow[];
        Recnum?: number;
        RefNo?: string;
        Deposit?: string;
        Posted?: string;
        VendorNo?: string;
        VendorName?: string;
        OrderNo?: string;
        PaidDate?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        FundCode?: string;
        Payee?: string;
        ChequeNo?: string;
        Ccy?: string;
        ExchRate?: number;
        SameCurrency?: string;
        PaidAmt?: number;
        PaidAmtLocal?: number;
        BalAmt?: number;
        DiscAmt?: number;
        DueAmt?: number;
        DueAmtLocal?: number;
        AppliedAmt?: number;
        AppliedAmtLoc?: number;
        SettledAmt?: number;
        ForexGainAmt?: number;
        EndAmt?: number;
        EndAmtLocal?: number;
        UnusedAmt?: number;
        UnusedAmtLoc?: number;
        AppliedLocCpd?: number;
        RoundDiff?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        AcctVendor?: string;
        AcctCash?: string;
        AcctForexDiff?: string;
        AcctTermDisc?: string;
        AcctRoundDiff?: string;
        BatchSelect?: string;
        GlLink?: string;
        GlLinkType?: string;
        GlLinkNo?: string;
        FixedCcy?: string;
        DefaultCcy?: string;
        PaidLocalCpd?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        CanEdit?: string;
        DiscAmtInvo?: number;
        TotalDebit?: number;
        TotalCredit?: number;
        LastAdjCount?: number;
        CcyInv?: string;
        ExchRateInv?: number;
        AppliedAmtInv?: number;
        BankAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        Remarks?: string;
        ToOpen?: string;
        ToRound?: string;
        GbvendInvoAmtDiff?: number;
        GbvendOpenAmtDiff?: number;
        ApledgTotalDebit?: number;
        ApledgTotalCredit?: number;
        AllowCancel?: string;
        ChargeAmt?: number;
        ChargeAmtLocal?: number;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        AcctDeposit?: string;
    }
    namespace AccountsPayablePaymentRow {
        const idProperty = "RefNo";
        const nameProperty = "RefNo";
        const localTextPrefix = "Finance.AccountsPayablePayment";
        namespace Fields {
            const DetailList: string;
            const Recnum: string;
            const RefNo: string;
            const Deposit: string;
            const Posted: string;
            const VendorNo: string;
            const VendorName: string;
            const OrderNo: string;
            const PaidDate: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const FundCode: string;
            const Payee: string;
            const ChequeNo: string;
            const Ccy: string;
            const ExchRate: string;
            const SameCurrency: string;
            const PaidAmt: string;
            const PaidAmtLocal: string;
            const BalAmt: string;
            const DiscAmt: string;
            const DueAmt: string;
            const DueAmtLocal: string;
            const AppliedAmt: string;
            const AppliedAmtLoc: string;
            const SettledAmt: string;
            const ForexGainAmt: string;
            const EndAmt: string;
            const EndAmtLocal: string;
            const UnusedAmt: string;
            const UnusedAmtLoc: string;
            const AppliedLocCpd: string;
            const RoundDiff: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const AcctVendor: string;
            const AcctCash: string;
            const AcctForexDiff: string;
            const AcctTermDisc: string;
            const AcctRoundDiff: string;
            const BatchSelect: string;
            const GlLink: string;
            const GlLinkType: string;
            const GlLinkNo: string;
            const FixedCcy: string;
            const DefaultCcy: string;
            const PaidLocalCpd: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const CanEdit: string;
            const DiscAmtInvo: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const LastAdjCount: string;
            const CcyInv: string;
            const ExchRateInv: string;
            const AppliedAmtInv: string;
            const BankAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const Remarks: string;
            const ToOpen: string;
            const ToRound: string;
            const GbvendInvoAmtDiff: string;
            const GbvendOpenAmtDiff: string;
            const ApledgTotalDebit: string;
            const ApledgTotalCredit: string;
            const AllowCancel: string;
            const ChargeAmt: string;
            const ChargeAmtLocal: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const AcctDeposit: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsPayablePaymentService {
        const baseUrl = "Finance/AccountsPayablePayment";
        function Create(request: Serenity.SaveRequest<AccountsPayablePaymentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsPayablePaymentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsPayablePaymentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsPayablePaymentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivableCommissionForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivableCommissionForm {
        Salesman: Serenity.StringEditor;
        SalesmanName: Serenity.StringEditor;
        Rate: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivableCommissionRow {
        InvoiceNo?: string;
        Salesman?: string;
        SalesmanName?: string;
        Rate?: number;
        InvoiceNoRecnum?: number;
        InvoiceNoDirectEntry?: string;
        InvoiceNoPosted?: string;
        InvoiceNoClosed?: string;
        InvoiceNoReturned?: string;
        InvoiceNoDebitNote?: string;
        InvoiceNoCustomerNo?: string;
        InvoiceNoCustomerName?: string;
        InvoiceNoAddress?: string;
        InvoiceNoAddress2?: string;
        InvoiceNoAddress3?: string;
        InvoiceNoAddress4?: string;
        InvoiceNoAttention?: string;
        InvoiceNoInvoiceDate?: string;
        InvoiceNoPeriod?: string;
        InvoiceNoFiscalYear?: number;
        InvoiceNoPeriodNo?: number;
        InvoiceNoSalesman?: string;
        InvoiceNoCcy?: string;
        InvoiceNoExchRate?: number;
        InvoiceNoPayTerms?: string;
        InvoiceNoDiscDays?: number;
        InvoiceNoDiscPcent?: number;
        InvoiceNoDueDays?: number;
        InvoiceNoDiscountDate?: string;
        InvoiceNoDueDate?: string;
        InvoiceNoExpectedDate?: string;
        InvoiceNoAnlys1?: string;
        InvoiceNoAnlys2?: string;
        InvoiceNoTotPriceAmt?: number;
        InvoiceNoLocPriceAmt?: number;
        InvoiceNoTotPtaxAmt?: number;
        InvoiceNoLocPtaxAmt?: number;
        InvoiceNoTotExtPrice?: number;
        InvoiceNoLocExtPrice?: number;
        InvoiceNoTotLdiscAmt?: number;
        InvoiceNoLocLdiscAmt?: number;
        InvoiceNoTotAtaxAmt?: number;
        InvoiceNoLocAtaxAmt?: number;
        InvoiceNoTotItemAmt?: number;
        InvoiceNoLocItemAmt?: number;
        InvoiceNoTdiscPcent?: number;
        InvoiceNoTdiscAmt?: number;
        InvoiceNoLocalTdiscAmt?: number;
        InvoiceNoChgsAmt?: number;
        InvoiceNoLocChgsAmt?: number;
        InvoiceNoGtaxAmt?: number;
        InvoiceNoLocalGtaxAmt?: number;
        InvoiceNoNetAmt?: number;
        InvoiceNoLocalNetAmt?: number;
        InvoiceNoTdiscAmtCpd?: number;
        InvoiceNoLastLineNo?: number;
        InvoiceNoCreatedDate?: string;
        InvoiceNoCreatedBy?: string;
        InvoiceNoRevisedDate?: string;
        InvoiceNoRevisedBy?: string;
        InvoiceNoPostedDate?: string;
        InvoiceNoPostedBy?: string;
        InvoiceNoLastLogNo?: number;
        InvoiceNoSettledAmt?: number;
        InvoiceNoLsettledAmt?: number;
        InvoiceNoTermDiscAmt?: number;
        InvoiceNoLtermDiscAmt?: number;
        InvoiceNoReturnAmt?: number;
        InvoiceNoLreturnAmt?: number;
        InvoiceNoBalAmt?: number;
        InvoiceNoBalAmtLocal?: number;
        InvoiceNoOverAllocAmt?: number;
        InvoiceNoLoverAllocAmt?: number;
        InvoiceNoAcctCustomer?: string;
        InvoiceNoAcctTdisc?: string;
        InvoiceNoAcctGtax?: string;
        InvoiceNoLockType?: string;
        InvoiceNoLockRefNo?: string;
        InvoiceNoBatchSelect?: string;
        InvoiceNoGlLink?: string;
        InvoiceNoGlLinkType?: string;
        InvoiceNoGlLinkNo?: string;
        InvoiceNoOwnerBranch?: string;
        InvoiceNoSourceBranch?: string;
        InvoiceNoCheckCrlimit?: string;
        InvoiceNoCheckCrbal?: number;
        InvoiceNoComments1?: string;
        InvoiceNoComments2?: string;
        InvoiceNoComments3?: string;
        InvoiceNoComments4?: string;
        InvoiceNoLastTextNo?: number;
        InvoiceNoShipTo?: string;
        InvoiceNoTelNo?: string;
        InvoiceNoFaxNo?: string;
        InvoiceNoSltaxType?: string;
        InvoiceNoGsltaxPcent?: number;
        InvoiceNoTotGsltaxAmt?: number;
        InvoiceNoTotLsltaxAmt?: number;
        InvoiceNoLocGsltaxAmt?: number;
        InvoiceNoLocLsltaxAmt?: number;
        InvoiceNoAcctSltax?: string;
        InvoiceNoCustomerPo?: string;
        InvoiceNoAiLink?: string;
        InvoiceNoAiLinkType?: string;
        InvoiceNoAiLinkNo?: string;
        InvoiceNoAnlys7?: string;
        InvoiceNoAnlys8?: string;
        InvoiceNoNetTradeAmt?: number;
        InvoiceNoNetOrdrAmt?: number;
        InvoiceNoShipAmt?: number;
        InvoiceNoLshipAmt?: number;
        InvoiceNoVariaAmt?: number;
        InvoiceNoLvariaAmt?: number;
        InvoiceNoItemVariaAmt?: number;
        InvoiceNoLitemVariaAmt?: number;
        InvoiceNoChgsVariaAmt?: number;
        InvoiceNoLchgsVariaAmt?: number;
        InvoiceNoDpsApplied?: number;
        InvoiceNoLocDpsApplied?: number;
        InvoiceNoShipSltaxType?: string;
        InvoiceNoShipGsltaxPcent?: number;
        InvoiceNoShipCount?: number;
        InvoiceNoSourceType?: string;
        InvoiceNoLastChgsNo?: number;
        InvoiceNoDocType?: string;
        InvoiceNoDocId?: string;
        InvoiceNoAnlys9?: string;
        InvoiceNoAnlys10?: string;
        InvoiceNoAnlys11?: string;
        InvoiceNoAnlys12?: string;
        InvoiceNoAnlys13?: string;
        InvoiceNoAnlys14?: string;
        InvoiceNoBreakDebitNote?: boolean;
        InvoiceNoFreezed?: boolean;
        InvoiceNoRelatedDebitNote?: string;
        InvoiceNoCloned?: boolean;
        InvoiceNoClonedCompanyCode?: string;
        InvoiceNoUseSampleAcct?: boolean;
        InvoiceNoReferenceDate?: string;
    }
    namespace AccountsReceivableCommissionRow {
        const idProperty = "InvoiceNo";
        const nameProperty = "InvoiceNo";
        const localTextPrefix = "Finance.AccountsReceivableCommission";
        namespace Fields {
            const InvoiceNo: string;
            const Salesman: string;
            const SalesmanName: string;
            const Rate: string;
            const InvoiceNoRecnum: string;
            const InvoiceNoDirectEntry: string;
            const InvoiceNoPosted: string;
            const InvoiceNoClosed: string;
            const InvoiceNoReturned: string;
            const InvoiceNoDebitNote: string;
            const InvoiceNoCustomerNo: string;
            const InvoiceNoCustomerName: string;
            const InvoiceNoAddress: string;
            const InvoiceNoAddress2: string;
            const InvoiceNoAddress3: string;
            const InvoiceNoAddress4: string;
            const InvoiceNoAttention: string;
            const InvoiceNoInvoiceDate: string;
            const InvoiceNoPeriod: string;
            const InvoiceNoFiscalYear: string;
            const InvoiceNoPeriodNo: string;
            const InvoiceNoSalesman: string;
            const InvoiceNoCcy: string;
            const InvoiceNoExchRate: string;
            const InvoiceNoPayTerms: string;
            const InvoiceNoDiscDays: string;
            const InvoiceNoDiscPcent: string;
            const InvoiceNoDueDays: string;
            const InvoiceNoDiscountDate: string;
            const InvoiceNoDueDate: string;
            const InvoiceNoExpectedDate: string;
            const InvoiceNoAnlys1: string;
            const InvoiceNoAnlys2: string;
            const InvoiceNoTotPriceAmt: string;
            const InvoiceNoLocPriceAmt: string;
            const InvoiceNoTotPtaxAmt: string;
            const InvoiceNoLocPtaxAmt: string;
            const InvoiceNoTotExtPrice: string;
            const InvoiceNoLocExtPrice: string;
            const InvoiceNoTotLdiscAmt: string;
            const InvoiceNoLocLdiscAmt: string;
            const InvoiceNoTotAtaxAmt: string;
            const InvoiceNoLocAtaxAmt: string;
            const InvoiceNoTotItemAmt: string;
            const InvoiceNoLocItemAmt: string;
            const InvoiceNoTdiscPcent: string;
            const InvoiceNoTdiscAmt: string;
            const InvoiceNoLocalTdiscAmt: string;
            const InvoiceNoChgsAmt: string;
            const InvoiceNoLocChgsAmt: string;
            const InvoiceNoGtaxAmt: string;
            const InvoiceNoLocalGtaxAmt: string;
            const InvoiceNoNetAmt: string;
            const InvoiceNoLocalNetAmt: string;
            const InvoiceNoTdiscAmtCpd: string;
            const InvoiceNoLastLineNo: string;
            const InvoiceNoCreatedDate: string;
            const InvoiceNoCreatedBy: string;
            const InvoiceNoRevisedDate: string;
            const InvoiceNoRevisedBy: string;
            const InvoiceNoPostedDate: string;
            const InvoiceNoPostedBy: string;
            const InvoiceNoLastLogNo: string;
            const InvoiceNoSettledAmt: string;
            const InvoiceNoLsettledAmt: string;
            const InvoiceNoTermDiscAmt: string;
            const InvoiceNoLtermDiscAmt: string;
            const InvoiceNoReturnAmt: string;
            const InvoiceNoLreturnAmt: string;
            const InvoiceNoBalAmt: string;
            const InvoiceNoBalAmtLocal: string;
            const InvoiceNoOverAllocAmt: string;
            const InvoiceNoLoverAllocAmt: string;
            const InvoiceNoAcctCustomer: string;
            const InvoiceNoAcctTdisc: string;
            const InvoiceNoAcctGtax: string;
            const InvoiceNoLockType: string;
            const InvoiceNoLockRefNo: string;
            const InvoiceNoBatchSelect: string;
            const InvoiceNoGlLink: string;
            const InvoiceNoGlLinkType: string;
            const InvoiceNoGlLinkNo: string;
            const InvoiceNoOwnerBranch: string;
            const InvoiceNoSourceBranch: string;
            const InvoiceNoCheckCrlimit: string;
            const InvoiceNoCheckCrbal: string;
            const InvoiceNoComments1: string;
            const InvoiceNoComments2: string;
            const InvoiceNoComments3: string;
            const InvoiceNoComments4: string;
            const InvoiceNoLastTextNo: string;
            const InvoiceNoShipTo: string;
            const InvoiceNoTelNo: string;
            const InvoiceNoFaxNo: string;
            const InvoiceNoSltaxType: string;
            const InvoiceNoGsltaxPcent: string;
            const InvoiceNoTotGsltaxAmt: string;
            const InvoiceNoTotLsltaxAmt: string;
            const InvoiceNoLocGsltaxAmt: string;
            const InvoiceNoLocLsltaxAmt: string;
            const InvoiceNoAcctSltax: string;
            const InvoiceNoCustomerPo: string;
            const InvoiceNoAiLink: string;
            const InvoiceNoAiLinkType: string;
            const InvoiceNoAiLinkNo: string;
            const InvoiceNoAnlys7: string;
            const InvoiceNoAnlys8: string;
            const InvoiceNoNetTradeAmt: string;
            const InvoiceNoNetOrdrAmt: string;
            const InvoiceNoShipAmt: string;
            const InvoiceNoLshipAmt: string;
            const InvoiceNoVariaAmt: string;
            const InvoiceNoLvariaAmt: string;
            const InvoiceNoItemVariaAmt: string;
            const InvoiceNoLitemVariaAmt: string;
            const InvoiceNoChgsVariaAmt: string;
            const InvoiceNoLchgsVariaAmt: string;
            const InvoiceNoDpsApplied: string;
            const InvoiceNoLocDpsApplied: string;
            const InvoiceNoShipSltaxType: string;
            const InvoiceNoShipGsltaxPcent: string;
            const InvoiceNoShipCount: string;
            const InvoiceNoSourceType: string;
            const InvoiceNoLastChgsNo: string;
            const InvoiceNoDocType: string;
            const InvoiceNoDocId: string;
            const InvoiceNoAnlys9: string;
            const InvoiceNoAnlys10: string;
            const InvoiceNoAnlys11: string;
            const InvoiceNoAnlys12: string;
            const InvoiceNoAnlys13: string;
            const InvoiceNoAnlys14: string;
            const InvoiceNoBreakDebitNote: string;
            const InvoiceNoFreezed: string;
            const InvoiceNoRelatedDebitNote: string;
            const InvoiceNoCloned: string;
            const InvoiceNoClonedCompanyCode: string;
            const InvoiceNoUseSampleAcct: string;
            const InvoiceNoReferenceDate: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivableCommissionService {
        const baseUrl = "Finance/AccountsReceivableCommission";
        function Create(request: Serenity.SaveRequest<AccountsReceivableCommissionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivableCommissionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivableCommissionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivableCommissionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivableInvoiceDetailForm {
        InvoiceNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        Returned: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        Qty: Serenity.DecimalEditor;
        LotSize: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        PriceCpd: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        ReturnQty: Serenity.DecimalEditor;
        ReturnAmt: Serenity.DecimalEditor;
        LreturnAmt: Serenity.DecimalEditor;
        InvoiceDate: Serenity.DateEditor;
        CustomerNo: Serenity.StringEditor;
        AcctSales: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        ExtDescription: Serenity.StringEditor;
        SltaxPcent: Serenity.DecimalEditor;
        SltaxAmt: Serenity.DecimalEditor;
        LocSltaxAmt: Serenity.DecimalEditor;
        AcctSltax: Serenity.StringEditor;
        ShipmentRef: Serenity.StringEditor;
        ShipmentEntryNo: Serenity.DecimalEditor;
        OrderNo: Serenity.StringEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        OrderLineNo: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        AcctLdisc: Serenity.StringEditor;
        ShipItemAmt: Serenity.DecimalEditor;
        LshipItemAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        AcctVariance: Serenity.StringEditor;
        VariaAmt: Serenity.DecimalEditor;
        LocalVariaAmt: Serenity.DecimalEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivableInvoiceDetailRow {
        Recnum?: number;
        InvoiceNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Posted?: string;
        Returned?: string;
        Description?: string;
        Uom?: string;
        Qty?: number;
        LotSize?: number;
        Price?: number;
        ExtPrice?: number;
        LocExtPrice?: number;
        PriceCpd?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        ReturnQty?: number;
        ReturnAmt?: number;
        LreturnAmt?: number;
        InvoiceDate?: string;
        CustomerNo?: string;
        AcctSales?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        ExtDescription?: string;
        SltaxPcent?: number;
        SltaxAmt?: number;
        LocSltaxAmt?: number;
        AcctSltax?: string;
        ShipmentRef?: string;
        ShipmentEntryNo?: number;
        OrderNo?: string;
        LdiscPcent?: number;
        LdiscAmt?: number;
        NetItemAmt?: number;
        OrderLineNo?: number;
        PriceAmt?: number;
        NetPrice?: number;
        AcctLdisc?: string;
        ShipItemAmt?: number;
        LshipItemAmt?: number;
        LocItemAmt?: number;
        LocPriceAmt?: number;
        LocLdiscAmt?: number;
        AcctVariance?: string;
        VariaAmt?: number;
        LocalVariaAmt?: number;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        InvoiceNoRecnum?: number;
        InvoiceNoDirectEntry?: string;
        InvoiceNoPosted?: string;
        InvoiceNoClosed?: string;
        InvoiceNoReturned?: string;
        InvoiceNoDebitNote?: string;
        InvoiceNoCustomerNo?: string;
        InvoiceNoCustomerName?: string;
        InvoiceNoAddress?: string;
        InvoiceNoAddress2?: string;
        InvoiceNoAddress3?: string;
        InvoiceNoAddress4?: string;
        InvoiceNoAttention?: string;
        InvoiceNoInvoiceDate?: string;
        InvoiceNoPeriod?: string;
        InvoiceNoFiscalYear?: number;
        InvoiceNoPeriodNo?: number;
        InvoiceNoSalesman?: string;
        InvoiceNoCcy?: string;
        InvoiceNoExchRate?: number;
        InvoiceNoPayTerms?: string;
        InvoiceNoDiscDays?: number;
        InvoiceNoDiscPcent?: number;
        InvoiceNoDueDays?: number;
        InvoiceNoDiscountDate?: string;
        InvoiceNoDueDate?: string;
        InvoiceNoExpectedDate?: string;
        InvoiceNoAnlys1?: string;
        InvoiceNoAnlys2?: string;
        InvoiceNoTotPriceAmt?: number;
        InvoiceNoLocPriceAmt?: number;
        InvoiceNoTotPtaxAmt?: number;
        InvoiceNoLocPtaxAmt?: number;
        InvoiceNoTotExtPrice?: number;
        InvoiceNoLocExtPrice?: number;
        InvoiceNoTotLdiscAmt?: number;
        InvoiceNoLocLdiscAmt?: number;
        InvoiceNoTotAtaxAmt?: number;
        InvoiceNoLocAtaxAmt?: number;
        InvoiceNoTotItemAmt?: number;
        InvoiceNoLocItemAmt?: number;
        InvoiceNoTdiscPcent?: number;
        InvoiceNoTdiscAmt?: number;
        InvoiceNoLocalTdiscAmt?: number;
        InvoiceNoChgsAmt?: number;
        InvoiceNoLocChgsAmt?: number;
        InvoiceNoGtaxAmt?: number;
        InvoiceNoLocalGtaxAmt?: number;
        InvoiceNoNetAmt?: number;
        InvoiceNoLocalNetAmt?: number;
        InvoiceNoTdiscAmtCpd?: number;
        InvoiceNoLastLineNo?: number;
        InvoiceNoCreatedDate?: string;
        InvoiceNoCreatedBy?: string;
        InvoiceNoRevisedDate?: string;
        InvoiceNoRevisedBy?: string;
        InvoiceNoPostedDate?: string;
        InvoiceNoPostedBy?: string;
        InvoiceNoLastLogNo?: number;
        InvoiceNoSettledAmt?: number;
        InvoiceNoLsettledAmt?: number;
        InvoiceNoTermDiscAmt?: number;
        InvoiceNoLtermDiscAmt?: number;
        InvoiceNoReturnAmt?: number;
        InvoiceNoLreturnAmt?: number;
        InvoiceNoBalAmt?: number;
        InvoiceNoBalAmtLocal?: number;
        InvoiceNoOverAllocAmt?: number;
        InvoiceNoLoverAllocAmt?: number;
        InvoiceNoAcctCustomer?: string;
        InvoiceNoAcctTdisc?: string;
        InvoiceNoAcctGtax?: string;
        InvoiceNoLockType?: string;
        InvoiceNoLockRefNo?: string;
        InvoiceNoBatchSelect?: string;
        InvoiceNoGlLink?: string;
        InvoiceNoGlLinkType?: string;
        InvoiceNoGlLinkNo?: string;
        InvoiceNoOwnerBranch?: string;
        InvoiceNoSourceBranch?: string;
        InvoiceNoCheckCrlimit?: string;
        InvoiceNoCheckCrbal?: number;
        InvoiceNoComments1?: string;
        InvoiceNoComments2?: string;
        InvoiceNoComments3?: string;
        InvoiceNoComments4?: string;
        InvoiceNoLastTextNo?: number;
        InvoiceNoShipTo?: string;
        InvoiceNoTelNo?: string;
        InvoiceNoFaxNo?: string;
        InvoiceNoSltaxType?: string;
        InvoiceNoGsltaxPcent?: number;
        InvoiceNoTotGsltaxAmt?: number;
        InvoiceNoTotLsltaxAmt?: number;
        InvoiceNoLocGsltaxAmt?: number;
        InvoiceNoLocLsltaxAmt?: number;
        InvoiceNoAcctSltax?: string;
        InvoiceNoCustomerPo?: string;
        InvoiceNoAiLink?: string;
        InvoiceNoAiLinkType?: string;
        InvoiceNoAiLinkNo?: string;
        InvoiceNoAnlys7?: string;
        InvoiceNoAnlys8?: string;
        InvoiceNoNetTradeAmt?: number;
        InvoiceNoNetOrdrAmt?: number;
        InvoiceNoShipAmt?: number;
        InvoiceNoLshipAmt?: number;
        InvoiceNoVariaAmt?: number;
        InvoiceNoLvariaAmt?: number;
        InvoiceNoItemVariaAmt?: number;
        InvoiceNoLitemVariaAmt?: number;
        InvoiceNoChgsVariaAmt?: number;
        InvoiceNoLchgsVariaAmt?: number;
        InvoiceNoDpsApplied?: number;
        InvoiceNoLocDpsApplied?: number;
        InvoiceNoShipSltaxType?: string;
        InvoiceNoShipGsltaxPcent?: number;
        InvoiceNoShipCount?: number;
        InvoiceNoSourceType?: string;
        InvoiceNoLastChgsNo?: number;
        InvoiceNoDocType?: string;
        InvoiceNoDocId?: string;
        InvoiceNoAnlys9?: string;
        InvoiceNoAnlys10?: string;
        InvoiceNoAnlys11?: string;
        InvoiceNoAnlys12?: string;
        InvoiceNoAnlys13?: string;
        InvoiceNoAnlys14?: string;
        InvoiceNoBreakDebitNote?: boolean;
        InvoiceNoFreezed?: boolean;
        InvoiceNoRelatedDebitNote?: string;
        InvoiceNoCloned?: boolean;
        InvoiceNoClonedCompanyCode?: string;
        InvoiceNoUseSampleAcct?: boolean;
        InvoiceNoReferenceDate?: string;
    }
    namespace AccountsReceivableInvoiceDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "InvoiceNo";
        const localTextPrefix = "Finance.AccountsReceivableInvoiceDetail";
        namespace Fields {
            const Recnum: string;
            const InvoiceNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Posted: string;
            const Returned: string;
            const Description: string;
            const Uom: string;
            const Qty: string;
            const LotSize: string;
            const Price: string;
            const ExtPrice: string;
            const LocExtPrice: string;
            const PriceCpd: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const ReturnQty: string;
            const ReturnAmt: string;
            const LreturnAmt: string;
            const InvoiceDate: string;
            const CustomerNo: string;
            const AcctSales: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const ExtDescription: string;
            const SltaxPcent: string;
            const SltaxAmt: string;
            const LocSltaxAmt: string;
            const AcctSltax: string;
            const ShipmentRef: string;
            const ShipmentEntryNo: string;
            const OrderNo: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const NetItemAmt: string;
            const OrderLineNo: string;
            const PriceAmt: string;
            const NetPrice: string;
            const AcctLdisc: string;
            const ShipItemAmt: string;
            const LshipItemAmt: string;
            const LocItemAmt: string;
            const LocPriceAmt: string;
            const LocLdiscAmt: string;
            const AcctVariance: string;
            const VariaAmt: string;
            const LocalVariaAmt: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const InvoiceNoRecnum: string;
            const InvoiceNoDirectEntry: string;
            const InvoiceNoPosted: string;
            const InvoiceNoClosed: string;
            const InvoiceNoReturned: string;
            const InvoiceNoDebitNote: string;
            const InvoiceNoCustomerNo: string;
            const InvoiceNoCustomerName: string;
            const InvoiceNoAddress: string;
            const InvoiceNoAddress2: string;
            const InvoiceNoAddress3: string;
            const InvoiceNoAddress4: string;
            const InvoiceNoAttention: string;
            const InvoiceNoInvoiceDate: string;
            const InvoiceNoPeriod: string;
            const InvoiceNoFiscalYear: string;
            const InvoiceNoPeriodNo: string;
            const InvoiceNoSalesman: string;
            const InvoiceNoCcy: string;
            const InvoiceNoExchRate: string;
            const InvoiceNoPayTerms: string;
            const InvoiceNoDiscDays: string;
            const InvoiceNoDiscPcent: string;
            const InvoiceNoDueDays: string;
            const InvoiceNoDiscountDate: string;
            const InvoiceNoDueDate: string;
            const InvoiceNoExpectedDate: string;
            const InvoiceNoAnlys1: string;
            const InvoiceNoAnlys2: string;
            const InvoiceNoTotPriceAmt: string;
            const InvoiceNoLocPriceAmt: string;
            const InvoiceNoTotPtaxAmt: string;
            const InvoiceNoLocPtaxAmt: string;
            const InvoiceNoTotExtPrice: string;
            const InvoiceNoLocExtPrice: string;
            const InvoiceNoTotLdiscAmt: string;
            const InvoiceNoLocLdiscAmt: string;
            const InvoiceNoTotAtaxAmt: string;
            const InvoiceNoLocAtaxAmt: string;
            const InvoiceNoTotItemAmt: string;
            const InvoiceNoLocItemAmt: string;
            const InvoiceNoTdiscPcent: string;
            const InvoiceNoTdiscAmt: string;
            const InvoiceNoLocalTdiscAmt: string;
            const InvoiceNoChgsAmt: string;
            const InvoiceNoLocChgsAmt: string;
            const InvoiceNoGtaxAmt: string;
            const InvoiceNoLocalGtaxAmt: string;
            const InvoiceNoNetAmt: string;
            const InvoiceNoLocalNetAmt: string;
            const InvoiceNoTdiscAmtCpd: string;
            const InvoiceNoLastLineNo: string;
            const InvoiceNoCreatedDate: string;
            const InvoiceNoCreatedBy: string;
            const InvoiceNoRevisedDate: string;
            const InvoiceNoRevisedBy: string;
            const InvoiceNoPostedDate: string;
            const InvoiceNoPostedBy: string;
            const InvoiceNoLastLogNo: string;
            const InvoiceNoSettledAmt: string;
            const InvoiceNoLsettledAmt: string;
            const InvoiceNoTermDiscAmt: string;
            const InvoiceNoLtermDiscAmt: string;
            const InvoiceNoReturnAmt: string;
            const InvoiceNoLreturnAmt: string;
            const InvoiceNoBalAmt: string;
            const InvoiceNoBalAmtLocal: string;
            const InvoiceNoOverAllocAmt: string;
            const InvoiceNoLoverAllocAmt: string;
            const InvoiceNoAcctCustomer: string;
            const InvoiceNoAcctTdisc: string;
            const InvoiceNoAcctGtax: string;
            const InvoiceNoLockType: string;
            const InvoiceNoLockRefNo: string;
            const InvoiceNoBatchSelect: string;
            const InvoiceNoGlLink: string;
            const InvoiceNoGlLinkType: string;
            const InvoiceNoGlLinkNo: string;
            const InvoiceNoOwnerBranch: string;
            const InvoiceNoSourceBranch: string;
            const InvoiceNoCheckCrlimit: string;
            const InvoiceNoCheckCrbal: string;
            const InvoiceNoComments1: string;
            const InvoiceNoComments2: string;
            const InvoiceNoComments3: string;
            const InvoiceNoComments4: string;
            const InvoiceNoLastTextNo: string;
            const InvoiceNoShipTo: string;
            const InvoiceNoTelNo: string;
            const InvoiceNoFaxNo: string;
            const InvoiceNoSltaxType: string;
            const InvoiceNoGsltaxPcent: string;
            const InvoiceNoTotGsltaxAmt: string;
            const InvoiceNoTotLsltaxAmt: string;
            const InvoiceNoLocGsltaxAmt: string;
            const InvoiceNoLocLsltaxAmt: string;
            const InvoiceNoAcctSltax: string;
            const InvoiceNoCustomerPo: string;
            const InvoiceNoAiLink: string;
            const InvoiceNoAiLinkType: string;
            const InvoiceNoAiLinkNo: string;
            const InvoiceNoAnlys7: string;
            const InvoiceNoAnlys8: string;
            const InvoiceNoNetTradeAmt: string;
            const InvoiceNoNetOrdrAmt: string;
            const InvoiceNoShipAmt: string;
            const InvoiceNoLshipAmt: string;
            const InvoiceNoVariaAmt: string;
            const InvoiceNoLvariaAmt: string;
            const InvoiceNoItemVariaAmt: string;
            const InvoiceNoLitemVariaAmt: string;
            const InvoiceNoChgsVariaAmt: string;
            const InvoiceNoLchgsVariaAmt: string;
            const InvoiceNoDpsApplied: string;
            const InvoiceNoLocDpsApplied: string;
            const InvoiceNoShipSltaxType: string;
            const InvoiceNoShipGsltaxPcent: string;
            const InvoiceNoShipCount: string;
            const InvoiceNoSourceType: string;
            const InvoiceNoLastChgsNo: string;
            const InvoiceNoDocType: string;
            const InvoiceNoDocId: string;
            const InvoiceNoAnlys9: string;
            const InvoiceNoAnlys10: string;
            const InvoiceNoAnlys11: string;
            const InvoiceNoAnlys12: string;
            const InvoiceNoAnlys13: string;
            const InvoiceNoAnlys14: string;
            const InvoiceNoBreakDebitNote: string;
            const InvoiceNoFreezed: string;
            const InvoiceNoRelatedDebitNote: string;
            const InvoiceNoCloned: string;
            const InvoiceNoClonedCompanyCode: string;
            const InvoiceNoUseSampleAcct: string;
            const InvoiceNoReferenceDate: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivableInvoiceDetailService {
        const baseUrl = "Finance/AccountsReceivableInvoiceDetail";
        function Create(request: Serenity.SaveRequest<AccountsReceivableInvoiceDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivableInvoiceDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivableInvoiceDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivableInvoiceDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivableInvoiceForm {
        InvoiceNo: Serenity.StringEditor;
        InvoiceDate: Serenity.DateEditor;
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        ShipTo: Serenity.StringEditor;
        Attention: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        TelNo: Serenity.StringEditor;
        FaxNo: Serenity.StringEditor;
        PayTerms: Serenity.StringEditor;
        DiscDays: Serenity.DecimalEditor;
        DiscPcent: Serenity.DecimalEditor;
        DiscountDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        ExpectedDate: Serenity.DateEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        ChgsAmt: Serenity.DecimalEditor;
        NetOrdrAmt: Serenity.DecimalEditor;
        NetAmt: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        BalAmt: Serenity.DecimalEditor;
        OrderList: AccountsReceivableInvoiceOrderEditor;
        DetailList: AccountsReceivableInvoiceDetailEditor;
        CommissionList: AccountsReceivableCommissionEditor;
        Comments1: Serenity.TextAreaEditor;
        Comments2: Serenity.TextAreaEditor;
        Comments3: Serenity.TextAreaEditor;
        Comments4: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceOrderForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivableInvoiceOrderForm {
        InvoiceNo: Serenity.StringEditor;
        ShipmentRef: Serenity.StringEditor;
        OrderNo: Serenity.StringEditor;
        TotPriceAmt: Serenity.DecimalEditor;
        TotExtPrice: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetOrdrAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
        DpsCover: Serenity.DecimalEditor;
        DpsPcent: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        LocDpsApplied: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        SltaxType: Serenity.StringEditor;
        GsltaxPcent: Serenity.DecimalEditor;
        TotGsltaxAmt: Serenity.DecimalEditor;
        TotLsltaxAmt: Serenity.DecimalEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        CustomerPo: Serenity.StringEditor;
        Anlys21: Serenity.StringEditor;
        Anlys22: Serenity.StringEditor;
        Anlys23: Serenity.StringEditor;
        Anlys24: Serenity.StringEditor;
        Anlys25: Serenity.StringEditor;
        Anlys26: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivableInvoiceOrderRow {
        Recnum?: number;
        InvoiceNo?: string;
        ShipmentRef?: string;
        OrderNo?: string;
        TotPriceAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        NetPayAmt?: number;
        DpsCover?: number;
        DpsPcent?: number;
        DpsApplied?: number;
        LocDpsApplied?: number;
        NetBalAmt?: number;
        SltaxType?: string;
        GsltaxPcent?: number;
        TotGsltaxAmt?: number;
        TotLsltaxAmt?: number;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        CustomerPo?: string;
        Anlys21?: string;
        Anlys22?: string;
        Anlys23?: string;
        Anlys24?: string;
        Anlys25?: string;
        Anlys26?: string;
        InvoiceNoRecnum?: number;
        InvoiceNoDirectEntry?: string;
        InvoiceNoPosted?: string;
        InvoiceNoClosed?: string;
        InvoiceNoReturned?: string;
        InvoiceNoDebitNote?: string;
        InvoiceNoCustomerNo?: string;
        InvoiceNoCustomerName?: string;
        InvoiceNoAddress?: string;
        InvoiceNoAddress2?: string;
        InvoiceNoAddress3?: string;
        InvoiceNoAddress4?: string;
        InvoiceNoAttention?: string;
        InvoiceNoInvoiceDate?: string;
        InvoiceNoPeriod?: string;
        InvoiceNoFiscalYear?: number;
        InvoiceNoPeriodNo?: number;
        InvoiceNoSalesman?: string;
        InvoiceNoCcy?: string;
        InvoiceNoExchRate?: number;
        InvoiceNoPayTerms?: string;
        InvoiceNoDiscDays?: number;
        InvoiceNoDiscPcent?: number;
        InvoiceNoDueDays?: number;
        InvoiceNoDiscountDate?: string;
        InvoiceNoDueDate?: string;
        InvoiceNoExpectedDate?: string;
        InvoiceNoAnlys1?: string;
        InvoiceNoAnlys2?: string;
        InvoiceNoTotPriceAmt?: number;
        InvoiceNoLocPriceAmt?: number;
        InvoiceNoTotPtaxAmt?: number;
        InvoiceNoLocPtaxAmt?: number;
        InvoiceNoTotExtPrice?: number;
        InvoiceNoLocExtPrice?: number;
        InvoiceNoTotLdiscAmt?: number;
        InvoiceNoLocLdiscAmt?: number;
        InvoiceNoTotAtaxAmt?: number;
        InvoiceNoLocAtaxAmt?: number;
        InvoiceNoTotItemAmt?: number;
        InvoiceNoLocItemAmt?: number;
        InvoiceNoTdiscPcent?: number;
        InvoiceNoTdiscAmt?: number;
        InvoiceNoLocalTdiscAmt?: number;
        InvoiceNoChgsAmt?: number;
        InvoiceNoLocChgsAmt?: number;
        InvoiceNoGtaxAmt?: number;
        InvoiceNoLocalGtaxAmt?: number;
        InvoiceNoNetAmt?: number;
        InvoiceNoLocalNetAmt?: number;
        InvoiceNoTdiscAmtCpd?: number;
        InvoiceNoLastLineNo?: number;
        InvoiceNoCreatedDate?: string;
        InvoiceNoCreatedBy?: string;
        InvoiceNoRevisedDate?: string;
        InvoiceNoRevisedBy?: string;
        InvoiceNoPostedDate?: string;
        InvoiceNoPostedBy?: string;
        InvoiceNoLastLogNo?: number;
        InvoiceNoSettledAmt?: number;
        InvoiceNoLsettledAmt?: number;
        InvoiceNoTermDiscAmt?: number;
        InvoiceNoLtermDiscAmt?: number;
        InvoiceNoReturnAmt?: number;
        InvoiceNoLreturnAmt?: number;
        InvoiceNoBalAmt?: number;
        InvoiceNoBalAmtLocal?: number;
        InvoiceNoOverAllocAmt?: number;
        InvoiceNoLoverAllocAmt?: number;
        InvoiceNoAcctCustomer?: string;
        InvoiceNoAcctTdisc?: string;
        InvoiceNoAcctGtax?: string;
        InvoiceNoLockType?: string;
        InvoiceNoLockRefNo?: string;
        InvoiceNoBatchSelect?: string;
        InvoiceNoGlLink?: string;
        InvoiceNoGlLinkType?: string;
        InvoiceNoGlLinkNo?: string;
        InvoiceNoOwnerBranch?: string;
        InvoiceNoSourceBranch?: string;
        InvoiceNoCheckCrlimit?: string;
        InvoiceNoCheckCrbal?: number;
        InvoiceNoComments1?: string;
        InvoiceNoComments2?: string;
        InvoiceNoComments3?: string;
        InvoiceNoComments4?: string;
        InvoiceNoLastTextNo?: number;
        InvoiceNoShipTo?: string;
        InvoiceNoTelNo?: string;
        InvoiceNoFaxNo?: string;
        InvoiceNoSltaxType?: string;
        InvoiceNoGsltaxPcent?: number;
        InvoiceNoTotGsltaxAmt?: number;
        InvoiceNoTotLsltaxAmt?: number;
        InvoiceNoLocGsltaxAmt?: number;
        InvoiceNoLocLsltaxAmt?: number;
        InvoiceNoAcctSltax?: string;
        InvoiceNoCustomerPo?: string;
        InvoiceNoAiLink?: string;
        InvoiceNoAiLinkType?: string;
        InvoiceNoAiLinkNo?: string;
        InvoiceNoAnlys7?: string;
        InvoiceNoAnlys8?: string;
        InvoiceNoNetTradeAmt?: number;
        InvoiceNoNetOrdrAmt?: number;
        InvoiceNoShipAmt?: number;
        InvoiceNoLshipAmt?: number;
        InvoiceNoVariaAmt?: number;
        InvoiceNoLvariaAmt?: number;
        InvoiceNoItemVariaAmt?: number;
        InvoiceNoLitemVariaAmt?: number;
        InvoiceNoChgsVariaAmt?: number;
        InvoiceNoLchgsVariaAmt?: number;
        InvoiceNoDpsApplied?: number;
        InvoiceNoLocDpsApplied?: number;
        InvoiceNoShipSltaxType?: string;
        InvoiceNoShipGsltaxPcent?: number;
        InvoiceNoShipCount?: number;
        InvoiceNoSourceType?: string;
        InvoiceNoLastChgsNo?: number;
        InvoiceNoDocType?: string;
        InvoiceNoDocId?: string;
        InvoiceNoAnlys9?: string;
        InvoiceNoAnlys10?: string;
        InvoiceNoAnlys11?: string;
        InvoiceNoAnlys12?: string;
        InvoiceNoAnlys13?: string;
        InvoiceNoAnlys14?: string;
        InvoiceNoBreakDebitNote?: boolean;
        InvoiceNoFreezed?: boolean;
        InvoiceNoRelatedDebitNote?: string;
        InvoiceNoCloned?: boolean;
        InvoiceNoClonedCompanyCode?: string;
        InvoiceNoUseSampleAcct?: boolean;
        InvoiceNoReferenceDate?: string;
    }
    namespace AccountsReceivableInvoiceOrderRow {
        const idProperty = "Recnum";
        const nameProperty = "InvoiceNo";
        const localTextPrefix = "Finance.AccountsReceivableInvoiceOrder";
        namespace Fields {
            const Recnum: string;
            const InvoiceNo: string;
            const ShipmentRef: string;
            const OrderNo: string;
            const TotPriceAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const NetPayAmt: string;
            const DpsCover: string;
            const DpsPcent: string;
            const DpsApplied: string;
            const LocDpsApplied: string;
            const NetBalAmt: string;
            const SltaxType: string;
            const GsltaxPcent: string;
            const TotGsltaxAmt: string;
            const TotLsltaxAmt: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const CustomerPo: string;
            const Anlys21: string;
            const Anlys22: string;
            const Anlys23: string;
            const Anlys24: string;
            const Anlys25: string;
            const Anlys26: string;
            const InvoiceNoRecnum: string;
            const InvoiceNoDirectEntry: string;
            const InvoiceNoPosted: string;
            const InvoiceNoClosed: string;
            const InvoiceNoReturned: string;
            const InvoiceNoDebitNote: string;
            const InvoiceNoCustomerNo: string;
            const InvoiceNoCustomerName: string;
            const InvoiceNoAddress: string;
            const InvoiceNoAddress2: string;
            const InvoiceNoAddress3: string;
            const InvoiceNoAddress4: string;
            const InvoiceNoAttention: string;
            const InvoiceNoInvoiceDate: string;
            const InvoiceNoPeriod: string;
            const InvoiceNoFiscalYear: string;
            const InvoiceNoPeriodNo: string;
            const InvoiceNoSalesman: string;
            const InvoiceNoCcy: string;
            const InvoiceNoExchRate: string;
            const InvoiceNoPayTerms: string;
            const InvoiceNoDiscDays: string;
            const InvoiceNoDiscPcent: string;
            const InvoiceNoDueDays: string;
            const InvoiceNoDiscountDate: string;
            const InvoiceNoDueDate: string;
            const InvoiceNoExpectedDate: string;
            const InvoiceNoAnlys1: string;
            const InvoiceNoAnlys2: string;
            const InvoiceNoTotPriceAmt: string;
            const InvoiceNoLocPriceAmt: string;
            const InvoiceNoTotPtaxAmt: string;
            const InvoiceNoLocPtaxAmt: string;
            const InvoiceNoTotExtPrice: string;
            const InvoiceNoLocExtPrice: string;
            const InvoiceNoTotLdiscAmt: string;
            const InvoiceNoLocLdiscAmt: string;
            const InvoiceNoTotAtaxAmt: string;
            const InvoiceNoLocAtaxAmt: string;
            const InvoiceNoTotItemAmt: string;
            const InvoiceNoLocItemAmt: string;
            const InvoiceNoTdiscPcent: string;
            const InvoiceNoTdiscAmt: string;
            const InvoiceNoLocalTdiscAmt: string;
            const InvoiceNoChgsAmt: string;
            const InvoiceNoLocChgsAmt: string;
            const InvoiceNoGtaxAmt: string;
            const InvoiceNoLocalGtaxAmt: string;
            const InvoiceNoNetAmt: string;
            const InvoiceNoLocalNetAmt: string;
            const InvoiceNoTdiscAmtCpd: string;
            const InvoiceNoLastLineNo: string;
            const InvoiceNoCreatedDate: string;
            const InvoiceNoCreatedBy: string;
            const InvoiceNoRevisedDate: string;
            const InvoiceNoRevisedBy: string;
            const InvoiceNoPostedDate: string;
            const InvoiceNoPostedBy: string;
            const InvoiceNoLastLogNo: string;
            const InvoiceNoSettledAmt: string;
            const InvoiceNoLsettledAmt: string;
            const InvoiceNoTermDiscAmt: string;
            const InvoiceNoLtermDiscAmt: string;
            const InvoiceNoReturnAmt: string;
            const InvoiceNoLreturnAmt: string;
            const InvoiceNoBalAmt: string;
            const InvoiceNoBalAmtLocal: string;
            const InvoiceNoOverAllocAmt: string;
            const InvoiceNoLoverAllocAmt: string;
            const InvoiceNoAcctCustomer: string;
            const InvoiceNoAcctTdisc: string;
            const InvoiceNoAcctGtax: string;
            const InvoiceNoLockType: string;
            const InvoiceNoLockRefNo: string;
            const InvoiceNoBatchSelect: string;
            const InvoiceNoGlLink: string;
            const InvoiceNoGlLinkType: string;
            const InvoiceNoGlLinkNo: string;
            const InvoiceNoOwnerBranch: string;
            const InvoiceNoSourceBranch: string;
            const InvoiceNoCheckCrlimit: string;
            const InvoiceNoCheckCrbal: string;
            const InvoiceNoComments1: string;
            const InvoiceNoComments2: string;
            const InvoiceNoComments3: string;
            const InvoiceNoComments4: string;
            const InvoiceNoLastTextNo: string;
            const InvoiceNoShipTo: string;
            const InvoiceNoTelNo: string;
            const InvoiceNoFaxNo: string;
            const InvoiceNoSltaxType: string;
            const InvoiceNoGsltaxPcent: string;
            const InvoiceNoTotGsltaxAmt: string;
            const InvoiceNoTotLsltaxAmt: string;
            const InvoiceNoLocGsltaxAmt: string;
            const InvoiceNoLocLsltaxAmt: string;
            const InvoiceNoAcctSltax: string;
            const InvoiceNoCustomerPo: string;
            const InvoiceNoAiLink: string;
            const InvoiceNoAiLinkType: string;
            const InvoiceNoAiLinkNo: string;
            const InvoiceNoAnlys7: string;
            const InvoiceNoAnlys8: string;
            const InvoiceNoNetTradeAmt: string;
            const InvoiceNoNetOrdrAmt: string;
            const InvoiceNoShipAmt: string;
            const InvoiceNoLshipAmt: string;
            const InvoiceNoVariaAmt: string;
            const InvoiceNoLvariaAmt: string;
            const InvoiceNoItemVariaAmt: string;
            const InvoiceNoLitemVariaAmt: string;
            const InvoiceNoChgsVariaAmt: string;
            const InvoiceNoLchgsVariaAmt: string;
            const InvoiceNoDpsApplied: string;
            const InvoiceNoLocDpsApplied: string;
            const InvoiceNoShipSltaxType: string;
            const InvoiceNoShipGsltaxPcent: string;
            const InvoiceNoShipCount: string;
            const InvoiceNoSourceType: string;
            const InvoiceNoLastChgsNo: string;
            const InvoiceNoDocType: string;
            const InvoiceNoDocId: string;
            const InvoiceNoAnlys9: string;
            const InvoiceNoAnlys10: string;
            const InvoiceNoAnlys11: string;
            const InvoiceNoAnlys12: string;
            const InvoiceNoAnlys13: string;
            const InvoiceNoAnlys14: string;
            const InvoiceNoBreakDebitNote: string;
            const InvoiceNoFreezed: string;
            const InvoiceNoRelatedDebitNote: string;
            const InvoiceNoCloned: string;
            const InvoiceNoClonedCompanyCode: string;
            const InvoiceNoUseSampleAcct: string;
            const InvoiceNoReferenceDate: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivableInvoiceOrderService {
        const baseUrl = "Finance/AccountsReceivableInvoiceOrder";
        function Create(request: Serenity.SaveRequest<AccountsReceivableInvoiceOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivableInvoiceOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivableInvoiceOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivableInvoiceOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivableInvoiceRow {
        OrderList?: AccountsReceivableInvoiceOrderRow[];
        DetailList?: AccountsReceivableInvoiceDetailRow[];
        CommissionList?: AccountsReceivableCommissionRow[];
        Recnum?: number;
        InvoiceNo?: string;
        DirectEntry?: string;
        Posted?: string;
        Closed?: string;
        Returned?: string;
        DebitNote?: string;
        CustomerNo?: string;
        CustomerName?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        Attention?: string;
        InvoiceDate?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        Salesman?: string;
        Ccy?: string;
        ExchRate?: number;
        PayTerms?: string;
        DiscDays?: number;
        DiscPcent?: number;
        DueDays?: number;
        DiscountDate?: string;
        DueDate?: string;
        ExpectedDate?: string;
        Anlys1?: string;
        Anlys2?: string;
        TotPriceAmt?: number;
        LocPriceAmt?: number;
        TotPtaxAmt?: number;
        LocPtaxAmt?: number;
        TotExtPrice?: number;
        LocExtPrice?: number;
        TotLdiscAmt?: number;
        LocLdiscAmt?: number;
        TotAtaxAmt?: number;
        LocAtaxAmt?: number;
        TotItemAmt?: number;
        LocItemAmt?: number;
        TdiscPcent?: number;
        TdiscAmt?: number;
        LocalTdiscAmt?: number;
        ChgsAmt?: number;
        LocChgsAmt?: number;
        GtaxAmt?: number;
        LocalGtaxAmt?: number;
        NetAmt?: number;
        LocalNetAmt?: number;
        TdiscAmtCpd?: number;
        LastLineNo?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LastLogNo?: number;
        SettledAmt?: number;
        LsettledAmt?: number;
        TermDiscAmt?: number;
        LtermDiscAmt?: number;
        ReturnAmt?: number;
        LreturnAmt?: number;
        BalAmt?: number;
        BalAmtLocal?: number;
        OverAllocAmt?: number;
        LoverAllocAmt?: number;
        AcctCustomer?: string;
        AcctTdisc?: string;
        AcctGtax?: string;
        LockType?: string;
        LockRefNo?: string;
        BatchSelect?: string;
        GlLink?: string;
        GlLinkType?: string;
        GlLinkNo?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        CheckCrlimit?: string;
        CheckCrbal?: number;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        LastTextNo?: number;
        ShipTo?: string;
        TelNo?: string;
        FaxNo?: string;
        SltaxType?: string;
        GsltaxPcent?: number;
        TotGsltaxAmt?: number;
        TotLsltaxAmt?: number;
        LocGsltaxAmt?: number;
        LocLsltaxAmt?: number;
        AcctSltax?: string;
        CustomerPo?: string;
        AiLink?: string;
        AiLinkType?: string;
        AiLinkNo?: string;
        Anlys7?: string;
        Anlys8?: string;
        NetTradeAmt?: number;
        NetOrdrAmt?: number;
        ShipAmt?: number;
        LshipAmt?: number;
        VariaAmt?: number;
        LvariaAmt?: number;
        ItemVariaAmt?: number;
        LitemVariaAmt?: number;
        ChgsVariaAmt?: number;
        LchgsVariaAmt?: number;
        DpsApplied?: number;
        LocDpsApplied?: number;
        ShipSltaxType?: string;
        ShipGsltaxPcent?: number;
        ShipCount?: number;
        SourceType?: string;
        LastChgsNo?: number;
        DocType?: string;
        DocId?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        BreakDebitNote?: boolean;
        Freezed?: boolean;
        RelatedDebitNote?: string;
        Cloned?: boolean;
        ClonedCompanyCode?: string;
        UseSampleAcct?: boolean;
        ReferenceDate?: string;
    }
    namespace AccountsReceivableInvoiceRow {
        const idProperty = "InvoiceNo";
        const nameProperty = "InvoiceNo";
        const localTextPrefix = "Finance.AccountsReceivableInvoice";
        namespace Fields {
            const OrderList: string;
            const DetailList: string;
            const CommissionList: string;
            const Recnum: string;
            const InvoiceNo: string;
            const DirectEntry: string;
            const Posted: string;
            const Closed: string;
            const Returned: string;
            const DebitNote: string;
            const CustomerNo: string;
            const CustomerName: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const Attention: string;
            const InvoiceDate: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const Salesman: string;
            const Ccy: string;
            const ExchRate: string;
            const PayTerms: string;
            const DiscDays: string;
            const DiscPcent: string;
            const DueDays: string;
            const DiscountDate: string;
            const DueDate: string;
            const ExpectedDate: string;
            const Anlys1: string;
            const Anlys2: string;
            const TotPriceAmt: string;
            const LocPriceAmt: string;
            const TotPtaxAmt: string;
            const LocPtaxAmt: string;
            const TotExtPrice: string;
            const LocExtPrice: string;
            const TotLdiscAmt: string;
            const LocLdiscAmt: string;
            const TotAtaxAmt: string;
            const LocAtaxAmt: string;
            const TotItemAmt: string;
            const LocItemAmt: string;
            const TdiscPcent: string;
            const TdiscAmt: string;
            const LocalTdiscAmt: string;
            const ChgsAmt: string;
            const LocChgsAmt: string;
            const GtaxAmt: string;
            const LocalGtaxAmt: string;
            const NetAmt: string;
            const LocalNetAmt: string;
            const TdiscAmtCpd: string;
            const LastLineNo: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LastLogNo: string;
            const SettledAmt: string;
            const LsettledAmt: string;
            const TermDiscAmt: string;
            const LtermDiscAmt: string;
            const ReturnAmt: string;
            const LreturnAmt: string;
            const BalAmt: string;
            const BalAmtLocal: string;
            const OverAllocAmt: string;
            const LoverAllocAmt: string;
            const AcctCustomer: string;
            const AcctTdisc: string;
            const AcctGtax: string;
            const LockType: string;
            const LockRefNo: string;
            const BatchSelect: string;
            const GlLink: string;
            const GlLinkType: string;
            const GlLinkNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const CheckCrlimit: string;
            const CheckCrbal: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const LastTextNo: string;
            const ShipTo: string;
            const TelNo: string;
            const FaxNo: string;
            const SltaxType: string;
            const GsltaxPcent: string;
            const TotGsltaxAmt: string;
            const TotLsltaxAmt: string;
            const LocGsltaxAmt: string;
            const LocLsltaxAmt: string;
            const AcctSltax: string;
            const CustomerPo: string;
            const AiLink: string;
            const AiLinkType: string;
            const AiLinkNo: string;
            const Anlys7: string;
            const Anlys8: string;
            const NetTradeAmt: string;
            const NetOrdrAmt: string;
            const ShipAmt: string;
            const LshipAmt: string;
            const VariaAmt: string;
            const LvariaAmt: string;
            const ItemVariaAmt: string;
            const LitemVariaAmt: string;
            const ChgsVariaAmt: string;
            const LchgsVariaAmt: string;
            const DpsApplied: string;
            const LocDpsApplied: string;
            const ShipSltaxType: string;
            const ShipGsltaxPcent: string;
            const ShipCount: string;
            const SourceType: string;
            const LastChgsNo: string;
            const DocType: string;
            const DocId: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const BreakDebitNote: string;
            const Freezed: string;
            const RelatedDebitNote: string;
            const Cloned: string;
            const ClonedCompanyCode: string;
            const UseSampleAcct: string;
            const ReferenceDate: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivableInvoiceService {
        const baseUrl = "Finance/AccountsReceivableInvoice";
        function Create(request: Serenity.SaveRequest<AccountsReceivableInvoiceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivableInvoiceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivableInvoiceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivableInvoiceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivableJournalForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivableJournalForm {
        EntryNo: Serenity.DecimalEditor;
        CustomerNo: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        TranDate: Serenity.DateEditor;
        TranType: Serenity.StringEditor;
        RefNo: Serenity.StringEditor;
        Debit: Serenity.DecimalEditor;
        Credit: Serenity.DecimalEditor;
        TotalAmt: Serenity.DecimalEditor;
        LocalDebit: Serenity.DecimalEditor;
        LocalCredit: Serenity.DecimalEditor;
        LocalBalance: Serenity.DecimalEditor;
        Particulars: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivableJournalRow {
        Recnum?: number;
        EntryNo?: number;
        CustomerNo?: string;
        Period?: string;
        TranDate?: string;
        TranType?: string;
        RefNo?: string;
        Ccy?: string;
        ExchRate?: number;
        TotalAmt?: number;
        Debit?: number;
        Credit?: number;
        LocalDebit?: number;
        LocalCredit?: number;
        LocalBalance?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
    }
    namespace AccountsReceivableJournalRow {
        const idProperty = "Recnum";
        const nameProperty = "CustomerNo";
        const localTextPrefix = "Finance.AccountsReceivableJournal";
        namespace Fields {
            const Recnum: string;
            const EntryNo: string;
            const CustomerNo: string;
            const Period: string;
            const TranDate: string;
            const TranType: string;
            const RefNo: string;
            const Ccy: string;
            const ExchRate: string;
            const TotalAmt: string;
            const Debit: string;
            const Credit: string;
            const LocalDebit: string;
            const LocalCredit: string;
            const LocalBalance: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivableJournalService {
        const baseUrl = "Finance/AccountsReceivableJournal";
        function Create(request: Serenity.SaveRequest<AccountsReceivableJournalRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivableJournalRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivableJournalRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivableJournalRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivableLedgerForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivableLedgerForm {
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        Summary: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        InvoAmt: Serenity.DecimalEditor;
        MemoAmt: Serenity.DecimalEditor;
        AdjAmt: Serenity.DecimalEditor;
        PayAmt: Serenity.DecimalEditor;
        DiscAmt: Serenity.DecimalEditor;
        DiffAmt: Serenity.DecimalEditor;
        BalBeg: Serenity.DecimalEditor;
        Debit: Serenity.DecimalEditor;
        Credit: Serenity.DecimalEditor;
        BalEnd: Serenity.DecimalEditor;
        RfdAmt: Serenity.DecimalEditor;
        LocalInvoAmt: Serenity.DecimalEditor;
        LocalMemoAmt: Serenity.DecimalEditor;
        LocalAdjAmt: Serenity.DecimalEditor;
        LocalPayAmt: Serenity.DecimalEditor;
        LocalDiscAmt: Serenity.DecimalEditor;
        LocalDiffAmt: Serenity.DecimalEditor;
        LocalBalBeg: Serenity.DecimalEditor;
        LocalDebit: Serenity.DecimalEditor;
        LocalCredit: Serenity.DecimalEditor;
        LocalBalEnd: Serenity.DecimalEditor;
        LocalRfdAmt: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivableLedgerRow {
        Recnum?: number;
        CustomerNo?: string;
        CustomerName?: string;
        Summary?: string;
        Ccy?: string;
        Period?: string;
        CustomerNo2?: string;
        Ccy2?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        InvoAmt?: number;
        MemoAmt?: number;
        AdjAmt?: number;
        PayAmt?: number;
        DiscAmt?: number;
        DiffAmt?: number;
        BalBeg?: number;
        Debit?: number;
        Credit?: number;
        BalEnd?: number;
        LocalInvoAmt?: number;
        LocalMemoAmt?: number;
        LocalAdjAmt?: number;
        LocalPayAmt?: number;
        LocalDiscAmt?: number;
        LocalDiffAmt?: number;
        LocalBalBeg?: number;
        LocalDebit?: number;
        LocalCredit?: number;
        LocalBalEnd?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        RfdAmt?: number;
        LocalRfdAmt?: number;
    }
    namespace AccountsReceivableLedgerRow {
        const idProperty = "Recnum";
        const nameProperty = "CustomerNo";
        const localTextPrefix = "Finance.AccountsReceivableLedger";
        namespace Fields {
            const Recnum: string;
            const CustomerNo: string;
            const CustomerName: string;
            const Summary: string;
            const Ccy: string;
            const Period: string;
            const CustomerNo2: string;
            const Ccy2: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const InvoAmt: string;
            const MemoAmt: string;
            const AdjAmt: string;
            const PayAmt: string;
            const DiscAmt: string;
            const DiffAmt: string;
            const BalBeg: string;
            const Debit: string;
            const Credit: string;
            const BalEnd: string;
            const LocalInvoAmt: string;
            const LocalMemoAmt: string;
            const LocalAdjAmt: string;
            const LocalPayAmt: string;
            const LocalDiscAmt: string;
            const LocalDiffAmt: string;
            const LocalBalBeg: string;
            const LocalDebit: string;
            const LocalCredit: string;
            const LocalBalEnd: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const RfdAmt: string;
            const LocalRfdAmt: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivableLedgerService {
        const baseUrl = "Finance/AccountsReceivableLedger";
        function Create(request: Serenity.SaveRequest<AccountsReceivableLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivableLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivableLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivableLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentCurrencyForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivablePaymentCurrencyForm {
        ReceiptNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        BalAmt: Serenity.DecimalEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivablePaymentCurrencyRow {
        Recnum?: number;
        ReceiptNo?: string;
        Ccy?: string;
        Description?: string;
        ExchRate?: number;
        BalAmt?: number;
        RevisedDate?: string;
        RevisedBy?: string;
    }
    namespace AccountsReceivablePaymentCurrencyRow {
        const idProperty = "Recnum";
        const nameProperty = "ReceiptNo";
        const localTextPrefix = "Finance.AccountsReceivablePaymentCurrency";
        namespace Fields {
            const Recnum: string;
            const ReceiptNo: string;
            const Ccy: string;
            const Description: string;
            const ExchRate: string;
            const BalAmt: string;
            const RevisedDate: string;
            const RevisedBy: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivablePaymentCurrencyService {
        const baseUrl = "Finance/AccountsReceivablePaymentCurrency";
        function Create(request: Serenity.SaveRequest<AccountsReceivablePaymentCurrencyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivablePaymentCurrencyRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivablePaymentCurrencyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivablePaymentCurrencyRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDepositForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivablePaymentDepositForm {
        ReceiptNo: Serenity.StringEditor;
        LineNo: Serenity.IntegerEditor;
        OrderNo: Serenity.StringEditor;
        DepositReceiptNo: Serenity.StringEditor;
        Posted: Serenity.BooleanEditor;
        ReceiptDate: Serenity.DateEditor;
        DepositAmt: Serenity.DecimalEditor;
        DepositAmtLocal: Serenity.DecimalEditor;
        BalAmt: Serenity.DecimalEditor;
        BalAmtLocal: Serenity.DecimalEditor;
        PaidAmt: Serenity.DecimalEditor;
        PaidAmtLocal: Serenity.DecimalEditor;
        Settle: Serenity.BooleanEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        Anlys13: Serenity.StringEditor;
        Anlys14: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivablePaymentDepositRow {
        Recnum?: number;
        ReceiptNo?: string;
        LineNo?: number;
        OrderNo?: string;
        DepositReceiptNo?: string;
        Posted?: boolean;
        ReceiptDate?: string;
        DepositAmt?: number;
        DepositAmtLocal?: number;
        BalAmt?: number;
        BalAmtLocal?: number;
        PaidAmt?: number;
        PaidAmtLocal?: number;
        Settle?: boolean;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
    }
    namespace AccountsReceivablePaymentDepositRow {
        const idProperty = "Recnum";
        const nameProperty = "ReceiptNo";
        const localTextPrefix = "Finance.AccountsReceivablePaymentDeposit";
        namespace Fields {
            const Recnum: string;
            const ReceiptNo: string;
            const LineNo: string;
            const OrderNo: string;
            const DepositReceiptNo: string;
            const Posted: string;
            const ReceiptDate: string;
            const DepositAmt: string;
            const DepositAmtLocal: string;
            const BalAmt: string;
            const BalAmtLocal: string;
            const PaidAmt: string;
            const PaidAmtLocal: string;
            const Settle: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivablePaymentDepositService {
        const baseUrl = "Finance/AccountsReceivablePaymentDeposit";
        function Create(request: Serenity.SaveRequest<AccountsReceivablePaymentDepositRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivablePaymentDepositRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivablePaymentDepositRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivablePaymentDepositRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivablePaymentDetailForm {
        ReceiptNo: Serenity.StringEditor;
        InvoiceNo: Serenity.StringEditor;
        InvoiceDate: Serenity.DateEditor;
        DiscountDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        DiscPercent: Serenity.DecimalEditor;
        Ccy: Serenity.StringEditor;
        InvoExchRate: Serenity.DecimalEditor;
        PayExchRate: Serenity.DecimalEditor;
        BalAmt: Serenity.DecimalEditor;
        BalAmtInvo: Serenity.DecimalEditor;
        DiscAmt: Serenity.DecimalEditor;
        DiscAmtInvo: Serenity.DecimalEditor;
        DueAmt: Serenity.DecimalEditor;
        DueAmtInvo: Serenity.DecimalEditor;
        DueAmtLocal: Serenity.DecimalEditor;
        AppliedAmt: Serenity.DecimalEditor;
        AppliedAmtLoc: Serenity.DecimalEditor;
        SettledAmt: Serenity.DecimalEditor;
        ForexGainAmt: Serenity.DecimalEditor;
        EndAmt: Serenity.DecimalEditor;
        EndAmtLocal: Serenity.DecimalEditor;
        Posted: Serenity.StringEditor;
        LogNo: Serenity.DecimalEditor;
        LastLogNo: Serenity.DecimalEditor;
        ReceiptDate: Serenity.DateEditor;
        Settle: Serenity.StringEditor;
        AppliedAmtInv: Serenity.DecimalEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        InvRoundDiff: Serenity.DecimalEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivablePaymentDetailRow {
        Recnum?: number;
        ReceiptNo?: string;
        InvoiceNo?: string;
        InvoiceDate?: string;
        DiscountDate?: string;
        DueDate?: string;
        DiscPercent?: number;
        Ccy?: string;
        InvoExchRate?: number;
        PayExchRate?: number;
        BalAmt?: number;
        BalAmtInvo?: number;
        DiscAmt?: number;
        DiscAmtInvo?: number;
        DueAmt?: number;
        DueAmtInvo?: number;
        DueAmtLocal?: number;
        AppliedAmt?: number;
        AppliedAmtLoc?: number;
        SettledAmt?: number;
        ForexGainAmt?: number;
        EndAmt?: number;
        EndAmtLocal?: number;
        Posted?: string;
        LogNo?: number;
        LastLogNo?: number;
        ReceiptDate?: string;
        Settle?: string;
        AppliedAmtInv?: number;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        InvRoundDiff?: number;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        ReceiptNoRecnum?: number;
        ReceiptNoDeposit?: string;
        ReceiptNoPosted?: string;
        ReceiptNoCustomerNo?: string;
        ReceiptNoCustomerName?: string;
        ReceiptNoOrderNo?: string;
        ReceiptNoReceiptDate?: string;
        ReceiptNoPeriod?: string;
        ReceiptNoFiscalYear?: number;
        ReceiptNoPeriodNo?: number;
        ReceiptNoFundCode?: string;
        ReceiptNoReference?: string;
        ReceiptNoCcy?: string;
        ReceiptNoExchRate?: number;
        ReceiptNoSameCurrency?: string;
        ReceiptNoPaidAmt?: number;
        ReceiptNoPaidAmtLocal?: number;
        ReceiptNoBalAmt?: number;
        ReceiptNoDiscAmt?: number;
        ReceiptNoDueAmt?: number;
        ReceiptNoDueAmtLocal?: number;
        ReceiptNoAppliedAmt?: number;
        ReceiptNoAppliedAmtLoc?: number;
        ReceiptNoSettledAmt?: number;
        ReceiptNoForexGainAmt?: number;
        ReceiptNoEndAmt?: number;
        ReceiptNoEndAmtLocal?: number;
        ReceiptNoUnusedAmt?: number;
        ReceiptNoUnusedAmtLoc?: number;
        ReceiptNoAppliedLocCpd?: number;
        ReceiptNoRoundDiff?: number;
        ReceiptNoCreatedDate?: string;
        ReceiptNoCreatedBy?: string;
        ReceiptNoRevisedDate?: string;
        ReceiptNoRevisedBy?: string;
        ReceiptNoPostedDate?: string;
        ReceiptNoPostedBy?: string;
        ReceiptNoAcctCustomer?: string;
        ReceiptNoAcctCash?: string;
        ReceiptNoAcctForexDiff?: string;
        ReceiptNoAcctTermDisc?: string;
        ReceiptNoAcctRoundDiff?: string;
        ReceiptNoBatchSelect?: string;
        ReceiptNoGlLink?: string;
        ReceiptNoGlLinkType?: string;
        ReceiptNoGlLinkNo?: string;
        ReceiptNoFixedCcy?: string;
        ReceiptNoDefaultCcy?: string;
        ReceiptNoOwnerBranch?: string;
        ReceiptNoSourceBranch?: string;
        ReceiptNoCanEdit?: string;
        ReceiptNoDiscAmtInvo?: number;
        ReceiptNoTotalDebit?: number;
        ReceiptNoTotalCredit?: number;
        ReceiptNoLastAdjCount?: number;
        ReceiptNoCcyInv?: string;
        ReceiptNoExchRateInv?: number;
        ReceiptNoAppliedAmtInv?: number;
        ReceiptNoBankAmt?: number;
        ReceiptNoAnlys1?: string;
        ReceiptNoAnlys2?: string;
        ReceiptNoAnlys7?: string;
        ReceiptNoAnlys8?: string;
        ReceiptNoToOpen?: string;
        ReceiptNoToRound?: string;
        ReceiptNoGbcustInvoAmtDiff?: number;
        ReceiptNoGbcustOpenAmtDiff?: number;
        ReceiptNoArledgTotalDebit?: number;
        ReceiptNoArledgTotalCredit?: number;
        ReceiptNoAllowCancel?: string;
        ReceiptNoPayer?: string;
        ReceiptNoChargeAmt?: number;
        ReceiptNoChargeAmtLocal?: number;
        ReceiptNoAnlys9?: string;
        ReceiptNoAnlys10?: string;
        ReceiptNoAnlys11?: string;
        ReceiptNoAnlys12?: string;
        ReceiptNoAnlys13?: string;
        ReceiptNoAnlys14?: string;
        ReceiptNoAcctDeposit?: string;
        ReceiptNoBalAmtLocal?: number;
        InvoiceNoRecnum?: number;
        InvoiceNoDirectEntry?: string;
        InvoiceNoPosted?: string;
        InvoiceNoClosed?: string;
        InvoiceNoReturned?: string;
        InvoiceNoDebitNote?: string;
        InvoiceNoCustomerNo?: string;
        InvoiceNoCustomerName?: string;
        InvoiceNoAddress?: string;
        InvoiceNoAddress2?: string;
        InvoiceNoAddress3?: string;
        InvoiceNoAddress4?: string;
        InvoiceNoAttention?: string;
        InvoiceNoInvoiceDate?: string;
        InvoiceNoPeriod?: string;
        InvoiceNoFiscalYear?: number;
        InvoiceNoPeriodNo?: number;
        InvoiceNoSalesman?: string;
        InvoiceNoCcy?: string;
        InvoiceNoExchRate?: number;
        InvoiceNoPayTerms?: string;
        InvoiceNoDiscDays?: number;
        InvoiceNoDiscPcent?: number;
        InvoiceNoDueDays?: number;
        InvoiceNoDiscountDate?: string;
        InvoiceNoDueDate?: string;
        InvoiceNoExpectedDate?: string;
        InvoiceNoAnlys1?: string;
        InvoiceNoAnlys2?: string;
        InvoiceNoTotPriceAmt?: number;
        InvoiceNoLocPriceAmt?: number;
        InvoiceNoTotPtaxAmt?: number;
        InvoiceNoLocPtaxAmt?: number;
        InvoiceNoTotExtPrice?: number;
        InvoiceNoLocExtPrice?: number;
        InvoiceNoTotLdiscAmt?: number;
        InvoiceNoLocLdiscAmt?: number;
        InvoiceNoTotAtaxAmt?: number;
        InvoiceNoLocAtaxAmt?: number;
        InvoiceNoTotItemAmt?: number;
        InvoiceNoLocItemAmt?: number;
        InvoiceNoTdiscPcent?: number;
        InvoiceNoTdiscAmt?: number;
        InvoiceNoLocalTdiscAmt?: number;
        InvoiceNoChgsAmt?: number;
        InvoiceNoLocChgsAmt?: number;
        InvoiceNoGtaxAmt?: number;
        InvoiceNoLocalGtaxAmt?: number;
        InvoiceNoNetAmt?: number;
        InvoiceNoLocalNetAmt?: number;
        InvoiceNoTdiscAmtCpd?: number;
        InvoiceNoLastLineNo?: number;
        InvoiceNoCreatedDate?: string;
        InvoiceNoCreatedBy?: string;
        InvoiceNoRevisedDate?: string;
        InvoiceNoRevisedBy?: string;
        InvoiceNoPostedDate?: string;
        InvoiceNoPostedBy?: string;
        InvoiceNoLastLogNo?: number;
        InvoiceNoSettledAmt?: number;
        InvoiceNoLsettledAmt?: number;
        InvoiceNoTermDiscAmt?: number;
        InvoiceNoLtermDiscAmt?: number;
        InvoiceNoReturnAmt?: number;
        InvoiceNoLreturnAmt?: number;
        InvoiceNoBalAmt?: number;
        InvoiceNoBalAmtLocal?: number;
        InvoiceNoOverAllocAmt?: number;
        InvoiceNoLoverAllocAmt?: number;
        InvoiceNoAcctCustomer?: string;
        InvoiceNoAcctTdisc?: string;
        InvoiceNoAcctGtax?: string;
        InvoiceNoLockType?: string;
        InvoiceNoLockRefNo?: string;
        InvoiceNoBatchSelect?: string;
        InvoiceNoGlLink?: string;
        InvoiceNoGlLinkType?: string;
        InvoiceNoGlLinkNo?: string;
        InvoiceNoOwnerBranch?: string;
        InvoiceNoSourceBranch?: string;
        InvoiceNoCheckCrlimit?: string;
        InvoiceNoCheckCrbal?: number;
        InvoiceNoComments1?: string;
        InvoiceNoComments2?: string;
        InvoiceNoComments3?: string;
        InvoiceNoComments4?: string;
        InvoiceNoLastTextNo?: number;
        InvoiceNoShipTo?: string;
        InvoiceNoTelNo?: string;
        InvoiceNoFaxNo?: string;
        InvoiceNoSltaxType?: string;
        InvoiceNoGsltaxPcent?: number;
        InvoiceNoTotGsltaxAmt?: number;
        InvoiceNoTotLsltaxAmt?: number;
        InvoiceNoLocGsltaxAmt?: number;
        InvoiceNoLocLsltaxAmt?: number;
        InvoiceNoAcctSltax?: string;
        InvoiceNoCustomerPo?: string;
        InvoiceNoAiLink?: string;
        InvoiceNoAiLinkType?: string;
        InvoiceNoAiLinkNo?: string;
        InvoiceNoAnlys7?: string;
        InvoiceNoAnlys8?: string;
        InvoiceNoNetTradeAmt?: number;
        InvoiceNoNetOrdrAmt?: number;
        InvoiceNoShipAmt?: number;
        InvoiceNoLshipAmt?: number;
        InvoiceNoVariaAmt?: number;
        InvoiceNoLvariaAmt?: number;
        InvoiceNoItemVariaAmt?: number;
        InvoiceNoLitemVariaAmt?: number;
        InvoiceNoChgsVariaAmt?: number;
        InvoiceNoLchgsVariaAmt?: number;
        InvoiceNoDpsApplied?: number;
        InvoiceNoLocDpsApplied?: number;
        InvoiceNoShipSltaxType?: string;
        InvoiceNoShipGsltaxPcent?: number;
        InvoiceNoShipCount?: number;
        InvoiceNoSourceType?: string;
        InvoiceNoLastChgsNo?: number;
        InvoiceNoDocType?: string;
        InvoiceNoDocId?: string;
        InvoiceNoAnlys9?: string;
        InvoiceNoAnlys10?: string;
        InvoiceNoAnlys11?: string;
        InvoiceNoAnlys12?: string;
        InvoiceNoAnlys13?: string;
        InvoiceNoAnlys14?: string;
        InvoiceNoBreakDebitNote?: boolean;
        InvoiceNoFreezed?: boolean;
        InvoiceNoRelatedDebitNote?: string;
        InvoiceNoCloned?: boolean;
        InvoiceNoClonedCompanyCode?: string;
        InvoiceNoUseSampleAcct?: boolean;
        InvoiceNoReferenceDate?: string;
    }
    namespace AccountsReceivablePaymentDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "ReceiptNo";
        const localTextPrefix = "Finance.AccountsReceivablePaymentDetail";
        namespace Fields {
            const Recnum: string;
            const ReceiptNo: string;
            const InvoiceNo: string;
            const InvoiceDate: string;
            const DiscountDate: string;
            const DueDate: string;
            const DiscPercent: string;
            const Ccy: string;
            const InvoExchRate: string;
            const PayExchRate: string;
            const BalAmt: string;
            const BalAmtInvo: string;
            const DiscAmt: string;
            const DiscAmtInvo: string;
            const DueAmt: string;
            const DueAmtInvo: string;
            const DueAmtLocal: string;
            const AppliedAmt: string;
            const AppliedAmtLoc: string;
            const SettledAmt: string;
            const ForexGainAmt: string;
            const EndAmt: string;
            const EndAmtLocal: string;
            const Posted: string;
            const LogNo: string;
            const LastLogNo: string;
            const ReceiptDate: string;
            const Settle: string;
            const AppliedAmtInv: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const InvRoundDiff: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const ReceiptNoRecnum: string;
            const ReceiptNoDeposit: string;
            const ReceiptNoPosted: string;
            const ReceiptNoCustomerNo: string;
            const ReceiptNoCustomerName: string;
            const ReceiptNoOrderNo: string;
            const ReceiptNoReceiptDate: string;
            const ReceiptNoPeriod: string;
            const ReceiptNoFiscalYear: string;
            const ReceiptNoPeriodNo: string;
            const ReceiptNoFundCode: string;
            const ReceiptNoReference: string;
            const ReceiptNoCcy: string;
            const ReceiptNoExchRate: string;
            const ReceiptNoSameCurrency: string;
            const ReceiptNoPaidAmt: string;
            const ReceiptNoPaidAmtLocal: string;
            const ReceiptNoBalAmt: string;
            const ReceiptNoDiscAmt: string;
            const ReceiptNoDueAmt: string;
            const ReceiptNoDueAmtLocal: string;
            const ReceiptNoAppliedAmt: string;
            const ReceiptNoAppliedAmtLoc: string;
            const ReceiptNoSettledAmt: string;
            const ReceiptNoForexGainAmt: string;
            const ReceiptNoEndAmt: string;
            const ReceiptNoEndAmtLocal: string;
            const ReceiptNoUnusedAmt: string;
            const ReceiptNoUnusedAmtLoc: string;
            const ReceiptNoAppliedLocCpd: string;
            const ReceiptNoRoundDiff: string;
            const ReceiptNoCreatedDate: string;
            const ReceiptNoCreatedBy: string;
            const ReceiptNoRevisedDate: string;
            const ReceiptNoRevisedBy: string;
            const ReceiptNoPostedDate: string;
            const ReceiptNoPostedBy: string;
            const ReceiptNoAcctCustomer: string;
            const ReceiptNoAcctCash: string;
            const ReceiptNoAcctForexDiff: string;
            const ReceiptNoAcctTermDisc: string;
            const ReceiptNoAcctRoundDiff: string;
            const ReceiptNoBatchSelect: string;
            const ReceiptNoGlLink: string;
            const ReceiptNoGlLinkType: string;
            const ReceiptNoGlLinkNo: string;
            const ReceiptNoFixedCcy: string;
            const ReceiptNoDefaultCcy: string;
            const ReceiptNoOwnerBranch: string;
            const ReceiptNoSourceBranch: string;
            const ReceiptNoCanEdit: string;
            const ReceiptNoDiscAmtInvo: string;
            const ReceiptNoTotalDebit: string;
            const ReceiptNoTotalCredit: string;
            const ReceiptNoLastAdjCount: string;
            const ReceiptNoCcyInv: string;
            const ReceiptNoExchRateInv: string;
            const ReceiptNoAppliedAmtInv: string;
            const ReceiptNoBankAmt: string;
            const ReceiptNoAnlys1: string;
            const ReceiptNoAnlys2: string;
            const ReceiptNoAnlys7: string;
            const ReceiptNoAnlys8: string;
            const ReceiptNoToOpen: string;
            const ReceiptNoToRound: string;
            const ReceiptNoGbcustInvoAmtDiff: string;
            const ReceiptNoGbcustOpenAmtDiff: string;
            const ReceiptNoArledgTotalDebit: string;
            const ReceiptNoArledgTotalCredit: string;
            const ReceiptNoAllowCancel: string;
            const ReceiptNoPayer: string;
            const ReceiptNoChargeAmt: string;
            const ReceiptNoChargeAmtLocal: string;
            const ReceiptNoAnlys9: string;
            const ReceiptNoAnlys10: string;
            const ReceiptNoAnlys11: string;
            const ReceiptNoAnlys12: string;
            const ReceiptNoAnlys13: string;
            const ReceiptNoAnlys14: string;
            const ReceiptNoAcctDeposit: string;
            const ReceiptNoBalAmtLocal: string;
            const InvoiceNoRecnum: string;
            const InvoiceNoDirectEntry: string;
            const InvoiceNoPosted: string;
            const InvoiceNoClosed: string;
            const InvoiceNoReturned: string;
            const InvoiceNoDebitNote: string;
            const InvoiceNoCustomerNo: string;
            const InvoiceNoCustomerName: string;
            const InvoiceNoAddress: string;
            const InvoiceNoAddress2: string;
            const InvoiceNoAddress3: string;
            const InvoiceNoAddress4: string;
            const InvoiceNoAttention: string;
            const InvoiceNoInvoiceDate: string;
            const InvoiceNoPeriod: string;
            const InvoiceNoFiscalYear: string;
            const InvoiceNoPeriodNo: string;
            const InvoiceNoSalesman: string;
            const InvoiceNoCcy: string;
            const InvoiceNoExchRate: string;
            const InvoiceNoPayTerms: string;
            const InvoiceNoDiscDays: string;
            const InvoiceNoDiscPcent: string;
            const InvoiceNoDueDays: string;
            const InvoiceNoDiscountDate: string;
            const InvoiceNoDueDate: string;
            const InvoiceNoExpectedDate: string;
            const InvoiceNoAnlys1: string;
            const InvoiceNoAnlys2: string;
            const InvoiceNoTotPriceAmt: string;
            const InvoiceNoLocPriceAmt: string;
            const InvoiceNoTotPtaxAmt: string;
            const InvoiceNoLocPtaxAmt: string;
            const InvoiceNoTotExtPrice: string;
            const InvoiceNoLocExtPrice: string;
            const InvoiceNoTotLdiscAmt: string;
            const InvoiceNoLocLdiscAmt: string;
            const InvoiceNoTotAtaxAmt: string;
            const InvoiceNoLocAtaxAmt: string;
            const InvoiceNoTotItemAmt: string;
            const InvoiceNoLocItemAmt: string;
            const InvoiceNoTdiscPcent: string;
            const InvoiceNoTdiscAmt: string;
            const InvoiceNoLocalTdiscAmt: string;
            const InvoiceNoChgsAmt: string;
            const InvoiceNoLocChgsAmt: string;
            const InvoiceNoGtaxAmt: string;
            const InvoiceNoLocalGtaxAmt: string;
            const InvoiceNoNetAmt: string;
            const InvoiceNoLocalNetAmt: string;
            const InvoiceNoTdiscAmtCpd: string;
            const InvoiceNoLastLineNo: string;
            const InvoiceNoCreatedDate: string;
            const InvoiceNoCreatedBy: string;
            const InvoiceNoRevisedDate: string;
            const InvoiceNoRevisedBy: string;
            const InvoiceNoPostedDate: string;
            const InvoiceNoPostedBy: string;
            const InvoiceNoLastLogNo: string;
            const InvoiceNoSettledAmt: string;
            const InvoiceNoLsettledAmt: string;
            const InvoiceNoTermDiscAmt: string;
            const InvoiceNoLtermDiscAmt: string;
            const InvoiceNoReturnAmt: string;
            const InvoiceNoLreturnAmt: string;
            const InvoiceNoBalAmt: string;
            const InvoiceNoBalAmtLocal: string;
            const InvoiceNoOverAllocAmt: string;
            const InvoiceNoLoverAllocAmt: string;
            const InvoiceNoAcctCustomer: string;
            const InvoiceNoAcctTdisc: string;
            const InvoiceNoAcctGtax: string;
            const InvoiceNoLockType: string;
            const InvoiceNoLockRefNo: string;
            const InvoiceNoBatchSelect: string;
            const InvoiceNoGlLink: string;
            const InvoiceNoGlLinkType: string;
            const InvoiceNoGlLinkNo: string;
            const InvoiceNoOwnerBranch: string;
            const InvoiceNoSourceBranch: string;
            const InvoiceNoCheckCrlimit: string;
            const InvoiceNoCheckCrbal: string;
            const InvoiceNoComments1: string;
            const InvoiceNoComments2: string;
            const InvoiceNoComments3: string;
            const InvoiceNoComments4: string;
            const InvoiceNoLastTextNo: string;
            const InvoiceNoShipTo: string;
            const InvoiceNoTelNo: string;
            const InvoiceNoFaxNo: string;
            const InvoiceNoSltaxType: string;
            const InvoiceNoGsltaxPcent: string;
            const InvoiceNoTotGsltaxAmt: string;
            const InvoiceNoTotLsltaxAmt: string;
            const InvoiceNoLocGsltaxAmt: string;
            const InvoiceNoLocLsltaxAmt: string;
            const InvoiceNoAcctSltax: string;
            const InvoiceNoCustomerPo: string;
            const InvoiceNoAiLink: string;
            const InvoiceNoAiLinkType: string;
            const InvoiceNoAiLinkNo: string;
            const InvoiceNoAnlys7: string;
            const InvoiceNoAnlys8: string;
            const InvoiceNoNetTradeAmt: string;
            const InvoiceNoNetOrdrAmt: string;
            const InvoiceNoShipAmt: string;
            const InvoiceNoLshipAmt: string;
            const InvoiceNoVariaAmt: string;
            const InvoiceNoLvariaAmt: string;
            const InvoiceNoItemVariaAmt: string;
            const InvoiceNoLitemVariaAmt: string;
            const InvoiceNoChgsVariaAmt: string;
            const InvoiceNoLchgsVariaAmt: string;
            const InvoiceNoDpsApplied: string;
            const InvoiceNoLocDpsApplied: string;
            const InvoiceNoShipSltaxType: string;
            const InvoiceNoShipGsltaxPcent: string;
            const InvoiceNoShipCount: string;
            const InvoiceNoSourceType: string;
            const InvoiceNoLastChgsNo: string;
            const InvoiceNoDocType: string;
            const InvoiceNoDocId: string;
            const InvoiceNoAnlys9: string;
            const InvoiceNoAnlys10: string;
            const InvoiceNoAnlys11: string;
            const InvoiceNoAnlys12: string;
            const InvoiceNoAnlys13: string;
            const InvoiceNoAnlys14: string;
            const InvoiceNoBreakDebitNote: string;
            const InvoiceNoFreezed: string;
            const InvoiceNoRelatedDebitNote: string;
            const InvoiceNoCloned: string;
            const InvoiceNoClonedCompanyCode: string;
            const InvoiceNoUseSampleAcct: string;
            const InvoiceNoReferenceDate: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivablePaymentDetailService {
        const baseUrl = "Finance/AccountsReceivablePaymentDetail";
        function Create(request: Serenity.SaveRequest<AccountsReceivablePaymentDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivablePaymentDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivablePaymentDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivablePaymentDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountsReceivablePaymentForm {
        ReceiptNo: Serenity.StringEditor;
        Deposit: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        OrderNo: Serenity.StringEditor;
        ReceiptDate: Serenity.DateEditor;
        Period: Serenity.StringEditor;
        FiscalYear: Serenity.DecimalEditor;
        PeriodNo: Serenity.DecimalEditor;
        FundCode: Serenity.StringEditor;
        Reference: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        SameCurrency: Serenity.StringEditor;
        PaidAmt: Serenity.DecimalEditor;
        PaidAmtLocal: Serenity.DecimalEditor;
        BalAmt: Serenity.DecimalEditor;
        DiscAmt: Serenity.DecimalEditor;
        DueAmt: Serenity.DecimalEditor;
        DueAmtLocal: Serenity.DecimalEditor;
        AppliedAmt: Serenity.DecimalEditor;
        AppliedAmtLoc: Serenity.DecimalEditor;
        SettledAmt: Serenity.DecimalEditor;
        ForexGainAmt: Serenity.DecimalEditor;
        EndAmt: Serenity.DecimalEditor;
        EndAmtLocal: Serenity.DecimalEditor;
        UnusedAmt: Serenity.DecimalEditor;
        UnusedAmtLoc: Serenity.DecimalEditor;
        AppliedLocCpd: Serenity.DecimalEditor;
        RoundDiff: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        PostedDate: Serenity.DateEditor;
        PostedBy: Serenity.StringEditor;
        AcctCustomer: Serenity.StringEditor;
        AcctCash: Serenity.StringEditor;
        AcctForexDiff: Serenity.StringEditor;
        AcctTermDisc: Serenity.StringEditor;
        AcctRoundDiff: Serenity.StringEditor;
        BatchSelect: Serenity.StringEditor;
        GlLink: Serenity.StringEditor;
        GlLinkType: Serenity.StringEditor;
        GlLinkNo: Serenity.StringEditor;
        FixedCcy: Serenity.StringEditor;
        DefaultCcy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        CanEdit: Serenity.StringEditor;
        DiscAmtInvo: Serenity.DecimalEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        LastAdjCount: Serenity.DecimalEditor;
        CcyInv: Serenity.StringEditor;
        ExchRateInv: Serenity.DecimalEditor;
        AppliedAmtInv: Serenity.DecimalEditor;
        BankAmt: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        ToOpen: Serenity.StringEditor;
        ToRound: Serenity.StringEditor;
        GbcustInvoAmtDiff: Serenity.DecimalEditor;
        GbcustOpenAmtDiff: Serenity.DecimalEditor;
        ArledgTotalDebit: Serenity.DecimalEditor;
        ArledgTotalCredit: Serenity.DecimalEditor;
        AllowCancel: Serenity.StringEditor;
        Payer: Serenity.StringEditor;
        ChargeAmt: Serenity.DecimalEditor;
        ChargeAmtLocal: Serenity.DecimalEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        Anlys13: Serenity.StringEditor;
        Anlys14: Serenity.StringEditor;
        AcctDeposit: Serenity.StringEditor;
        BalAmtLocal: Serenity.DecimalEditor;
        DetailList: AccountsReceivablePaymentDetailDetailEditor;
    }
}
declare namespace Matrix.Finance {
    interface AccountsReceivablePaymentRow {
        DetailList?: AccountsReceivablePaymentDetailRow[];
        DepositList?: AccountsReceivablePaymentDepositRow[];
        CurrencyList?: AccountsReceivablePaymentCurrencyRow[];
        Recnum?: number;
        ReceiptNo?: string;
        Deposit?: string;
        Posted?: string;
        CustomerNo?: string;
        CustomerName?: string;
        OrderNo?: string;
        ReceiptDate?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        FundCode?: string;
        Reference?: string;
        Ccy?: string;
        ExchRate?: number;
        SameCurrency?: string;
        PaidAmt?: number;
        PaidAmtLocal?: number;
        BalAmt?: number;
        DiscAmt?: number;
        DueAmt?: number;
        DueAmtLocal?: number;
        AppliedAmt?: number;
        AppliedAmtLoc?: number;
        SettledAmt?: number;
        ForexGainAmt?: number;
        EndAmt?: number;
        EndAmtLocal?: number;
        UnusedAmt?: number;
        UnusedAmtLoc?: number;
        AppliedLocCpd?: number;
        RoundDiff?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        AcctCustomer?: string;
        AcctCash?: string;
        AcctForexDiff?: string;
        AcctTermDisc?: string;
        AcctRoundDiff?: string;
        BatchSelect?: string;
        GlLink?: string;
        GlLinkType?: string;
        GlLinkNo?: string;
        FixedCcy?: string;
        DefaultCcy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        CanEdit?: string;
        DiscAmtInvo?: number;
        TotalDebit?: number;
        TotalCredit?: number;
        LastAdjCount?: number;
        CcyInv?: string;
        ExchRateInv?: number;
        AppliedAmtInv?: number;
        BankAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        ToOpen?: string;
        ToRound?: string;
        GbcustInvoAmtDiff?: number;
        GbcustOpenAmtDiff?: number;
        ArledgTotalDebit?: number;
        ArledgTotalCredit?: number;
        AllowCancel?: string;
        Payer?: string;
        ChargeAmt?: number;
        ChargeAmtLocal?: number;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        AcctDeposit?: string;
        BalAmtLocal?: number;
    }
    namespace AccountsReceivablePaymentRow {
        const idProperty = "ReceiptNo";
        const nameProperty = "ReceiptNo";
        const localTextPrefix = "Finance.AccountsReceivablePayment";
        namespace Fields {
            const DetailList: string;
            const DepositList: string;
            const CurrencyList: string;
            const Recnum: string;
            const ReceiptNo: string;
            const Deposit: string;
            const Posted: string;
            const CustomerNo: string;
            const CustomerName: string;
            const OrderNo: string;
            const ReceiptDate: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const FundCode: string;
            const Reference: string;
            const Ccy: string;
            const ExchRate: string;
            const SameCurrency: string;
            const PaidAmt: string;
            const PaidAmtLocal: string;
            const BalAmt: string;
            const DiscAmt: string;
            const DueAmt: string;
            const DueAmtLocal: string;
            const AppliedAmt: string;
            const AppliedAmtLoc: string;
            const SettledAmt: string;
            const ForexGainAmt: string;
            const EndAmt: string;
            const EndAmtLocal: string;
            const UnusedAmt: string;
            const UnusedAmtLoc: string;
            const AppliedLocCpd: string;
            const RoundDiff: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const AcctCustomer: string;
            const AcctCash: string;
            const AcctForexDiff: string;
            const AcctTermDisc: string;
            const AcctRoundDiff: string;
            const BatchSelect: string;
            const GlLink: string;
            const GlLinkType: string;
            const GlLinkNo: string;
            const FixedCcy: string;
            const DefaultCcy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const CanEdit: string;
            const DiscAmtInvo: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const LastAdjCount: string;
            const CcyInv: string;
            const ExchRateInv: string;
            const AppliedAmtInv: string;
            const BankAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const ToOpen: string;
            const ToRound: string;
            const GbcustInvoAmtDiff: string;
            const GbcustOpenAmtDiff: string;
            const ArledgTotalDebit: string;
            const ArledgTotalCredit: string;
            const AllowCancel: string;
            const Payer: string;
            const ChargeAmt: string;
            const ChargeAmtLocal: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const AcctDeposit: string;
            const BalAmtLocal: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace AccountsReceivablePaymentService {
        const baseUrl = "Finance/AccountsReceivablePayment";
        function Create(request: Serenity.SaveRequest<AccountsReceivablePaymentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountsReceivablePaymentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountsReceivablePaymentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountsReceivablePaymentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class CostCenterBudgetForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CostCenterBudgetForm {
        AcctNo: Serenity.StringEditor;
        CostCentre: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        BudgetDebit: Serenity.DecimalEditor;
        BudgetCredit: Serenity.DecimalEditor;
        BudgetDate: Serenity.DateEditor;
        BudgetBy: Serenity.StringEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        ControlDebit: Serenity.BooleanEditor;
        ControlCredit: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.Finance {
    interface CostCenterBudgetRow {
        Recnum?: number;
        AcctNo?: string;
        CostCentre?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        TotalDebit?: number;
        TotalCredit?: number;
        ControlDebit?: boolean;
        ControlCredit?: boolean;
        BudgetDebit?: number;
        BudgetCredit?: number;
        BudgetDate?: string;
        BudgetBy?: string;
    }
    namespace CostCenterBudgetRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.CostCenterBudget";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const CostCentre: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const ControlDebit: string;
            const ControlCredit: string;
            const BudgetDebit: string;
            const BudgetCredit: string;
            const BudgetDate: string;
            const BudgetBy: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace CostCenterBudgetService {
        const baseUrl = "Finance/CostCenterBudget";
        function Create(request: Serenity.SaveRequest<CostCenterBudgetRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CostCenterBudgetRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CostCenterBudgetRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CostCenterBudgetRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class CurrencyBalanceForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CurrencyBalanceForm {
        AcctNo: Serenity.StringEditor;
        AcctName: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        ForexBalance: Serenity.DecimalEditor;
        ForexSign: Serenity.StringEditor;
        LocalBalance: Serenity.DecimalEditor;
        LocalSign: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface CurrencyBalanceRow {
        Recnum?: number;
        AcctNo?: string;
        Ccy?: string;
        AcctName?: string;
        Description?: string;
        ForexBalance?: number;
        ForexSign?: string;
        LocalBalance?: number;
        LocalSign?: string;
        AcctNoRecnum?: number;
        AcctNoAcctName?: string;
        AcctNoAltAcctNo?: string;
        AcctNoNormalSign?: string;
        AcctNoTypeBs?: string;
        AcctNoTypePl?: string;
        AcctNoTypeDebtor?: string;
        AcctNoTypeCreditor?: string;
        AcctNoTypeMemo?: string;
        AcctNoDefaultCcy?: string;
        AcctNoAnlys1?: string;
        AcctNoAnlys2?: string;
        AcctNoAnlys3?: string;
        AcctNoAnlys4?: string;
        AcctNoSuspended?: string;
        AcctNoFixedCurrency?: string;
        AcctNoAutoDist?: string;
        AcctNoBudgetControl?: string;
        AcctNoSupprAnlys3?: string;
        AcctNoSupprAnlys4?: string;
        AcctNoSupprAnlys5?: string;
        AcctNoSupprAnlys6?: string;
        AcctNoSupprReval?: string;
        AcctNoNoCostCentre?: string;
        AcctNoNoDept?: string;
        AcctNoOper1?: string;
        AcctNoOper2?: string;
        AcctNoOper3?: string;
        AcctNoOper4?: string;
        AcctNoOper5?: string;
        AcctNoLinesBefPrint?: number;
        AcctNoTranAcct?: string;
        AcctNoSummaryPos?: string;
        AcctNoCreatedDate?: string;
        AcctNoCreatedBy?: string;
        AcctNoRevisedDate?: string;
        AcctNoRevisedBy?: string;
        AcctNoReconLastDate?: string;
        AcctNoReconLastJrn?: number;
        AcctNoReconBal?: number;
        AcctNoReconBalSign?: string;
        AcctNoLastTranDate?: string;
        AcctNoLastJrnNo?: number;
        AcctNoDistTotalPct?: number;
        AcctNoDistLastLine?: number;
        AcctNoReconCount?: number;
        AcctNoBalanceEnd?: number;
        AcctNoBalanceSign?: string;
        AcctNoOwnerBranch?: string;
        AcctNoSourceBranch?: string;
        AcctNoAllowEdit?: string;
        AcctNoAnlys5?: string;
        AcctNoAnlys6?: string;
        AcctNoAnlys7?: string;
        AcctNoAnlys8?: string;
        AcctNoAnlys9?: string;
        AcctNoAnlys10?: string;
        CcyRecnum?: number;
        CcyDescription?: string;
        CcySuspended?: string;
        CcyDefaultRate?: number;
        CcyAcctArForex?: string;
        CcyAcctApForex?: string;
        CcyLastEntryNo?: number;
        CcyRateUseCount?: number;
        CcyCreatedDate?: string;
        CcyCreatedBy?: string;
        CcyRevisedDate?: string;
        CcyRevisedBy?: string;
        CcyArevisedDate?: string;
        CcyArevisedBy?: string;
        CcyOwnerBranch?: string;
        CcySourceBranch?: string;
        CcyApInvoBal?: number;
        CcyApOpenBal?: number;
        CcyApNetBal?: number;
        CcyApLinvoBal?: number;
        CcyApLopenBal?: number;
        CcyApLnetBal?: number;
        CcyArInvoBal?: number;
        CcyArOpenBal?: number;
        CcyArNetBal?: number;
        CcyArLinvoBal?: number;
        CcyArLopenBal?: number;
        CcyArLnetBal?: number;
    }
    namespace CurrencyBalanceRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.CurrencyBalance";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const Ccy: string;
            const AcctName: string;
            const Description: string;
            const ForexBalance: string;
            const ForexSign: string;
            const LocalBalance: string;
            const LocalSign: string;
            const AcctNoRecnum: string;
            const AcctNoAcctName: string;
            const AcctNoAltAcctNo: string;
            const AcctNoNormalSign: string;
            const AcctNoTypeBs: string;
            const AcctNoTypePl: string;
            const AcctNoTypeDebtor: string;
            const AcctNoTypeCreditor: string;
            const AcctNoTypeMemo: string;
            const AcctNoDefaultCcy: string;
            const AcctNoAnlys1: string;
            const AcctNoAnlys2: string;
            const AcctNoAnlys3: string;
            const AcctNoAnlys4: string;
            const AcctNoSuspended: string;
            const AcctNoFixedCurrency: string;
            const AcctNoAutoDist: string;
            const AcctNoBudgetControl: string;
            const AcctNoSupprAnlys3: string;
            const AcctNoSupprAnlys4: string;
            const AcctNoSupprAnlys5: string;
            const AcctNoSupprAnlys6: string;
            const AcctNoSupprReval: string;
            const AcctNoNoCostCentre: string;
            const AcctNoNoDept: string;
            const AcctNoOper1: string;
            const AcctNoOper2: string;
            const AcctNoOper3: string;
            const AcctNoOper4: string;
            const AcctNoOper5: string;
            const AcctNoLinesBefPrint: string;
            const AcctNoTranAcct: string;
            const AcctNoSummaryPos: string;
            const AcctNoCreatedDate: string;
            const AcctNoCreatedBy: string;
            const AcctNoRevisedDate: string;
            const AcctNoRevisedBy: string;
            const AcctNoReconLastDate: string;
            const AcctNoReconLastJrn: string;
            const AcctNoReconBal: string;
            const AcctNoReconBalSign: string;
            const AcctNoLastTranDate: string;
            const AcctNoLastJrnNo: string;
            const AcctNoDistTotalPct: string;
            const AcctNoDistLastLine: string;
            const AcctNoReconCount: string;
            const AcctNoBalanceEnd: string;
            const AcctNoBalanceSign: string;
            const AcctNoOwnerBranch: string;
            const AcctNoSourceBranch: string;
            const AcctNoAllowEdit: string;
            const AcctNoAnlys5: string;
            const AcctNoAnlys6: string;
            const AcctNoAnlys7: string;
            const AcctNoAnlys8: string;
            const AcctNoAnlys9: string;
            const AcctNoAnlys10: string;
            const CcyRecnum: string;
            const CcyDescription: string;
            const CcySuspended: string;
            const CcyDefaultRate: string;
            const CcyAcctArForex: string;
            const CcyAcctApForex: string;
            const CcyLastEntryNo: string;
            const CcyRateUseCount: string;
            const CcyCreatedDate: string;
            const CcyCreatedBy: string;
            const CcyRevisedDate: string;
            const CcyRevisedBy: string;
            const CcyArevisedDate: string;
            const CcyArevisedBy: string;
            const CcyOwnerBranch: string;
            const CcySourceBranch: string;
            const CcyApInvoBal: string;
            const CcyApOpenBal: string;
            const CcyApNetBal: string;
            const CcyApLinvoBal: string;
            const CcyApLopenBal: string;
            const CcyApLnetBal: string;
            const CcyArInvoBal: string;
            const CcyArOpenBal: string;
            const CcyArNetBal: string;
            const CcyArLinvoBal: string;
            const CcyArLopenBal: string;
            const CcyArLnetBal: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace CurrencyBalanceService {
        const baseUrl = "Finance/CurrencyBalance";
        function Create(request: Serenity.SaveRequest<CurrencyBalanceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CurrencyBalanceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CurrencyBalanceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CurrencyBalanceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class CurrencyLedgerForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CurrencyLedgerForm {
        AcctNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        ForexBeg: Serenity.DecimalEditor;
        ForexBegSign: Serenity.StringEditor;
        ForexDebit: Serenity.DecimalEditor;
        ForexCredit: Serenity.DecimalEditor;
        ForexEnd: Serenity.DecimalEditor;
        ForexEndSign: Serenity.StringEditor;
        LocalBeg: Serenity.DecimalEditor;
        LocalBegSign: Serenity.StringEditor;
        LocalDebit: Serenity.DecimalEditor;
        LocalCredit: Serenity.DecimalEditor;
        LocalEnd: Serenity.DecimalEditor;
        LocalEndSign: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface CurrencyLedgerRow {
        Recnum?: number;
        AcctNo?: string;
        Ccy?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        ForexBeg?: number;
        ForexBegSign?: string;
        ForexDebit?: number;
        ForexCredit?: number;
        ForexEnd?: number;
        ForexEndSign?: string;
        LocalBeg?: number;
        LocalBegSign?: string;
        LocalDebit?: number;
        LocalCredit?: number;
        LocalEnd?: number;
        LocalEndSign?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        AcctNoRecnum?: number;
        AcctNoAcctName?: string;
        AcctNoAltAcctNo?: string;
        AcctNoNormalSign?: string;
        AcctNoTypeBs?: string;
        AcctNoTypePl?: string;
        AcctNoTypeDebtor?: string;
        AcctNoTypeCreditor?: string;
        AcctNoTypeMemo?: string;
        AcctNoDefaultCcy?: string;
        AcctNoAnlys1?: string;
        AcctNoAnlys2?: string;
        AcctNoAnlys3?: string;
        AcctNoAnlys4?: string;
        AcctNoSuspended?: string;
        AcctNoFixedCurrency?: string;
        AcctNoAutoDist?: string;
        AcctNoBudgetControl?: string;
        AcctNoSupprAnlys3?: string;
        AcctNoSupprAnlys4?: string;
        AcctNoSupprAnlys5?: string;
        AcctNoSupprAnlys6?: string;
        AcctNoSupprReval?: string;
        AcctNoNoCostCentre?: string;
        AcctNoNoDept?: string;
        AcctNoOper1?: string;
        AcctNoOper2?: string;
        AcctNoOper3?: string;
        AcctNoOper4?: string;
        AcctNoOper5?: string;
        AcctNoLinesBefPrint?: number;
        AcctNoTranAcct?: string;
        AcctNoSummaryPos?: string;
        AcctNoCreatedDate?: string;
        AcctNoCreatedBy?: string;
        AcctNoRevisedDate?: string;
        AcctNoRevisedBy?: string;
        AcctNoReconLastDate?: string;
        AcctNoReconLastJrn?: number;
        AcctNoReconBal?: number;
        AcctNoReconBalSign?: string;
        AcctNoLastTranDate?: string;
        AcctNoLastJrnNo?: number;
        AcctNoDistTotalPct?: number;
        AcctNoDistLastLine?: number;
        AcctNoReconCount?: number;
        AcctNoBalanceEnd?: number;
        AcctNoBalanceSign?: string;
        AcctNoOwnerBranch?: string;
        AcctNoSourceBranch?: string;
        AcctNoAllowEdit?: string;
        AcctNoAnlys5?: string;
        AcctNoAnlys6?: string;
        AcctNoAnlys7?: string;
        AcctNoAnlys8?: string;
        AcctNoAnlys9?: string;
        AcctNoAnlys10?: string;
        CcyRecnum?: number;
        CcyDescription?: string;
        CcySuspended?: string;
        CcyDefaultRate?: number;
        CcyAcctArForex?: string;
        CcyAcctApForex?: string;
        CcyLastEntryNo?: number;
        CcyRateUseCount?: number;
        CcyCreatedDate?: string;
        CcyCreatedBy?: string;
        CcyRevisedDate?: string;
        CcyRevisedBy?: string;
        CcyArevisedDate?: string;
        CcyArevisedBy?: string;
        CcyOwnerBranch?: string;
        CcySourceBranch?: string;
        CcyApInvoBal?: number;
        CcyApOpenBal?: number;
        CcyApNetBal?: number;
        CcyApLinvoBal?: number;
        CcyApLopenBal?: number;
        CcyApLnetBal?: number;
        CcyArInvoBal?: number;
        CcyArOpenBal?: number;
        CcyArNetBal?: number;
        CcyArLinvoBal?: number;
        CcyArLopenBal?: number;
        CcyArLnetBal?: number;
    }
    namespace CurrencyLedgerRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.CurrencyLedger";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const Ccy: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const ForexBeg: string;
            const ForexBegSign: string;
            const ForexDebit: string;
            const ForexCredit: string;
            const ForexEnd: string;
            const ForexEndSign: string;
            const LocalBeg: string;
            const LocalBegSign: string;
            const LocalDebit: string;
            const LocalCredit: string;
            const LocalEnd: string;
            const LocalEndSign: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const AcctNoRecnum: string;
            const AcctNoAcctName: string;
            const AcctNoAltAcctNo: string;
            const AcctNoNormalSign: string;
            const AcctNoTypeBs: string;
            const AcctNoTypePl: string;
            const AcctNoTypeDebtor: string;
            const AcctNoTypeCreditor: string;
            const AcctNoTypeMemo: string;
            const AcctNoDefaultCcy: string;
            const AcctNoAnlys1: string;
            const AcctNoAnlys2: string;
            const AcctNoAnlys3: string;
            const AcctNoAnlys4: string;
            const AcctNoSuspended: string;
            const AcctNoFixedCurrency: string;
            const AcctNoAutoDist: string;
            const AcctNoBudgetControl: string;
            const AcctNoSupprAnlys3: string;
            const AcctNoSupprAnlys4: string;
            const AcctNoSupprAnlys5: string;
            const AcctNoSupprAnlys6: string;
            const AcctNoSupprReval: string;
            const AcctNoNoCostCentre: string;
            const AcctNoNoDept: string;
            const AcctNoOper1: string;
            const AcctNoOper2: string;
            const AcctNoOper3: string;
            const AcctNoOper4: string;
            const AcctNoOper5: string;
            const AcctNoLinesBefPrint: string;
            const AcctNoTranAcct: string;
            const AcctNoSummaryPos: string;
            const AcctNoCreatedDate: string;
            const AcctNoCreatedBy: string;
            const AcctNoRevisedDate: string;
            const AcctNoRevisedBy: string;
            const AcctNoReconLastDate: string;
            const AcctNoReconLastJrn: string;
            const AcctNoReconBal: string;
            const AcctNoReconBalSign: string;
            const AcctNoLastTranDate: string;
            const AcctNoLastJrnNo: string;
            const AcctNoDistTotalPct: string;
            const AcctNoDistLastLine: string;
            const AcctNoReconCount: string;
            const AcctNoBalanceEnd: string;
            const AcctNoBalanceSign: string;
            const AcctNoOwnerBranch: string;
            const AcctNoSourceBranch: string;
            const AcctNoAllowEdit: string;
            const AcctNoAnlys5: string;
            const AcctNoAnlys6: string;
            const AcctNoAnlys7: string;
            const AcctNoAnlys8: string;
            const AcctNoAnlys9: string;
            const AcctNoAnlys10: string;
            const CcyRecnum: string;
            const CcyDescription: string;
            const CcySuspended: string;
            const CcyDefaultRate: string;
            const CcyAcctArForex: string;
            const CcyAcctApForex: string;
            const CcyLastEntryNo: string;
            const CcyRateUseCount: string;
            const CcyCreatedDate: string;
            const CcyCreatedBy: string;
            const CcyRevisedDate: string;
            const CcyRevisedBy: string;
            const CcyArevisedDate: string;
            const CcyArevisedBy: string;
            const CcyOwnerBranch: string;
            const CcySourceBranch: string;
            const CcyApInvoBal: string;
            const CcyApOpenBal: string;
            const CcyApNetBal: string;
            const CcyApLinvoBal: string;
            const CcyApLopenBal: string;
            const CcyApLnetBal: string;
            const CcyArInvoBal: string;
            const CcyArOpenBal: string;
            const CcyArNetBal: string;
            const CcyArLinvoBal: string;
            const CcyArLopenBal: string;
            const CcyArLnetBal: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace CurrencyLedgerService {
        const baseUrl = "Finance/CurrencyLedger";
        function Create(request: Serenity.SaveRequest<CurrencyLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CurrencyLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CurrencyLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CurrencyLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class CurrencyLedgerSummaryForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CurrencyLedgerSummaryForm {
        AcctNo: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        BalBeg: Serenity.DecimalEditor;
        BalBegSign: Serenity.StringEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        BalEnd: Serenity.DecimalEditor;
        BalEndSign: Serenity.StringEditor;
        LtotalDebit: Serenity.DecimalEditor;
        LtotalCredit: Serenity.DecimalEditor;
        LbalBeg: Serenity.DecimalEditor;
        LbalBegSign: Serenity.StringEditor;
        LbalEnd: Serenity.DecimalEditor;
        LbalEndSign: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface CurrencyLedgerSummaryRow {
        Recnum?: number;
        AcctNo?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        Ccy?: string;
        TotalDebit?: number;
        TotalCredit?: number;
        BalBeg?: number;
        BalBegSign?: string;
        BalEnd?: number;
        BalEndSign?: string;
        LtotalDebit?: number;
        LtotalCredit?: number;
        LbalBeg?: number;
        LbalBegSign?: string;
        LbalEnd?: number;
        LbalEndSign?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        AcctNoRecnum?: number;
        AcctNoAcctName?: string;
        AcctNoAltAcctNo?: string;
        AcctNoNormalSign?: string;
        AcctNoTypeBs?: string;
        AcctNoTypePl?: string;
        AcctNoTypeDebtor?: string;
        AcctNoTypeCreditor?: string;
        AcctNoTypeMemo?: string;
        AcctNoDefaultCcy?: string;
        AcctNoAnlys1?: string;
        AcctNoAnlys2?: string;
        AcctNoAnlys3?: string;
        AcctNoAnlys4?: string;
        AcctNoSuspended?: string;
        AcctNoFixedCurrency?: string;
        AcctNoAutoDist?: string;
        AcctNoBudgetControl?: string;
        AcctNoSupprAnlys3?: string;
        AcctNoSupprAnlys4?: string;
        AcctNoSupprAnlys5?: string;
        AcctNoSupprAnlys6?: string;
        AcctNoSupprReval?: string;
        AcctNoNoCostCentre?: string;
        AcctNoNoDept?: string;
        AcctNoOper1?: string;
        AcctNoOper2?: string;
        AcctNoOper3?: string;
        AcctNoOper4?: string;
        AcctNoOper5?: string;
        AcctNoLinesBefPrint?: number;
        AcctNoTranAcct?: string;
        AcctNoSummaryPos?: string;
        AcctNoCreatedDate?: string;
        AcctNoCreatedBy?: string;
        AcctNoRevisedDate?: string;
        AcctNoRevisedBy?: string;
        AcctNoReconLastDate?: string;
        AcctNoReconLastJrn?: number;
        AcctNoReconBal?: number;
        AcctNoReconBalSign?: string;
        AcctNoLastTranDate?: string;
        AcctNoLastJrnNo?: number;
        AcctNoDistTotalPct?: number;
        AcctNoDistLastLine?: number;
        AcctNoReconCount?: number;
        AcctNoBalanceEnd?: number;
        AcctNoBalanceSign?: string;
        AcctNoOwnerBranch?: string;
        AcctNoSourceBranch?: string;
        AcctNoAllowEdit?: string;
        AcctNoAnlys5?: string;
        AcctNoAnlys6?: string;
        AcctNoAnlys7?: string;
        AcctNoAnlys8?: string;
        AcctNoAnlys9?: string;
        AcctNoAnlys10?: string;
        CcyRecnum?: number;
        CcyDescription?: string;
        CcySuspended?: string;
        CcyDefaultRate?: number;
        CcyAcctArForex?: string;
        CcyAcctApForex?: string;
        CcyLastEntryNo?: number;
        CcyRateUseCount?: number;
        CcyCreatedDate?: string;
        CcyCreatedBy?: string;
        CcyRevisedDate?: string;
        CcyRevisedBy?: string;
        CcyArevisedDate?: string;
        CcyArevisedBy?: string;
        CcyOwnerBranch?: string;
        CcySourceBranch?: string;
        CcyApInvoBal?: number;
        CcyApOpenBal?: number;
        CcyApNetBal?: number;
        CcyApLinvoBal?: number;
        CcyApLopenBal?: number;
        CcyApLnetBal?: number;
        CcyArInvoBal?: number;
        CcyArOpenBal?: number;
        CcyArNetBal?: number;
        CcyArLinvoBal?: number;
        CcyArLopenBal?: number;
        CcyArLnetBal?: number;
    }
    namespace CurrencyLedgerSummaryRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.CurrencyLedgerSummary";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const Ccy: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const BalBeg: string;
            const BalBegSign: string;
            const BalEnd: string;
            const BalEndSign: string;
            const LtotalDebit: string;
            const LtotalCredit: string;
            const LbalBeg: string;
            const LbalBegSign: string;
            const LbalEnd: string;
            const LbalEndSign: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const AcctNoRecnum: string;
            const AcctNoAcctName: string;
            const AcctNoAltAcctNo: string;
            const AcctNoNormalSign: string;
            const AcctNoTypeBs: string;
            const AcctNoTypePl: string;
            const AcctNoTypeDebtor: string;
            const AcctNoTypeCreditor: string;
            const AcctNoTypeMemo: string;
            const AcctNoDefaultCcy: string;
            const AcctNoAnlys1: string;
            const AcctNoAnlys2: string;
            const AcctNoAnlys3: string;
            const AcctNoAnlys4: string;
            const AcctNoSuspended: string;
            const AcctNoFixedCurrency: string;
            const AcctNoAutoDist: string;
            const AcctNoBudgetControl: string;
            const AcctNoSupprAnlys3: string;
            const AcctNoSupprAnlys4: string;
            const AcctNoSupprAnlys5: string;
            const AcctNoSupprAnlys6: string;
            const AcctNoSupprReval: string;
            const AcctNoNoCostCentre: string;
            const AcctNoNoDept: string;
            const AcctNoOper1: string;
            const AcctNoOper2: string;
            const AcctNoOper3: string;
            const AcctNoOper4: string;
            const AcctNoOper5: string;
            const AcctNoLinesBefPrint: string;
            const AcctNoTranAcct: string;
            const AcctNoSummaryPos: string;
            const AcctNoCreatedDate: string;
            const AcctNoCreatedBy: string;
            const AcctNoRevisedDate: string;
            const AcctNoRevisedBy: string;
            const AcctNoReconLastDate: string;
            const AcctNoReconLastJrn: string;
            const AcctNoReconBal: string;
            const AcctNoReconBalSign: string;
            const AcctNoLastTranDate: string;
            const AcctNoLastJrnNo: string;
            const AcctNoDistTotalPct: string;
            const AcctNoDistLastLine: string;
            const AcctNoReconCount: string;
            const AcctNoBalanceEnd: string;
            const AcctNoBalanceSign: string;
            const AcctNoOwnerBranch: string;
            const AcctNoSourceBranch: string;
            const AcctNoAllowEdit: string;
            const AcctNoAnlys5: string;
            const AcctNoAnlys6: string;
            const AcctNoAnlys7: string;
            const AcctNoAnlys8: string;
            const AcctNoAnlys9: string;
            const AcctNoAnlys10: string;
            const CcyRecnum: string;
            const CcyDescription: string;
            const CcySuspended: string;
            const CcyDefaultRate: string;
            const CcyAcctArForex: string;
            const CcyAcctApForex: string;
            const CcyLastEntryNo: string;
            const CcyRateUseCount: string;
            const CcyCreatedDate: string;
            const CcyCreatedBy: string;
            const CcyRevisedDate: string;
            const CcyRevisedBy: string;
            const CcyArevisedDate: string;
            const CcyArevisedBy: string;
            const CcyOwnerBranch: string;
            const CcySourceBranch: string;
            const CcyApInvoBal: string;
            const CcyApOpenBal: string;
            const CcyApNetBal: string;
            const CcyApLinvoBal: string;
            const CcyApLopenBal: string;
            const CcyApLnetBal: string;
            const CcyArInvoBal: string;
            const CcyArOpenBal: string;
            const CcyArNetBal: string;
            const CcyArLinvoBal: string;
            const CcyArLopenBal: string;
            const CcyArLnetBal: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace CurrencyLedgerSummaryService {
        const baseUrl = "Finance/CurrencyLedgerSummary";
        function Create(request: Serenity.SaveRequest<CurrencyLedgerSummaryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CurrencyLedgerSummaryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CurrencyLedgerSummaryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CurrencyLedgerSummaryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class LedgerSummaryForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface LedgerSummaryForm {
        AcctNo: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        BalBeg: Serenity.DecimalEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        BalEnd: Serenity.DecimalEditor;
        BalBegSign: Serenity.StringEditor;
        BalEndSign: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface LedgerSummaryRow {
        Recnum?: number;
        AcctNo?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        TotalDebit?: number;
        TotalCredit?: number;
        BalBeg?: number;
        BalBegSign?: string;
        BalEnd?: number;
        BalEndSign?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        AcctNoRecnum?: number;
        AcctNoAcctName?: string;
        AcctNoAltAcctNo?: string;
        AcctNoNormalSign?: string;
        AcctNoTypeBs?: string;
        AcctNoTypePl?: string;
        AcctNoTypeDebtor?: string;
        AcctNoTypeCreditor?: string;
        AcctNoTypeMemo?: string;
        AcctNoDefaultCcy?: string;
        AcctNoAnlys1?: string;
        AcctNoAnlys2?: string;
        AcctNoAnlys3?: string;
        AcctNoAnlys4?: string;
        AcctNoSuspended?: string;
        AcctNoFixedCurrency?: string;
        AcctNoAutoDist?: string;
        AcctNoBudgetControl?: string;
        AcctNoSupprAnlys3?: string;
        AcctNoSupprAnlys4?: string;
        AcctNoSupprAnlys5?: string;
        AcctNoSupprAnlys6?: string;
        AcctNoSupprReval?: string;
        AcctNoNoCostCentre?: string;
        AcctNoNoDept?: string;
        AcctNoOper1?: string;
        AcctNoOper2?: string;
        AcctNoOper3?: string;
        AcctNoOper4?: string;
        AcctNoOper5?: string;
        AcctNoLinesBefPrint?: number;
        AcctNoTranAcct?: string;
        AcctNoSummaryPos?: string;
        AcctNoCreatedDate?: string;
        AcctNoCreatedBy?: string;
        AcctNoRevisedDate?: string;
        AcctNoRevisedBy?: string;
        AcctNoReconLastDate?: string;
        AcctNoReconLastJrn?: number;
        AcctNoReconBal?: number;
        AcctNoReconBalSign?: string;
        AcctNoLastTranDate?: string;
        AcctNoLastJrnNo?: number;
        AcctNoDistTotalPct?: number;
        AcctNoDistLastLine?: number;
        AcctNoReconCount?: number;
        AcctNoBalanceEnd?: number;
        AcctNoBalanceSign?: string;
        AcctNoOwnerBranch?: string;
        AcctNoSourceBranch?: string;
        AcctNoAllowEdit?: string;
        AcctNoAnlys5?: string;
        AcctNoAnlys6?: string;
        AcctNoAnlys7?: string;
        AcctNoAnlys8?: string;
        AcctNoAnlys9?: string;
        AcctNoAnlys10?: string;
    }
    namespace LedgerSummaryRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.LedgerSummary";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const BalBeg: string;
            const BalBegSign: string;
            const BalEnd: string;
            const BalEndSign: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const AcctNoRecnum: string;
            const AcctNoAcctName: string;
            const AcctNoAltAcctNo: string;
            const AcctNoNormalSign: string;
            const AcctNoTypeBs: string;
            const AcctNoTypePl: string;
            const AcctNoTypeDebtor: string;
            const AcctNoTypeCreditor: string;
            const AcctNoTypeMemo: string;
            const AcctNoDefaultCcy: string;
            const AcctNoAnlys1: string;
            const AcctNoAnlys2: string;
            const AcctNoAnlys3: string;
            const AcctNoAnlys4: string;
            const AcctNoSuspended: string;
            const AcctNoFixedCurrency: string;
            const AcctNoAutoDist: string;
            const AcctNoBudgetControl: string;
            const AcctNoSupprAnlys3: string;
            const AcctNoSupprAnlys4: string;
            const AcctNoSupprAnlys5: string;
            const AcctNoSupprAnlys6: string;
            const AcctNoSupprReval: string;
            const AcctNoNoCostCentre: string;
            const AcctNoNoDept: string;
            const AcctNoOper1: string;
            const AcctNoOper2: string;
            const AcctNoOper3: string;
            const AcctNoOper4: string;
            const AcctNoOper5: string;
            const AcctNoLinesBefPrint: string;
            const AcctNoTranAcct: string;
            const AcctNoSummaryPos: string;
            const AcctNoCreatedDate: string;
            const AcctNoCreatedBy: string;
            const AcctNoRevisedDate: string;
            const AcctNoRevisedBy: string;
            const AcctNoReconLastDate: string;
            const AcctNoReconLastJrn: string;
            const AcctNoReconBal: string;
            const AcctNoReconBalSign: string;
            const AcctNoLastTranDate: string;
            const AcctNoLastJrnNo: string;
            const AcctNoDistTotalPct: string;
            const AcctNoDistLastLine: string;
            const AcctNoReconCount: string;
            const AcctNoBalanceEnd: string;
            const AcctNoBalanceSign: string;
            const AcctNoOwnerBranch: string;
            const AcctNoSourceBranch: string;
            const AcctNoAllowEdit: string;
            const AcctNoAnlys5: string;
            const AcctNoAnlys6: string;
            const AcctNoAnlys7: string;
            const AcctNoAnlys8: string;
            const AcctNoAnlys9: string;
            const AcctNoAnlys10: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace LedgerSummaryService {
        const baseUrl = "Finance/LedgerSummary";
        function Create(request: Serenity.SaveRequest<LedgerSummaryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<LedgerSummaryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<LedgerSummaryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<LedgerSummaryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class PeriodicVoucherDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PeriodicVoucherDetailForm {
        EntryKey: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        AcctNo: Serenity.StringEditor;
        AcctName: Serenity.StringEditor;
        BranchNo: Serenity.StringEditor;
        CostCentre: Serenity.StringEditor;
        Dept: Serenity.StringEditor;
        LineRef: Serenity.StringEditor;
        DebitAmt: Serenity.DecimalEditor;
        CreditAmt: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        Particulars: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface PeriodicVoucherDetailRow {
        Recnum?: number;
        EntryKey?: string;
        LineNo?: number;
        AcctNo?: string;
        AcctName?: string;
        BranchNo?: string;
        CostCentre?: string;
        Dept?: string;
        LineRef?: string;
        DebitAmt?: number;
        CreditAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        Particulars?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        EntryKeyRecnum?: number;
        EntryKeyDescription?: string;
        EntryKeyVoucherType?: string;
        EntryKeySeriesCode?: string;
        EntryKeyCcy?: string;
        EntryKeySuspended?: string;
        EntryKeyEffectiveFrom?: string;
        EntryKeyEffectiveTo?: string;
        EntryKeyLastLineNo?: number;
        EntryKeyCreatedDate?: string;
        EntryKeyCreatedBy?: string;
        EntryKeyRevisedDate?: string;
        EntryKeyRevisedBy?: string;
        EntryKeyOwnerBranch?: string;
        EntryKeySourceBranch?: string;
        EntryKeyAnlys1?: string;
        EntryKeyAnlys2?: string;
        EntryKeyReference?: string;
        EntryKeyTotalDebit?: number;
        EntryKeyTotalCredit?: number;
        EntryKeyParticulars?: string;
        EntryKeyAnlys7?: string;
        EntryKeyAnlys8?: string;
        EntryKeyAnlys9?: string;
        EntryKeyAnlys10?: string;
        EntryKeyAnlys11?: string;
        EntryKeyAnlys12?: string;
        EntryKeyAnlys13?: string;
        EntryKeyAnlys14?: string;
    }
    namespace PeriodicVoucherDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "EntryKey";
        const localTextPrefix = "Finance.PeriodicVoucherDetail";
        namespace Fields {
            const Recnum: string;
            const EntryKey: string;
            const LineNo: string;
            const AcctNo: string;
            const AcctName: string;
            const BranchNo: string;
            const CostCentre: string;
            const Dept: string;
            const LineRef: string;
            const DebitAmt: string;
            const CreditAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const Particulars: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const EntryKeyRecnum: string;
            const EntryKeyDescription: string;
            const EntryKeyVoucherType: string;
            const EntryKeySeriesCode: string;
            const EntryKeyCcy: string;
            const EntryKeySuspended: string;
            const EntryKeyEffectiveFrom: string;
            const EntryKeyEffectiveTo: string;
            const EntryKeyLastLineNo: string;
            const EntryKeyCreatedDate: string;
            const EntryKeyCreatedBy: string;
            const EntryKeyRevisedDate: string;
            const EntryKeyRevisedBy: string;
            const EntryKeyOwnerBranch: string;
            const EntryKeySourceBranch: string;
            const EntryKeyAnlys1: string;
            const EntryKeyAnlys2: string;
            const EntryKeyReference: string;
            const EntryKeyTotalDebit: string;
            const EntryKeyTotalCredit: string;
            const EntryKeyParticulars: string;
            const EntryKeyAnlys7: string;
            const EntryKeyAnlys8: string;
            const EntryKeyAnlys9: string;
            const EntryKeyAnlys10: string;
            const EntryKeyAnlys11: string;
            const EntryKeyAnlys12: string;
            const EntryKeyAnlys13: string;
            const EntryKeyAnlys14: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace PeriodicVoucherDetailService {
        const baseUrl = "Finance/PeriodicVoucherDetail";
        function Create(request: Serenity.SaveRequest<PeriodicVoucherDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PeriodicVoucherDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PeriodicVoucherDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PeriodicVoucherDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PeriodicVoucherForm {
        EntryKey: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        VoucherType: Serenity.StringEditor;
        SeriesCode: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        EffectiveFrom: Serenity.DateEditor;
        EffectiveTo: Serenity.DateEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        Reference: Serenity.TextAreaEditor;
        Particulars: Serenity.TextAreaEditor;
        DetailList: PeriodicVoucherDetailEditor;
        ScheduleList: PeriodicVoucherScheduleDetailEditor;
    }
}
declare namespace Matrix.Finance {
    interface PeriodicVoucherRow {
        ScheduleList?: PeriodicVoucherScheduleRow[];
        DetailList?: PeriodicVoucherDetailRow[];
        Recnum?: number;
        EntryKey?: string;
        Description?: string;
        VoucherType?: string;
        SeriesCode?: string;
        Ccy?: string;
        Suspended?: boolean;
        EffectiveFrom?: string;
        EffectiveTo?: string;
        LastLineNo?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Anlys1?: string;
        Anlys2?: string;
        Reference?: string;
        TotalDebit?: number;
        TotalCredit?: number;
        Particulars?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
    }
    namespace PeriodicVoucherRow {
        const idProperty = "EntryKey";
        const nameProperty = "Description";
        const localTextPrefix = "Finance.PeriodicVoucher";
        namespace Fields {
            const ScheduleList: string;
            const DetailList: string;
            const Recnum: string;
            const EntryKey: string;
            const Description: string;
            const VoucherType: string;
            const SeriesCode: string;
            const Ccy: string;
            const Suspended: string;
            const EffectiveFrom: string;
            const EffectiveTo: string;
            const LastLineNo: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Anlys1: string;
            const Anlys2: string;
            const Reference: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const Particulars: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class PeriodicVoucherScheduleForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PeriodicVoucherScheduleForm {
        EntryKey: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        VoucherNo: Serenity.StringEditor;
        VoucherDate: Serenity.DateEditor;
        ExchRate: Serenity.DecimalEditor;
        DebitTotal: Serenity.DecimalEditor;
        CreditTotal: Serenity.DecimalEditor;
        SourceDate: Serenity.DateEditor;
        SourceBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface PeriodicVoucherScheduleRow {
        Recnum?: number;
        EntryKey?: string;
        Period?: string;
        Suspended?: string;
        VoucherNo?: string;
        VoucherDate?: string;
        ExchRate?: number;
        DebitTotal?: number;
        CreditTotal?: number;
        SourceDate?: string;
        SourceBy?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        EntryKeyRecnum?: number;
        EntryKeyDescription?: string;
        EntryKeyVoucherType?: string;
        EntryKeySeriesCode?: string;
        EntryKeyCcy?: string;
        EntryKeySuspended?: string;
        EntryKeyEffectiveFrom?: string;
        EntryKeyEffectiveTo?: string;
        EntryKeyLastLineNo?: number;
        EntryKeyCreatedDate?: string;
        EntryKeyCreatedBy?: string;
        EntryKeyRevisedDate?: string;
        EntryKeyRevisedBy?: string;
        EntryKeyOwnerBranch?: string;
        EntryKeySourceBranch?: string;
        EntryKeyAnlys1?: string;
        EntryKeyAnlys2?: string;
        EntryKeyReference?: string;
        EntryKeyTotalDebit?: number;
        EntryKeyTotalCredit?: number;
        EntryKeyParticulars?: string;
        EntryKeyAnlys7?: string;
        EntryKeyAnlys8?: string;
        EntryKeyAnlys9?: string;
        EntryKeyAnlys10?: string;
        EntryKeyAnlys11?: string;
        EntryKeyAnlys12?: string;
        EntryKeyAnlys13?: string;
        EntryKeyAnlys14?: string;
    }
    namespace PeriodicVoucherScheduleRow {
        const idProperty = "Recnum";
        const nameProperty = "EntryKey";
        const localTextPrefix = "Finance.PeriodicVoucherSchedule";
        namespace Fields {
            const Recnum: string;
            const EntryKey: string;
            const Period: string;
            const Suspended: string;
            const VoucherNo: string;
            const VoucherDate: string;
            const ExchRate: string;
            const DebitTotal: string;
            const CreditTotal: string;
            const SourceDate: string;
            const SourceBy: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const EntryKeyRecnum: string;
            const EntryKeyDescription: string;
            const EntryKeyVoucherType: string;
            const EntryKeySeriesCode: string;
            const EntryKeyCcy: string;
            const EntryKeySuspended: string;
            const EntryKeyEffectiveFrom: string;
            const EntryKeyEffectiveTo: string;
            const EntryKeyLastLineNo: string;
            const EntryKeyCreatedDate: string;
            const EntryKeyCreatedBy: string;
            const EntryKeyRevisedDate: string;
            const EntryKeyRevisedBy: string;
            const EntryKeyOwnerBranch: string;
            const EntryKeySourceBranch: string;
            const EntryKeyAnlys1: string;
            const EntryKeyAnlys2: string;
            const EntryKeyReference: string;
            const EntryKeyTotalDebit: string;
            const EntryKeyTotalCredit: string;
            const EntryKeyParticulars: string;
            const EntryKeyAnlys7: string;
            const EntryKeyAnlys8: string;
            const EntryKeyAnlys9: string;
            const EntryKeyAnlys10: string;
            const EntryKeyAnlys11: string;
            const EntryKeyAnlys12: string;
            const EntryKeyAnlys13: string;
            const EntryKeyAnlys14: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace PeriodicVoucherScheduleService {
        const baseUrl = "Finance/PeriodicVoucherSchedule";
        function Create(request: Serenity.SaveRequest<PeriodicVoucherScheduleRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PeriodicVoucherScheduleRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PeriodicVoucherScheduleRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PeriodicVoucherScheduleRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace PeriodicVoucherService {
        const baseUrl = "Finance/PeriodicVoucher";
        function Create(request: Serenity.SaveRequest<PeriodicVoucherRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PeriodicVoucherRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PeriodicVoucherRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PeriodicVoucherRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class VoucherCancellationForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VoucherCancellationForm {
        RefNo: Serenity.StringEditor;
        PostedDate: Serenity.DateEditor;
        PostedBy: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        VoucherType: Serenity.StringEditor;
        VoucherNo: Serenity.StringEditor;
        TranDate: Serenity.DateEditor;
        Particulars: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Finance {
    interface VoucherCancellationRow {
        Recnum?: number;
        RefNo?: string;
        PostedDate?: string;
        PostedBy?: string;
        Posted?: boolean;
        VoucherType?: string;
        VoucherNo?: string;
        TranDate?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
    }
    namespace VoucherCancellationRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Finance.VoucherCancellation";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const PostedDate: string;
            const PostedBy: string;
            const Posted: string;
            const VoucherType: string;
            const VoucherNo: string;
            const TranDate: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace VoucherCancellationService {
        const baseUrl = "Finance/VoucherCancellation";
        function Create(request: Serenity.SaveRequest<VoucherCancellationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VoucherCancellationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VoucherCancellationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VoucherCancellationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class VoucherCurrencyDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VoucherCurrencyDetailForm {
        VoucherType: Serenity.StringEditor;
        VoucherNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        LastExchRate: Serenity.DecimalEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface VoucherCurrencyDetailRow {
        Recnum?: number;
        VoucherType?: string;
        VoucherNo?: string;
        Ccy?: string;
        LastExchRate?: number;
        TotalDebit?: number;
        TotalCredit?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace VoucherCurrencyDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "VoucherType";
        const localTextPrefix = "Finance.VoucherCurrencyDetail";
        namespace Fields {
            const Recnum: string;
            const VoucherType: string;
            const VoucherNo: string;
            const Ccy: string;
            const LastExchRate: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace VoucherCurrencyDetailService {
        const baseUrl = "Finance/VoucherCurrencyDetail";
        function Create(request: Serenity.SaveRequest<VoucherCurrencyDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VoucherCurrencyDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VoucherCurrencyDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VoucherCurrencyDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class VoucherDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VoucherDetailForm {
        VoucherType: Serenity.StringEditor;
        VoucherNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        AcctNo: Serenity.StringEditor;
        AcctName: Serenity.StringEditor;
        BranchNo: Serenity.StringEditor;
        CostCentre: Serenity.StringEditor;
        Dept: Serenity.StringEditor;
        LineRef: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        Debit: Serenity.DecimalEditor;
        Credit: Serenity.DecimalEditor;
        ForexAmt: Serenity.DecimalEditor;
        LedgerAmt: Serenity.DecimalEditor;
        Sign: Serenity.StringEditor;
        LedgerDebit: Serenity.DecimalEditor;
        LedgerCredit: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        Reconciled: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        FiscalYear: Serenity.DecimalEditor;
        PeriodNo: Serenity.DecimalEditor;
        JournalNo: Serenity.DecimalEditor;
        VoucherDate: Serenity.DateEditor;
        LedgerAmtCpd: Serenity.DecimalEditor;
        Reference: Serenity.StringEditor;
        PostedDate: Serenity.DateEditor;
        RunningBalance: Serenity.DecimalEditor;
        BalanceSign: Serenity.StringEditor;
        ExchDiff: Serenity.StringEditor;
        Particulars: Serenity.StringEditor;
        ItemGroup: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
        InvoiceNo: Serenity.StringEditor;
    }
}
declare namespace Matrix.Finance {
    interface VoucherDetailRow {
        Recnum?: number;
        VoucherType?: string;
        VoucherNo?: string;
        LineNo?: number;
        AcctNo?: string;
        AcctName?: string;
        BranchNo?: string;
        CostCentre?: string;
        Dept?: string;
        LineRef?: string;
        Ccy?: string;
        ExchRate?: number;
        Debit?: number;
        Credit?: number;
        ForexAmt?: number;
        LedgerAmt?: number;
        Sign?: string;
        LedgerDebit?: number;
        LedgerCredit?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        Posted?: string;
        Reconciled?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        JournalNo?: number;
        VoucherDate?: string;
        LedgerAmtCpd?: number;
        Reference?: string;
        PostedDate?: string;
        RunningBalance?: number;
        BalanceSign?: string;
        ExchDiff?: string;
        Particulars?: string;
        ItemGroup?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        InvoiceNo?: string;
    }
    namespace VoucherDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "VoucherType";
        const localTextPrefix = "Finance.VoucherDetail";
        namespace Fields {
            const Recnum: string;
            const VoucherType: string;
            const VoucherNo: string;
            const LineNo: string;
            const AcctNo: string;
            const AcctName: string;
            const BranchNo: string;
            const CostCentre: string;
            const Dept: string;
            const LineRef: string;
            const Ccy: string;
            const ExchRate: string;
            const Debit: string;
            const Credit: string;
            const ForexAmt: string;
            const LedgerAmt: string;
            const Sign: string;
            const LedgerDebit: string;
            const LedgerCredit: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const Posted: string;
            const Reconciled: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const JournalNo: string;
            const VoucherDate: string;
            const LedgerAmtCpd: string;
            const Reference: string;
            const PostedDate: string;
            const RunningBalance: string;
            const BalanceSign: string;
            const ExchDiff: string;
            const Particulars: string;
            const ItemGroup: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const InvoiceNo: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace VoucherDetailService {
        const baseUrl = "Finance/VoucherDetail";
        function Create(request: Serenity.SaveRequest<VoucherDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VoucherDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VoucherDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VoucherDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    class VoucherForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VoucherForm {
        VoucherType: Serenity.StringEditor;
        VoucherNo: Serenity.StringEditor;
        VoucherDate: Serenity.DateEditor;
        Period: Serenity.StringEditor;
        Reference: Serenity.StringEditor;
        Particulars: Serenity.StringEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        DetailList: VoucherDetailEditor;
    }
}
declare namespace Matrix.Finance {
}
declare namespace Matrix.Finance {
    class VoucherPresetForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VoucherPresetForm {
        VoucherType: Serenity.StringEditor;
        SeqNo: Serenity.DecimalEditor;
        AcctNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        DebitAmt: Serenity.DecimalEditor;
        CreditAmt: Serenity.DecimalEditor;
        BaseLineNo: Serenity.DecimalEditor;
        BaseEntry: Serenity.StringEditor;
        ResultPercent: Serenity.DecimalEditor;
        ResultSign: Serenity.StringEditor;
        CostCentre: Serenity.StringEditor;
        Dept: Serenity.StringEditor;
        Particulars: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Finance {
    interface VoucherPresetRow {
        Recnum?: number;
        VoucherType?: string;
        SeqNo?: number;
        AcctNo?: string;
        Ccy?: string;
        ExchRate?: number;
        DebitAmt?: number;
        CreditAmt?: number;
        BaseLineNo?: number;
        BaseEntry?: string;
        ResultPercent?: number;
        ResultSign?: string;
        CostCentre?: string;
        Dept?: string;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
        VoucherTypeRecnum?: number;
        VoucherTypeDescription?: string;
        VoucherTypeSuspended?: string;
        VoucherTypeDirectEntry?: string;
        VoucherTypeAllowEdit?: string;
        VoucherTypeMultiCurrency?: string;
        VoucherTypeBatchedPosting?: string;
        VoucherTypeCostCtrOpt?: string;
        VoucherTypeDeptOpt?: string;
        VoucherTypeAnlys1Opt?: string;
        VoucherTypeAnlys2Opt?: string;
        VoucherTypeAnlys3DrOpt?: string;
        VoucherTypeAnlys4DrOpt?: string;
        VoucherTypeAnlys5DrOpt?: string;
        VoucherTypeAnlys6DrOpt?: string;
        VoucherTypeAnlys3CrOpt?: string;
        VoucherTypeAnlys4CrOpt?: string;
        VoucherTypeAnlys5CrOpt?: string;
        VoucherTypeAnlys6CrOpt?: string;
        VoucherTypeSeriesCode?: string;
        VoucherTypeCreatedDate?: string;
        VoucherTypeCreatedBy?: string;
        VoucherTypeRevisedDate?: string;
        VoucherTypeRevisedBy?: string;
        VoucherTypeBatchCount?: number;
        VoucherTypeOwnerBranch?: string;
        VoucherTypeSourceBranch?: string;
        VoucherTypeRemarks?: string;
        VoucherTypeAnlys7Opt?: string;
        VoucherTypeAnlys8Opt?: string;
        VoucherTypeAnlys9Opt?: string;
        VoucherTypeAnlys10Opt?: string;
        VoucherTypeAnlys11Opt?: string;
        VoucherTypeAnlys12Opt?: string;
        VoucherTypeAnlys13Opt?: string;
        VoucherTypeAnlys14Opt?: string;
        VoucherTypeAnlys15DrOpt?: string;
        VoucherTypeAnlys16DrOpt?: string;
        VoucherTypeAnlys17DrOpt?: string;
        VoucherTypeAnlys18DrOpt?: string;
        VoucherTypeAnlys19DrOpt?: string;
        VoucherTypeAnlys20DrOpt?: string;
        VoucherTypeAnlys15CrOpt?: string;
        VoucherTypeAnlys16CrOpt?: string;
        VoucherTypeAnlys17CrOpt?: string;
        VoucherTypeAnlys18CrOpt?: string;
        VoucherTypeAnlys19CrOpt?: string;
        VoucherTypeAnlys20CrOpt?: string;
    }
    namespace VoucherPresetRow {
        const idProperty = "Recnum";
        const nameProperty = "VoucherType";
        const localTextPrefix = "Finance.VoucherPreset";
        namespace Fields {
            const Recnum: string;
            const VoucherType: string;
            const SeqNo: string;
            const AcctNo: string;
            const Ccy: string;
            const ExchRate: string;
            const DebitAmt: string;
            const CreditAmt: string;
            const BaseLineNo: string;
            const BaseEntry: string;
            const ResultPercent: string;
            const ResultSign: string;
            const CostCentre: string;
            const Dept: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
            const VoucherTypeRecnum: string;
            const VoucherTypeDescription: string;
            const VoucherTypeSuspended: string;
            const VoucherTypeDirectEntry: string;
            const VoucherTypeAllowEdit: string;
            const VoucherTypeMultiCurrency: string;
            const VoucherTypeBatchedPosting: string;
            const VoucherTypeCostCtrOpt: string;
            const VoucherTypeDeptOpt: string;
            const VoucherTypeAnlys1Opt: string;
            const VoucherTypeAnlys2Opt: string;
            const VoucherTypeAnlys3DrOpt: string;
            const VoucherTypeAnlys4DrOpt: string;
            const VoucherTypeAnlys5DrOpt: string;
            const VoucherTypeAnlys6DrOpt: string;
            const VoucherTypeAnlys3CrOpt: string;
            const VoucherTypeAnlys4CrOpt: string;
            const VoucherTypeAnlys5CrOpt: string;
            const VoucherTypeAnlys6CrOpt: string;
            const VoucherTypeSeriesCode: string;
            const VoucherTypeCreatedDate: string;
            const VoucherTypeCreatedBy: string;
            const VoucherTypeRevisedDate: string;
            const VoucherTypeRevisedBy: string;
            const VoucherTypeBatchCount: string;
            const VoucherTypeOwnerBranch: string;
            const VoucherTypeSourceBranch: string;
            const VoucherTypeRemarks: string;
            const VoucherTypeAnlys7Opt: string;
            const VoucherTypeAnlys8Opt: string;
            const VoucherTypeAnlys9Opt: string;
            const VoucherTypeAnlys10Opt: string;
            const VoucherTypeAnlys11Opt: string;
            const VoucherTypeAnlys12Opt: string;
            const VoucherTypeAnlys13Opt: string;
            const VoucherTypeAnlys14Opt: string;
            const VoucherTypeAnlys15DrOpt: string;
            const VoucherTypeAnlys16DrOpt: string;
            const VoucherTypeAnlys17DrOpt: string;
            const VoucherTypeAnlys18DrOpt: string;
            const VoucherTypeAnlys19DrOpt: string;
            const VoucherTypeAnlys20DrOpt: string;
            const VoucherTypeAnlys15CrOpt: string;
            const VoucherTypeAnlys16CrOpt: string;
            const VoucherTypeAnlys17CrOpt: string;
            const VoucherTypeAnlys18CrOpt: string;
            const VoucherTypeAnlys19CrOpt: string;
            const VoucherTypeAnlys20CrOpt: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace VoucherPresetService {
        const baseUrl = "Finance/VoucherPreset";
        function Create(request: Serenity.SaveRequest<VoucherPresetRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VoucherPresetRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VoucherPresetRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VoucherPresetRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Finance {
    interface VoucherRow {
        DetailList?: VoucherDetailRow[];
        Recnum?: number;
        VoucherType?: string;
        VoucherNo?: string;
        Posted?: string;
        Hold?: string;
        VoucherDate?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        Reference?: string;
        LastLineNo?: number;
        LineCount?: number;
        TotalDebit?: number;
        TotalCredit?: number;
        Balance?: number;
        BalanceSign?: string;
        JournalNo?: number;
        SourceType?: string;
        SourceRef?: string;
        Anlys1?: string;
        Anlys2?: string;
        BatchSelect?: string;
        LocalCcyOnly?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedBy?: string;
        PostedDate?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
        AiLink?: string;
        AiLinkType?: string;
        AiLinkNo?: string;
        Anlys7?: string;
        Anlys8?: string;
        ExportedDate?: string;
        Fserialno?: number;
        Fnum?: number;
        RoundNo?: number;
        NewVoucherNo?: string;
        Fgroup?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        ManualEdited?: boolean;
        Remark?: string;
    }
    namespace VoucherRow {
        const idProperty = "VoucherNo";
        const nameProperty = "VoucherType";
        const localTextPrefix = "Finance.Voucher";
        namespace Fields {
            const DetailList: string;
            const Recnum: string;
            const VoucherType: string;
            const VoucherNo: string;
            const Posted: string;
            const Hold: string;
            const VoucherDate: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const Reference: string;
            const LastLineNo: string;
            const LineCount: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const Balance: string;
            const BalanceSign: string;
            const JournalNo: string;
            const SourceType: string;
            const SourceRef: string;
            const Anlys1: string;
            const Anlys2: string;
            const BatchSelect: string;
            const LocalCcyOnly: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedBy: string;
            const PostedDate: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
            const AiLink: string;
            const AiLinkType: string;
            const AiLinkNo: string;
            const Anlys7: string;
            const Anlys8: string;
            const ExportedDate: string;
            const Fserialno: string;
            const Fnum: string;
            const RoundNo: string;
            const NewVoucherNo: string;
            const Fgroup: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const ManualEdited: string;
            const Remark: string;
        }
    }
}
declare namespace Matrix.Finance {
    namespace VoucherService {
        const baseUrl = "Finance/Voucher";
        function Create(request: Serenity.SaveRequest<VoucherRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VoucherRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VoucherRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VoucherRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix {
    interface GetNextNumberRequest extends Serenity.ServiceRequest {
        Prefix?: string;
        Length?: number;
    }
}
declare namespace Matrix {
    interface GetNextNumberResponse extends Serenity.ServiceResponse {
        Number?: number;
        Serial?: string;
    }
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
    class FifoControlForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface FifoControlForm {
        Loc: Serenity.StringEditor;
        ItemNo: Serenity.StringEditor;
        Allocated: Serenity.StringEditor;
        ValueDate: Serenity.DateEditor;
        LogNo: Serenity.DecimalEditor;
        LineNo: Serenity.DecimalEditor;
        LogNoOut: Serenity.DecimalEditor;
        LineNoOut: Serenity.DecimalEditor;
        Qty: Serenity.DecimalEditor;
        Cost: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Inventory {
    interface FifoControlRow {
        Recnum?: number;
        Loc?: string;
        ItemNo?: string;
        Allocated?: string;
        ValueDate?: string;
        LogNo?: number;
        LineNo?: number;
        LogNoOut?: number;
        LineNoOut?: number;
        Qty?: number;
        Cost?: number;
    }
    namespace FifoControlRow {
        const idProperty = "Recnum";
        const nameProperty = "Loc";
        const localTextPrefix = "Inventory.FifoControl";
        namespace Fields {
            const Recnum: string;
            const Loc: string;
            const ItemNo: string;
            const Allocated: string;
            const ValueDate: string;
            const LogNo: string;
            const LineNo: string;
            const LogNoOut: string;
            const LineNoOut: string;
            const Qty: string;
            const Cost: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace FifoControlService {
        const baseUrl = "Inventory/FifoControl";
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<FifoControlRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<FifoControlRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
    class InventoryBalanceForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface InventoryBalanceForm {
        Loc: Serenity.StringEditor;
        ItemNo: Serenity.StringEditor;
        Loc2: Serenity.StringEditor;
        ItemNo2: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LastDateIn: Serenity.DateEditor;
        LastDateOut: Serenity.DateEditor;
        WithBalance: Serenity.StringEditor;
        QtyOnHand: Serenity.DecimalEditor;
        QtyWaitlisted: Serenity.DecimalEditor;
        QtyReserved: Serenity.DecimalEditor;
        QtyCommitted: Serenity.DecimalEditor;
        QtyAvailable: Serenity.DecimalEditor;
        QtyUnallocated: Serenity.DecimalEditor;
        InvtCostAvail: Serenity.DecimalEditor;
        InvtCostLdg: Serenity.DecimalEditor;
        AverageCost: Serenity.StringEditor;
        LatestCost: Serenity.DecimalEditor;
        LastCountDate: Serenity.DateEditor;
        DefaultBinNo: Serenity.StringEditor;
        QtyOnInspect: Serenity.DecimalEditor;
        QtyOnTransfer: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Inventory {
    interface InventoryBalanceRow {
        Recnum?: number;
        Loc?: string;
        ItemNo?: string;
        Loc2?: string;
        ItemNo2?: string;
        Description?: string;
        Uom?: string;
        LastDateIn?: string;
        LastDateOut?: string;
        WithBalance?: string;
        QtyOnHand?: number;
        QtyWaitlisted?: number;
        QtyReserved?: number;
        QtyCommitted?: number;
        QtyAvailable?: number;
        QtyUnallocated?: number;
        InvtCostAvail?: number;
        InvtCostLdg?: number;
        AverageCost?: string;
        LatestCost?: number;
        LastCountDate?: string;
        DefaultBinNo?: string;
        QtyOnInspect?: number;
        QtyOnTransfer?: number;
        LocRecnum?: number;
        LocDescription?: string;
        LocSuspended?: string;
        LocAddress?: string;
        LocAddress2?: string;
        LocAddress3?: string;
        LocAddress4?: string;
        LocBranchNo?: string;
        LocNoReservation?: string;
        LocNoWaitlist?: string;
        LocNoAvailable?: string;
        LocNoPlanning?: string;
        LocNoIssuance?: string;
        LocNoReceipts?: string;
        LocNoMatIssue?: string;
        LocNoFgReturn?: string;
        LocNoShipment?: string;
        LocNoGrn?: string;
        LocWithBacklog?: string;
        LocOnSorderCount?: number;
        LocOnPorderCount?: number;
        LocOnJorderCount?: number;
        LocInvtCostAvail?: number;
        LocInvtCostLdg?: number;
        LocCreatedDate?: string;
        LocCreatedBy?: string;
        LocRevisedDate?: string;
        LocRevisedBy?: string;
        LocOwnerBranch?: string;
        LocSourceBranch?: string;
        LocWithBinCtrl?: string;
        LocWithPackingBox?: boolean;
        ItemNoRecnum?: number;
        ItemNoDescription?: string;
        ItemNoSuspended?: string;
        ItemNoItemGroup?: string;
        ItemNoCharges?: string;
        ItemNoProduct?: string;
        ItemNoMaterial?: string;
        ItemNoInspected?: string;
        ItemNoItemType?: string;
        ItemNoStockUom?: string;
        ItemNoMainLoc?: string;
        ItemNoMakeBuy?: string;
        ItemNoAllocMethod?: string;
        ItemNoStdCostOk?: string;
        ItemNoCostCentre?: string;
        ItemNoCycleCode?: string;
        ItemNoAnlys1?: string;
        ItemNoAnlys2?: string;
        ItemNoAnlys3?: string;
        ItemNoAnlys4?: string;
        ItemNoDefSpecNo?: string;
        ItemNoDefSpecCount?: number;
        ItemNoCreatedDate?: string;
        ItemNoCreatedBy?: string;
        ItemNoRevisedDate?: string;
        ItemNoRevisedBy?: string;
        ItemNoWithBacklog?: string;
        ItemNoWithBalance?: string;
        ItemNoQtyOnHand?: number;
        ItemNoQtyOnSorder?: number;
        ItemNoQtyOnPorder?: number;
        ItemNoQtyOnJorder?: number;
        ItemNoQtyOnInspect?: number;
        ItemNoQtyWaitlisted?: number;
        ItemNoQtyReserved?: number;
        ItemNoQtyCommitted?: number;
        ItemNoQtyAvailable?: number;
        ItemNoQtyUnallocated?: number;
        ItemNoInvtCostAvail?: number;
        ItemNoInvtCostLdg?: number;
        ItemNoAverageCost?: string;
        ItemNoLatestCost?: number;
        ItemNoStdCost?: number;
        ItemNoLastCountDate?: string;
        ItemNoLastDateIn?: string;
        ItemNoLastDateOut?: string;
        ItemNoSalesUom?: string;
        ItemNoSalesLotSize?: number;
        ItemNoPriceCcy?: string;
        ItemNoBasePrice?: number;
        ItemNoPricea?: number;
        ItemNoPriceb?: number;
        ItemNoPricec?: number;
        ItemNoMinPrice?: number;
        ItemNoMaxPrice?: number;
        ItemNoMinOrderQty?: number;
        ItemNoMaxOrderQty?: number;
        ItemNoMinOrderDays?: number;
        ItemNoInnerPkgType?: string;
        ItemNoInnerQty?: number;
        ItemNoOuterPkgType?: string;
        ItemNoOuterQty?: number;
        ItemNoArticleCode?: string;
        ItemNoQuotaCategory?: string;
        ItemNoWeightUom?: string;
        ItemNoGrossWt?: number;
        ItemNoNetWt?: number;
        ItemNoDimensionUom?: string;
        ItemNoFlength?: number;
        ItemNoWidth?: number;
        ItemNoHeight?: number;
        ItemNoComputedVol?: number;
        ItemNoDeclaredVol?: number;
        ItemNoSrevisedDate?: string;
        ItemNoSrevisedBy?: string;
        ItemNoMpsItem?: string;
        ItemNoOrderPolicy?: string;
        ItemNoMinPlanordQty?: number;
        ItemNoMaxPlanordQty?: number;
        ItemNoStdPlanordQty?: number;
        ItemNoMinPlanordPrd?: number;
        ItemNoMaxPlanordPrd?: number;
        ItemNoStdPlanordPrd?: number;
        ItemNoReorderPt?: number;
        ItemNoReorderQty?: number;
        ItemNoMinMthlyProd?: number;
        ItemNoMaxMthlyProd?: number;
        ItemNoMinMthlyPur?: number;
        ItemNoMaxMthlyPur?: number;
        ItemNoFollowMinProd?: string;
        ItemNoFollowMaxProd?: string;
        ItemNoFollowMinPur?: string;
        ItemNoFollowMaxPur?: string;
        ItemNoAllowMixMode?: string;
        ItemNoPrefVendOnly?: string;
        ItemNoPrefVend1?: string;
        ItemNoPrefVend2?: string;
        ItemNoProdLeadTime?: number;
        ItemNoProdLeadUnit?: string;
        ItemNoPurLeadTime?: number;
        ItemNoPurLeadUnit?: string;
        ItemNoPlanner?: string;
        ItemNoMrpParmDate?: string;
        ItemNoMrpParmBy?: string;
        ItemNoAltDescription?: string;
        ItemNoPictureFile?: string;
        ItemNoAcctItmAsset?: string;
        ItemNoAcctItmWip?: string;
        ItemNoAcctItmConsum?: string;
        ItemNoAcctItmScrap?: string;
        ItemNoAcctItmPvar?: string;
        ItemNoAcctItmReval?: string;
        ItemNoAcctItmVaria?: string;
        ItemNoAcctItmSales?: string;
        ItemNoAcctItmSlret?: string;
        ItemNoAcctItmSldisc?: string;
        ItemNoAcctItmCogs?: string;
        ItemNoAcctItmPurch?: string;
        ItemNoAcctItmPuret?: string;
        ItemNoAcctItmPudisc?: string;
        ItemNoAcctItmPutax?: string;
        ItemNoAcctMachine?: string;
        ItemNoAcctEnergy?: string;
        ItemNoAcctWater?: string;
        ItemNoAcctRental?: string;
        ItemNoAcctLabor?: string;
        ItemNoAcctInlab?: string;
        ItemNoAcctInmat?: string;
        ItemNoAcctMisc?: string;
        ItemNoArevisedDate?: string;
        ItemNoArevisedBy?: string;
        ItemNoBrevisedDate?: string;
        ItemNoBrevisedBy?: string;
        ItemNoSalesLtaxCode?: string;
        ItemNoPurchLtaxCode?: string;
        ItemNoTrevisedDate?: string;
        ItemNoTrevisedBy?: string;
        ItemNoSpecsCount?: number;
        ItemNoDefBomNo?: string;
        ItemNoLastSnapNo?: number;
        ItemNoCommisType?: string;
        ItemNoProdBranch?: string;
        ItemNoOwnerBranch?: string;
        ItemNoSourceBranch?: string;
        ItemNoScrapRate?: number;
        ItemNoAltExtDesc?: string;
        ItemNoExtendedDesc?: string;
        ItemNoPurPriceCtrl?: string;
        ItemNoPurMaxDev?: number;
        ItemNoWebItem?: string;
        ItemNoAcctItmSubcon?: string;
        ItemNoWithBinCtrl?: string;
        ItemNoConsign?: string;
        ItemNoProdDevt01?: string;
        ItemNoProdDevt02?: string;
        ItemNoProdDevt03?: string;
        ItemNoProdDevt04?: string;
        ItemNoProdDevt05?: string;
        ItemNoProdDevt06?: string;
        ItemNoProdDevt07?: string;
        ItemNoProdDevt08?: string;
        ItemNoProdDevt09?: string;
        ItemNoProdDevt10?: string;
        ItemNoProdDevt11?: string;
        ItemNoProdDevt12?: string;
        ItemNoProdDevt13?: string;
        ItemNoProdDevt14?: string;
        ItemNoProdDevt15?: string;
        ItemNoProdDevt16?: string;
        ItemNoProdDevt17?: string;
        ItemNoProdDevt18?: string;
        ItemNoProdDevt19?: string;
        ItemNoProdDevt20?: string;
        ItemNoProdCheck01?: string;
        ItemNoProdCheck02?: string;
        ItemNoProdCheck03?: string;
        ItemNoProdCheck04?: string;
        ItemNoProdCheck05?: string;
        ItemNoProdCheck06?: string;
        ItemNoProdCheck07?: string;
        ItemNoProdCheck08?: string;
        ItemNoProdCheck09?: string;
        ItemNoProdCheck10?: string;
        ItemNoProdCheck11?: string;
        ItemNoProdCheck12?: string;
        ItemNoProdCheck13?: string;
        ItemNoProdCheck14?: string;
        ItemNoProdCheck15?: string;
        ItemNoProdCheck16?: string;
        ItemNoProdCheck17?: string;
        ItemNoProdCheck18?: string;
        ItemNoProdCheck19?: string;
        ItemNoProdCheck20?: string;
        ItemNoLastPackLineNo?: number;
        ItemNoPutaxPcent?: number;
        ItemNoAcctItmSltax?: string;
        ItemNoSltaxPcent?: number;
        ItemNoPurUom?: string;
        ItemNoPurLotSize?: number;
        ItemNoPurCcy?: string;
        ItemNoPurBasePrice?: number;
        ItemNoQtyNetAvailable?: number;
        ItemNoUseStdProdLeadTime?: string;
        ItemNoDailyProdQty?: number;
        ItemNoIssueLotSize?: number;
        ItemNoMrpExclude?: string;
        ItemNoEnableLot?: string;
        ItemNoEnableSerial?: string;
        ItemNoLotNoLength?: number;
        ItemNoSerialNoLength?: number;
        ItemNoNextLotNo?: number;
        ItemNoNextSerialNo?: number;
        ItemNoMaxLotSize?: number;
        ItemNoLotNoPrefix?: string;
        ItemNoSerialNoPrefix?: string;
        ItemNoSafeStockLvl?: number;
        ItemNoMainBin?: string;
        ItemNoCustomProdCode?: string;
        ItemNoCustomLotSize?: number;
        ItemNoCustomGrUom?: string;
        ItemNoCustomGrWt?: number;
        ItemNoCustomNtWt?: number;
        ItemNoCustomOrigin?: string;
        ItemNoIsApproved?: string;
        ItemNoApprovedBy?: string;
        ItemNoPreapprove?: string;
        ItemNoApprovedDate?: string;
        ItemNoQtyOnTransfer?: number;
        ItemNoWithResetLot?: string;
        ItemNoWithResetSerial?: string;
        ItemNoPrevResetLotDate?: string;
        ItemNoPrevResetSerialDate?: string;
        ItemNoAutogenLot?: string;
        ItemNoAutogenSerial?: string;
        ItemNoFabItem?: string;
        ItemNoAnlys5?: string;
        ItemNoAnlys6?: string;
        ItemNoAnlys7?: string;
        ItemNoAnlys8?: string;
        ItemNoAnlys9?: string;
        ItemNoAnlys10?: string;
        ItemNoUserDefinedField1?: string;
        ItemNoUserDefinedField2?: string;
        ItemNoUserDefinedField3?: string;
        ItemNoUserDefinedField4?: string;
        ItemNoUserDefinedField5?: string;
        ItemNoUserDefinedField6?: string;
        ItemNoUserDefinedField7?: string;
        ItemNoUserDefinedField8?: string;
        ItemNoUserDefinedField9?: string;
        ItemNoUserDefinedField10?: string;
        ItemNoUserDefinedField11?: string;
        ItemNoUserDefinedField12?: string;
        ItemNoUserDefinedField13?: string;
        ItemNoUserDefinedField14?: string;
        ItemNoUserDefinedField15?: string;
        ItemNoUserDefinedField16?: string;
        ItemNoUserDefinedField17?: string;
        ItemNoUserDefinedField18?: string;
        ItemNoUserDefinedField19?: string;
        ItemNoUserDefinedField20?: string;
        ItemNoRohsCompliance?: boolean;
        ItemNoDefMoldBomNo?: string;
        ItemNoDefFormulaCode?: string;
        ItemNoBoxType?: string;
        ItemNoBoxLength?: number;
        ItemNoBoxWidth?: number;
        ItemNoBoxHeight?: number;
        ItemNoBoxDUom?: string;
        ItemNoWd?: number;
        ItemNoWdUom?: string;
        ItemNoCsLength?: number;
        ItemNoCsWidth?: number;
        ItemNoUserDefinedField21?: string;
        ItemNoCostWmove?: number;
        ItemNoCostWcase?: number;
        ItemNoCostWband?: number;
        ItemNoCostBatt?: number;
        ItemNoDescWmove?: string;
        ItemNoDescWcase?: string;
        ItemNoDescWband?: string;
        ItemNoDescBatt?: string;
        ItemNoPoBal?: number;
        ItemNoPoMaxBal?: number;
        ItemNoIncludeJob?: boolean;
        ItemNoCsThickness?: number;
        ItemNoCsThicknessUom?: string;
        ItemNoCsProportion?: number;
        ItemNoCsProportionUom?: string;
        ItemNoDieCutter?: number;
        ItemNoMatInspectLeadTime?: number;
        ItemNoMatPrepareLeadTime?: number;
        ItemNoMatInspectLeadUnit?: string;
        ItemNoMatPrepareLeadUnit?: string;
        ItemNoColorCode?: string;
        ItemNoCollectionCode?: string;
        ItemNoStyleCode?: string;
        ItemNoX?: number;
        ItemNoY?: number;
        ItemNoTempDescription?: string;
        ItemNoSpecification?: string;
        ItemNoXUom?: string;
        ItemNoYUom?: string;
        ItemNoProductionUomConversionRate?: number;
        ItemNoPurchaseUomConversionRate?: number;
        ItemNoAutogenLotIssue?: boolean;
        ItemNoAutogenSerialIssue?: boolean;
        ItemNoWcCostCcy?: string;
        ItemNoWcCost?: number;
        ItemNoWcCostDisc?: number;
        ItemNoWcCostExch?: number;
        ItemNoWcFreight?: number;
        ItemNoWcMargin?: number;
        ItemNoCeilingPrice?: number;
        ItemNoBottomRatio?: number;
        ItemNoBottomPrice?: number;
        ItemNoDrawingNo?: string;
        ItemNoMaterialType?: string;
    }
    namespace InventoryBalanceRow {
        const idProperty = "Recnum";
        const nameProperty = "Loc";
        const localTextPrefix = "Inventory.InventoryBalance";
        namespace Fields {
            const Recnum: string;
            const Loc: string;
            const ItemNo: string;
            const Loc2: string;
            const ItemNo2: string;
            const Description: string;
            const Uom: string;
            const LastDateIn: string;
            const LastDateOut: string;
            const WithBalance: string;
            const QtyOnHand: string;
            const QtyWaitlisted: string;
            const QtyReserved: string;
            const QtyCommitted: string;
            const QtyAvailable: string;
            const QtyUnallocated: string;
            const InvtCostAvail: string;
            const InvtCostLdg: string;
            const AverageCost: string;
            const LatestCost: string;
            const LastCountDate: string;
            const DefaultBinNo: string;
            const QtyOnInspect: string;
            const QtyOnTransfer: string;
            const LocRecnum: string;
            const LocDescription: string;
            const LocSuspended: string;
            const LocAddress: string;
            const LocAddress2: string;
            const LocAddress3: string;
            const LocAddress4: string;
            const LocBranchNo: string;
            const LocNoReservation: string;
            const LocNoWaitlist: string;
            const LocNoAvailable: string;
            const LocNoPlanning: string;
            const LocNoIssuance: string;
            const LocNoReceipts: string;
            const LocNoMatIssue: string;
            const LocNoFgReturn: string;
            const LocNoShipment: string;
            const LocNoGrn: string;
            const LocWithBacklog: string;
            const LocOnSorderCount: string;
            const LocOnPorderCount: string;
            const LocOnJorderCount: string;
            const LocInvtCostAvail: string;
            const LocInvtCostLdg: string;
            const LocCreatedDate: string;
            const LocCreatedBy: string;
            const LocRevisedDate: string;
            const LocRevisedBy: string;
            const LocOwnerBranch: string;
            const LocSourceBranch: string;
            const LocWithBinCtrl: string;
            const LocWithPackingBox: string;
            const ItemNoRecnum: string;
            const ItemNoDescription: string;
            const ItemNoSuspended: string;
            const ItemNoItemGroup: string;
            const ItemNoCharges: string;
            const ItemNoProduct: string;
            const ItemNoMaterial: string;
            const ItemNoInspected: string;
            const ItemNoItemType: string;
            const ItemNoStockUom: string;
            const ItemNoMainLoc: string;
            const ItemNoMakeBuy: string;
            const ItemNoAllocMethod: string;
            const ItemNoStdCostOk: string;
            const ItemNoCostCentre: string;
            const ItemNoCycleCode: string;
            const ItemNoAnlys1: string;
            const ItemNoAnlys2: string;
            const ItemNoAnlys3: string;
            const ItemNoAnlys4: string;
            const ItemNoDefSpecNo: string;
            const ItemNoDefSpecCount: string;
            const ItemNoCreatedDate: string;
            const ItemNoCreatedBy: string;
            const ItemNoRevisedDate: string;
            const ItemNoRevisedBy: string;
            const ItemNoWithBacklog: string;
            const ItemNoWithBalance: string;
            const ItemNoQtyOnHand: string;
            const ItemNoQtyOnSorder: string;
            const ItemNoQtyOnPorder: string;
            const ItemNoQtyOnJorder: string;
            const ItemNoQtyOnInspect: string;
            const ItemNoQtyWaitlisted: string;
            const ItemNoQtyReserved: string;
            const ItemNoQtyCommitted: string;
            const ItemNoQtyAvailable: string;
            const ItemNoQtyUnallocated: string;
            const ItemNoInvtCostAvail: string;
            const ItemNoInvtCostLdg: string;
            const ItemNoAverageCost: string;
            const ItemNoLatestCost: string;
            const ItemNoStdCost: string;
            const ItemNoLastCountDate: string;
            const ItemNoLastDateIn: string;
            const ItemNoLastDateOut: string;
            const ItemNoSalesUom: string;
            const ItemNoSalesLotSize: string;
            const ItemNoPriceCcy: string;
            const ItemNoBasePrice: string;
            const ItemNoPricea: string;
            const ItemNoPriceb: string;
            const ItemNoPricec: string;
            const ItemNoMinPrice: string;
            const ItemNoMaxPrice: string;
            const ItemNoMinOrderQty: string;
            const ItemNoMaxOrderQty: string;
            const ItemNoMinOrderDays: string;
            const ItemNoInnerPkgType: string;
            const ItemNoInnerQty: string;
            const ItemNoOuterPkgType: string;
            const ItemNoOuterQty: string;
            const ItemNoArticleCode: string;
            const ItemNoQuotaCategory: string;
            const ItemNoWeightUom: string;
            const ItemNoGrossWt: string;
            const ItemNoNetWt: string;
            const ItemNoDimensionUom: string;
            const ItemNoFlength: string;
            const ItemNoWidth: string;
            const ItemNoHeight: string;
            const ItemNoComputedVol: string;
            const ItemNoDeclaredVol: string;
            const ItemNoSrevisedDate: string;
            const ItemNoSrevisedBy: string;
            const ItemNoMpsItem: string;
            const ItemNoOrderPolicy: string;
            const ItemNoMinPlanordQty: string;
            const ItemNoMaxPlanordQty: string;
            const ItemNoStdPlanordQty: string;
            const ItemNoMinPlanordPrd: string;
            const ItemNoMaxPlanordPrd: string;
            const ItemNoStdPlanordPrd: string;
            const ItemNoReorderPt: string;
            const ItemNoReorderQty: string;
            const ItemNoMinMthlyProd: string;
            const ItemNoMaxMthlyProd: string;
            const ItemNoMinMthlyPur: string;
            const ItemNoMaxMthlyPur: string;
            const ItemNoFollowMinProd: string;
            const ItemNoFollowMaxProd: string;
            const ItemNoFollowMinPur: string;
            const ItemNoFollowMaxPur: string;
            const ItemNoAllowMixMode: string;
            const ItemNoPrefVendOnly: string;
            const ItemNoPrefVend1: string;
            const ItemNoPrefVend2: string;
            const ItemNoProdLeadTime: string;
            const ItemNoProdLeadUnit: string;
            const ItemNoPurLeadTime: string;
            const ItemNoPurLeadUnit: string;
            const ItemNoPlanner: string;
            const ItemNoMrpParmDate: string;
            const ItemNoMrpParmBy: string;
            const ItemNoAltDescription: string;
            const ItemNoPictureFile: string;
            const ItemNoAcctItmAsset: string;
            const ItemNoAcctItmWip: string;
            const ItemNoAcctItmConsum: string;
            const ItemNoAcctItmScrap: string;
            const ItemNoAcctItmPvar: string;
            const ItemNoAcctItmReval: string;
            const ItemNoAcctItmVaria: string;
            const ItemNoAcctItmSales: string;
            const ItemNoAcctItmSlret: string;
            const ItemNoAcctItmSldisc: string;
            const ItemNoAcctItmCogs: string;
            const ItemNoAcctItmPurch: string;
            const ItemNoAcctItmPuret: string;
            const ItemNoAcctItmPudisc: string;
            const ItemNoAcctItmPutax: string;
            const ItemNoAcctMachine: string;
            const ItemNoAcctEnergy: string;
            const ItemNoAcctWater: string;
            const ItemNoAcctRental: string;
            const ItemNoAcctLabor: string;
            const ItemNoAcctInlab: string;
            const ItemNoAcctInmat: string;
            const ItemNoAcctMisc: string;
            const ItemNoArevisedDate: string;
            const ItemNoArevisedBy: string;
            const ItemNoBrevisedDate: string;
            const ItemNoBrevisedBy: string;
            const ItemNoSalesLtaxCode: string;
            const ItemNoPurchLtaxCode: string;
            const ItemNoTrevisedDate: string;
            const ItemNoTrevisedBy: string;
            const ItemNoSpecsCount: string;
            const ItemNoDefBomNo: string;
            const ItemNoLastSnapNo: string;
            const ItemNoCommisType: string;
            const ItemNoProdBranch: string;
            const ItemNoOwnerBranch: string;
            const ItemNoSourceBranch: string;
            const ItemNoScrapRate: string;
            const ItemNoAltExtDesc: string;
            const ItemNoExtendedDesc: string;
            const ItemNoPurPriceCtrl: string;
            const ItemNoPurMaxDev: string;
            const ItemNoWebItem: string;
            const ItemNoAcctItmSubcon: string;
            const ItemNoWithBinCtrl: string;
            const ItemNoConsign: string;
            const ItemNoProdDevt01: string;
            const ItemNoProdDevt02: string;
            const ItemNoProdDevt03: string;
            const ItemNoProdDevt04: string;
            const ItemNoProdDevt05: string;
            const ItemNoProdDevt06: string;
            const ItemNoProdDevt07: string;
            const ItemNoProdDevt08: string;
            const ItemNoProdDevt09: string;
            const ItemNoProdDevt10: string;
            const ItemNoProdDevt11: string;
            const ItemNoProdDevt12: string;
            const ItemNoProdDevt13: string;
            const ItemNoProdDevt14: string;
            const ItemNoProdDevt15: string;
            const ItemNoProdDevt16: string;
            const ItemNoProdDevt17: string;
            const ItemNoProdDevt18: string;
            const ItemNoProdDevt19: string;
            const ItemNoProdDevt20: string;
            const ItemNoProdCheck01: string;
            const ItemNoProdCheck02: string;
            const ItemNoProdCheck03: string;
            const ItemNoProdCheck04: string;
            const ItemNoProdCheck05: string;
            const ItemNoProdCheck06: string;
            const ItemNoProdCheck07: string;
            const ItemNoProdCheck08: string;
            const ItemNoProdCheck09: string;
            const ItemNoProdCheck10: string;
            const ItemNoProdCheck11: string;
            const ItemNoProdCheck12: string;
            const ItemNoProdCheck13: string;
            const ItemNoProdCheck14: string;
            const ItemNoProdCheck15: string;
            const ItemNoProdCheck16: string;
            const ItemNoProdCheck17: string;
            const ItemNoProdCheck18: string;
            const ItemNoProdCheck19: string;
            const ItemNoProdCheck20: string;
            const ItemNoLastPackLineNo: string;
            const ItemNoPutaxPcent: string;
            const ItemNoAcctItmSltax: string;
            const ItemNoSltaxPcent: string;
            const ItemNoPurUom: string;
            const ItemNoPurLotSize: string;
            const ItemNoPurCcy: string;
            const ItemNoPurBasePrice: string;
            const ItemNoQtyNetAvailable: string;
            const ItemNoUseStdProdLeadTime: string;
            const ItemNoDailyProdQty: string;
            const ItemNoIssueLotSize: string;
            const ItemNoMrpExclude: string;
            const ItemNoEnableLot: string;
            const ItemNoEnableSerial: string;
            const ItemNoLotNoLength: string;
            const ItemNoSerialNoLength: string;
            const ItemNoNextLotNo: string;
            const ItemNoNextSerialNo: string;
            const ItemNoMaxLotSize: string;
            const ItemNoLotNoPrefix: string;
            const ItemNoSerialNoPrefix: string;
            const ItemNoSafeStockLvl: string;
            const ItemNoMainBin: string;
            const ItemNoCustomProdCode: string;
            const ItemNoCustomLotSize: string;
            const ItemNoCustomGrUom: string;
            const ItemNoCustomGrWt: string;
            const ItemNoCustomNtWt: string;
            const ItemNoCustomOrigin: string;
            const ItemNoIsApproved: string;
            const ItemNoApprovedBy: string;
            const ItemNoPreapprove: string;
            const ItemNoApprovedDate: string;
            const ItemNoQtyOnTransfer: string;
            const ItemNoWithResetLot: string;
            const ItemNoWithResetSerial: string;
            const ItemNoPrevResetLotDate: string;
            const ItemNoPrevResetSerialDate: string;
            const ItemNoAutogenLot: string;
            const ItemNoAutogenSerial: string;
            const ItemNoFabItem: string;
            const ItemNoAnlys5: string;
            const ItemNoAnlys6: string;
            const ItemNoAnlys7: string;
            const ItemNoAnlys8: string;
            const ItemNoAnlys9: string;
            const ItemNoAnlys10: string;
            const ItemNoUserDefinedField1: string;
            const ItemNoUserDefinedField2: string;
            const ItemNoUserDefinedField3: string;
            const ItemNoUserDefinedField4: string;
            const ItemNoUserDefinedField5: string;
            const ItemNoUserDefinedField6: string;
            const ItemNoUserDefinedField7: string;
            const ItemNoUserDefinedField8: string;
            const ItemNoUserDefinedField9: string;
            const ItemNoUserDefinedField10: string;
            const ItemNoUserDefinedField11: string;
            const ItemNoUserDefinedField12: string;
            const ItemNoUserDefinedField13: string;
            const ItemNoUserDefinedField14: string;
            const ItemNoUserDefinedField15: string;
            const ItemNoUserDefinedField16: string;
            const ItemNoUserDefinedField17: string;
            const ItemNoUserDefinedField18: string;
            const ItemNoUserDefinedField19: string;
            const ItemNoUserDefinedField20: string;
            const ItemNoRohsCompliance: string;
            const ItemNoDefMoldBomNo: string;
            const ItemNoDefFormulaCode: string;
            const ItemNoBoxType: string;
            const ItemNoBoxLength: string;
            const ItemNoBoxWidth: string;
            const ItemNoBoxHeight: string;
            const ItemNoBoxDUom: string;
            const ItemNoWd: string;
            const ItemNoWdUom: string;
            const ItemNoCsLength: string;
            const ItemNoCsWidth: string;
            const ItemNoUserDefinedField21: string;
            const ItemNoCostWmove: string;
            const ItemNoCostWcase: string;
            const ItemNoCostWband: string;
            const ItemNoCostBatt: string;
            const ItemNoDescWmove: string;
            const ItemNoDescWcase: string;
            const ItemNoDescWband: string;
            const ItemNoDescBatt: string;
            const ItemNoPoBal: string;
            const ItemNoPoMaxBal: string;
            const ItemNoIncludeJob: string;
            const ItemNoCsThickness: string;
            const ItemNoCsThicknessUom: string;
            const ItemNoCsProportion: string;
            const ItemNoCsProportionUom: string;
            const ItemNoDieCutter: string;
            const ItemNoMatInspectLeadTime: string;
            const ItemNoMatPrepareLeadTime: string;
            const ItemNoMatInspectLeadUnit: string;
            const ItemNoMatPrepareLeadUnit: string;
            const ItemNoColorCode: string;
            const ItemNoCollectionCode: string;
            const ItemNoStyleCode: string;
            const ItemNoX: string;
            const ItemNoY: string;
            const ItemNoTempDescription: string;
            const ItemNoSpecification: string;
            const ItemNoXUom: string;
            const ItemNoYUom: string;
            const ItemNoProductionUomConversionRate: string;
            const ItemNoPurchaseUomConversionRate: string;
            const ItemNoAutogenLotIssue: string;
            const ItemNoAutogenSerialIssue: string;
            const ItemNoWcCostCcy: string;
            const ItemNoWcCost: string;
            const ItemNoWcCostDisc: string;
            const ItemNoWcCostExch: string;
            const ItemNoWcFreight: string;
            const ItemNoWcMargin: string;
            const ItemNoCeilingPrice: string;
            const ItemNoBottomRatio: string;
            const ItemNoBottomPrice: string;
            const ItemNoDrawingNo: string;
            const ItemNoMaterialType: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace InventoryBalanceService {
        const baseUrl = "Inventory/InventoryBalance";
        function Create(request: Serenity.SaveRequest<InventoryBalanceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<InventoryBalanceRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<InventoryBalanceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<InventoryBalanceRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
    class InventoryMovementDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface InventoryMovementDetailForm {
        RefNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        LineRef: Serenity.StringEditor;
        Qty: Serenity.DecimalEditor;
        UnitCost: Serenity.DecimalEditor;
        TotalCost: Serenity.DecimalEditor;
        QtyPerRec: Serenity.DecimalEditor;
        QtyPerCount: Serenity.DecimalEditor;
        BinQtyIn: Serenity.DecimalEditor;
        BinQtyOut: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        BaseQty: Serenity.DecimalEditor;
        BaseUnitCost: Serenity.DecimalEditor;
        QtyCommitted: Serenity.DecimalEditor;
        QtyRequired: Serenity.DecimalEditor;
        QtyIssued: Serenity.DecimalEditor;
        QtyBalance: Serenity.DecimalEditor;
        QtyPer: Serenity.DecimalEditor;
        Final: Serenity.StringEditor;
        DebitAcct: Serenity.StringEditor;
        CreditAcct: Serenity.StringEditor;
        AllocMethod: Serenity.StringEditor;
        SourceType: Serenity.StringEditor;
        SourceRefNo: Serenity.StringEditor;
        SourceEntryNo: Serenity.DecimalEditor;
        SourcePartNo: Serenity.DecimalEditor;
        Particulars: Serenity.StringEditor;
        RevisedCost: Serenity.DecimalEditor;
        CostDiff: Serenity.DecimalEditor;
        FlowType: Serenity.StringEditor;
        LocFrom: Serenity.StringEditor;
        LocTo: Serenity.StringEditor;
        TempStubNo: Serenity.StringEditor;
        TempLoc: Serenity.StringEditor;
        TempReserved: Serenity.DecimalEditor;
        TempDateNeeded: Serenity.DateEditor;
        TempRemarks: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
        AllocatedQty: Serenity.DecimalEditor;
        AllocatedCost: Serenity.DecimalEditor;
        QtyPick: Serenity.DecimalEditor;
        Weight: Serenity.DecimalEditor;
        TotalWeight: Serenity.DecimalEditor;
        QtyFollowList: Serenity.DecimalEditor;
        QuotationScrapQty: Serenity.DecimalEditor;
        QuotationScrapRate: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Inventory {
    interface InventoryMovementDetailRow {
        Recnum?: number;
        RefNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        LineRef?: string;
        Qty?: number;
        UnitCost?: number;
        TotalCost?: number;
        QtyPerRec?: number;
        QtyPerCount?: number;
        BinQtyIn?: number;
        BinQtyOut?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        BaseQty?: number;
        BaseUnitCost?: number;
        QtyCommitted?: number;
        QtyRequired?: number;
        QtyIssued?: number;
        QtyBalance?: number;
        QtyPer?: number;
        Final?: string;
        DebitAcct?: string;
        CreditAcct?: string;
        AllocMethod?: string;
        SourceType?: string;
        SourceRefNo?: string;
        SourceEntryNo?: number;
        SourcePartNo?: number;
        Particulars?: string;
        RevisedCost?: number;
        CostDiff?: number;
        FlowType?: string;
        LocFrom?: string;
        LocTo?: string;
        TempStubNo?: string;
        TempLoc?: string;
        TempReserved?: number;
        TempDateNeeded?: string;
        TempRemarks?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        AllocatedQty?: number;
        AllocatedCost?: number;
        QtyPick?: number;
        Weight?: number;
        TotalWeight?: number;
        QtyFollowList?: number;
        QuotationScrapQty?: number;
        QuotationScrapRate?: number;
        RefNoRecnum?: number;
        RefNoTranType?: string;
        RefNoMoveDate?: string;
        RefNoValueDate?: string;
        RefNoPosted?: string;
        RefNoPostedStep1?: string;
        RefNoFlowType?: string;
        RefNoMoveType?: string;
        RefNoLocFrom?: string;
        RefNoLocTo?: string;
        RefNoReference?: string;
        RefNoReceivedFrom?: string;
        RefNoIssuedTo?: string;
        RefNoDept?: string;
        RefNoTotalCost?: number;
        RefNoLastLineNo?: number;
        RefNoCreatedBy?: string;
        RefNoCreatedDate?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoPostedDate?: string;
        RefNoPostedBy?: string;
        RefNoLogNo?: number;
        RefNoSourceType?: string;
        RefNoSourceRef?: string;
        RefNoAnlys1?: string;
        RefNoAnlys2?: string;
        RefNoPeriod?: string;
        RefNoFiscalYear?: number;
        RefNoPeriodNo?: number;
        RefNoJobNo?: string;
        RefNoBatchNo?: string;
        RefNoStartDate?: string;
        RefNoBranchNo?: string;
        RefNoFinal?: string;
        RefNoLotsPending?: number;
        RefNoLotsIssued?: number;
        RefNoQtyIssued?: number;
        RefNoStdOutput?: number;
        RefNoBatchSelect?: string;
        RefNoGlLink?: string;
        RefNoGlLinkType?: string;
        RefNoGlLinkNo?: string;
        RefNoOwnerBranch?: string;
        RefNoSourceBranch?: string;
        RefNoParticulars?: string;
        RefNoRevisedCost?: number;
        RefNoCostDiff?: number;
        RefNoDiffAcct?: string;
        RefNoItemNo?: string;
        RefNoBomNo?: string;
        RefNoUom?: string;
        RefNoQty?: number;
        RefNoFollowList?: string;
        RefNoAnlys7?: string;
        RefNoAnlys8?: string;
        RefNoFlag?: string;
        RefNoHoldBy?: string;
        RefNoFrozen?: string;
        RefNoExcludeScrap?: string;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
        RefNoLotsReturned?: number;
        RefNoStepNo?: number;
        RefNoConsIssue?: boolean;
        RefNoConsIssueRefNo?: string;
        RefNoConsIssueLineNo?: number;
    }
    namespace InventoryMovementDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Inventory.InventoryMovementDetail";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const LineRef: string;
            const Qty: string;
            const UnitCost: string;
            const TotalCost: string;
            const QtyPerRec: string;
            const QtyPerCount: string;
            const BinQtyIn: string;
            const BinQtyOut: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const BaseQty: string;
            const BaseUnitCost: string;
            const QtyCommitted: string;
            const QtyRequired: string;
            const QtyIssued: string;
            const QtyBalance: string;
            const QtyPer: string;
            const Final: string;
            const DebitAcct: string;
            const CreditAcct: string;
            const AllocMethod: string;
            const SourceType: string;
            const SourceRefNo: string;
            const SourceEntryNo: string;
            const SourcePartNo: string;
            const Particulars: string;
            const RevisedCost: string;
            const CostDiff: string;
            const FlowType: string;
            const LocFrom: string;
            const LocTo: string;
            const TempStubNo: string;
            const TempLoc: string;
            const TempReserved: string;
            const TempDateNeeded: string;
            const TempRemarks: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const AllocatedQty: string;
            const AllocatedCost: string;
            const QtyPick: string;
            const Weight: string;
            const TotalWeight: string;
            const QtyFollowList: string;
            const QuotationScrapQty: string;
            const QuotationScrapRate: string;
            const RefNoRecnum: string;
            const RefNoTranType: string;
            const RefNoMoveDate: string;
            const RefNoValueDate: string;
            const RefNoPosted: string;
            const RefNoPostedStep1: string;
            const RefNoFlowType: string;
            const RefNoMoveType: string;
            const RefNoLocFrom: string;
            const RefNoLocTo: string;
            const RefNoReference: string;
            const RefNoReceivedFrom: string;
            const RefNoIssuedTo: string;
            const RefNoDept: string;
            const RefNoTotalCost: string;
            const RefNoLastLineNo: string;
            const RefNoCreatedBy: string;
            const RefNoCreatedDate: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoPostedDate: string;
            const RefNoPostedBy: string;
            const RefNoLogNo: string;
            const RefNoSourceType: string;
            const RefNoSourceRef: string;
            const RefNoAnlys1: string;
            const RefNoAnlys2: string;
            const RefNoPeriod: string;
            const RefNoFiscalYear: string;
            const RefNoPeriodNo: string;
            const RefNoJobNo: string;
            const RefNoBatchNo: string;
            const RefNoStartDate: string;
            const RefNoBranchNo: string;
            const RefNoFinal: string;
            const RefNoLotsPending: string;
            const RefNoLotsIssued: string;
            const RefNoQtyIssued: string;
            const RefNoStdOutput: string;
            const RefNoBatchSelect: string;
            const RefNoGlLink: string;
            const RefNoGlLinkType: string;
            const RefNoGlLinkNo: string;
            const RefNoOwnerBranch: string;
            const RefNoSourceBranch: string;
            const RefNoParticulars: string;
            const RefNoRevisedCost: string;
            const RefNoCostDiff: string;
            const RefNoDiffAcct: string;
            const RefNoItemNo: string;
            const RefNoBomNo: string;
            const RefNoUom: string;
            const RefNoQty: string;
            const RefNoFollowList: string;
            const RefNoAnlys7: string;
            const RefNoAnlys8: string;
            const RefNoFlag: string;
            const RefNoHoldBy: string;
            const RefNoFrozen: string;
            const RefNoExcludeScrap: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
            const RefNoLotsReturned: string;
            const RefNoStepNo: string;
            const RefNoConsIssue: string;
            const RefNoConsIssueRefNo: string;
            const RefNoConsIssueLineNo: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace InventoryMovementDetailService {
        const baseUrl = "Inventory/InventoryMovementDetail";
        function Create(request: Serenity.SaveRequest<InventoryMovementDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<InventoryMovementDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<InventoryMovementDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<InventoryMovementDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementIssueForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface InventoryMovementIssueForm {
        RefNo: Serenity.StringEditor;
        MoveType: Serenity.StringEditor;
        MoveDate: Serenity.DateEditor;
        LocFrom: Serenity.StringEditor;
        Reference: Serenity.StringEditor;
        SourceType: Serenity.StringEditor;
        SourceRef: Serenity.StringEditor;
        DetailList: InventoryMovementDetailEditor;
    }
}
declare namespace Matrix.Inventory {
    interface InventoryMovementListRequest extends Serenity.ListRequest {
        FlowType?: string;
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementReceiptForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface InventoryMovementReceiptForm {
        RefNo: Serenity.StringEditor;
        MoveType: Serenity.StringEditor;
        MoveDate: Serenity.DateEditor;
        LocTo: Serenity.StringEditor;
        Reference: Serenity.StringEditor;
        SourceType: Serenity.StringEditor;
        SourceRef: Serenity.StringEditor;
        DetailList: InventoryMovementDetailEditor;
    }
}
declare namespace Matrix.Inventory {
    interface InventoryMovementRow {
        Recnum?: number;
        RefNo?: string;
        TranType?: string;
        MoveDate?: string;
        ValueDate?: string;
        Posted?: string;
        PostedStep1?: string;
        FlowType?: string;
        MoveType?: string;
        LocFrom?: string;
        LocTo?: string;
        Reference?: string;
        ReceivedFrom?: string;
        IssuedTo?: string;
        Dept?: string;
        TotalCost?: number;
        LastLineNo?: number;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LogNo?: number;
        SourceType?: string;
        SourceRef?: string;
        Anlys1?: string;
        Anlys2?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        JobNo?: string;
        BatchNo?: string;
        StartDate?: string;
        BranchNo?: string;
        Final?: string;
        LotsPending?: number;
        LotsIssued?: number;
        QtyIssued?: number;
        StdOutput?: number;
        BatchSelect?: string;
        GlLink?: string;
        GlLinkType?: string;
        GlLinkNo?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Particulars?: string;
        RevisedCost?: number;
        CostDiff?: number;
        DiffAcct?: string;
        ItemNo?: string;
        BomNo?: string;
        Uom?: string;
        Qty?: number;
        FollowList?: string;
        Anlys7?: string;
        Anlys8?: string;
        Flag?: string;
        HoldBy?: string;
        Frozen?: string;
        ExcludeScrap?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        LotsReturned?: number;
        StepNo?: number;
        ConsIssue?: boolean;
        ConsIssueRefNo?: string;
        ConsIssueLineNo?: number;
        DetailList?: InventoryMovementDetailRow[];
    }
    namespace InventoryMovementRow {
        const idProperty = "RefNo";
        const nameProperty = "RefNo";
        const localTextPrefix = "Inventory.InventoryMovement";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const TranType: string;
            const MoveDate: string;
            const ValueDate: string;
            const Posted: string;
            const PostedStep1: string;
            const FlowType: string;
            const MoveType: string;
            const LocFrom: string;
            const LocTo: string;
            const Reference: string;
            const ReceivedFrom: string;
            const IssuedTo: string;
            const Dept: string;
            const TotalCost: string;
            const LastLineNo: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LogNo: string;
            const SourceType: string;
            const SourceRef: string;
            const Anlys1: string;
            const Anlys2: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const JobNo: string;
            const BatchNo: string;
            const StartDate: string;
            const BranchNo: string;
            const Final: string;
            const LotsPending: string;
            const LotsIssued: string;
            const QtyIssued: string;
            const StdOutput: string;
            const BatchSelect: string;
            const GlLink: string;
            const GlLinkType: string;
            const GlLinkNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Particulars: string;
            const RevisedCost: string;
            const CostDiff: string;
            const DiffAcct: string;
            const ItemNo: string;
            const BomNo: string;
            const Uom: string;
            const Qty: string;
            const FollowList: string;
            const Anlys7: string;
            const Anlys8: string;
            const Flag: string;
            const HoldBy: string;
            const Frozen: string;
            const ExcludeScrap: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const LotsReturned: string;
            const StepNo: string;
            const ConsIssue: string;
            const ConsIssueRefNo: string;
            const ConsIssueLineNo: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace InventoryMovementService {
        const baseUrl = "Inventory/InventoryMovement";
        function Create(request: Serenity.SaveRequest<InventoryMovementRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<InventoryMovementRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<InventoryMovementRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: InventoryMovementListRequest, onSuccess?: (response: Serenity.ListResponse<InventoryMovementRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementTransferForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface InventoryMovementTransferForm {
        RefNo: Serenity.StringEditor;
        MoveType: Serenity.StringEditor;
        MoveDate: Serenity.DateEditor;
        LocFrom: Serenity.StringEditor;
        LocTo: Serenity.StringEditor;
        Reference: Serenity.StringEditor;
        SourceType: Serenity.StringEditor;
        SourceRef: Serenity.StringEditor;
        DetailList: InventoryMovementDetailEditor;
    }
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
    class ItemLotForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ItemLotForm {
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Loc: Serenity.StringEditor;
        BinNo: Serenity.StringEditor;
        LotNo: Serenity.StringEditor;
        Closed: Serenity.StringEditor;
        LocSummary: Serenity.StringEditor;
        QtyShipped: Serenity.DecimalEditor;
        QtyReceived: Serenity.DecimalEditor;
        QtyIssued: Serenity.DecimalEditor;
        QtyFinished: Serenity.DecimalEditor;
        QtyBalance: Serenity.DecimalEditor;
        ExpiryDate: Serenity.DateEditor;
        Uom: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
        UnitCost: Serenity.DecimalEditor;
        UserDefinedField01: Serenity.StringEditor;
        UserDefinedField02: Serenity.StringEditor;
        UserDefinedField03: Serenity.StringEditor;
        UserDefinedField04: Serenity.StringEditor;
        UserDefinedField05: Serenity.StringEditor;
        FifoLogNo: Serenity.DecimalEditor;
        FifoLineNo: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Inventory {
    interface ItemLotRow {
        Recnum?: number;
        ItemNo?: string;
        Description?: string;
        Loc?: string;
        BinNo?: string;
        LotNo?: string;
        Closed?: string;
        LocSummary?: string;
        QtyShipped?: number;
        QtyReceived?: number;
        QtyIssued?: number;
        QtyFinished?: number;
        QtyBalance?: number;
        ExpiryDate?: string;
        Uom?: string;
        Remarks?: string;
        UnitCost?: number;
        UserDefinedField01?: string;
        UserDefinedField02?: string;
        UserDefinedField03?: string;
        UserDefinedField04?: string;
        UserDefinedField05?: string;
        FifoLogNo?: number;
        FifoLineNo?: number;
    }
    namespace ItemLotRow {
        const idProperty = "Recnum";
        const nameProperty = "ItemNo";
        const localTextPrefix = "Inventory.ItemLot";
        const lookupKey = "Inventory.ItemLotItemLookup";
        function getLookup(): Q.Lookup<ItemLotRow>;
        namespace Fields {
            const Recnum: string;
            const ItemNo: string;
            const Description: string;
            const Loc: string;
            const BinNo: string;
            const LotNo: string;
            const Closed: string;
            const LocSummary: string;
            const QtyShipped: string;
            const QtyReceived: string;
            const QtyIssued: string;
            const QtyFinished: string;
            const QtyBalance: string;
            const ExpiryDate: string;
            const Uom: string;
            const Remarks: string;
            const UnitCost: string;
            const UserDefinedField01: string;
            const UserDefinedField02: string;
            const UserDefinedField03: string;
            const UserDefinedField04: string;
            const UserDefinedField05: string;
            const FifoLogNo: string;
            const FifoLineNo: string;
        }
    }
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
    class ItemLotSerialForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ItemLotSerialForm {
        ItemNo: Serenity.StringEditor;
        SerialNo: Serenity.StringEditor;
        Loc: Serenity.StringEditor;
        BinNo: Serenity.StringEditor;
        LotNo: Serenity.StringEditor;
        Closed: Serenity.StringEditor;
        ExpiryDate: Serenity.DateEditor;
        SourceType: Serenity.StringEditor;
        SourceRef: Serenity.StringEditor;
        SourceEntryNo: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Inventory {
    interface ItemLotSerialRow {
        Recnum?: number;
        ItemNo?: string;
        SerialNo?: string;
        Loc?: string;
        BinNo?: string;
        LotNo?: string;
        Closed?: string;
        ExpiryDate?: string;
        SourceType?: string;
        SourceRef?: string;
        SourceEntryNo?: number;
    }
    namespace ItemLotSerialRow {
        const idProperty = "Recnum";
        const nameProperty = "ItemNo";
        const localTextPrefix = "Inventory.ItemLotSerial";
        const lookupKey = "Inventory.ItemLotSerialItemLookup";
        function getLookup(): Q.Lookup<ItemLotSerialRow>;
        namespace Fields {
            const Recnum: string;
            const ItemNo: string;
            const SerialNo: string;
            const Loc: string;
            const BinNo: string;
            const LotNo: string;
            const Closed: string;
            const ExpiryDate: string;
            const SourceType: string;
            const SourceRef: string;
            const SourceEntryNo: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace ItemLotSerialService {
        const baseUrl = "Inventory/ItemLotSerial";
        function Create(request: Serenity.SaveRequest<ItemLotSerialRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ItemLotSerialRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ItemLotSerialRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Inventory.Repositories.ItemLotSerialListRequest, onSuccess?: (response: Serenity.ListResponse<ItemLotSerialRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace ItemLotService {
        const baseUrl = "Inventory/ItemLot";
        function Create(request: Serenity.SaveRequest<ItemLotRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ItemLotRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ItemLotRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Inventory.Repositories.ItemLotListRequest, onSuccess?: (response: Serenity.ListResponse<ItemLotRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Inventory.Repositories {
    interface ItemLotListRequest extends Serenity.ListRequest {
        ItemNo?: number;
    }
}
declare namespace Matrix.Inventory.Repositories {
    interface ItemLotSerialListRequest extends Serenity.ListRequest {
        ItemNo?: number;
    }
}
declare namespace Matrix.Inventory.Repositories {
    interface StockJournalListRequest extends Serenity.ListRequest {
        Location?: string;
        ItemNo?: string;
    }
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
    class StockJournalForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface StockJournalForm {
        Loc: Serenity.StringEditor;
        ItemNo: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        ValueDate: Serenity.DateEditor;
        LogNo: Serenity.DecimalEditor;
        LineNo: Serenity.DecimalEditor;
        MoveIn: Serenity.StringEditor;
        RefNo: Serenity.StringEditor;
        QtyIn: Serenity.DecimalEditor;
        QtyOut: Serenity.DecimalEditor;
        CostIn: Serenity.DecimalEditor;
        CostOut: Serenity.DecimalEditor;
        MoveDate: Serenity.DateEditor;
        LineRef: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        MoveType: Serenity.StringEditor;
        Reference: Serenity.StringEditor;
        Transfer: Serenity.StringEditor;
        FromTo: Serenity.StringEditor;
        BalQty: Serenity.DecimalEditor;
        BalCost: Serenity.DecimalEditor;
        BalQtyItem: Serenity.DecimalEditor;
        BalCostItem: Serenity.DecimalEditor;
        UnitCost: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Inventory {
    interface StockJournalRow {
        Recnum?: number;
        Loc?: string;
        ItemNo?: string;
        Period?: string;
        ValueDate?: string;
        LogNo?: number;
        LineNo?: number;
        MoveIn?: string;
        RefNo?: string;
        QtyIn?: number;
        QtyOut?: number;
        CostIn?: number;
        CostOut?: number;
        MoveDate?: string;
        LineRef?: string;
        Description?: string;
        MoveType?: string;
        Reference?: string;
        Transfer?: string;
        FromTo?: string;
        BalQty?: number;
        BalCost?: number;
        BalQtyItem?: number;
        BalCostItem?: number;
        UnitCost?: number;
        Quantity?: number;
        Cost?: number;
    }
    namespace StockJournalRow {
        const idProperty = "Recnum";
        const nameProperty = "Loc";
        const localTextPrefix = "Inventory.StockJournal";
        namespace Fields {
            const Recnum: string;
            const Loc: string;
            const ItemNo: string;
            const Period: string;
            const ValueDate: string;
            const LogNo: string;
            const LineNo: string;
            const MoveIn: string;
            const RefNo: string;
            const QtyIn: string;
            const QtyOut: string;
            const CostIn: string;
            const CostOut: string;
            const MoveDate: string;
            const LineRef: string;
            const Description: string;
            const MoveType: string;
            const Reference: string;
            const Transfer: string;
            const FromTo: string;
            const BalQty: string;
            const BalCost: string;
            const BalQtyItem: string;
            const BalCostItem: string;
            const UnitCost: string;
            const Quantity: string;
            const Cost: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace StockJournalService {
        const baseUrl = "Inventory/StockJournal";
        function Create(request: Serenity.SaveRequest<StockJournalRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<StockJournalRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<StockJournalRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Inventory.Repositories.StockJournalListRequest, onSuccess?: (response: Serenity.ListResponse<StockJournalRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Inventory {
}
declare namespace Matrix.Inventory {
    class StockLedgerForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface StockLedgerForm {
        Loc: Serenity.StringEditor;
        ItemNo: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        QtyBeg: Serenity.DecimalEditor;
        QtyIn: Serenity.DecimalEditor;
        QtyOut: Serenity.DecimalEditor;
        QtyEnd: Serenity.DecimalEditor;
        QtyInTrf: Serenity.DecimalEditor;
        QtyOutTrf: Serenity.DecimalEditor;
        CostInTrf: Serenity.DecimalEditor;
        CostOutTrf: Serenity.DecimalEditor;
        ValueBeg: Serenity.DecimalEditor;
        CostIn: Serenity.DecimalEditor;
        CostOut: Serenity.DecimalEditor;
        ValueEnd: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Inventory {
    interface StockLedgerRow {
        Fullname?: string;
        Recnum?: number;
        Loc?: string;
        ItemNo?: string;
        Period?: string;
        Loc2?: string;
        ItemNo2?: string;
        Period2?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        QtyIn?: number;
        QtyOut?: number;
        QtyOutAlloc?: number;
        CostIn?: number;
        CostOut?: number;
        QtyInTrf?: number;
        QtyOutTrf?: number;
        CostInTrf?: number;
        CostOutTrf?: number;
        QtyBeg?: number;
        QtyEnd?: number;
        ValueBeg?: number;
        ValueEnd?: number;
    }
    namespace StockLedgerRow {
        const idProperty = "Recnum";
        const nameProperty = "Fullname";
        const localTextPrefix = "Inventory.StockLedger";
        namespace Fields {
            const Fullname: string;
            const Recnum: string;
            const Loc: string;
            const ItemNo: string;
            const Period: string;
            const Loc2: string;
            const ItemNo2: string;
            const Period2: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const QtyIn: string;
            const QtyOut: string;
            const QtyOutAlloc: string;
            const CostIn: string;
            const CostOut: string;
            const QtyInTrf: string;
            const QtyOutTrf: string;
            const CostInTrf: string;
            const CostOutTrf: string;
            const QtyBeg: string;
            const QtyEnd: string;
            const ValueBeg: string;
            const ValueEnd: string;
        }
    }
}
declare namespace Matrix.Inventory {
    namespace StockLedgerService {
        const baseUrl = "Inventory/StockLedger";
        function Create(request: Serenity.SaveRequest<StockLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<StockLedgerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<StockLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<StockLedgerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AccountBudgetForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountBudgetForm {
        AcctNo: Serenity.StringEditor;
        Period: Serenity.StringEditor;
        FiscalYear: Serenity.DecimalEditor;
        PeriodNo: Serenity.DecimalEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        ControlDebit: Serenity.StringEditor;
        ControlCredit: Serenity.StringEditor;
        BudgetDebit: Serenity.DecimalEditor;
        BudgetCredit: Serenity.DecimalEditor;
        BudgetDate: Serenity.DateEditor;
        BudgetBy: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AccountBudgetRow {
        Recnum?: number;
        AcctNo?: string;
        Period?: string;
        FiscalYear?: number;
        PeriodNo?: number;
        TotalDebit?: number;
        TotalCredit?: number;
        ControlDebit?: string;
        ControlCredit?: string;
        BudgetDebit?: number;
        BudgetCredit?: number;
        BudgetDate?: string;
        BudgetBy?: string;
        AcctNoRecnum?: number;
        AcctNoAcctName?: string;
        AcctNoAltAcctNo?: string;
        AcctNoNormalSign?: string;
        AcctNoTypeBs?: string;
        AcctNoTypePl?: string;
        AcctNoTypeDebtor?: string;
        AcctNoTypeCreditor?: string;
        AcctNoTypeMemo?: string;
        AcctNoDefaultCcy?: string;
        AcctNoAnlys1?: string;
        AcctNoAnlys2?: string;
        AcctNoAnlys3?: string;
        AcctNoAnlys4?: string;
        AcctNoSuspended?: string;
        AcctNoFixedCurrency?: string;
        AcctNoAutoDist?: string;
        AcctNoBudgetControl?: string;
        AcctNoSupprAnlys3?: string;
        AcctNoSupprAnlys4?: string;
        AcctNoSupprAnlys5?: string;
        AcctNoSupprAnlys6?: string;
        AcctNoSupprReval?: string;
        AcctNoNoCostCentre?: string;
        AcctNoNoDept?: string;
        AcctNoOper1?: string;
        AcctNoOper2?: string;
        AcctNoOper3?: string;
        AcctNoOper4?: string;
        AcctNoOper5?: string;
        AcctNoLinesBefPrint?: number;
        AcctNoTranAcct?: string;
        AcctNoSummaryPos?: string;
        AcctNoCreatedDate?: string;
        AcctNoCreatedBy?: string;
        AcctNoRevisedDate?: string;
        AcctNoRevisedBy?: string;
        AcctNoReconLastDate?: string;
        AcctNoReconLastJrn?: number;
        AcctNoReconBal?: number;
        AcctNoReconBalSign?: string;
        AcctNoLastTranDate?: string;
        AcctNoLastJrnNo?: number;
        AcctNoDistTotalPct?: number;
        AcctNoDistLastLine?: number;
        AcctNoReconCount?: number;
        AcctNoBalanceEnd?: number;
        AcctNoBalanceSign?: string;
        AcctNoOwnerBranch?: string;
        AcctNoSourceBranch?: string;
        AcctNoAllowEdit?: string;
        AcctNoAnlys5?: string;
        AcctNoAnlys6?: string;
        AcctNoAnlys7?: string;
        AcctNoAnlys8?: string;
        AcctNoAnlys9?: string;
        AcctNoAnlys10?: string;
    }
    namespace AccountBudgetRow {
        const idProperty = "Recnum";
        const nameProperty = "AcctNo";
        const localTextPrefix = "Finance.AccountBudget";
        namespace Fields {
            const Recnum: string;
            const AcctNo: string;
            const Period: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const ControlDebit: string;
            const ControlCredit: string;
            const BudgetDebit: string;
            const BudgetCredit: string;
            const BudgetDate: string;
            const BudgetBy: string;
            const AcctNoRecnum: string;
            const AcctNoAcctName: string;
            const AcctNoAltAcctNo: string;
            const AcctNoNormalSign: string;
            const AcctNoTypeBs: string;
            const AcctNoTypePl: string;
            const AcctNoTypeDebtor: string;
            const AcctNoTypeCreditor: string;
            const AcctNoTypeMemo: string;
            const AcctNoDefaultCcy: string;
            const AcctNoAnlys1: string;
            const AcctNoAnlys2: string;
            const AcctNoAnlys3: string;
            const AcctNoAnlys4: string;
            const AcctNoSuspended: string;
            const AcctNoFixedCurrency: string;
            const AcctNoAutoDist: string;
            const AcctNoBudgetControl: string;
            const AcctNoSupprAnlys3: string;
            const AcctNoSupprAnlys4: string;
            const AcctNoSupprAnlys5: string;
            const AcctNoSupprAnlys6: string;
            const AcctNoSupprReval: string;
            const AcctNoNoCostCentre: string;
            const AcctNoNoDept: string;
            const AcctNoOper1: string;
            const AcctNoOper2: string;
            const AcctNoOper3: string;
            const AcctNoOper4: string;
            const AcctNoOper5: string;
            const AcctNoLinesBefPrint: string;
            const AcctNoTranAcct: string;
            const AcctNoSummaryPos: string;
            const AcctNoCreatedDate: string;
            const AcctNoCreatedBy: string;
            const AcctNoRevisedDate: string;
            const AcctNoRevisedBy: string;
            const AcctNoReconLastDate: string;
            const AcctNoReconLastJrn: string;
            const AcctNoReconBal: string;
            const AcctNoReconBalSign: string;
            const AcctNoLastTranDate: string;
            const AcctNoLastJrnNo: string;
            const AcctNoDistTotalPct: string;
            const AcctNoDistLastLine: string;
            const AcctNoReconCount: string;
            const AcctNoBalanceEnd: string;
            const AcctNoBalanceSign: string;
            const AcctNoOwnerBranch: string;
            const AcctNoSourceBranch: string;
            const AcctNoAllowEdit: string;
            const AcctNoAnlys5: string;
            const AcctNoAnlys6: string;
            const AcctNoAnlys7: string;
            const AcctNoAnlys8: string;
            const AcctNoAnlys9: string;
            const AcctNoAnlys10: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AccountBudgetService {
        const baseUrl = "Finance/AccountBudget";
        function Create(request: Serenity.SaveRequest<AccountBudgetRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountBudgetRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountBudgetRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountBudgetRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AccountForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AccountForm {
        AcctNo: Serenity.StringEditor;
        AcctName: Serenity.StringEditor;
        DefaultCcy: Serenity.StringEditor;
        TypeBs: Serenity.BooleanEditor;
        TypePl: Serenity.BooleanEditor;
        Suspended: Serenity.BooleanEditor;
        FixedCurrency: Serenity.StringEditor;
        BudgetControl: Serenity.StringEditor;
        SupprReval: Serenity.StringEditor;
        AllowEdit: Serenity.StringEditor;
        DetailList: AccountBudgetDetailEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AccountRow {
        DetailList?: AccountBudgetRow[];
        Recnum?: number;
        AcctNo?: string;
        AcctName?: string;
        AltAcctNo?: string;
        NormalSign?: string;
        TypeBs?: boolean;
        TypePl?: boolean;
        TypeDebtor?: string;
        TypeCreditor?: string;
        TypeMemo?: string;
        DefaultCcy?: string;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Suspended?: boolean;
        FixedCurrency?: string;
        AutoDist?: string;
        BudgetControl?: string;
        SupprAnlys3?: string;
        SupprAnlys4?: string;
        SupprAnlys5?: string;
        SupprAnlys6?: string;
        SupprReval?: string;
        NoCostCentre?: string;
        NoDept?: string;
        Oper1?: string;
        Oper2?: string;
        Oper3?: string;
        Oper4?: string;
        Oper5?: string;
        LinesBefPrint?: number;
        TranAcct?: string;
        SummaryPos?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ReconLastDate?: string;
        ReconLastJrn?: number;
        ReconBal?: number;
        ReconBalSign?: string;
        LastTranDate?: string;
        LastJrnNo?: number;
        DistTotalPct?: number;
        DistLastLine?: number;
        ReconCount?: number;
        BalanceEnd?: number;
        BalanceSign?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        AllowEdit?: string;
        Anlys5?: string;
        Anlys6?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
    }
    namespace AccountRow {
        const idProperty = "AcctNo";
        const nameProperty = "AcctName";
        const localTextPrefix = "MasterData.Account";
        namespace Fields {
            const DetailList: string;
            const Recnum: string;
            const AcctNo: string;
            const AcctName: string;
            const AltAcctNo: string;
            const NormalSign: string;
            const TypeBs: string;
            const TypePl: string;
            const TypeDebtor: string;
            const TypeCreditor: string;
            const TypeMemo: string;
            const DefaultCcy: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Suspended: string;
            const FixedCurrency: string;
            const AutoDist: string;
            const BudgetControl: string;
            const SupprAnlys3: string;
            const SupprAnlys4: string;
            const SupprAnlys5: string;
            const SupprAnlys6: string;
            const SupprReval: string;
            const NoCostCentre: string;
            const NoDept: string;
            const Oper1: string;
            const Oper2: string;
            const Oper3: string;
            const Oper4: string;
            const Oper5: string;
            const LinesBefPrint: string;
            const TranAcct: string;
            const SummaryPos: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ReconLastDate: string;
            const ReconLastJrn: string;
            const ReconBal: string;
            const ReconBalSign: string;
            const LastTranDate: string;
            const LastJrnNo: string;
            const DistTotalPct: string;
            const DistLastLine: string;
            const ReconCount: string;
            const BalanceEnd: string;
            const BalanceSign: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const AllowEdit: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AccountService {
        const baseUrl = "MasterData/Account";
        function Create(request: Serenity.SaveRequest<AccountRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AccountRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AccountRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AccountRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AddressTypeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AddressTypeForm {
        AddressType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AddressTypeRow {
        Recnum?: number;
        AddressType?: string;
        Description?: string;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace AddressTypeRow {
        const idProperty = "AddressType";
        const nameProperty = "Description";
        const localTextPrefix = "MasterData.AddressType";
        namespace Fields {
            const Recnum: string;
            const AddressType: string;
            const Description: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AddressTypeService {
        const baseUrl = "MasterData/AddressType";
        function Create(request: Serenity.SaveRequest<AddressTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AddressTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AddressTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AddressTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AnalysisCategoryForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AnalysisCategoryForm {
        Category: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Caption: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AnalysisCategoryRow {
        Recnum?: number;
        Category?: string;
        Description?: string;
        Caption?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        DetailList?: AnalysisCodeRow[];
    }
    namespace AnalysisCategoryRow {
        const idProperty = "Category";
        const nameProperty = "Category";
        const localTextPrefix = "MasterData.AnalysisCategory";
        namespace Fields {
            const Recnum: string;
            const Category: string;
            const Description: string;
            const Caption: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AnalysisCategoryService {
        const baseUrl = "MasterData/AnalysisCategory";
        function Create(request: Serenity.SaveRequest<AnalysisCategoryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AnalysisCategoryRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AnalysisCategoryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AnalysisCategoryRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AnalysisCodeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AnalysisCodeForm {
        Category: Serenity.StringEditor;
        AnalysisCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AnalysisCodeRow {
        Recnum?: number;
        Category?: string;
        AnalysisCode?: string;
        Description?: string;
        Suspended?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        CategoryRecnum?: number;
        CategoryDescription?: string;
        CategoryCaption?: string;
        CategoryCreatedDate?: string;
        CategoryCreatedBy?: string;
        CategoryRevisedDate?: string;
        CategoryRevisedBy?: string;
        CategoryOwnerBranch?: string;
        CategorySourceBranch?: string;
    }
    namespace AnalysisCodeRow {
        const idProperty = "Recnum";
        const nameProperty = "Category";
        const localTextPrefix = "MasterData.AnalysisCode";
        namespace Fields {
            const Recnum: string;
            const Category: string;
            const AnalysisCode: string;
            const Description: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const CategoryRecnum: string;
            const CategoryDescription: string;
            const CategoryCaption: string;
            const CategoryCreatedDate: string;
            const CategoryCreatedBy: string;
            const CategoryRevisedDate: string;
            const CategoryRevisedBy: string;
            const CategoryOwnerBranch: string;
            const CategorySourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AnalysisCodeService {
        const baseUrl = "MasterData/AnalysisCode";
        function Create(request: Serenity.SaveRequest<AnalysisCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AnalysisCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AnalysisCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AnalysisCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AssemblyLineForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AssemblyLineForm {
        AssemblyLine: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Priority: Serenity.StringEditor;
        EffcRating: Serenity.DecimalEditor;
        Restrict0: Serenity.StringEditor;
        Restrict1: Serenity.StringEditor;
        Restrict2: Serenity.StringEditor;
        Restrict3: Serenity.StringEditor;
        Restrict4: Serenity.StringEditor;
        Restrict5: Serenity.StringEditor;
        Restrict6: Serenity.StringEditor;
        Restrict7: Serenity.StringEditor;
        Restrict8: Serenity.StringEditor;
        Restrict9: Serenity.StringEditor;
        Require0: Serenity.StringEditor;
        Require1: Serenity.StringEditor;
        Require2: Serenity.StringEditor;
        Require3: Serenity.StringEditor;
        Require4: Serenity.StringEditor;
        Require5: Serenity.StringEditor;
        Require6: Serenity.StringEditor;
        Require7: Serenity.StringEditor;
        Require8: Serenity.StringEditor;
        Require9: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AssemblyLineRow {
        DetailList?: AssemblyLineWorkCentreDetailRow[];
        Recnum?: number;
        AssemblyLine?: string;
        Description?: string;
        BranchNo?: string;
        Suspended?: boolean;
        Priority?: string;
        EffcRating?: number;
        Restrict0?: string;
        Restrict1?: string;
        Restrict2?: string;
        Restrict3?: string;
        Restrict4?: string;
        Restrict5?: string;
        Restrict6?: string;
        Restrict7?: string;
        Restrict8?: string;
        Restrict9?: string;
        Require0?: string;
        Require1?: string;
        Require2?: string;
        Require3?: string;
        Require4?: string;
        Require5?: string;
        Require6?: string;
        Require7?: string;
        Require8?: string;
        Require9?: string;
        AcctMachine?: string;
        AcctEnergy?: string;
        AcctWater?: string;
        AcctRental?: string;
        AcctLabor?: string;
        AcctInlab?: string;
        AcctInmat?: string;
        AcctMisc?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        BrevisedDate?: string;
        BrevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace AssemblyLineRow {
        const idProperty = "AssemblyLine";
        const nameProperty = "Description";
        const localTextPrefix = "MasterData.AssemblyLine";
        namespace Fields {
            const DetailList: string;
            const Recnum: string;
            const AssemblyLine: string;
            const Description: string;
            const BranchNo: string;
            const Suspended: string;
            const Priority: string;
            const EffcRating: string;
            const Restrict0: string;
            const Restrict1: string;
            const Restrict2: string;
            const Restrict3: string;
            const Restrict4: string;
            const Restrict5: string;
            const Restrict6: string;
            const Restrict7: string;
            const Restrict8: string;
            const Restrict9: string;
            const Require0: string;
            const Require1: string;
            const Require2: string;
            const Require3: string;
            const Require4: string;
            const Require5: string;
            const Require6: string;
            const Require7: string;
            const Require8: string;
            const Require9: string;
            const AcctMachine: string;
            const AcctEnergy: string;
            const AcctWater: string;
            const AcctRental: string;
            const AcctLabor: string;
            const AcctInlab: string;
            const AcctInmat: string;
            const AcctMisc: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const BrevisedDate: string;
            const BrevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AssemblyLineService {
        const baseUrl = "MasterData/AssemblyLine";
        function Create(request: Serenity.SaveRequest<AssemblyLineRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AssemblyLineRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AssemblyLineRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AssemblyLineRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AssemblyLineWorkCentreDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AssemblyLineWorkCentreDetailForm {
        AssemblyLine: Serenity.StringEditor;
        SeqNo: Serenity.DecimalEditor;
        WorkCentre: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Alternate: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AssemblyLineWorkCentreDetailRow {
        Recnum?: number;
        AssemblyLine?: string;
        SeqNo?: number;
        WorkCentre?: string;
        Description?: string;
        Alternate?: boolean;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        AssemblyLineRecnum?: number;
        AssemblyLineDescription?: string;
        AssemblyLineBranchNo?: string;
        AssemblyLineSuspended?: string;
        AssemblyLinePriority?: string;
        AssemblyLineEffcRating?: number;
        AssemblyLineRestrict0?: string;
        AssemblyLineRestrict1?: string;
        AssemblyLineRestrict2?: string;
        AssemblyLineRestrict3?: string;
        AssemblyLineRestrict4?: string;
        AssemblyLineRestrict5?: string;
        AssemblyLineRestrict6?: string;
        AssemblyLineRestrict7?: string;
        AssemblyLineRestrict8?: string;
        AssemblyLineRestrict9?: string;
        AssemblyLineRequire0?: string;
        AssemblyLineRequire1?: string;
        AssemblyLineRequire2?: string;
        AssemblyLineRequire3?: string;
        AssemblyLineRequire4?: string;
        AssemblyLineRequire5?: string;
        AssemblyLineRequire6?: string;
        AssemblyLineRequire7?: string;
        AssemblyLineRequire8?: string;
        AssemblyLineRequire9?: string;
        AssemblyLineAcctMachine?: string;
        AssemblyLineAcctEnergy?: string;
        AssemblyLineAcctWater?: string;
        AssemblyLineAcctRental?: string;
        AssemblyLineAcctLabor?: string;
        AssemblyLineAcctInlab?: string;
        AssemblyLineAcctInmat?: string;
        AssemblyLineAcctMisc?: string;
        AssemblyLineCreatedDate?: string;
        AssemblyLineCreatedBy?: string;
        AssemblyLineRevisedDate?: string;
        AssemblyLineRevisedBy?: string;
        AssemblyLineBrevisedDate?: string;
        AssemblyLineBrevisedBy?: string;
        AssemblyLineOwnerBranch?: string;
        AssemblyLineSourceBranch?: string;
        WorkCentreRecnum?: number;
        WorkCentreDescription?: string;
        WorkCentreSuspended?: string;
        WorkCentreCritical?: string;
        WorkCentreBranchNo?: string;
        WorkCentreNoOfPersons?: number;
        WorkCentreNoOfShifts?: number;
        WorkCentreFirstSetupHr?: number;
        WorkCentreFirstCleanHr?: number;
        WorkCentreOtherSetupHr?: number;
        WorkCentreOtherCleanHr?: number;
        WorkCentreQueueHr?: number;
        WorkCentreMachineUnit?: string;
        WorkCentreMachineCost?: number;
        WorkCentreEnergyUnit?: string;
        WorkCentreEnergyCost?: number;
        WorkCentreWaterUnit?: string;
        WorkCentreWaterCost?: number;
        WorkCentreRentalUnit?: string;
        WorkCentreRentalCost?: number;
        WorkCentreLaborUnit?: string;
        WorkCentreLaborCost?: number;
        WorkCentreInlabUnit?: string;
        WorkCentreInlabCost?: number;
        WorkCentreInmatUnit?: string;
        WorkCentreInmatCost?: number;
        WorkCentreMiscUnit?: string;
        WorkCentreMiscCost?: number;
        WorkCentreRestrict0?: string;
        WorkCentreRestrict1?: string;
        WorkCentreRestrict2?: string;
        WorkCentreRestrict3?: string;
        WorkCentreRestrict4?: string;
        WorkCentreRestrict5?: string;
        WorkCentreRestrict6?: string;
        WorkCentreRestrict7?: string;
        WorkCentreRestrict8?: string;
        WorkCentreRestrict9?: string;
        WorkCentreRequire0?: string;
        WorkCentreRequire1?: string;
        WorkCentreRequire2?: string;
        WorkCentreRequire3?: string;
        WorkCentreRequire4?: string;
        WorkCentreRequire5?: string;
        WorkCentreRequire6?: string;
        WorkCentreRequire7?: string;
        WorkCentreRequire8?: string;
        WorkCentreRequire9?: string;
        WorkCentreAcctMachine?: string;
        WorkCentreAcctEnergy?: string;
        WorkCentreAcctWater?: string;
        WorkCentreAcctRental?: string;
        WorkCentreAcctLabor?: string;
        WorkCentreAcctInlab?: string;
        WorkCentreAcctInmat?: string;
        WorkCentreAcctMisc?: string;
        WorkCentreCreatedDate?: string;
        WorkCentreCreatedBy?: string;
        WorkCentreRevisedDate?: string;
        WorkCentreRevisedBy?: string;
        WorkCentreBrevisedDate?: string;
        WorkCentreBrevisedBy?: string;
        WorkCentreOwnerBranch?: string;
        WorkCentreSourceBranch?: string;
        WorkCentreOperHrsBasis?: string;
        WorkCentreNoOfMachines?: number;
        WorkCentreCapacityUnit?: string;
    }
    namespace AssemblyLineWorkCentreDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "AssemblyLine";
        const localTextPrefix = "MasterData.AssemblyLineWorkCentreDetail";
        namespace Fields {
            const Recnum: string;
            const AssemblyLine: string;
            const SeqNo: string;
            const WorkCentre: string;
            const Description: string;
            const Alternate: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const AssemblyLineRecnum: string;
            const AssemblyLineDescription: string;
            const AssemblyLineBranchNo: string;
            const AssemblyLineSuspended: string;
            const AssemblyLinePriority: string;
            const AssemblyLineEffcRating: string;
            const AssemblyLineRestrict0: string;
            const AssemblyLineRestrict1: string;
            const AssemblyLineRestrict2: string;
            const AssemblyLineRestrict3: string;
            const AssemblyLineRestrict4: string;
            const AssemblyLineRestrict5: string;
            const AssemblyLineRestrict6: string;
            const AssemblyLineRestrict7: string;
            const AssemblyLineRestrict8: string;
            const AssemblyLineRestrict9: string;
            const AssemblyLineRequire0: string;
            const AssemblyLineRequire1: string;
            const AssemblyLineRequire2: string;
            const AssemblyLineRequire3: string;
            const AssemblyLineRequire4: string;
            const AssemblyLineRequire5: string;
            const AssemblyLineRequire6: string;
            const AssemblyLineRequire7: string;
            const AssemblyLineRequire8: string;
            const AssemblyLineRequire9: string;
            const AssemblyLineAcctMachine: string;
            const AssemblyLineAcctEnergy: string;
            const AssemblyLineAcctWater: string;
            const AssemblyLineAcctRental: string;
            const AssemblyLineAcctLabor: string;
            const AssemblyLineAcctInlab: string;
            const AssemblyLineAcctInmat: string;
            const AssemblyLineAcctMisc: string;
            const AssemblyLineCreatedDate: string;
            const AssemblyLineCreatedBy: string;
            const AssemblyLineRevisedDate: string;
            const AssemblyLineRevisedBy: string;
            const AssemblyLineBrevisedDate: string;
            const AssemblyLineBrevisedBy: string;
            const AssemblyLineOwnerBranch: string;
            const AssemblyLineSourceBranch: string;
            const WorkCentreRecnum: string;
            const WorkCentreDescription: string;
            const WorkCentreSuspended: string;
            const WorkCentreCritical: string;
            const WorkCentreBranchNo: string;
            const WorkCentreNoOfPersons: string;
            const WorkCentreNoOfShifts: string;
            const WorkCentreFirstSetupHr: string;
            const WorkCentreFirstCleanHr: string;
            const WorkCentreOtherSetupHr: string;
            const WorkCentreOtherCleanHr: string;
            const WorkCentreQueueHr: string;
            const WorkCentreMachineUnit: string;
            const WorkCentreMachineCost: string;
            const WorkCentreEnergyUnit: string;
            const WorkCentreEnergyCost: string;
            const WorkCentreWaterUnit: string;
            const WorkCentreWaterCost: string;
            const WorkCentreRentalUnit: string;
            const WorkCentreRentalCost: string;
            const WorkCentreLaborUnit: string;
            const WorkCentreLaborCost: string;
            const WorkCentreInlabUnit: string;
            const WorkCentreInlabCost: string;
            const WorkCentreInmatUnit: string;
            const WorkCentreInmatCost: string;
            const WorkCentreMiscUnit: string;
            const WorkCentreMiscCost: string;
            const WorkCentreRestrict0: string;
            const WorkCentreRestrict1: string;
            const WorkCentreRestrict2: string;
            const WorkCentreRestrict3: string;
            const WorkCentreRestrict4: string;
            const WorkCentreRestrict5: string;
            const WorkCentreRestrict6: string;
            const WorkCentreRestrict7: string;
            const WorkCentreRestrict8: string;
            const WorkCentreRestrict9: string;
            const WorkCentreRequire0: string;
            const WorkCentreRequire1: string;
            const WorkCentreRequire2: string;
            const WorkCentreRequire3: string;
            const WorkCentreRequire4: string;
            const WorkCentreRequire5: string;
            const WorkCentreRequire6: string;
            const WorkCentreRequire7: string;
            const WorkCentreRequire8: string;
            const WorkCentreRequire9: string;
            const WorkCentreAcctMachine: string;
            const WorkCentreAcctEnergy: string;
            const WorkCentreAcctWater: string;
            const WorkCentreAcctRental: string;
            const WorkCentreAcctLabor: string;
            const WorkCentreAcctInlab: string;
            const WorkCentreAcctInmat: string;
            const WorkCentreAcctMisc: string;
            const WorkCentreCreatedDate: string;
            const WorkCentreCreatedBy: string;
            const WorkCentreRevisedDate: string;
            const WorkCentreRevisedBy: string;
            const WorkCentreBrevisedDate: string;
            const WorkCentreBrevisedBy: string;
            const WorkCentreOwnerBranch: string;
            const WorkCentreSourceBranch: string;
            const WorkCentreOperHrsBasis: string;
            const WorkCentreNoOfMachines: string;
            const WorkCentreCapacityUnit: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AssemblyLineWorkCentreDetailService {
        const baseUrl = "MasterData/AssemblyLineWorkCentreDetail";
        function Create(request: Serenity.SaveRequest<AssemblyLineWorkCentreDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AssemblyLineWorkCentreDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AssemblyLineWorkCentreDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AssemblyLineWorkCentreDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class AttachmentFileTypeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface AttachmentFileTypeForm {
        FileType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        ExePath: Serenity.StringEditor;
        CreatedBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        Suspended: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface AttachmentFileTypeRow {
        Recnum?: number;
        FileType?: string;
        Description?: string;
        ExePath?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        Suspended?: boolean;
    }
    namespace AttachmentFileTypeRow {
        const idProperty = "Recnum";
        const nameProperty = "FileType";
        const localTextPrefix = "MasterData.AttachmentFileType";
        namespace Fields {
            const Recnum: string;
            const FileType: string;
            const Description: string;
            const ExePath: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const Suspended: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace AttachmentFileTypeService {
        const baseUrl = "MasterData/AttachmentFileType";
        function Create(request: Serenity.SaveRequest<AttachmentFileTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<AttachmentFileTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<AttachmentFileTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<AttachmentFileTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class BalanceSheetLayoutForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface BalanceSheetLayoutForm {
        LineNo: Serenity.DecimalEditor;
        LineType: Serenity.StringEditor;
        LineSkip: Serenity.DecimalEditor;
        Description: Serenity.StringEditor;
        AcctFrom: Serenity.StringEditor;
        AcctTo: Serenity.StringEditor;
        AcctOperator: Serenity.StringEditor;
        TotalLevel: Serenity.DecimalEditor;
        NormalSign: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface BalanceSheetLayoutRow {
        Recnum?: number;
        LineNo?: number;
        LineType?: string;
        LineSkip?: number;
        Description?: string;
        AcctFrom?: string;
        AcctTo?: string;
        AcctOperator?: string;
        TotalLevel?: number;
        NormalSign?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Report?: string;
        CellLineNo?: number;
        CellValueBegin?: string;
        CellValueEnd?: string;
    }
    namespace BalanceSheetLayoutRow {
        const idProperty = "Recnum";
        const nameProperty = "LineType";
        const localTextPrefix = "MasterData.BalanceSheetLayout";
        namespace Fields {
            const Recnum: string;
            const LineNo: string;
            const LineType: string;
            const LineSkip: string;
            const Description: string;
            const AcctFrom: string;
            const AcctTo: string;
            const AcctOperator: string;
            const TotalLevel: string;
            const NormalSign: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Report: string;
            const CellLineNo: string;
            const CellValueBegin: string;
            const CellValueEnd: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace BalanceSheetLayoutService {
        const baseUrl = "MasterData/BalanceSheetLayout";
        function Create(request: Serenity.SaveRequest<BalanceSheetLayoutRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<BalanceSheetLayoutRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<BalanceSheetLayoutRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<BalanceSheetLayoutRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class BuyerControlForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface BuyerControlForm {
        BuyerCode: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        TypeGroup: Serenity.StringEditor;
        TypeItem: Serenity.StringEditor;
        EntryCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        MaxQty: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface BuyerControlRow {
        Recnum?: number;
        BuyerCode?: string;
        LineNo?: number;
        TypeGroup?: string;
        TypeItem?: string;
        EntryCode?: string;
        Description?: string;
        Suspended?: string;
        MaxQty?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        BuyerCodeRecnum?: number;
        BuyerCodeBuyerName?: string;
        BuyerCodeSuspended?: string;
        BuyerCodeWithBacklog?: string;
        BuyerCodeOnOrderCount?: number;
        BuyerCodeLastLineNo?: number;
        BuyerCodeCreatedDate?: string;
        BuyerCodeCreatedBy?: string;
        BuyerCodeRevisedDate?: string;
        BuyerCodeRevisedBy?: string;
        BuyerCodeOwnerBranch?: string;
        BuyerCodeSourceBranch?: string;
        BuyerCodeSupervisor?: string;
    }
    namespace BuyerControlRow {
        const idProperty = "Recnum";
        const nameProperty = "BuyerCode";
        const localTextPrefix = "MasterData.BuyerControl";
        namespace Fields {
            const Recnum: string;
            const BuyerCode: string;
            const LineNo: string;
            const TypeGroup: string;
            const TypeItem: string;
            const EntryCode: string;
            const Description: string;
            const Suspended: string;
            const MaxQty: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const BuyerCodeRecnum: string;
            const BuyerCodeBuyerName: string;
            const BuyerCodeSuspended: string;
            const BuyerCodeWithBacklog: string;
            const BuyerCodeOnOrderCount: string;
            const BuyerCodeLastLineNo: string;
            const BuyerCodeCreatedDate: string;
            const BuyerCodeCreatedBy: string;
            const BuyerCodeRevisedDate: string;
            const BuyerCodeRevisedBy: string;
            const BuyerCodeOwnerBranch: string;
            const BuyerCodeSourceBranch: string;
            const BuyerCodeSupervisor: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace BuyerControlService {
        const baseUrl = "MasterData/BuyerControl";
        function Create(request: Serenity.SaveRequest<BuyerControlRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<BuyerControlRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<BuyerControlRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<BuyerControlRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class BuyerDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface BuyerDetailForm {
        BuyerCode: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface BuyerDetailRow {
        Recnum?: number;
        BuyerCode?: string;
        VendorNo?: string;
        VendorName?: string;
        BuyerCodeRecnum?: number;
        BuyerCodeBuyerName?: string;
        BuyerCodeSuspended?: string;
        BuyerCodeWithBacklog?: string;
        BuyerCodeOnOrderCount?: number;
        BuyerCodeLastLineNo?: number;
        BuyerCodeCreatedDate?: string;
        BuyerCodeCreatedBy?: string;
        BuyerCodeRevisedDate?: string;
        BuyerCodeRevisedBy?: string;
        BuyerCodeOwnerBranch?: string;
        BuyerCodeSourceBranch?: string;
        BuyerCodeSupervisor?: string;
    }
    namespace BuyerDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "BuyerCode";
        const localTextPrefix = "MasterData.BuyerDetail";
        namespace Fields {
            const Recnum: string;
            const BuyerCode: string;
            const VendorNo: string;
            const VendorName: string;
            const BuyerCodeRecnum: string;
            const BuyerCodeBuyerName: string;
            const BuyerCodeSuspended: string;
            const BuyerCodeWithBacklog: string;
            const BuyerCodeOnOrderCount: string;
            const BuyerCodeLastLineNo: string;
            const BuyerCodeCreatedDate: string;
            const BuyerCodeCreatedBy: string;
            const BuyerCodeRevisedDate: string;
            const BuyerCodeRevisedBy: string;
            const BuyerCodeOwnerBranch: string;
            const BuyerCodeSourceBranch: string;
            const BuyerCodeSupervisor: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace BuyerDetailService {
        const baseUrl = "MasterData/BuyerDetail";
        function Create(request: Serenity.SaveRequest<BuyerDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<BuyerDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<BuyerDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<BuyerDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
    class BuyerForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface BuyerForm {
        BuyerCode: Serenity.StringEditor;
        BuyerName: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Supervisor: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface BuyerRow {
        Recnum?: number;
        BuyerCode?: string;
        BuyerName?: string;
        Suspended?: boolean;
        WithBacklog?: string;
        OnOrderCount?: number;
        LastLineNo?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Supervisor?: string;
    }
    namespace BuyerRow {
        const idProperty = "BuyerCode";
        const nameProperty = "BuyerName";
        const localTextPrefix = "MasterData.Buyer";
        namespace Fields {
            const Recnum: string;
            const BuyerCode: string;
            const BuyerName: string;
            const Suspended: string;
            const WithBacklog: string;
            const OnOrderCount: string;
            const LastLineNo: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Supervisor: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace BuyerService {
        const baseUrl = "MasterData/Buyer";
        function Create(request: Serenity.SaveRequest<BuyerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<BuyerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<BuyerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<BuyerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class CalendarDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CalendarDetailForm {
        TranMonth: Serenity.StringEditor;
        TranDate: Serenity.DateEditor;
        TranDay: Serenity.StringEditor;
        DayNum: Serenity.DecimalEditor;
        IsHoliday: Serenity.StringEditor;
        HalfDayOnly: Serenity.StringEditor;
        FirstShift: Serenity.StringEditor;
        SecondShift: Serenity.StringEditor;
        ThirdShift: Serenity.StringEditor;
        CanReceive: Serenity.StringEditor;
        CanShip: Serenity.StringEditor;
        DayName: Serenity.StringEditor;
        LastEntryNo: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface CalendarDetailRow {
        Recnum?: number;
        TranMonth?: string;
        TranDate?: string;
        TranDay?: string;
        DayNum?: number;
        IsHoliday?: string;
        HalfDayOnly?: string;
        FirstShift?: string;
        SecondShift?: string;
        ThirdShift?: string;
        CanReceive?: string;
        CanShip?: string;
        DayName?: string;
        LastEntryNo?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        TranMonthRecnum?: number;
        TranMonthTranYear?: number;
        TranMonthMonthNo?: number;
        TranMonthCreatedDate?: string;
        TranMonthCreatedBy?: string;
        TranMonthOwnerBranch?: string;
        TranMonthSourceBranch?: string;
    }
    namespace CalendarDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "TranMonth";
        const localTextPrefix = "MasterData.CalendarDetail";
        namespace Fields {
            const Recnum: string;
            const TranMonth: string;
            const TranDate: string;
            const TranDay: string;
            const DayNum: string;
            const IsHoliday: string;
            const HalfDayOnly: string;
            const FirstShift: string;
            const SecondShift: string;
            const ThirdShift: string;
            const CanReceive: string;
            const CanShip: string;
            const DayName: string;
            const LastEntryNo: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const TranMonthRecnum: string;
            const TranMonthTranYear: string;
            const TranMonthMonthNo: string;
            const TranMonthCreatedDate: string;
            const TranMonthCreatedBy: string;
            const TranMonthOwnerBranch: string;
            const TranMonthSourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace CalendarDetailService {
        const baseUrl = "MasterData/CalendarDetail";
        function Create(request: Serenity.SaveRequest<CalendarDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CalendarDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CalendarDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CalendarDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
    class CalendarForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CalendarForm {
        TranMonth: Serenity.StringEditor;
        TranYear: Serenity.DecimalEditor;
        MonthNo: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class CalendarNoteForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CalendarNoteForm {
        TranDate: Serenity.DateEditor;
        EntryNo: Serenity.DecimalEditor;
        EntryBy: Serenity.StringEditor;
        EntryDate: Serenity.DateEditor;
        EntryType: Serenity.StringEditor;
        Subject: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        Notes: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface CalendarNoteRow {
        Recnum?: number;
        TranDate?: string;
        EntryNo?: number;
        EntryBy?: string;
        EntryDate?: string;
        EntryType?: string;
        Subject?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Notes?: string;
    }
    namespace CalendarNoteRow {
        const idProperty = "Recnum";
        const nameProperty = "EntryBy";
        const localTextPrefix = "MasterData.CalendarNote";
        namespace Fields {
            const Recnum: string;
            const TranDate: string;
            const EntryNo: string;
            const EntryBy: string;
            const EntryDate: string;
            const EntryType: string;
            const Subject: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Notes: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace CalendarNoteService {
        const baseUrl = "MasterData/CalendarNote";
        function Create(request: Serenity.SaveRequest<CalendarNoteRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CalendarNoteRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CalendarNoteRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CalendarNoteRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
    interface CalendarRow {
        Recnum?: number;
        TranMonth?: string;
        TranYear?: number;
        MonthNo?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace CalendarRow {
        const idProperty = "Recnum";
        const nameProperty = "TranMonth";
        const localTextPrefix = "MasterData.Calendar";
        namespace Fields {
            const Recnum: string;
            const TranMonth: string;
            const TranYear: string;
            const MonthNo: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace CalendarService {
        const baseUrl = "MasterData/Calendar";
        function Create(request: Serenity.SaveRequest<CalendarRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CalendarRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CalendarRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CalendarRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ChargeTypeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ChargeTypeForm {
        ChargeType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Deduction: Serenity.BooleanEditor;
        UseInSales: Serenity.BooleanEditor;
        UseInPurchase: Serenity.BooleanEditor;
        UseInProduction: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ChargeTypeRow {
        Recnum?: number;
        ChargeType?: string;
        Description?: string;
        Suspended?: boolean;
        Deduction?: boolean;
        UseInSales?: boolean;
        UseInPurchase?: boolean;
        SlsAcctNo?: string;
        PurAcctNo?: string;
        FixedRate?: string;
        FixedBasis?: string;
        FixedPercent?: number;
        FixedAmt?: number;
        Step01?: string;
        Oper01?: string;
        Step02?: string;
        Oper02?: string;
        Step03?: string;
        Oper03?: string;
        Step04?: string;
        Oper04?: string;
        Step05?: string;
        Oper05?: string;
        Step06?: string;
        Oper06?: string;
        Step07?: string;
        Oper07?: string;
        Step08?: string;
        Oper08?: string;
        Step09?: string;
        Oper09?: string;
        Step10?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        UseInProduction?: string;
        ProdAcctNo?: string;
    }
    namespace ChargeTypeRow {
        const idProperty = "ChargeType";
        const nameProperty = "Description";
        const localTextPrefix = "MasterData.ChargeType";
        namespace Fields {
            const Recnum: string;
            const ChargeType: string;
            const Description: string;
            const Suspended: string;
            const Deduction: string;
            const UseInSales: string;
            const UseInPurchase: string;
            const SlsAcctNo: string;
            const PurAcctNo: string;
            const FixedRate: string;
            const FixedBasis: string;
            const FixedPercent: string;
            const FixedAmt: string;
            const Step01: string;
            const Oper01: string;
            const Step02: string;
            const Oper02: string;
            const Step03: string;
            const Oper03: string;
            const Step04: string;
            const Oper04: string;
            const Step05: string;
            const Oper05: string;
            const Step06: string;
            const Oper06: string;
            const Step07: string;
            const Oper07: string;
            const Step08: string;
            const Oper08: string;
            const Step09: string;
            const Oper09: string;
            const Step10: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const UseInProduction: string;
            const ProdAcctNo: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ChargeTypeService {
        const baseUrl = "MasterData/ChargeType";
        function Create(request: Serenity.SaveRequest<ChargeTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ChargeTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ChargeTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ChargeTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class CollectionForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CollectionForm {
        CollectionCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Remarks: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.MasterData {
    interface CollectionRow {
        Recnum?: number;
        CollectionCode?: string;
        Description?: string;
        ChineseDescription?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        Remarks?: string;
    }
    namespace CollectionRow {
        const idProperty = "Recnum";
        const nameProperty = "CollectionCode";
        const localTextPrefix = "MasterData.Collection";
        namespace Fields {
            const Recnum: string;
            const CollectionCode: string;
            const Description: string;
            const ChineseDescription: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const Remarks: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace CollectionService {
        const baseUrl = "MasterData/Collection";
        function Create(request: Serenity.SaveRequest<CollectionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CollectionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CollectionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CollectionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ColorForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ColorForm {
        ColorCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        ChineseDescription: Serenity.StringEditor;
        ColorGroup: Serenity.StringEditor;
        ItemGroup: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ColorRow {
        Recnum?: number;
        ColorCode?: string;
        Description?: string;
        ChineseDescription?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        ColorGroup?: string;
        ItemGroup?: string;
    }
    namespace ColorRow {
        const idProperty = "ColorCode";
        const nameProperty = "Description";
        const localTextPrefix = "MasterData.Color";
        namespace Fields {
            const Recnum: string;
            const ColorCode: string;
            const Description: string;
            const ChineseDescription: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const ColorGroup: string;
            const ItemGroup: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ColorService {
        const baseUrl = "MasterData/Color";
        function Create(request: Serenity.SaveRequest<ColorRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ColorRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ColorRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ColorRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class CommodityForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CommodityForm {
        CustomProdCode: Serenity.StringEditor;
        CustomSerialNo: Serenity.StringEditor;
        CustomProdDesc: Serenity.StringEditor;
        CustomProdNo: Serenity.StringEditor;
        CustomEng: Serenity.StringEditor;
        CustomEngNo: Serenity.StringEditor;
        CustomMeasUom: Serenity.StringEditor;
        CustomCcy: Serenity.StringEditor;
        CustomPrice: Serenity.DecimalEditor;
        CustomExempt: Serenity.StringEditor;
        CustomFee: Serenity.DecimalEditor;
        CustomRemark: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.MasterData {
    interface CommodityRow {
        Recnum?: number;
        CustomProdCode?: string;
        CustomSerialNo?: string;
        CustomProdDesc?: string;
        CustomProdNo?: string;
        CustomEng?: string;
        CustomEngNo?: string;
        CustomMeasUom?: string;
        CustomCcy?: string;
        CustomPrice?: number;
        CustomExempt?: string;
        CustomFee?: number;
        CustomRemark?: string;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
    }
    namespace CommodityRow {
        const idProperty = "Recnum";
        const nameProperty = "CustomProdCode";
        const localTextPrefix = "MasterData.Commodity";
        namespace Fields {
            const Recnum: string;
            const CustomProdCode: string;
            const CustomSerialNo: string;
            const CustomProdDesc: string;
            const CustomProdNo: string;
            const CustomEng: string;
            const CustomEngNo: string;
            const CustomMeasUom: string;
            const CustomCcy: string;
            const CustomPrice: string;
            const CustomExempt: string;
            const CustomFee: string;
            const CustomRemark: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace CommodityService {
        const baseUrl = "MasterData/Commodity";
        function Create(request: Serenity.SaveRequest<CommodityRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CommodityRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CommodityRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CommodityRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ContactTypeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ContactTypeForm {
        ContactType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ContactTypeRow {
        Recnum?: number;
        ContactType?: string;
        Description?: string;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace ContactTypeRow {
        const idProperty = "ContactType";
        const nameProperty = "Description";
        const localTextPrefix = "MasterData.ContactType";
        namespace Fields {
            const Recnum: string;
            const ContactType: string;
            const Description: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ContactTypeService {
        const baseUrl = "MasterData/ContactType";
        function Create(request: Serenity.SaveRequest<ContactTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ContactTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ContactTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ContactTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class CustomerForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CustomerForm {
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        CustomerGroup: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        PostCode: Serenity.StringEditor;
        TelNo: Serenity.StringEditor;
        FaxNo: Serenity.StringEditor;
        Email: Serenity.StringEditor;
        ContactPerson: Serenity.StringEditor;
        ContactTitle: Serenity.StringEditor;
        AltCustName: Serenity.StringEditor;
        AltCustAddr: Serenity.StringEditor;
        AltCustAddr2: Serenity.StringEditor;
        AltCustAddr3: Serenity.StringEditor;
        AltCustAddr4: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        UseAltNames: Serenity.StringEditor;
        UseAltDesc: Serenity.StringEditor;
        WithCrLimit: Serenity.StringEditor;
        Salesman: Serenity.StringEditor;
        PaymentCcy: Serenity.StringEditor;
        PayTerms: Serenity.StringEditor;
        PriceCode: Serenity.StringEditor;
        CreditLimit: Serenity.DecimalEditor;
        ShipmentTerms: Serenity.StringEditor;
        TaxationLv: Serenity.StringEditor;
        SltaxPcent: Serenity.DecimalEditor;
        AcctCustSltax: Serenity.StringEditor;
        AcctArCust: Serenity.StringEditor;
        AcctArDisc: Serenity.StringEditor;
        AcctArAdj: Serenity.StringEditor;
        AcctSlsTrdisc: Serenity.StringEditor;
        AcctTemp: Serenity.StringEditor;
        AcctArDeposit: Serenity.StringEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        BreakDebitNote: Serenity.BooleanEditor;
        ContractorCode: Serenity.StringEditor;
        PayTermsAr: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class CustomerLinkTypeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface CustomerLinkTypeForm {
        LinkType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.MasterData {
    interface CustomerLinkTypeRow {
        Recnum?: number;
        LinkType?: string;
        Description?: string;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace CustomerLinkTypeRow {
        const idProperty = "Recnum";
        const nameProperty = "LinkType";
        const localTextPrefix = "MasterData.CustomerLinkType";
        namespace Fields {
            const Recnum: string;
            const LinkType: string;
            const Description: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace CustomerLinkTypeService {
        const baseUrl = "MasterData/CustomerLinkType";
        function Create(request: Serenity.SaveRequest<CustomerLinkTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CustomerLinkTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CustomerLinkTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CustomerLinkTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
    interface CustomerRow {
        Recnum?: number;
        CustomerNo?: string;
        CustomerName?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        PostCode?: string;
        TelNo?: string;
        FaxNo?: string;
        Email?: string;
        Suspended?: boolean;
        CustomerGroup?: string;
        PaymentCcy?: string;
        PayTerms?: string;
        GtaxCode?: string;
        LtaxCode?: string;
        AcctArCust?: string;
        AcctArDisc?: string;
        AcctArAdj?: string;
        AcctSlsTrdisc?: string;
        PriceCode?: string;
        UseAltNames?: string;
        WithCrLimit?: string;
        CreditLimit?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        ContactPerson?: string;
        ContactTitle?: string;
        TradeDiscount?: number;
        AltCustName?: string;
        AltCustAddr?: string;
        AltCustAddr2?: string;
        AltCustAddr3?: string;
        AltCustAddr4?: string;
        WithBacklog?: string;
        WithBalance?: string;
        OnOrderCount?: number;
        InvoAmtBal?: number;
        OpenAmtBal?: number;
        NetAmtBal?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        TrevisedDate?: string;
        TrevisedBy?: string;
        LastNoteNo?: number;
        Salesman?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        UseAltDesc?: string;
        MaskCode?: string;
        ShortName?: string;
        PendAmtOrd?: number;
        PendAmtInv?: number;
        AcctCustSltax?: string;
        TaxationLv?: string;
        SltaxPcent?: number;
        ShipmentTerms?: string;
        IsApproved?: string;
        ApprovedBy?: string;
        Preapprove?: string;
        ApprovedDate?: string;
        Anlys5?: string;
        Anlys6?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        UserDefinedField1?: string;
        UserDefinedField2?: string;
        UserDefinedField3?: string;
        UserDefinedField4?: string;
        UserDefinedField5?: string;
        UserDefinedField6?: string;
        UserDefinedField7?: string;
        UserDefinedField8?: string;
        UserDefinedField9?: string;
        UserDefinedField10?: string;
        UserDefinedField11?: string;
        UserDefinedField12?: string;
        UserDefinedField13?: string;
        UserDefinedField14?: string;
        UserDefinedField15?: string;
        UserDefinedField16?: string;
        UserDefinedField17?: string;
        UserDefinedField18?: string;
        UserDefinedField19?: string;
        UserDefinedField20?: string;
        AcctTemp?: string;
        BreakDebitNote?: boolean;
        ContractorCode?: string;
        PayTermsAr?: string;
        AcctArDeposit?: string;
        CustomerGroupRecnum?: number;
        CustomerGroupDescription?: string;
        CustomerGroupSuspended?: string;
        CustomerGroupAcctArCust?: string;
        CustomerGroupAcctArDisc?: string;
        CustomerGroupAcctArAdj?: string;
        CustomerGroupAcctSlsTrdisc?: string;
        CustomerGroupGtaxCode?: string;
        CustomerGroupLtaxCode?: string;
        CustomerGroupPaymentCcy?: string;
        CustomerGroupPayTerms?: string;
        CustomerGroupPriceCode?: string;
        CustomerGroupUseAltNames?: string;
        CustomerGroupWithCrLimit?: string;
        CustomerGroupCreditLimit?: number;
        CustomerGroupTradeDiscount?: number;
        CustomerGroupAnlys1?: string;
        CustomerGroupAnlys2?: string;
        CustomerGroupAnlys3?: string;
        CustomerGroupAnlys4?: string;
        CustomerGroupCustomerCount?: number;
        CustomerGroupCreatedDate?: string;
        CustomerGroupCreatedBy?: string;
        CustomerGroupRevisedDate?: string;
        CustomerGroupRevisedBy?: string;
        CustomerGroupArevisedDate?: string;
        CustomerGroupArevisedBy?: string;
        CustomerGroupTrevisedDate?: string;
        CustomerGroupTrevisedBy?: string;
        CustomerGroupOwnerBranch?: string;
        CustomerGroupSourceBranch?: string;
        CustomerGroupAcctCustSltax?: string;
        CustomerGroupSltaxPcent?: number;
        CustomerGroupAnlys5?: string;
        CustomerGroupAnlys6?: string;
        CustomerGroupAnlys7?: string;
        CustomerGroupAnlys8?: string;
        CustomerGroupAnlys9?: string;
        CustomerGroupAnlys10?: string;
        CustomerGroupAcctTemp?: string;
        CustomerGroupClientCompanyName?: string;
        CustomerGroupClientAddress1?: string;
        CustomerGroupClientAddress2?: string;
        CustomerGroupClientAddress3?: string;
        CustomerGroupClientAddress4?: string;
        CustomerGroupClientAddress5?: string;
        CustomerGroupClientTelNo?: string;
        CustomerGroupClientFaxNo?: string;
        CustomerGroupClientEmailAddress?: string;
        CustomerGroupClientContactPerson?: string;
        CustomerGroupClientContactTitle?: string;
        CustomerGroupClientRemarks?: string;
        CustomerGroupAcctArDeposit?: string;
    }
    namespace CustomerRow {
        const idProperty = "Recnum";
        const nameProperty = "CustomerNo";
        const localTextPrefix = "MasterData.Customer";
        namespace Fields {
            const Recnum: string;
            const CustomerNo: string;
            const CustomerName: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const PostCode: string;
            const TelNo: string;
            const FaxNo: string;
            const Email: string;
            const Suspended: string;
            const CustomerGroup: string;
            const PaymentCcy: string;
            const PayTerms: string;
            const GtaxCode: string;
            const LtaxCode: string;
            const AcctArCust: string;
            const AcctArDisc: string;
            const AcctArAdj: string;
            const AcctSlsTrdisc: string;
            const PriceCode: string;
            const UseAltNames: string;
            const WithCrLimit: string;
            const CreditLimit: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const ContactPerson: string;
            const ContactTitle: string;
            const TradeDiscount: string;
            const AltCustName: string;
            const AltCustAddr: string;
            const AltCustAddr2: string;
            const AltCustAddr3: string;
            const AltCustAddr4: string;
            const WithBacklog: string;
            const WithBalance: string;
            const OnOrderCount: string;
            const InvoAmtBal: string;
            const OpenAmtBal: string;
            const NetAmtBal: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const TrevisedDate: string;
            const TrevisedBy: string;
            const LastNoteNo: string;
            const Salesman: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const UseAltDesc: string;
            const MaskCode: string;
            const ShortName: string;
            const PendAmtOrd: string;
            const PendAmtInv: string;
            const AcctCustSltax: string;
            const TaxationLv: string;
            const SltaxPcent: string;
            const ShipmentTerms: string;
            const IsApproved: string;
            const ApprovedBy: string;
            const Preapprove: string;
            const ApprovedDate: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const UserDefinedField1: string;
            const UserDefinedField2: string;
            const UserDefinedField3: string;
            const UserDefinedField4: string;
            const UserDefinedField5: string;
            const UserDefinedField6: string;
            const UserDefinedField7: string;
            const UserDefinedField8: string;
            const UserDefinedField9: string;
            const UserDefinedField10: string;
            const UserDefinedField11: string;
            const UserDefinedField12: string;
            const UserDefinedField13: string;
            const UserDefinedField14: string;
            const UserDefinedField15: string;
            const UserDefinedField16: string;
            const UserDefinedField17: string;
            const UserDefinedField18: string;
            const UserDefinedField19: string;
            const UserDefinedField20: string;
            const AcctTemp: string;
            const BreakDebitNote: string;
            const ContractorCode: string;
            const PayTermsAr: string;
            const AcctArDeposit: string;
            const CustomerGroupRecnum: string;
            const CustomerGroupDescription: string;
            const CustomerGroupSuspended: string;
            const CustomerGroupAcctArCust: string;
            const CustomerGroupAcctArDisc: string;
            const CustomerGroupAcctArAdj: string;
            const CustomerGroupAcctSlsTrdisc: string;
            const CustomerGroupGtaxCode: string;
            const CustomerGroupLtaxCode: string;
            const CustomerGroupPaymentCcy: string;
            const CustomerGroupPayTerms: string;
            const CustomerGroupPriceCode: string;
            const CustomerGroupUseAltNames: string;
            const CustomerGroupWithCrLimit: string;
            const CustomerGroupCreditLimit: string;
            const CustomerGroupTradeDiscount: string;
            const CustomerGroupAnlys1: string;
            const CustomerGroupAnlys2: string;
            const CustomerGroupAnlys3: string;
            const CustomerGroupAnlys4: string;
            const CustomerGroupCustomerCount: string;
            const CustomerGroupCreatedDate: string;
            const CustomerGroupCreatedBy: string;
            const CustomerGroupRevisedDate: string;
            const CustomerGroupRevisedBy: string;
            const CustomerGroupArevisedDate: string;
            const CustomerGroupArevisedBy: string;
            const CustomerGroupTrevisedDate: string;
            const CustomerGroupTrevisedBy: string;
            const CustomerGroupOwnerBranch: string;
            const CustomerGroupSourceBranch: string;
            const CustomerGroupAcctCustSltax: string;
            const CustomerGroupSltaxPcent: string;
            const CustomerGroupAnlys5: string;
            const CustomerGroupAnlys6: string;
            const CustomerGroupAnlys7: string;
            const CustomerGroupAnlys8: string;
            const CustomerGroupAnlys9: string;
            const CustomerGroupAnlys10: string;
            const CustomerGroupAcctTemp: string;
            const CustomerGroupClientCompanyName: string;
            const CustomerGroupClientAddress1: string;
            const CustomerGroupClientAddress2: string;
            const CustomerGroupClientAddress3: string;
            const CustomerGroupClientAddress4: string;
            const CustomerGroupClientAddress5: string;
            const CustomerGroupClientTelNo: string;
            const CustomerGroupClientFaxNo: string;
            const CustomerGroupClientEmailAddress: string;
            const CustomerGroupClientContactPerson: string;
            const CustomerGroupClientContactTitle: string;
            const CustomerGroupClientRemarks: string;
            const CustomerGroupAcctArDeposit: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace CustomerService {
        const baseUrl = "MasterData/Customer";
        function Create(request: Serenity.SaveRequest<CustomerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<CustomerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<CustomerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<CustomerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class EmployeeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface EmployeeForm {
        EmployeeNo: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        ChineseName: Serenity.StringEditor;
        EnglishName: Serenity.StringEditor;
        PinyinName: Serenity.StringEditor;
        Id: Serenity.StringEditor;
        Birthday: Serenity.DateEditor;
        Gender: Serenity.StringEditor;
        Marital: Serenity.StringEditor;
        Nationality: Serenity.StringEditor;
        Province: Serenity.StringEditor;
        City: Serenity.StringEditor;
        Homephone: Serenity.StringEditor;
        Mobile: Serenity.StringEditor;
        Email: Serenity.StringEditor;
        BusinessPhone: Serenity.StringEditor;
        BusinessEmail: Serenity.StringEditor;
        Portrait: Serenity.StringEditor;
        HireType: Serenity.StringEditor;
        HireDate: Serenity.DateEditor;
        HireValid: Serenity.DateEditor;
        HireSociety: Serenity.DateEditor;
        HireSource: Serenity.StringEditor;
        Department: Serenity.StringEditor;
        ShiftNo: Serenity.StringEditor;
        ContractType: Serenity.StringEditor;
        ContractStartDate: Serenity.DateEditor;
        ContractEndDate: Serenity.DateEditor;
        ContractNumber: Serenity.StringEditor;
        ContractLocation: Serenity.StringEditor;
        Disablity: Serenity.StringEditor;
        DisablityDescription: Serenity.StringEditor;
        Height: Serenity.StringEditor;
        Weight: Serenity.StringEditor;
        EyeRight: Serenity.StringEditor;
        EyeLeft: Serenity.StringEditor;
        EyeColor: Serenity.StringEditor;
        ShoeSize: Serenity.StringEditor;
        ClothSize: Serenity.StringEditor;
        BloodType: Serenity.StringEditor;
        QuitDate: Serenity.DateEditor;
        QuitNoticeDate: Serenity.DateEditor;
        QuitLeaveDate: Serenity.DateEditor;
        QuitType: Serenity.StringEditor;
        QuitReason: Serenity.StringEditor;
        BadgeNo: Serenity.StringEditor;
        Formula: Serenity.StringEditor;
        WorkCentre: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface EmployeeRow {
        Recnum?: number;
        EmployeeNo?: string;
        Suspended?: string;
        ChineseName?: string;
        EnglishName?: string;
        PinyinName?: string;
        Id?: string;
        Birthday?: string;
        Gender?: string;
        Marital?: string;
        Nationality?: string;
        Province?: string;
        City?: string;
        Homephone?: string;
        Mobile?: string;
        Email?: string;
        BusinessPhone?: string;
        BusinessEmail?: string;
        Portrait?: number[];
        HireType?: string;
        HireDate?: string;
        HireValid?: string;
        HireSociety?: string;
        HireSource?: string;
        Department?: string;
        ShiftNo?: string;
        ContractType?: string;
        ContractStartDate?: string;
        ContractEndDate?: string;
        ContractNumber?: string;
        ContractLocation?: string;
        Disablity?: string;
        DisablityDescription?: string;
        Height?: string;
        Weight?: string;
        EyeRight?: string;
        EyeLeft?: string;
        EyeColor?: string;
        ShoeSize?: string;
        ClothSize?: string;
        BloodType?: string;
        QuitDate?: string;
        QuitNoticeDate?: string;
        QuitLeaveDate?: string;
        QuitType?: string;
        QuitReason?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        BadgeNo?: string;
        Formula?: string;
        WorkCentre?: string;
        ProdDevt01?: string;
        ProdDevt02?: string;
        ProdDevt03?: string;
        ProdDevt04?: string;
        ProdDevt05?: string;
        ProdDevt06?: string;
        ProdDevt07?: string;
        ProdDevt08?: string;
        ProdDevt09?: string;
        ProdDevt10?: string;
        ProdDevt11?: string;
        ProdDevt12?: string;
        ProdDevt13?: string;
        ProdDevt14?: string;
        ProdDevt15?: string;
        ProdDevt16?: string;
        ProdDevt17?: string;
        ProdDevt18?: string;
        ProdDevt19?: string;
        ProdDevt20?: string;
        UserDefinedField1?: string;
        UserDefinedField2?: string;
        UserDefinedField3?: string;
        UserDefinedField4?: string;
        UserDefinedField5?: string;
        UserDefinedField6?: string;
        UserDefinedField7?: string;
        UserDefinedField8?: string;
        UserDefinedField9?: string;
        UserDefinedField10?: string;
        UserDefinedField11?: string;
        UserDefinedField12?: string;
        UserDefinedField13?: string;
        UserDefinedField14?: string;
        UserDefinedField15?: string;
        UserDefinedField16?: string;
        UserDefinedField17?: string;
        UserDefinedField18?: string;
        UserDefinedField19?: string;
        UserDefinedField20?: string;
    }
    namespace EmployeeRow {
        const idProperty = "Recnum";
        const nameProperty = "EmployeeNo";
        const localTextPrefix = "MasterData.Employee";
        namespace Fields {
            const Recnum: string;
            const EmployeeNo: string;
            const Suspended: string;
            const ChineseName: string;
            const EnglishName: string;
            const PinyinName: string;
            const Id: string;
            const Birthday: string;
            const Gender: string;
            const Marital: string;
            const Nationality: string;
            const Province: string;
            const City: string;
            const Homephone: string;
            const Mobile: string;
            const Email: string;
            const BusinessPhone: string;
            const BusinessEmail: string;
            const Portrait: string;
            const HireType: string;
            const HireDate: string;
            const HireValid: string;
            const HireSociety: string;
            const HireSource: string;
            const Department: string;
            const ShiftNo: string;
            const ContractType: string;
            const ContractStartDate: string;
            const ContractEndDate: string;
            const ContractNumber: string;
            const ContractLocation: string;
            const Disablity: string;
            const DisablityDescription: string;
            const Height: string;
            const Weight: string;
            const EyeRight: string;
            const EyeLeft: string;
            const EyeColor: string;
            const ShoeSize: string;
            const ClothSize: string;
            const BloodType: string;
            const QuitDate: string;
            const QuitNoticeDate: string;
            const QuitLeaveDate: string;
            const QuitType: string;
            const QuitReason: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const BadgeNo: string;
            const Formula: string;
            const WorkCentre: string;
            const ProdDevt01: string;
            const ProdDevt02: string;
            const ProdDevt03: string;
            const ProdDevt04: string;
            const ProdDevt05: string;
            const ProdDevt06: string;
            const ProdDevt07: string;
            const ProdDevt08: string;
            const ProdDevt09: string;
            const ProdDevt10: string;
            const ProdDevt11: string;
            const ProdDevt12: string;
            const ProdDevt13: string;
            const ProdDevt14: string;
            const ProdDevt15: string;
            const ProdDevt16: string;
            const ProdDevt17: string;
            const ProdDevt18: string;
            const ProdDevt19: string;
            const ProdDevt20: string;
            const UserDefinedField1: string;
            const UserDefinedField2: string;
            const UserDefinedField3: string;
            const UserDefinedField4: string;
            const UserDefinedField5: string;
            const UserDefinedField6: string;
            const UserDefinedField7: string;
            const UserDefinedField8: string;
            const UserDefinedField9: string;
            const UserDefinedField10: string;
            const UserDefinedField11: string;
            const UserDefinedField12: string;
            const UserDefinedField13: string;
            const UserDefinedField14: string;
            const UserDefinedField15: string;
            const UserDefinedField16: string;
            const UserDefinedField17: string;
            const UserDefinedField18: string;
            const UserDefinedField19: string;
            const UserDefinedField20: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace EmployeeService {
        const baseUrl = "MasterData/Employee";
        function Create(request: Serenity.SaveRequest<EmployeeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<EmployeeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<EmployeeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<EmployeeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ExchangeRateForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ExchangeRateForm {
        Ccy: Serenity.StringEditor;
        EntryNo: Serenity.DecimalEditor;
        FromDate: Serenity.DateEditor;
        ToDate: Serenity.DateEditor;
        ExchRate: Serenity.DecimalEditor;
        Suspended: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ExchangeRateRow {
        Recnum?: number;
        Ccy?: string;
        EntryNo?: number;
        FromDate?: string;
        ToDate?: string;
        ExchRate?: number;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        CcyRecnum?: number;
        CcyDescription?: string;
        CcySuspended?: string;
        CcyDefaultRate?: number;
        CcyAcctArForex?: string;
        CcyAcctApForex?: string;
        CcyLastEntryNo?: number;
        CcyRateUseCount?: number;
        CcyCreatedDate?: string;
        CcyCreatedBy?: string;
        CcyRevisedDate?: string;
        CcyRevisedBy?: string;
        CcyArevisedDate?: string;
        CcyArevisedBy?: string;
        CcyOwnerBranch?: string;
        CcySourceBranch?: string;
        CcyApInvoBal?: number;
        CcyApOpenBal?: number;
        CcyApNetBal?: number;
        CcyApLinvoBal?: number;
        CcyApLopenBal?: number;
        CcyApLnetBal?: number;
        CcyArInvoBal?: number;
        CcyArOpenBal?: number;
        CcyArNetBal?: number;
        CcyArLinvoBal?: number;
        CcyArLopenBal?: number;
        CcyArLnetBal?: number;
    }
    namespace ExchangeRateRow {
        const idProperty = "Recnum";
        const nameProperty = "Ccy";
        const localTextPrefix = "MasterData.ExchangeRate";
        namespace Fields {
            const Recnum: string;
            const Ccy: string;
            const EntryNo: string;
            const FromDate: string;
            const ToDate: string;
            const ExchRate: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const CcyRecnum: string;
            const CcyDescription: string;
            const CcySuspended: string;
            const CcyDefaultRate: string;
            const CcyAcctArForex: string;
            const CcyAcctApForex: string;
            const CcyLastEntryNo: string;
            const CcyRateUseCount: string;
            const CcyCreatedDate: string;
            const CcyCreatedBy: string;
            const CcyRevisedDate: string;
            const CcyRevisedBy: string;
            const CcyArevisedDate: string;
            const CcyArevisedBy: string;
            const CcyOwnerBranch: string;
            const CcySourceBranch: string;
            const CcyApInvoBal: string;
            const CcyApOpenBal: string;
            const CcyApNetBal: string;
            const CcyApLinvoBal: string;
            const CcyApLopenBal: string;
            const CcyApLnetBal: string;
            const CcyArInvoBal: string;
            const CcyArOpenBal: string;
            const CcyArNetBal: string;
            const CcyArLinvoBal: string;
            const CcyArLopenBal: string;
            const CcyArLnetBal: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ExchangeRateService {
        const baseUrl = "MasterData/ExchangeRate";
        function Create(request: Serenity.SaveRequest<ExchangeRateRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ExchangeRateRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ExchangeRateRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ExchangeRateRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class FiscalPeriodForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface FiscalPeriodForm {
        FiscalYear: Serenity.DecimalEditor;
        PeriodNo: Serenity.DecimalEditor;
        Period: Serenity.StringEditor;
        StartDate: Serenity.DateEditor;
        EndDate: Serenity.DateEditor;
        AllowEntries: Serenity.StringEditor;
        ClosedSl: Serenity.StringEditor;
        ClosedPu: Serenity.StringEditor;
        ClosedPr: Serenity.StringEditor;
        ClosedIc: Serenity.StringEditor;
        ClosedAr: Serenity.StringEditor;
        ClosedAp: Serenity.StringEditor;
        ClosedGl: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        ClosedDate: Serenity.DateEditor;
        ClosedBy: Serenity.StringEditor;
        BalBeg: Serenity.DecimalEditor;
        BalBegSign: Serenity.StringEditor;
        TotalDebit: Serenity.DecimalEditor;
        TotalCredit: Serenity.DecimalEditor;
        BalEnd: Serenity.DecimalEditor;
        BalEndSign: Serenity.StringEditor;
        ArBalBeg: Serenity.DecimalEditor;
        ArInvoAmt: Serenity.DecimalEditor;
        ArMemoAmt: Serenity.DecimalEditor;
        ArAdjAmt: Serenity.DecimalEditor;
        ArPayAmt: Serenity.DecimalEditor;
        ArBalEnd: Serenity.DecimalEditor;
        ApBalBeg: Serenity.DecimalEditor;
        ApInvoAmt: Serenity.DecimalEditor;
        ApMemoAmt: Serenity.DecimalEditor;
        ApAdjAmt: Serenity.DecimalEditor;
        ApPayAmt: Serenity.DecimalEditor;
        ApBalEnd: Serenity.DecimalEditor;
        ActiveGl: Serenity.StringEditor;
        ActiveAp: Serenity.StringEditor;
        ActiveAr: Serenity.StringEditor;
        ActiveIc: Serenity.StringEditor;
        ActivePr: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        ArDiscAmt: Serenity.DecimalEditor;
        ArDiffAmt: Serenity.DecimalEditor;
        ApDiscAmt: Serenity.DecimalEditor;
        ApDiffAmt: Serenity.DecimalEditor;
        ApRfdAmt: Serenity.DecimalEditor;
        ArRfdAmt: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.MasterData {
    interface FiscalPeriodRow {
        Recnum?: number;
        FiscalYear?: number;
        PeriodNo?: number;
        Period?: string;
        StartDate?: string;
        EndDate?: string;
        AllowEntries?: boolean;
        ClosedSl?: boolean;
        ClosedPu?: boolean;
        ClosedPr?: boolean;
        ClosedIc?: boolean;
        ClosedAr?: boolean;
        ClosedAp?: boolean;
        ClosedGl?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ClosedDate?: string;
        ClosedBy?: string;
        BalBeg?: number;
        BalBegSign?: string;
        TotalDebit?: number;
        TotalCredit?: number;
        BalEnd?: number;
        BalEndSign?: string;
        ArBalBeg?: number;
        ArInvoAmt?: number;
        ArMemoAmt?: number;
        ArAdjAmt?: number;
        ArPayAmt?: number;
        ArBalEnd?: number;
        ApBalBeg?: number;
        ApInvoAmt?: number;
        ApMemoAmt?: number;
        ApAdjAmt?: number;
        ApPayAmt?: number;
        ApBalEnd?: number;
        ActiveGl?: string;
        ActiveAp?: string;
        ActiveAr?: string;
        ActiveIc?: string;
        ActivePr?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        ArDiscAmt?: number;
        ArDiffAmt?: number;
        ApDiscAmt?: number;
        ApDiffAmt?: number;
        ApRfdAmt?: number;
        ArRfdAmt?: number;
        FiscalYearRecnum?: number;
        FiscalYearAllowEntries?: string;
        FiscalYearClosed?: string;
        FiscalYearLastPeriod?: number;
        FiscalYearCreatedDate?: string;
        FiscalYearCreatedBy?: string;
        FiscalYearRevisedDate?: string;
        FiscalYearRevisedBy?: string;
        FiscalYearClosedDate?: string;
        FiscalYearClosedBy?: string;
        FiscalYearYtdPlCredit?: number;
        FiscalYearYtdPlDebit?: number;
        FiscalYearYtdPlNet?: number;
        FiscalYearOwnerBranch?: string;
        FiscalYearSourceBranch?: string;
    }
    namespace FiscalPeriodRow {
        const idProperty = "Recnum";
        const nameProperty = "Period";
        const localTextPrefix = "MasterData.FiscalPeriod";
        namespace Fields {
            const Recnum: string;
            const FiscalYear: string;
            const PeriodNo: string;
            const Period: string;
            const StartDate: string;
            const EndDate: string;
            const AllowEntries: string;
            const ClosedSl: string;
            const ClosedPu: string;
            const ClosedPr: string;
            const ClosedIc: string;
            const ClosedAr: string;
            const ClosedAp: string;
            const ClosedGl: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ClosedDate: string;
            const ClosedBy: string;
            const BalBeg: string;
            const BalBegSign: string;
            const TotalDebit: string;
            const TotalCredit: string;
            const BalEnd: string;
            const BalEndSign: string;
            const ArBalBeg: string;
            const ArInvoAmt: string;
            const ArMemoAmt: string;
            const ArAdjAmt: string;
            const ArPayAmt: string;
            const ArBalEnd: string;
            const ApBalBeg: string;
            const ApInvoAmt: string;
            const ApMemoAmt: string;
            const ApAdjAmt: string;
            const ApPayAmt: string;
            const ApBalEnd: string;
            const ActiveGl: string;
            const ActiveAp: string;
            const ActiveAr: string;
            const ActiveIc: string;
            const ActivePr: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const ArDiscAmt: string;
            const ArDiffAmt: string;
            const ApDiscAmt: string;
            const ApDiffAmt: string;
            const ApRfdAmt: string;
            const ArRfdAmt: string;
            const FiscalYearRecnum: string;
            const FiscalYearAllowEntries: string;
            const FiscalYearClosed: string;
            const FiscalYearLastPeriod: string;
            const FiscalYearCreatedDate: string;
            const FiscalYearCreatedBy: string;
            const FiscalYearRevisedDate: string;
            const FiscalYearRevisedBy: string;
            const FiscalYearClosedDate: string;
            const FiscalYearClosedBy: string;
            const FiscalYearYtdPlCredit: string;
            const FiscalYearYtdPlDebit: string;
            const FiscalYearYtdPlNet: string;
            const FiscalYearOwnerBranch: string;
            const FiscalYearSourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace FiscalPeriodService {
        const baseUrl = "MasterData/FiscalPeriod";
        function Create(request: Serenity.SaveRequest<FiscalPeriodRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<FiscalPeriodRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<FiscalPeriodRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: MasterData.Repositories.FiscalPeriodListRequest, onSuccess?: (response: Serenity.ListResponse<FiscalPeriodRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class FiscalYearForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface FiscalYearForm {
        FiscalYear: Serenity.DecimalEditor;
        AllowEntries: Serenity.StringEditor;
        Closed: Serenity.StringEditor;
        LastPeriod: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        ClosedDate: Serenity.DateEditor;
        ClosedBy: Serenity.StringEditor;
        YtdPlCredit: Serenity.DecimalEditor;
        YtdPlDebit: Serenity.DecimalEditor;
        YtdPlNet: Serenity.DecimalEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface FiscalYearRow {
        Recnum?: number;
        FiscalYear?: number;
        AllowEntries?: string;
        Closed?: string;
        LastPeriod?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ClosedDate?: string;
        ClosedBy?: string;
        YtdPlCredit?: number;
        YtdPlDebit?: number;
        YtdPlNet?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        FiscalYearName?: string;
    }
    namespace FiscalYearRow {
        const idProperty = "FiscalYear";
        const nameProperty = "FiscalYearName";
        const localTextPrefix = "MasterData.FiscalYear";
        const lookupKey = "MasterData.FiscalYearRow";
        function getLookup(): Q.Lookup<FiscalYearRow>;
        namespace Fields {
            const Recnum: string;
            const FiscalYear: string;
            const AllowEntries: string;
            const Closed: string;
            const LastPeriod: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ClosedDate: string;
            const ClosedBy: string;
            const YtdPlCredit: string;
            const YtdPlDebit: string;
            const YtdPlNet: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const FiscalYearName: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace FiscalYearService {
        const baseUrl = "MasterData/FiscalYear";
        function Create(request: Serenity.SaveRequest<FiscalYearRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<FiscalYearRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<FiscalYearRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<FiscalYearRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class FundCodeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface FundCodeForm {
        FundCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        DefaultCcy: Serenity.StringEditor;
        AcctCash: Serenity.StringEditor;
        RcptSuspended: Serenity.BooleanEditor;
        PmntSuspended: Serenity.BooleanEditor;
        FixedCurrency: Serenity.BooleanEditor;
        IsBankAcct: Serenity.BooleanEditor;
        IsCurrAcct: Serenity.BooleanEditor;
        BankAcctNo: Serenity.StringEditor;
        NextChequeNo: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.MasterData {
    interface FundCodeRow {
        Recnum?: number;
        FundCode?: string;
        Description?: string;
        RcptSuspended?: boolean;
        PmntSuspended?: boolean;
        DefaultCcy?: string;
        FixedCurrency?: boolean;
        IsBankAcct?: boolean;
        IsCurrAcct?: boolean;
        BankAcctNo?: string;
        NextChequeNo?: number;
        AcctCash?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace FundCodeRow {
        const idProperty = "Recnum";
        const nameProperty = "FundCode";
        const localTextPrefix = "MasterData.FundCode";
        namespace Fields {
            const Recnum: string;
            const FundCode: string;
            const Description: string;
            const RcptSuspended: string;
            const PmntSuspended: string;
            const DefaultCcy: string;
            const FixedCurrency: string;
            const IsBankAcct: string;
            const IsCurrAcct: string;
            const BankAcctNo: string;
            const NextChequeNo: string;
            const AcctCash: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace FundCodeService {
        const baseUrl = "MasterData/FundCode";
        function Create(request: Serenity.SaveRequest<FundCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<FundCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<FundCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<FundCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ItemForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ItemForm {
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        ItemGroup: Serenity.StringEditor;
        StockUom: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Product: Serenity.BooleanEditor;
        Material: Serenity.BooleanEditor;
        MakeBuy: Serenity.BooleanEditor;
        ItemType: Serenity.StringEditor;
        AllocMethod: Serenity.StringEditor;
        MainLoc: Serenity.StringEditor;
        MainBin: Serenity.StringEditor;
        CycleCode: Serenity.StringEditor;
        DefBomNo: Serenity.StringEditor;
        DefSpecNo: Serenity.StringEditor;
        ScrapRate: Serenity.DecimalEditor;
        AverageCost: Serenity.StringEditor;
        LatestCost: Serenity.DecimalEditor;
        StdCost: Serenity.DecimalEditor;
        AltDescription: Serenity.StringEditor;
        AltExtDesc: Serenity.StringEditor;
        PrefVendOnly: Serenity.StringEditor;
        PrefVend1: Serenity.StringEditor;
        PrefVend2: Serenity.StringEditor;
        Charges: Serenity.StringEditor;
        Inspected: Serenity.StringEditor;
        SalesUom: Serenity.StringEditor;
        StdCostOk: Serenity.StringEditor;
        CostCentre: Serenity.StringEditor;
        DefSpecCount: Serenity.DecimalEditor;
        WithBacklog: Serenity.StringEditor;
        WithBalance: Serenity.StringEditor;
        QtyOnHand: Serenity.DecimalEditor;
        QtyOnSorder: Serenity.DecimalEditor;
        QtyOnPorder: Serenity.DecimalEditor;
        QtyOnJorder: Serenity.DecimalEditor;
        QtyOnInspect: Serenity.DecimalEditor;
        QtyWaitlisted: Serenity.DecimalEditor;
        QtyReserved: Serenity.DecimalEditor;
        QtyCommitted: Serenity.DecimalEditor;
        QtyAvailable: Serenity.DecimalEditor;
        QtyUnallocated: Serenity.DecimalEditor;
        InvtCostAvail: Serenity.DecimalEditor;
        InvtCostLdg: Serenity.DecimalEditor;
        PriceCcy: Serenity.StringEditor;
        BasePrice: Serenity.DecimalEditor;
        Pricea: Serenity.DecimalEditor;
        Priceb: Serenity.DecimalEditor;
        Pricec: Serenity.DecimalEditor;
        MinPrice: Serenity.DecimalEditor;
        MaxPrice: Serenity.DecimalEditor;
        LastCountDate: Serenity.DateEditor;
        LastDateIn: Serenity.DateEditor;
        LastDateOut: Serenity.DateEditor;
        SalesLotSize: Serenity.DecimalEditor;
        MinOrderQty: Serenity.DecimalEditor;
        MaxOrderQty: Serenity.DecimalEditor;
        MinOrderDays: Serenity.DecimalEditor;
        InnerPkgType: Serenity.StringEditor;
        InnerQty: Serenity.DecimalEditor;
        OuterPkgType: Serenity.StringEditor;
        OuterQty: Serenity.DecimalEditor;
        ArticleCode: Serenity.StringEditor;
        QuotaCategory: Serenity.StringEditor;
        WeightUom: Serenity.StringEditor;
        GrossWt: Serenity.DecimalEditor;
        NetWt: Serenity.DecimalEditor;
        DimensionUom: Serenity.StringEditor;
        Flength: Serenity.DecimalEditor;
        Width: Serenity.DecimalEditor;
        Height: Serenity.DecimalEditor;
        ComputedVol: Serenity.DecimalEditor;
        DeclaredVol: Serenity.DecimalEditor;
        MpsItem: Serenity.StringEditor;
        OrderPolicy: Serenity.StringEditor;
        MinPlanordQty: Serenity.DecimalEditor;
        MaxPlanordQty: Serenity.DecimalEditor;
        StdPlanordQty: Serenity.DecimalEditor;
        MinPlanordPrd: Serenity.DecimalEditor;
        MaxPlanordPrd: Serenity.DecimalEditor;
        StdPlanordPrd: Serenity.DecimalEditor;
        ReorderPt: Serenity.DecimalEditor;
        ReorderQty: Serenity.DecimalEditor;
        MinMthlyProd: Serenity.DecimalEditor;
        MaxMthlyProd: Serenity.DecimalEditor;
        MinMthlyPur: Serenity.DecimalEditor;
        MaxMthlyPur: Serenity.DecimalEditor;
        FollowMinProd: Serenity.StringEditor;
        FollowMaxProd: Serenity.StringEditor;
        FollowMinPur: Serenity.StringEditor;
        FollowMaxPur: Serenity.StringEditor;
        AllowMixMode: Serenity.StringEditor;
        ProdLeadTime: Serenity.DecimalEditor;
        ProdLeadUnit: Serenity.StringEditor;
        PurLeadTime: Serenity.DecimalEditor;
        PurLeadUnit: Serenity.StringEditor;
        Planner: Serenity.StringEditor;
        MrpParmDate: Serenity.DateEditor;
        MrpParmBy: Serenity.StringEditor;
        PictureFile: Serenity.StringEditor;
        SalesLtaxCode: Serenity.StringEditor;
        PurchLtaxCode: Serenity.StringEditor;
        TrevisedDate: Serenity.DateEditor;
        TrevisedBy: Serenity.StringEditor;
        SpecsCount: Serenity.DecimalEditor;
        LastSnapNo: Serenity.DecimalEditor;
        CommisType: Serenity.StringEditor;
        ProdBranch: Serenity.StringEditor;
        ExtendedDesc: Serenity.StringEditor;
        PurPriceCtrl: Serenity.StringEditor;
        PurMaxDev: Serenity.DecimalEditor;
        WebItem: Serenity.StringEditor;
        AcctItmSubcon: Serenity.StringEditor;
        WithBinCtrl: Serenity.StringEditor;
        Consign: Serenity.StringEditor;
        LastPackLineNo: Serenity.DecimalEditor;
        PutaxPcent: Serenity.DecimalEditor;
        AcctItmSltax: Serenity.StringEditor;
        SltaxPcent: Serenity.DecimalEditor;
        PurUom: Serenity.StringEditor;
        PurLotSize: Serenity.DecimalEditor;
        PurCcy: Serenity.StringEditor;
        PurBasePrice: Serenity.DecimalEditor;
        QtyNetAvailable: Serenity.DecimalEditor;
        UseStdProdLeadTime: Serenity.StringEditor;
        DailyProdQty: Serenity.DecimalEditor;
        IssueLotSize: Serenity.DecimalEditor;
        MrpExclude: Serenity.StringEditor;
        EnableLot: Serenity.StringEditor;
        EnableSerial: Serenity.StringEditor;
        LotNoLength: Serenity.DecimalEditor;
        SerialNoLength: Serenity.DecimalEditor;
        NextLotNo: Serenity.DecimalEditor;
        NextSerialNo: Serenity.DecimalEditor;
        MaxLotSize: Serenity.DecimalEditor;
        LotNoPrefix: Serenity.StringEditor;
        SerialNoPrefix: Serenity.StringEditor;
        SafeStockLvl: Serenity.DecimalEditor;
        CustomProdCode: Serenity.StringEditor;
        CustomLotSize: Serenity.DecimalEditor;
        CustomGrUom: Serenity.StringEditor;
        CustomGrWt: Serenity.DecimalEditor;
        CustomNtWt: Serenity.DecimalEditor;
        CustomOrigin: Serenity.StringEditor;
        QtyOnTransfer: Serenity.DecimalEditor;
        WithResetLot: Serenity.StringEditor;
        WithResetSerial: Serenity.StringEditor;
        PrevResetLotDate: Serenity.DateEditor;
        PrevResetSerialDate: Serenity.DateEditor;
        AutogenLot: Serenity.StringEditor;
        AutogenSerial: Serenity.StringEditor;
        FabItem: Serenity.StringEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        RohsCompliance: Serenity.BooleanEditor;
        DefMoldBomNo: Serenity.StringEditor;
        DefFormulaCode: Serenity.StringEditor;
        BoxType: Serenity.StringEditor;
        BoxLength: Serenity.DecimalEditor;
        BoxWidth: Serenity.DecimalEditor;
        BoxHeight: Serenity.DecimalEditor;
        BoxDUom: Serenity.StringEditor;
        Wd: Serenity.DecimalEditor;
        WdUom: Serenity.StringEditor;
        CsLength: Serenity.DecimalEditor;
        CsWidth: Serenity.DecimalEditor;
        UserDefinedField21: Serenity.StringEditor;
        CostWmove: Serenity.DecimalEditor;
        CostWcase: Serenity.DecimalEditor;
        CostWband: Serenity.DecimalEditor;
        CostBatt: Serenity.DecimalEditor;
        DescWmove: Serenity.StringEditor;
        DescWcase: Serenity.StringEditor;
        DescWband: Serenity.StringEditor;
        DescBatt: Serenity.StringEditor;
        PoBal: Serenity.DecimalEditor;
        PoMaxBal: Serenity.DecimalEditor;
        IncludeJob: Serenity.BooleanEditor;
        CsThickness: Serenity.DecimalEditor;
        CsThicknessUom: Serenity.StringEditor;
        CsProportion: Serenity.DecimalEditor;
        CsProportionUom: Serenity.StringEditor;
        DieCutter: Serenity.DecimalEditor;
        MatInspectLeadTime: Serenity.DecimalEditor;
        MatPrepareLeadTime: Serenity.DecimalEditor;
        MatInspectLeadUnit: Serenity.StringEditor;
        MatPrepareLeadUnit: Serenity.StringEditor;
        ColorCode: Serenity.StringEditor;
        CollectionCode: Serenity.StringEditor;
        StyleCode: Serenity.StringEditor;
        X: Serenity.DecimalEditor;
        Y: Serenity.DecimalEditor;
        TempDescription: Serenity.StringEditor;
        Specification: Serenity.StringEditor;
        XUom: Serenity.StringEditor;
        YUom: Serenity.StringEditor;
        ProductionUomConversionRate: Serenity.DecimalEditor;
        PurchaseUomConversionRate: Serenity.DecimalEditor;
        AutogenLotIssue: Serenity.BooleanEditor;
        AutogenSerialIssue: Serenity.BooleanEditor;
        WcCostCcy: Serenity.StringEditor;
        WcCost: Serenity.DecimalEditor;
        WcCostDisc: Serenity.DecimalEditor;
        WcCostExch: Serenity.DecimalEditor;
        WcFreight: Serenity.DecimalEditor;
        WcMargin: Serenity.DecimalEditor;
        CeilingPrice: Serenity.DecimalEditor;
        BottomRatio: Serenity.DecimalEditor;
        BottomPrice: Serenity.DecimalEditor;
        DrawingNo: Serenity.StringEditor;
        MaterialType: Serenity.StringEditor;
        AcctItmAsset: Serenity.StringEditor;
        AcctItmWip: Serenity.StringEditor;
        AcctItmConsum: Serenity.StringEditor;
        AcctItmScrap: Serenity.StringEditor;
        AcctItmPvar: Serenity.StringEditor;
        AcctItmReval: Serenity.StringEditor;
        AcctItmVaria: Serenity.StringEditor;
        AcctItmSales: Serenity.StringEditor;
        AcctItmSlret: Serenity.StringEditor;
        AcctItmSldisc: Serenity.StringEditor;
        AcctItmCogs: Serenity.StringEditor;
        AcctItmPurch: Serenity.StringEditor;
        AcctItmPuret: Serenity.StringEditor;
        AcctItmPudisc: Serenity.StringEditor;
        AcctItmPutax: Serenity.StringEditor;
        AcctMachine: Serenity.StringEditor;
        AcctEnergy: Serenity.StringEditor;
        AcctWater: Serenity.StringEditor;
        AcctRental: Serenity.StringEditor;
        AcctLabor: Serenity.StringEditor;
        AcctInlab: Serenity.StringEditor;
        AcctInmat: Serenity.StringEditor;
        AcctMisc: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ItemRow {
        LookupDescription?: string;
        Recnum?: number;
        ItemNo?: string;
        Description?: string;
        Suspended?: boolean;
        ItemGroup?: string;
        Charges?: string;
        Product?: boolean;
        Material?: boolean;
        Inspected?: string;
        ItemType?: string;
        StockUom?: string;
        MainLoc?: string;
        MakeBuy?: boolean;
        AllocMethod?: string;
        StdCostOk?: string;
        CostCentre?: string;
        CycleCode?: string;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        DefSpecNo?: string;
        DefSpecCount?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        WithBacklog?: string;
        WithBalance?: string;
        QtyOnHand?: number;
        QtyOnSorder?: number;
        QtyOnPorder?: number;
        QtyOnJorder?: number;
        QtyOnInspect?: number;
        QtyWaitlisted?: number;
        QtyReserved?: number;
        QtyCommitted?: number;
        QtyAvailable?: number;
        QtyUnallocated?: number;
        InvtCostAvail?: number;
        InvtCostLdg?: number;
        AverageCost?: string;
        LatestCost?: number;
        StdCost?: number;
        LastCountDate?: string;
        LastDateIn?: string;
        LastDateOut?: string;
        SalesUom?: string;
        SalesLotSize?: number;
        PriceCcy?: string;
        BasePrice?: number;
        Pricea?: number;
        Priceb?: number;
        Pricec?: number;
        MinPrice?: number;
        MaxPrice?: number;
        MinOrderQty?: number;
        MaxOrderQty?: number;
        MinOrderDays?: number;
        InnerPkgType?: string;
        InnerQty?: number;
        OuterPkgType?: string;
        OuterQty?: number;
        ArticleCode?: string;
        QuotaCategory?: string;
        WeightUom?: string;
        GrossWt?: number;
        NetWt?: number;
        DimensionUom?: string;
        Flength?: number;
        Width?: number;
        Height?: number;
        ComputedVol?: number;
        DeclaredVol?: number;
        SrevisedDate?: string;
        SrevisedBy?: string;
        MpsItem?: string;
        OrderPolicy?: string;
        MinPlanordQty?: number;
        MaxPlanordQty?: number;
        StdPlanordQty?: number;
        MinPlanordPrd?: number;
        MaxPlanordPrd?: number;
        StdPlanordPrd?: number;
        ReorderPt?: number;
        ReorderQty?: number;
        MinMthlyProd?: number;
        MaxMthlyProd?: number;
        MinMthlyPur?: number;
        MaxMthlyPur?: number;
        FollowMinProd?: string;
        FollowMaxProd?: string;
        FollowMinPur?: string;
        FollowMaxPur?: string;
        AllowMixMode?: string;
        PrefVendOnly?: string;
        PrefVend1?: string;
        PrefVend2?: string;
        ProdLeadTime?: number;
        ProdLeadUnit?: string;
        PurLeadTime?: number;
        PurLeadUnit?: string;
        Planner?: string;
        MrpParmDate?: string;
        MrpParmBy?: string;
        AltDescription?: string;
        PictureFile?: string;
        AcctItmAsset?: string;
        AcctItmWip?: string;
        AcctItmConsum?: string;
        AcctItmScrap?: string;
        AcctItmPvar?: string;
        AcctItmReval?: string;
        AcctItmVaria?: string;
        AcctItmSales?: string;
        AcctItmSlret?: string;
        AcctItmSldisc?: string;
        AcctItmCogs?: string;
        AcctItmPurch?: string;
        AcctItmPuret?: string;
        AcctItmPudisc?: string;
        AcctItmPutax?: string;
        AcctMachine?: string;
        AcctEnergy?: string;
        AcctWater?: string;
        AcctRental?: string;
        AcctLabor?: string;
        AcctInlab?: string;
        AcctInmat?: string;
        AcctMisc?: string;
        ArevisedDate?: string;
        ArevisedBy?: string;
        BrevisedDate?: string;
        BrevisedBy?: string;
        SalesLtaxCode?: string;
        PurchLtaxCode?: string;
        TrevisedDate?: string;
        TrevisedBy?: string;
        SpecsCount?: number;
        DefBomNo?: string;
        LastSnapNo?: number;
        CommisType?: string;
        ProdBranch?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        ScrapRate?: number;
        AltExtDesc?: string;
        ExtendedDesc?: string;
        PurPriceCtrl?: string;
        PurMaxDev?: number;
        WebItem?: string;
        AcctItmSubcon?: string;
        WithBinCtrl?: string;
        Consign?: string;
        ProdDevt01?: string;
        ProdDevt02?: string;
        ProdDevt03?: string;
        ProdDevt04?: string;
        ProdDevt05?: string;
        ProdDevt06?: string;
        ProdDevt07?: string;
        ProdDevt08?: string;
        ProdDevt09?: string;
        ProdDevt10?: string;
        ProdDevt11?: string;
        ProdDevt12?: string;
        ProdDevt13?: string;
        ProdDevt14?: string;
        ProdDevt15?: string;
        ProdDevt16?: string;
        ProdDevt17?: string;
        ProdDevt18?: string;
        ProdDevt19?: string;
        ProdDevt20?: string;
        ProdCheck01?: string;
        ProdCheck02?: string;
        ProdCheck03?: string;
        ProdCheck04?: string;
        ProdCheck05?: string;
        ProdCheck06?: string;
        ProdCheck07?: string;
        ProdCheck08?: string;
        ProdCheck09?: string;
        ProdCheck10?: string;
        ProdCheck11?: string;
        ProdCheck12?: string;
        ProdCheck13?: string;
        ProdCheck14?: string;
        ProdCheck15?: string;
        ProdCheck16?: string;
        ProdCheck17?: string;
        ProdCheck18?: string;
        ProdCheck19?: string;
        ProdCheck20?: string;
        LastPackLineNo?: number;
        PutaxPcent?: number;
        AcctItmSltax?: string;
        SltaxPcent?: number;
        PurUom?: string;
        PurLotSize?: number;
        PurCcy?: string;
        PurBasePrice?: number;
        QtyNetAvailable?: number;
        UseStdProdLeadTime?: string;
        DailyProdQty?: number;
        IssueLotSize?: number;
        MrpExclude?: string;
        EnableLot?: string;
        EnableSerial?: string;
        LotNoLength?: number;
        SerialNoLength?: number;
        NextLotNo?: number;
        NextSerialNo?: number;
        MaxLotSize?: number;
        LotNoPrefix?: string;
        SerialNoPrefix?: string;
        SafeStockLvl?: number;
        MainBin?: string;
        CustomProdCode?: string;
        CustomLotSize?: number;
        CustomGrUom?: string;
        CustomGrWt?: number;
        CustomNtWt?: number;
        CustomOrigin?: string;
        IsApproved?: string;
        ApprovedBy?: string;
        Preapprove?: string;
        ApprovedDate?: string;
        QtyOnTransfer?: number;
        WithResetLot?: string;
        WithResetSerial?: string;
        PrevResetLotDate?: string;
        PrevResetSerialDate?: string;
        AutogenLot?: string;
        AutogenSerial?: string;
        FabItem?: string;
        Anlys5?: string;
        Anlys6?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        UserDefinedField1?: string;
        UserDefinedField2?: string;
        UserDefinedField3?: string;
        UserDefinedField4?: string;
        UserDefinedField5?: string;
        UserDefinedField6?: string;
        UserDefinedField7?: string;
        UserDefinedField8?: string;
        UserDefinedField9?: string;
        UserDefinedField10?: string;
        UserDefinedField11?: string;
        UserDefinedField12?: string;
        UserDefinedField13?: string;
        UserDefinedField14?: string;
        UserDefinedField15?: string;
        UserDefinedField16?: string;
        UserDefinedField17?: string;
        UserDefinedField18?: string;
        UserDefinedField19?: string;
        UserDefinedField20?: string;
        RohsCompliance?: boolean;
        DefMoldBomNo?: string;
        DefFormulaCode?: string;
        BoxType?: string;
        BoxLength?: number;
        BoxWidth?: number;
        BoxHeight?: number;
        BoxDUom?: string;
        Wd?: number;
        WdUom?: string;
        CsLength?: number;
        CsWidth?: number;
        UserDefinedField21?: string;
        CostWmove?: number;
        CostWcase?: number;
        CostWband?: number;
        CostBatt?: number;
        DescWmove?: string;
        DescWcase?: string;
        DescWband?: string;
        DescBatt?: string;
        PoBal?: number;
        PoMaxBal?: number;
        IncludeJob?: boolean;
        CsThickness?: number;
        CsThicknessUom?: string;
        CsProportion?: number;
        CsProportionUom?: string;
        DieCutter?: number;
        MatInspectLeadTime?: number;
        MatPrepareLeadTime?: number;
        MatInspectLeadUnit?: string;
        MatPrepareLeadUnit?: string;
        ColorCode?: string;
        CollectionCode?: string;
        StyleCode?: string;
        X?: number;
        Y?: number;
        TempDescription?: string;
        Specification?: string;
        XUom?: string;
        YUom?: string;
        ProductionUomConversionRate?: number;
        PurchaseUomConversionRate?: number;
        AutogenLotIssue?: boolean;
        AutogenSerialIssue?: boolean;
        WcCostCcy?: string;
        WcCost?: number;
        WcCostDisc?: number;
        WcCostExch?: number;
        WcFreight?: number;
        WcMargin?: number;
        CeilingPrice?: number;
        BottomRatio?: number;
        BottomPrice?: number;
        DrawingNo?: string;
        MaterialType?: string;
        ItemGroupRecnum?: number;
        ItemGroupDescription?: string;
        ItemGroupSuspended?: string;
        ItemGroupProduct?: string;
        ItemGroupMaterial?: string;
        ItemGroupInspected?: string;
        ItemGroupCostCentre?: string;
        ItemGroupItemType?: string;
        ItemGroupAllocMethod?: string;
        ItemGroupProdBranch?: string;
        ItemGroupAcctItmAsset?: string;
        ItemGroupAcctItmWip?: string;
        ItemGroupAcctItmConsum?: string;
        ItemGroupAcctItmScrap?: string;
        ItemGroupAcctItmPvar?: string;
        ItemGroupAcctItmReval?: string;
        ItemGroupAcctItmVaria?: string;
        ItemGroupAcctItmSales?: string;
        ItemGroupAcctItmSlret?: string;
        ItemGroupAcctItmSldisc?: string;
        ItemGroupAcctItmCogs?: string;
        ItemGroupAcctItmPurch?: string;
        ItemGroupAcctItmPuret?: string;
        ItemGroupAcctItmPudisc?: string;
        ItemGroupAcctItmPutax?: string;
        ItemGroupAcctMachine?: string;
        ItemGroupAcctEnergy?: string;
        ItemGroupAcctWater?: string;
        ItemGroupAcctRental?: string;
        ItemGroupAcctLabor?: string;
        ItemGroupAcctInlab?: string;
        ItemGroupAcctInmat?: string;
        ItemGroupAcctMisc?: string;
        ItemGroupArevisedDate?: string;
        ItemGroupArevisedBy?: string;
        ItemGroupBrevisedDate?: string;
        ItemGroupBrevisedBy?: string;
        ItemGroupMakeOrBuy?: string;
        ItemGroupTypicalUom?: string;
        ItemGroupCycleCode?: string;
        ItemGroupSalesLtaxCode?: string;
        ItemGroupPurchLtaxCode?: string;
        ItemGroupInnerPkgType?: string;
        ItemGroupInnerQty?: number;
        ItemGroupOuterPkgType?: string;
        ItemGroupOuterQty?: number;
        ItemGroupAnlys1?: string;
        ItemGroupAnlys2?: string;
        ItemGroupAnlys3?: string;
        ItemGroupAnlys4?: string;
        ItemGroupItemCount?: number;
        ItemGroupCreatedDate?: string;
        ItemGroupCreatedBy?: string;
        ItemGroupRevisedDate?: string;
        ItemGroupRevisedBy?: string;
        ItemGroupTrevisedDate?: string;
        ItemGroupTrevisedBy?: string;
        ItemGroupCommisType?: string;
        ItemGroupOwnerBranch?: string;
        ItemGroupSourceBranch?: string;
        ItemGroupScrapRate?: number;
        ItemGroupPurPriceCtrl?: string;
        ItemGroupPurMaxDev?: number;
        ItemGroupAcctItmSubcon?: string;
        ItemGroupConsolidate?: string;
        ItemGroupPutaxPcent?: number;
        ItemGroupAcctItmSltax?: string;
        ItemGroupSltaxPcent?: number;
        ItemGroupEnableLot?: string;
        ItemGroupEnableSerial?: string;
        ItemGroupLotNoLength?: number;
        ItemGroupSerialNoLength?: number;
        ItemGroupNextLotNo?: number;
        ItemGroupNextSerialNo?: number;
        ItemGroupMaxLotSize?: number;
        ItemGroupLotNoPrefix?: string;
        ItemGroupSerialNoPrefix?: string;
        ItemGroupDevtCat01?: string;
        ItemGroupDevtCat02?: string;
        ItemGroupDevtCat03?: string;
        ItemGroupDevtCat04?: string;
        ItemGroupDevtCat05?: string;
        ItemGroupDevtCat06?: string;
        ItemGroupDevtCat07?: string;
        ItemGroupDevtCat08?: string;
        ItemGroupDevtCat09?: string;
        ItemGroupDevtCat10?: string;
        ItemGroupDevtCat11?: string;
        ItemGroupDevtCat12?: string;
        ItemGroupDevtCat13?: string;
        ItemGroupDevtCat14?: string;
        ItemGroupDevtCat15?: string;
        ItemGroupDevtCat16?: string;
        ItemGroupDevtCat17?: string;
        ItemGroupDevtCat18?: string;
        ItemGroupDevtCat19?: string;
        ItemGroupDevtCat20?: string;
        ItemGroupMainLoc?: string;
        ItemGroupMainBin?: string;
        ItemGroupWithResetLot?: string;
        ItemGroupWithResetSerial?: string;
        ItemGroupPrevResetLotDate?: string;
        ItemGroupPrevResetSerialDate?: string;
        ItemGroupBomRohsControl?: boolean;
        ItemGroupAnlys5?: string;
        ItemGroupAnlys6?: string;
        ItemGroupAnlys7?: string;
        ItemGroupAnlys8?: string;
        ItemGroupAnlys9?: string;
        ItemGroupAnlys10?: string;
        ItemGroupAutogenLot?: boolean;
        ItemGroupAutogenSerial?: boolean;
        ItemGroupNoScrapInMatIssue?: boolean;
        ItemGroupAutogenLotIssue?: boolean;
        ItemGroupAutogenSerialIssue?: boolean;
    }
    namespace ItemRow {
        const idProperty = "ItemNo";
        const nameProperty = "ItemNo";
        const localTextPrefix = "MasterData.Item";
        const lookupKey = "MasterData.ItemRow";
        function getLookup(): Q.Lookup<ItemRow>;
        namespace Fields {
            const LookupDescription: string;
            const Recnum: string;
            const ItemNo: string;
            const Description: string;
            const Suspended: string;
            const ItemGroup: string;
            const Charges: string;
            const Product: string;
            const Material: string;
            const Inspected: string;
            const ItemType: string;
            const StockUom: string;
            const MainLoc: string;
            const MakeBuy: string;
            const AllocMethod: string;
            const StdCostOk: string;
            const CostCentre: string;
            const CycleCode: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const DefSpecNo: string;
            const DefSpecCount: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const WithBacklog: string;
            const WithBalance: string;
            const QtyOnHand: string;
            const QtyOnSorder: string;
            const QtyOnPorder: string;
            const QtyOnJorder: string;
            const QtyOnInspect: string;
            const QtyWaitlisted: string;
            const QtyReserved: string;
            const QtyCommitted: string;
            const QtyAvailable: string;
            const QtyUnallocated: string;
            const InvtCostAvail: string;
            const InvtCostLdg: string;
            const AverageCost: string;
            const LatestCost: string;
            const StdCost: string;
            const LastCountDate: string;
            const LastDateIn: string;
            const LastDateOut: string;
            const SalesUom: string;
            const SalesLotSize: string;
            const PriceCcy: string;
            const BasePrice: string;
            const Pricea: string;
            const Priceb: string;
            const Pricec: string;
            const MinPrice: string;
            const MaxPrice: string;
            const MinOrderQty: string;
            const MaxOrderQty: string;
            const MinOrderDays: string;
            const InnerPkgType: string;
            const InnerQty: string;
            const OuterPkgType: string;
            const OuterQty: string;
            const ArticleCode: string;
            const QuotaCategory: string;
            const WeightUom: string;
            const GrossWt: string;
            const NetWt: string;
            const DimensionUom: string;
            const Flength: string;
            const Width: string;
            const Height: string;
            const ComputedVol: string;
            const DeclaredVol: string;
            const SrevisedDate: string;
            const SrevisedBy: string;
            const MpsItem: string;
            const OrderPolicy: string;
            const MinPlanordQty: string;
            const MaxPlanordQty: string;
            const StdPlanordQty: string;
            const MinPlanordPrd: string;
            const MaxPlanordPrd: string;
            const StdPlanordPrd: string;
            const ReorderPt: string;
            const ReorderQty: string;
            const MinMthlyProd: string;
            const MaxMthlyProd: string;
            const MinMthlyPur: string;
            const MaxMthlyPur: string;
            const FollowMinProd: string;
            const FollowMaxProd: string;
            const FollowMinPur: string;
            const FollowMaxPur: string;
            const AllowMixMode: string;
            const PrefVendOnly: string;
            const PrefVend1: string;
            const PrefVend2: string;
            const ProdLeadTime: string;
            const ProdLeadUnit: string;
            const PurLeadTime: string;
            const PurLeadUnit: string;
            const Planner: string;
            const MrpParmDate: string;
            const MrpParmBy: string;
            const AltDescription: string;
            const PictureFile: string;
            const AcctItmAsset: string;
            const AcctItmWip: string;
            const AcctItmConsum: string;
            const AcctItmScrap: string;
            const AcctItmPvar: string;
            const AcctItmReval: string;
            const AcctItmVaria: string;
            const AcctItmSales: string;
            const AcctItmSlret: string;
            const AcctItmSldisc: string;
            const AcctItmCogs: string;
            const AcctItmPurch: string;
            const AcctItmPuret: string;
            const AcctItmPudisc: string;
            const AcctItmPutax: string;
            const AcctMachine: string;
            const AcctEnergy: string;
            const AcctWater: string;
            const AcctRental: string;
            const AcctLabor: string;
            const AcctInlab: string;
            const AcctInmat: string;
            const AcctMisc: string;
            const ArevisedDate: string;
            const ArevisedBy: string;
            const BrevisedDate: string;
            const BrevisedBy: string;
            const SalesLtaxCode: string;
            const PurchLtaxCode: string;
            const TrevisedDate: string;
            const TrevisedBy: string;
            const SpecsCount: string;
            const DefBomNo: string;
            const LastSnapNo: string;
            const CommisType: string;
            const ProdBranch: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const ScrapRate: string;
            const AltExtDesc: string;
            const ExtendedDesc: string;
            const PurPriceCtrl: string;
            const PurMaxDev: string;
            const WebItem: string;
            const AcctItmSubcon: string;
            const WithBinCtrl: string;
            const Consign: string;
            const ProdDevt01: string;
            const ProdDevt02: string;
            const ProdDevt03: string;
            const ProdDevt04: string;
            const ProdDevt05: string;
            const ProdDevt06: string;
            const ProdDevt07: string;
            const ProdDevt08: string;
            const ProdDevt09: string;
            const ProdDevt10: string;
            const ProdDevt11: string;
            const ProdDevt12: string;
            const ProdDevt13: string;
            const ProdDevt14: string;
            const ProdDevt15: string;
            const ProdDevt16: string;
            const ProdDevt17: string;
            const ProdDevt18: string;
            const ProdDevt19: string;
            const ProdDevt20: string;
            const ProdCheck01: string;
            const ProdCheck02: string;
            const ProdCheck03: string;
            const ProdCheck04: string;
            const ProdCheck05: string;
            const ProdCheck06: string;
            const ProdCheck07: string;
            const ProdCheck08: string;
            const ProdCheck09: string;
            const ProdCheck10: string;
            const ProdCheck11: string;
            const ProdCheck12: string;
            const ProdCheck13: string;
            const ProdCheck14: string;
            const ProdCheck15: string;
            const ProdCheck16: string;
            const ProdCheck17: string;
            const ProdCheck18: string;
            const ProdCheck19: string;
            const ProdCheck20: string;
            const LastPackLineNo: string;
            const PutaxPcent: string;
            const AcctItmSltax: string;
            const SltaxPcent: string;
            const PurUom: string;
            const PurLotSize: string;
            const PurCcy: string;
            const PurBasePrice: string;
            const QtyNetAvailable: string;
            const UseStdProdLeadTime: string;
            const DailyProdQty: string;
            const IssueLotSize: string;
            const MrpExclude: string;
            const EnableLot: string;
            const EnableSerial: string;
            const LotNoLength: string;
            const SerialNoLength: string;
            const NextLotNo: string;
            const NextSerialNo: string;
            const MaxLotSize: string;
            const LotNoPrefix: string;
            const SerialNoPrefix: string;
            const SafeStockLvl: string;
            const MainBin: string;
            const CustomProdCode: string;
            const CustomLotSize: string;
            const CustomGrUom: string;
            const CustomGrWt: string;
            const CustomNtWt: string;
            const CustomOrigin: string;
            const IsApproved: string;
            const ApprovedBy: string;
            const Preapprove: string;
            const ApprovedDate: string;
            const QtyOnTransfer: string;
            const WithResetLot: string;
            const WithResetSerial: string;
            const PrevResetLotDate: string;
            const PrevResetSerialDate: string;
            const AutogenLot: string;
            const AutogenSerial: string;
            const FabItem: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const UserDefinedField1: string;
            const UserDefinedField2: string;
            const UserDefinedField3: string;
            const UserDefinedField4: string;
            const UserDefinedField5: string;
            const UserDefinedField6: string;
            const UserDefinedField7: string;
            const UserDefinedField8: string;
            const UserDefinedField9: string;
            const UserDefinedField10: string;
            const UserDefinedField11: string;
            const UserDefinedField12: string;
            const UserDefinedField13: string;
            const UserDefinedField14: string;
            const UserDefinedField15: string;
            const UserDefinedField16: string;
            const UserDefinedField17: string;
            const UserDefinedField18: string;
            const UserDefinedField19: string;
            const UserDefinedField20: string;
            const RohsCompliance: string;
            const DefMoldBomNo: string;
            const DefFormulaCode: string;
            const BoxType: string;
            const BoxLength: string;
            const BoxWidth: string;
            const BoxHeight: string;
            const BoxDUom: string;
            const Wd: string;
            const WdUom: string;
            const CsLength: string;
            const CsWidth: string;
            const UserDefinedField21: string;
            const CostWmove: string;
            const CostWcase: string;
            const CostWband: string;
            const CostBatt: string;
            const DescWmove: string;
            const DescWcase: string;
            const DescWband: string;
            const DescBatt: string;
            const PoBal: string;
            const PoMaxBal: string;
            const IncludeJob: string;
            const CsThickness: string;
            const CsThicknessUom: string;
            const CsProportion: string;
            const CsProportionUom: string;
            const DieCutter: string;
            const MatInspectLeadTime: string;
            const MatPrepareLeadTime: string;
            const MatInspectLeadUnit: string;
            const MatPrepareLeadUnit: string;
            const ColorCode: string;
            const CollectionCode: string;
            const StyleCode: string;
            const X: string;
            const Y: string;
            const TempDescription: string;
            const Specification: string;
            const XUom: string;
            const YUom: string;
            const ProductionUomConversionRate: string;
            const PurchaseUomConversionRate: string;
            const AutogenLotIssue: string;
            const AutogenSerialIssue: string;
            const WcCostCcy: string;
            const WcCost: string;
            const WcCostDisc: string;
            const WcCostExch: string;
            const WcFreight: string;
            const WcMargin: string;
            const CeilingPrice: string;
            const BottomRatio: string;
            const BottomPrice: string;
            const DrawingNo: string;
            const MaterialType: string;
            const ItemGroupRecnum: string;
            const ItemGroupDescription: string;
            const ItemGroupSuspended: string;
            const ItemGroupProduct: string;
            const ItemGroupMaterial: string;
            const ItemGroupInspected: string;
            const ItemGroupCostCentre: string;
            const ItemGroupItemType: string;
            const ItemGroupAllocMethod: string;
            const ItemGroupProdBranch: string;
            const ItemGroupAcctItmAsset: string;
            const ItemGroupAcctItmWip: string;
            const ItemGroupAcctItmConsum: string;
            const ItemGroupAcctItmScrap: string;
            const ItemGroupAcctItmPvar: string;
            const ItemGroupAcctItmReval: string;
            const ItemGroupAcctItmVaria: string;
            const ItemGroupAcctItmSales: string;
            const ItemGroupAcctItmSlret: string;
            const ItemGroupAcctItmSldisc: string;
            const ItemGroupAcctItmCogs: string;
            const ItemGroupAcctItmPurch: string;
            const ItemGroupAcctItmPuret: string;
            const ItemGroupAcctItmPudisc: string;
            const ItemGroupAcctItmPutax: string;
            const ItemGroupAcctMachine: string;
            const ItemGroupAcctEnergy: string;
            const ItemGroupAcctWater: string;
            const ItemGroupAcctRental: string;
            const ItemGroupAcctLabor: string;
            const ItemGroupAcctInlab: string;
            const ItemGroupAcctInmat: string;
            const ItemGroupAcctMisc: string;
            const ItemGroupArevisedDate: string;
            const ItemGroupArevisedBy: string;
            const ItemGroupBrevisedDate: string;
            const ItemGroupBrevisedBy: string;
            const ItemGroupMakeOrBuy: string;
            const ItemGroupTypicalUom: string;
            const ItemGroupCycleCode: string;
            const ItemGroupSalesLtaxCode: string;
            const ItemGroupPurchLtaxCode: string;
            const ItemGroupInnerPkgType: string;
            const ItemGroupInnerQty: string;
            const ItemGroupOuterPkgType: string;
            const ItemGroupOuterQty: string;
            const ItemGroupAnlys1: string;
            const ItemGroupAnlys2: string;
            const ItemGroupAnlys3: string;
            const ItemGroupAnlys4: string;
            const ItemGroupItemCount: string;
            const ItemGroupCreatedDate: string;
            const ItemGroupCreatedBy: string;
            const ItemGroupRevisedDate: string;
            const ItemGroupRevisedBy: string;
            const ItemGroupTrevisedDate: string;
            const ItemGroupTrevisedBy: string;
            const ItemGroupCommisType: string;
            const ItemGroupOwnerBranch: string;
            const ItemGroupSourceBranch: string;
            const ItemGroupScrapRate: string;
            const ItemGroupPurPriceCtrl: string;
            const ItemGroupPurMaxDev: string;
            const ItemGroupAcctItmSubcon: string;
            const ItemGroupConsolidate: string;
            const ItemGroupPutaxPcent: string;
            const ItemGroupAcctItmSltax: string;
            const ItemGroupSltaxPcent: string;
            const ItemGroupEnableLot: string;
            const ItemGroupEnableSerial: string;
            const ItemGroupLotNoLength: string;
            const ItemGroupSerialNoLength: string;
            const ItemGroupNextLotNo: string;
            const ItemGroupNextSerialNo: string;
            const ItemGroupMaxLotSize: string;
            const ItemGroupLotNoPrefix: string;
            const ItemGroupSerialNoPrefix: string;
            const ItemGroupDevtCat01: string;
            const ItemGroupDevtCat02: string;
            const ItemGroupDevtCat03: string;
            const ItemGroupDevtCat04: string;
            const ItemGroupDevtCat05: string;
            const ItemGroupDevtCat06: string;
            const ItemGroupDevtCat07: string;
            const ItemGroupDevtCat08: string;
            const ItemGroupDevtCat09: string;
            const ItemGroupDevtCat10: string;
            const ItemGroupDevtCat11: string;
            const ItemGroupDevtCat12: string;
            const ItemGroupDevtCat13: string;
            const ItemGroupDevtCat14: string;
            const ItemGroupDevtCat15: string;
            const ItemGroupDevtCat16: string;
            const ItemGroupDevtCat17: string;
            const ItemGroupDevtCat18: string;
            const ItemGroupDevtCat19: string;
            const ItemGroupDevtCat20: string;
            const ItemGroupMainLoc: string;
            const ItemGroupMainBin: string;
            const ItemGroupWithResetLot: string;
            const ItemGroupWithResetSerial: string;
            const ItemGroupPrevResetLotDate: string;
            const ItemGroupPrevResetSerialDate: string;
            const ItemGroupBomRohsControl: string;
            const ItemGroupAnlys5: string;
            const ItemGroupAnlys6: string;
            const ItemGroupAnlys7: string;
            const ItemGroupAnlys8: string;
            const ItemGroupAnlys9: string;
            const ItemGroupAnlys10: string;
            const ItemGroupAutogenLot: string;
            const ItemGroupAutogenSerial: string;
            const ItemGroupNoScrapInMatIssue: string;
            const ItemGroupAutogenLotIssue: string;
            const ItemGroupAutogenSerialIssue: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ItemService {
        const baseUrl = "MasterData/Item";
        function Create(request: Serenity.SaveRequest<ItemRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ItemRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ItemRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ItemRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class LocationForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface LocationForm {
        Loc: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        NoReservation: Serenity.BooleanEditor;
        NoWaitlist: Serenity.BooleanEditor;
        NoAvailable: Serenity.BooleanEditor;
        NoPlanning: Serenity.BooleanEditor;
        NoIssuance: Serenity.BooleanEditor;
        NoReceipts: Serenity.BooleanEditor;
        NoMatIssue: Serenity.BooleanEditor;
        NoFgReturn: Serenity.BooleanEditor;
        NoShipment: Serenity.BooleanEditor;
        NoGrn: Serenity.BooleanEditor;
        OnSorderCount: Serenity.DecimalEditor;
        OnPorderCount: Serenity.DecimalEditor;
        OnJorderCount: Serenity.DecimalEditor;
        WithBinCtrl: Serenity.StringEditor;
        WithPackingBox: Serenity.BooleanEditor;
        WithBacklog: Serenity.StringEditor;
        InvtCostAvail: Serenity.DecimalEditor;
        InvtCostLdg: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.MasterData {
    interface LocationRow {
        Recnum?: number;
        Loc?: string;
        Description?: string;
        Suspended?: boolean;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        BranchNo?: string;
        NoReservation?: boolean;
        NoWaitlist?: boolean;
        NoAvailable?: boolean;
        NoPlanning?: boolean;
        NoIssuance?: boolean;
        NoReceipts?: boolean;
        NoMatIssue?: boolean;
        NoFgReturn?: boolean;
        NoShipment?: boolean;
        NoGrn?: boolean;
        WithBacklog?: boolean;
        OnSorderCount?: number;
        OnPorderCount?: number;
        OnJorderCount?: number;
        InvtCostAvail?: number;
        InvtCostLdg?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        WithBinCtrl?: string;
        WithPackingBox?: boolean;
    }
    namespace LocationRow {
        const idProperty = "Loc";
        const nameProperty = "Description";
        const localTextPrefix = "MasterData.Location";
        const lookupKey = "MasterData.LocationRow";
        function getLookup(): Q.Lookup<LocationRow>;
        namespace Fields {
            const Recnum: string;
            const Loc: string;
            const Description: string;
            const Suspended: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const BranchNo: string;
            const NoReservation: string;
            const NoWaitlist: string;
            const NoAvailable: string;
            const NoPlanning: string;
            const NoIssuance: string;
            const NoReceipts: string;
            const NoMatIssue: string;
            const NoFgReturn: string;
            const NoShipment: string;
            const NoGrn: string;
            const WithBacklog: string;
            const OnSorderCount: string;
            const OnPorderCount: string;
            const OnJorderCount: string;
            const InvtCostAvail: string;
            const InvtCostLdg: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const WithBinCtrl: string;
            const WithPackingBox: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace LocationService {
        const baseUrl = "MasterData/Location";
        function Create(request: Serenity.SaveRequest<LocationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<LocationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<LocationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<LocationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class MachineForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface MachineForm {
        MachineNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        TemplateCode: Serenity.StringEditor;
        PictureFile: Serenity.StringEditor;
        Picture: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
        WorkCentre: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface MachineRow {
        Recnum?: number;
        MachineNo?: string;
        Description?: string;
        Suspended?: boolean;
        TemplateCode?: string;
        PictureFile?: string;
        Picture?: number[];
        Remarks?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        LastDetailNo?: number;
        WorkCentre?: string;
    }
    namespace MachineRow {
        const idProperty = "Recnum";
        const nameProperty = "MachineNo";
        const localTextPrefix = "MasterData.Machine";
        namespace Fields {
            const Recnum: string;
            const MachineNo: string;
            const Description: string;
            const Suspended: string;
            const TemplateCode: string;
            const PictureFile: string;
            const Picture: string;
            const Remarks: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const LastDetailNo: string;
            const WorkCentre: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace MachineService {
        const baseUrl = "MasterData/Machine";
        function Create(request: Serenity.SaveRequest<MachineRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<MachineRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<MachineRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<MachineRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class MessageAttachmentForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface MessageAttachmentForm {
        LineNo: Serenity.IntegerEditor;
        AttachmentType: Serenity.IntegerEditor;
        FileName: Serenity.StringEditor;
        FileContent: Serenity.StringEditor;
        FileSize: Serenity.IntegerEditor;
    }
}
declare namespace Matrix.MasterData {
    interface MessageAttachmentRow {
        MessageId?: number;
        LineNo?: number;
        AttachmentType?: number;
        FileName?: string;
        FileContent?: number[];
        FileSize?: number;
        MessageCreatedBy?: string;
        MessageCreatedDate?: string;
        MessageRevisedBy?: string;
        MessageRevisedDate?: string;
        MessageSummary?: string;
        MessageDetail?: string;
        MessageParentId?: number;
        MessagePostStatus?: string;
        MessageReqId?: number;
        MessageMsgTo?: string;
        MessageReqmsgParentId?: number;
        MessageInstanceNo?: number;
        MessageHtmlText?: string;
        MessageWithAttachment?: boolean;
    }
    namespace MessageAttachmentRow {
        const idProperty = "MessageId";
        const nameProperty = "FileName";
        const localTextPrefix = "MasterData.MessageAttachment";
        namespace Fields {
            const MessageId: string;
            const LineNo: string;
            const AttachmentType: string;
            const FileName: string;
            const FileContent: string;
            const FileSize: string;
            const MessageCreatedBy: string;
            const MessageCreatedDate: string;
            const MessageRevisedBy: string;
            const MessageRevisedDate: string;
            const MessageSummary: string;
            const MessageDetail: string;
            const MessageParentId: string;
            const MessagePostStatus: string;
            const MessageReqId: string;
            const MessageMsgTo: string;
            const MessageReqmsgParentId: string;
            const MessageInstanceNo: string;
            const MessageHtmlText: string;
            const MessageWithAttachment: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace MessageAttachmentService {
        const baseUrl = "MasterData/MessageAttachment";
        function Create(request: Serenity.SaveRequest<MessageAttachmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<MessageAttachmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<MessageAttachmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<MessageAttachmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class MessageForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface MessageForm {
        CreatedBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        Summary: Serenity.StringEditor;
        Detail: Serenity.StringEditor;
        ParentId: Serenity.IntegerEditor;
        PostStatus: Serenity.StringEditor;
        ReqId: Serenity.IntegerEditor;
        MsgTo: Serenity.StringEditor;
        ReqmsgParentId: Serenity.DecimalEditor;
        InstanceNo: Serenity.IntegerEditor;
        HtmlText: Serenity.StringEditor;
        WithAttachment: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.MasterData {
    interface MessageRow {
        DetailList?: MessageAttachmentRow[];
        MessageId?: number;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        Summary?: string;
        Detail?: string;
        ParentId?: number;
        PostStatus?: string;
        ReqId?: number;
        MsgTo?: string;
        ReqmsgParentId?: number;
        InstanceNo?: number;
        HtmlText?: string;
        WithAttachment?: boolean;
    }
    namespace MessageRow {
        const idProperty = "MessageId";
        const nameProperty = "Summary";
        const localTextPrefix = "MasterData.Message";
        namespace Fields {
            const DetailList: string;
            const MessageId: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const Summary: string;
            const Detail: string;
            const ParentId: string;
            const PostStatus: string;
            const ReqId: string;
            const MsgTo: string;
            const ReqmsgParentId: string;
            const InstanceNo: string;
            const HtmlText: string;
            const WithAttachment: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace MessageService {
        const baseUrl = "MasterData/Message";
        function Create(request: Serenity.SaveRequest<MessageRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<MessageRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<MessageRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<MessageRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class MoldForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface MoldForm {
        MoldNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        TotalSet: Serenity.IntegerEditor;
        StdOutput: Serenity.IntegerEditor;
        Suspended: Serenity.StringEditor;
        Length: Serenity.DecimalEditor;
        Width: Serenity.DecimalEditor;
        Thickness: Serenity.DecimalEditor;
        Weight: Serenity.DecimalEditor;
        SetWeight: Serenity.DecimalEditor;
        Shrink: Serenity.DecimalEditor;
        ShotSize: Serenity.DecimalEditor;
        CavityFinish: Serenity.StringEditor;
        TempCtrlZone: Serenity.DecimalEditor;
        WtrFlowA: Serenity.DecimalEditor;
        WtrFlowB: Serenity.DecimalEditor;
        Qmc: Serenity.StringEditor;
        HyCores: Serenity.StringEditor;
        MoldCost: Serenity.DecimalEditor;
        EjectorRtn: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
        PictureFile: Serenity.StringEditor;
        CavSets: Serenity.IntegerEditor;
        CavSqInch: Serenity.IntegerEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        LifeTime: Serenity.DecimalEditor;
        JobQty: Serenity.DecimalEditor;
        FinQty: Serenity.DecimalEditor;
        BalQty: Serenity.DecimalEditor;
        RepQty: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.MasterData {
    interface MoldRow {
        Recnum?: number;
        MoldNo?: string;
        Description?: string;
        TotalSet?: number;
        StdOutput?: number;
        Suspended?: string;
        Length?: number;
        Width?: number;
        Thickness?: number;
        Weight?: number;
        SetWeight?: number;
        Shrink?: number;
        ShotSize?: number;
        CavityFinish?: string;
        TempCtrlZone?: number;
        WtrFlowA?: number;
        WtrFlowB?: number;
        Qmc?: string;
        HyCores?: string;
        MoldCost?: number;
        EjectorRtn?: string;
        Remarks?: string;
        PictureFile?: string;
        CavSets?: number;
        CavSqInch?: number;
        RevisedDate?: string;
        RevisedBy?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        LifeTime?: number;
        JobQty?: number;
        FinQty?: number;
        BalQty?: number;
        RepQty?: number;
    }
    namespace MoldRow {
        const idProperty = "Recnum";
        const nameProperty = "MoldNo";
        const localTextPrefix = "MasterData.Mold";
        namespace Fields {
            const Recnum: string;
            const MoldNo: string;
            const Description: string;
            const TotalSet: string;
            const StdOutput: string;
            const Suspended: string;
            const Length: string;
            const Width: string;
            const Thickness: string;
            const Weight: string;
            const SetWeight: string;
            const Shrink: string;
            const ShotSize: string;
            const CavityFinish: string;
            const TempCtrlZone: string;
            const WtrFlowA: string;
            const WtrFlowB: string;
            const Qmc: string;
            const HyCores: string;
            const MoldCost: string;
            const EjectorRtn: string;
            const Remarks: string;
            const PictureFile: string;
            const CavSets: string;
            const CavSqInch: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const LifeTime: string;
            const JobQty: string;
            const FinQty: string;
            const BalQty: string;
            const RepQty: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace MoldService {
        const baseUrl = "MasterData/Mold";
        function Create(request: Serenity.SaveRequest<MoldRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<MoldRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<MoldRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<MoldRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class OperationForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface OperationForm {
        OpCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        TicketIssued: Serenity.BooleanEditor;
        ReportRequired: Serenity.BooleanEditor;
        OperType: Serenity.StringEditor;
        ProdnMode: Serenity.StringEditor;
        WorkCentre: Serenity.StringEditor;
        FixedWctr: Serenity.StringEditor;
        MinLotSize: Serenity.DecimalEditor;
        StdLotSize: Serenity.DecimalEditor;
        DirectLabor: Serenity.DecimalEditor;
        SubconVendor: Serenity.StringEditor;
        PieceRate: Serenity.DecimalEditor;
        Specifications: Serenity.TextAreaEditor;
        ManLoadHr: Serenity.DecimalEditor;
        ManProcessHr: Serenity.DecimalEditor;
        ManUnloadHr: Serenity.DecimalEditor;
        MachLoadHr: Serenity.DecimalEditor;
        MachProcessHr: Serenity.DecimalEditor;
        MachUnloadHr: Serenity.DecimalEditor;
        AcctMachine: Serenity.StringEditor;
        AcctEnergy: Serenity.StringEditor;
        AcctWater: Serenity.StringEditor;
        AcctRental: Serenity.StringEditor;
        AcctLabor: Serenity.StringEditor;
        AcctInlab: Serenity.StringEditor;
        AcctInmat: Serenity.StringEditor;
        AcctMisc: Serenity.StringEditor;
        MachineCost: Serenity.DecimalEditor;
        EnergyCost: Serenity.DecimalEditor;
        WaterCost: Serenity.DecimalEditor;
        RentalCost: Serenity.DecimalEditor;
        LaborCost: Serenity.DecimalEditor;
        InlabCost: Serenity.DecimalEditor;
        InmatCost: Serenity.DecimalEditor;
        MiscCost: Serenity.DecimalEditor;
        SubconCost: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.MasterData {
    interface OperationRow {
        Recnum?: number;
        OpCode?: string;
        Description?: string;
        Suspended?: boolean;
        TicketIssued?: boolean;
        ReportRequired?: boolean;
        OperType?: string;
        ProdnMode?: string;
        WorkCentre?: string;
        FixedWctr?: boolean;
        MinLotSize?: number;
        StdLotSize?: number;
        DirectLabor?: number;
        MachLoadHr?: number;
        ManLoadHr?: number;
        MachProcessHr?: number;
        ManProcessHr?: number;
        MachUnloadHr?: number;
        ManUnloadHr?: number;
        MachineCost?: number;
        EnergyCost?: number;
        WaterCost?: number;
        RentalCost?: number;
        LaborCost?: number;
        InlabCost?: number;
        InmatCost?: number;
        MiscCost?: number;
        SubconCost?: number;
        SubconVendor?: string;
        PieceRate?: number;
        AcctMachine?: string;
        AcctEnergy?: string;
        AcctWater?: string;
        AcctRental?: string;
        AcctLabor?: string;
        AcctInlab?: string;
        AcctInmat?: string;
        AcctMisc?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        BrevisedDate?: string;
        BrevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Specifications?: string;
    }
    namespace OperationRow {
        const idProperty = "Recnum";
        const nameProperty = "OpCode";
        const localTextPrefix = "MasterData.Operation";
        namespace Fields {
            const Recnum: string;
            const OpCode: string;
            const Description: string;
            const Suspended: string;
            const TicketIssued: string;
            const ReportRequired: string;
            const OperType: string;
            const ProdnMode: string;
            const WorkCentre: string;
            const FixedWctr: string;
            const MinLotSize: string;
            const StdLotSize: string;
            const DirectLabor: string;
            const MachLoadHr: string;
            const ManLoadHr: string;
            const MachProcessHr: string;
            const ManProcessHr: string;
            const MachUnloadHr: string;
            const ManUnloadHr: string;
            const MachineCost: string;
            const EnergyCost: string;
            const WaterCost: string;
            const RentalCost: string;
            const LaborCost: string;
            const InlabCost: string;
            const InmatCost: string;
            const MiscCost: string;
            const SubconCost: string;
            const SubconVendor: string;
            const PieceRate: string;
            const AcctMachine: string;
            const AcctEnergy: string;
            const AcctWater: string;
            const AcctRental: string;
            const AcctLabor: string;
            const AcctInlab: string;
            const AcctInmat: string;
            const AcctMisc: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const BrevisedDate: string;
            const BrevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Specifications: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace OperationService {
        const baseUrl = "MasterData/Operation";
        function Create(request: Serenity.SaveRequest<OperationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<OperationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<OperationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<OperationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class PanelForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PanelForm {
        PanelCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Length: Serenity.DecimalEditor;
        Width: Serenity.DecimalEditor;
        DimUom: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        ItemGroup: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface PanelRow {
        Recnum?: number;
        PanelCode?: string;
        Description?: string;
        Length?: number;
        Width?: number;
        DimUom?: string;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        ItemGroup?: string;
    }
    namespace PanelRow {
        const idProperty = "Recnum";
        const nameProperty = "PanelCode";
        const localTextPrefix = "MasterData.Panel";
        namespace Fields {
            const Recnum: string;
            const PanelCode: string;
            const Description: string;
            const Length: string;
            const Width: string;
            const DimUom: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const ItemGroup: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace PanelService {
        const baseUrl = "MasterData/Panel";
        function Create(request: Serenity.SaveRequest<PanelRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PanelRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PanelRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PanelRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class PayTermForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PayTermForm {
        PayTerms: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        BaseDate: Serenity.StringEditor;
        DueDays: Serenity.DecimalEditor;
        DiscDays: Serenity.DecimalEditor;
        DiscPercent: Serenity.DecimalEditor;
        AdjustCrlimit: Serenity.StringEditor;
        MinDueDays: Serenity.DecimalEditor;
        Phase1PayTerms: Serenity.StringEditor;
        Phase1BaseDate: Serenity.StringEditor;
        Phase1DueDays: Serenity.DecimalEditor;
        Phase1PayPercent: Serenity.DecimalEditor;
        Phase2PayTerms: Serenity.StringEditor;
        Phase2BaseDate: Serenity.StringEditor;
        Phase2DueDays: Serenity.DecimalEditor;
        Phase2PayPercent: Serenity.DecimalEditor;
        Phase3PayTerms: Serenity.StringEditor;
        Phase3BaseDate: Serenity.StringEditor;
        Phase3DueDays: Serenity.DecimalEditor;
        Phase3PayPercent: Serenity.DecimalEditor;
        Phase4PayTerms: Serenity.StringEditor;
        Phase4BaseDate: Serenity.StringEditor;
        Phase4DueDays: Serenity.DecimalEditor;
        Phase4PayPercent: Serenity.DecimalEditor;
        Phase5PayTerms: Serenity.StringEditor;
        Phase5BaseDate: Serenity.StringEditor;
        Phase5DueDays: Serenity.DecimalEditor;
        Phase5PayPercent: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.MasterData {
    interface PayTermRow {
        Recnum?: number;
        PayTerms?: string;
        Description?: string;
        Suspended?: boolean;
        BaseDate?: string;
        DueDays?: number;
        DiscDays?: number;
        DiscPercent?: number;
        AdjustCrlimit?: string;
        MinDueDays?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Phase1PayTerms?: string;
        Phase1BaseDate?: string;
        Phase1DueDays?: number;
        Phase1PayPercent?: number;
        Phase2PayTerms?: string;
        Phase2BaseDate?: string;
        Phase2DueDays?: number;
        Phase2PayPercent?: number;
        Phase3PayTerms?: string;
        Phase3BaseDate?: string;
        Phase3DueDays?: number;
        Phase3PayPercent?: number;
        Phase4PayTerms?: string;
        Phase4BaseDate?: string;
        Phase4DueDays?: number;
        Phase4PayPercent?: number;
        Phase5PayTerms?: string;
        Phase5BaseDate?: string;
        Phase5DueDays?: number;
        Phase5PayPercent?: number;
    }
    namespace PayTermRow {
        const idProperty = "Recnum";
        const nameProperty = "PayTerms";
        const localTextPrefix = "MasterData.PayTerm";
        namespace Fields {
            const Recnum: string;
            const PayTerms: string;
            const Description: string;
            const Suspended: string;
            const BaseDate: string;
            const DueDays: string;
            const DiscDays: string;
            const DiscPercent: string;
            const AdjustCrlimit: string;
            const MinDueDays: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Phase1PayTerms: string;
            const Phase1BaseDate: string;
            const Phase1DueDays: string;
            const Phase1PayPercent: string;
            const Phase2PayTerms: string;
            const Phase2BaseDate: string;
            const Phase2DueDays: string;
            const Phase2PayPercent: string;
            const Phase3PayTerms: string;
            const Phase3BaseDate: string;
            const Phase3DueDays: string;
            const Phase3PayPercent: string;
            const Phase4PayTerms: string;
            const Phase4BaseDate: string;
            const Phase4DueDays: string;
            const Phase4PayPercent: string;
            const Phase5PayTerms: string;
            const Phase5BaseDate: string;
            const Phase5DueDays: string;
            const Phase5PayPercent: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace PayTermService {
        const baseUrl = "MasterData/PayTerm";
        function Create(request: Serenity.SaveRequest<PayTermRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PayTermRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PayTermRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PayTermRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class PlannerForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PlannerForm {
        Planner: Serenity.StringEditor;
        Name: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Userid: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface PlannerRow {
        Recnum?: number;
        Planner?: string;
        Name?: string;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Userid?: string;
    }
    namespace PlannerRow {
        const idProperty = "Planner";
        const nameProperty = "Name";
        const localTextPrefix = "MasterData.Planner";
        namespace Fields {
            const Recnum: string;
            const Planner: string;
            const Name: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Userid: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace PlannerService {
        const baseUrl = "MasterData/Planner";
        function Create(request: Serenity.SaveRequest<PlannerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PlannerRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PlannerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PlannerRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class PortCodeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PortCodeForm {
        PortCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface PortCodeRow {
        Recnum?: number;
        PortCode?: string;
        Description?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
    }
    namespace PortCodeRow {
        const idProperty = "Recnum";
        const nameProperty = "PortCode";
        const localTextPrefix = "MasterData.PortCode";
        namespace Fields {
            const Recnum: string;
            const PortCode: string;
            const Description: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace PortCodeService {
        const baseUrl = "MasterData/PortCode";
        function Create(request: Serenity.SaveRequest<PortCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PortCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PortCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PortCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ProfitAndLossLayoutForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ProfitAndLossLayoutForm {
        LineNo: Serenity.DecimalEditor;
        LineType: Serenity.StringEditor;
        LineSkip: Serenity.DecimalEditor;
        Description: Serenity.StringEditor;
        AcctFrom: Serenity.StringEditor;
        AcctTo: Serenity.StringEditor;
        AcctOperator: Serenity.StringEditor;
        TotalLevel: Serenity.DecimalEditor;
        NormalSign: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ProfitAndLossLayoutRow {
        Recnum?: number;
        LineNo?: number;
        LineType?: string;
        LineSkip?: number;
        Description?: string;
        AcctFrom?: string;
        AcctTo?: string;
        AcctOperator?: string;
        TotalLevel?: number;
        NormalSign?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Report?: string;
        CellLineNo?: number;
        CellValuePeriod?: string;
        CellValueFiscalYear?: string;
    }
    namespace ProfitAndLossLayoutRow {
        const idProperty = "Recnum";
        const nameProperty = "LineType";
        const localTextPrefix = "MasterData.ProfitAndLossLayout";
        namespace Fields {
            const Recnum: string;
            const LineNo: string;
            const LineType: string;
            const LineSkip: string;
            const Description: string;
            const AcctFrom: string;
            const AcctTo: string;
            const AcctOperator: string;
            const TotalLevel: string;
            const NormalSign: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Report: string;
            const CellLineNo: string;
            const CellValuePeriod: string;
            const CellValueFiscalYear: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ProfitAndLossLayoutService {
        const baseUrl = "MasterData/ProfitAndLossLayout";
        function Create(request: Serenity.SaveRequest<ProfitAndLossLayoutRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ProfitAndLossLayoutRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ProfitAndLossLayoutRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ProfitAndLossLayoutRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ReasonCodeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ReasonCodeForm {
        ReasonCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Remarks: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ReasonCodeRow {
        Recnum?: number;
        ReasonCode?: string;
        Description?: string;
        Suspended?: boolean;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        Remarks?: string;
    }
    namespace ReasonCodeRow {
        const idProperty = "Recnum";
        const nameProperty = "ReasonCode";
        const localTextPrefix = "MasterData.ReasonCode";
        namespace Fields {
            const Recnum: string;
            const ReasonCode: string;
            const Description: string;
            const Suspended: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const Remarks: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ReasonCodeService {
        const baseUrl = "MasterData/ReasonCode";
        function Create(request: Serenity.SaveRequest<ReasonCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ReasonCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ReasonCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ReasonCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData.Repositories {
    interface FiscalPeriodListRequest extends Serenity.ListRequest {
        FiscalYear?: number;
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class SalesmanForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface SalesmanForm {
        Salesman: Serenity.StringEditor;
        SalesmanName: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Rank: Serenity.DecimalEditor;
        EmpNo: Serenity.StringEditor;
        Supervisor: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface SalesmanRow {
        Recnum?: number;
        Salesman?: string;
        SalesmanName?: string;
        Suspended?: boolean;
        Rank?: number;
        EmpNo?: string;
        Supervisor?: string;
        WithBacklog?: string;
        OnOrderCount?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace SalesmanRow {
        const idProperty = "Recnum";
        const nameProperty = "Salesman";
        const localTextPrefix = "MasterData.Salesman";
        namespace Fields {
            const Recnum: string;
            const Salesman: string;
            const SalesmanName: string;
            const Suspended: string;
            const Rank: string;
            const EmpNo: string;
            const Supervisor: string;
            const WithBacklog: string;
            const OnOrderCount: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace SalesmanService {
        const baseUrl = "MasterData/Salesman";
        function Create(request: Serenity.SaveRequest<SalesmanRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<SalesmanRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<SalesmanRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<SalesmanRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class ShipViaCodeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ShipViaCodeForm {
        ShipViaCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface ShipViaCodeRow {
        Recnum?: number;
        ShipViaCode?: string;
        Description?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
    }
    namespace ShipViaCodeRow {
        const idProperty = "Recnum";
        const nameProperty = "ShipViaCode";
        const localTextPrefix = "MasterData.ShipViaCode";
        namespace Fields {
            const Recnum: string;
            const ShipViaCode: string;
            const Description: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace ShipViaCodeService {
        const baseUrl = "MasterData/ShipViaCode";
        function Create(request: Serenity.SaveRequest<ShipViaCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ShipViaCodeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ShipViaCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ShipViaCodeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class SizeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface SizeForm {
        Size: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        CreatedBy: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
    }
}
declare namespace Matrix.MasterData {
    interface SizeRow {
        Recnum?: number;
        Size?: string;
        Suspended?: boolean;
        Description?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
    }
    namespace SizeRow {
        const idProperty = "Recnum";
        const nameProperty = "Size";
        const localTextPrefix = "MasterData.Size";
        namespace Fields {
            const Recnum: string;
            const Size: string;
            const Suspended: string;
            const Description: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace SizeService {
        const baseUrl = "MasterData/Size";
        function Create(request: Serenity.SaveRequest<SizeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<SizeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<SizeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<SizeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class StyleForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface StyleForm {
        StyleCode: Serenity.StringEditor;
        CollectionCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        DieCutter: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.MasterData {
    interface StyleRow {
        Recnum?: number;
        CollectionCode?: string;
        StyleCode?: string;
        Description?: string;
        ChineseDescription?: string;
        DieCutter?: number;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
    }
    namespace StyleRow {
        const idProperty = "Recnum";
        const nameProperty = "CollectionCode";
        const localTextPrefix = "MasterData.Style";
        namespace Fields {
            const Recnum: string;
            const CollectionCode: string;
            const StyleCode: string;
            const Description: string;
            const ChineseDescription: string;
            const DieCutter: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace StyleService {
        const baseUrl = "MasterData/Style";
        function Create(request: Serenity.SaveRequest<StyleRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<StyleRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<StyleRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<StyleRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class TabDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface TabDetailForm {
        ItemGroup: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface TabDetailRow {
        Tabid?: number;
        ItemGroup?: string;
        Description?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        TabidCaption?: string;
        TabidCreatedDate?: string;
        TabidCreatedBy?: string;
        TabidRevisedDate?: string;
        TabidRevisedBy?: string;
    }
    namespace TabDetailRow {
        const idProperty = "Tabid";
        const nameProperty = "ItemGroup";
        const localTextPrefix = "MasterData.TabDetail";
        namespace Fields {
            const Tabid: string;
            const ItemGroup: string;
            const Description: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const TabidCaption: string;
            const TabidCreatedDate: string;
            const TabidCreatedBy: string;
            const TabidRevisedDate: string;
            const TabidRevisedBy: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace TabDetailService {
        const baseUrl = "MasterData/TabDetail";
        function Create(request: Serenity.SaveRequest<TabDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<TabDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<TabDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<TabDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
    class TabForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface TabForm {
        Caption: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface TabRow {
        Tabid?: number;
        Caption?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
    }
    namespace TabRow {
        const idProperty = "Tabid";
        const nameProperty = "Caption";
        const localTextPrefix = "MasterData.Tab";
        namespace Fields {
            const Tabid: string;
            const Caption: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace TabService {
        const baseUrl = "MasterData/Tab";
        function Create(request: Serenity.SaveRequest<TabRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<TabRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<TabRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<TabRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class TextTypeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface TextTypeForm {
        TextType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        DefaultText: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.MasterData {
    interface TextTypeRow {
        Recnum?: number;
        TextType?: string;
        Description?: string;
        Suspended?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        DefaultText?: string;
    }
    namespace TextTypeRow {
        const idProperty = "Recnum";
        const nameProperty = "TextType";
        const localTextPrefix = "MasterData.TextType";
        namespace Fields {
            const Recnum: string;
            const TextType: string;
            const Description: string;
            const Suspended: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const DefaultText: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace TextTypeService {
        const baseUrl = "MasterData/TextType";
        function Create(request: Serenity.SaveRequest<TextTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<TextTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<TextTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<TextTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class UnitForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface UnitForm {
        Uom: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        DiscreteQty: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.MasterData {
    interface UnitRow {
        Recnum?: number;
        Uom?: string;
        Description?: string;
        Suspended?: boolean;
        DiscreteQty?: boolean;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
    }
    namespace UnitRow {
        const idProperty = "Recnum";
        const nameProperty = "Uom";
        const localTextPrefix = "MasterData.Unit";
        namespace Fields {
            const Recnum: string;
            const Uom: string;
            const Description: string;
            const Suspended: string;
            const DiscreteQty: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace UnitService {
        const baseUrl = "MasterData/Unit";
        function Create(request: Serenity.SaveRequest<UnitRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<UnitRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<UnitRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<UnitRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class VoucherTypeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VoucherTypeForm {
        VoucherType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        DirectEntry: Serenity.StringEditor;
        AllowEdit: Serenity.StringEditor;
        MultiCurrency: Serenity.StringEditor;
        BatchedPosting: Serenity.StringEditor;
        CostCtrOpt: Serenity.StringEditor;
        DeptOpt: Serenity.StringEditor;
        Anlys1Opt: Serenity.StringEditor;
        Anlys2Opt: Serenity.StringEditor;
        Anlys3DrOpt: Serenity.StringEditor;
        Anlys4DrOpt: Serenity.StringEditor;
        Anlys5DrOpt: Serenity.StringEditor;
        Anlys6DrOpt: Serenity.StringEditor;
        Anlys3CrOpt: Serenity.StringEditor;
        Anlys4CrOpt: Serenity.StringEditor;
        Anlys5CrOpt: Serenity.StringEditor;
        Anlys6CrOpt: Serenity.StringEditor;
        SeriesCode: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        BatchCount: Serenity.DecimalEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
        Anlys7Opt: Serenity.StringEditor;
        Anlys8Opt: Serenity.StringEditor;
        Anlys9Opt: Serenity.StringEditor;
        Anlys10Opt: Serenity.StringEditor;
        Anlys11Opt: Serenity.StringEditor;
        Anlys12Opt: Serenity.StringEditor;
        Anlys13Opt: Serenity.StringEditor;
        Anlys14Opt: Serenity.StringEditor;
        Anlys15DrOpt: Serenity.StringEditor;
        Anlys16DrOpt: Serenity.StringEditor;
        Anlys17DrOpt: Serenity.StringEditor;
        Anlys18DrOpt: Serenity.StringEditor;
        Anlys19DrOpt: Serenity.StringEditor;
        Anlys20DrOpt: Serenity.StringEditor;
        Anlys15CrOpt: Serenity.StringEditor;
        Anlys16CrOpt: Serenity.StringEditor;
        Anlys17CrOpt: Serenity.StringEditor;
        Anlys18CrOpt: Serenity.StringEditor;
        Anlys19CrOpt: Serenity.StringEditor;
        Anlys20CrOpt: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface VoucherTypeRow {
        Recnum?: number;
        VoucherType?: string;
        Description?: string;
        Suspended?: boolean;
        DirectEntry?: boolean;
        AllowEdit?: boolean;
        MultiCurrency?: boolean;
        BatchedPosting?: boolean;
        CostCtrOpt?: string;
        DeptOpt?: string;
        Anlys1Opt?: string;
        Anlys2Opt?: string;
        Anlys3DrOpt?: string;
        Anlys4DrOpt?: string;
        Anlys5DrOpt?: string;
        Anlys6DrOpt?: string;
        Anlys3CrOpt?: string;
        Anlys4CrOpt?: string;
        Anlys5CrOpt?: string;
        Anlys6CrOpt?: string;
        SeriesCode?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        BatchCount?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        Remarks?: string;
        Anlys7Opt?: string;
        Anlys8Opt?: string;
        Anlys9Opt?: string;
        Anlys10Opt?: string;
        Anlys11Opt?: string;
        Anlys12Opt?: string;
        Anlys13Opt?: string;
        Anlys14Opt?: string;
        Anlys15DrOpt?: string;
        Anlys16DrOpt?: string;
        Anlys17DrOpt?: string;
        Anlys18DrOpt?: string;
        Anlys19DrOpt?: string;
        Anlys20DrOpt?: string;
        Anlys15CrOpt?: string;
        Anlys16CrOpt?: string;
        Anlys17CrOpt?: string;
        Anlys18CrOpt?: string;
        Anlys19CrOpt?: string;
        Anlys20CrOpt?: string;
    }
    namespace VoucherTypeRow {
        const idProperty = "Recnum";
        const nameProperty = "VoucherType";
        const localTextPrefix = "MasterData.VoucherType";
        namespace Fields {
            const Recnum: string;
            const VoucherType: string;
            const Description: string;
            const Suspended: string;
            const DirectEntry: string;
            const AllowEdit: string;
            const MultiCurrency: string;
            const BatchedPosting: string;
            const CostCtrOpt: string;
            const DeptOpt: string;
            const Anlys1Opt: string;
            const Anlys2Opt: string;
            const Anlys3DrOpt: string;
            const Anlys4DrOpt: string;
            const Anlys5DrOpt: string;
            const Anlys6DrOpt: string;
            const Anlys3CrOpt: string;
            const Anlys4CrOpt: string;
            const Anlys5CrOpt: string;
            const Anlys6CrOpt: string;
            const SeriesCode: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const BatchCount: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Remarks: string;
            const Anlys7Opt: string;
            const Anlys8Opt: string;
            const Anlys9Opt: string;
            const Anlys10Opt: string;
            const Anlys11Opt: string;
            const Anlys12Opt: string;
            const Anlys13Opt: string;
            const Anlys14Opt: string;
            const Anlys15DrOpt: string;
            const Anlys16DrOpt: string;
            const Anlys17DrOpt: string;
            const Anlys18DrOpt: string;
            const Anlys19DrOpt: string;
            const Anlys20DrOpt: string;
            const Anlys15CrOpt: string;
            const Anlys16CrOpt: string;
            const Anlys17CrOpt: string;
            const Anlys18CrOpt: string;
            const Anlys19CrOpt: string;
            const Anlys20CrOpt: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace VoucherTypeService {
        const baseUrl = "MasterData/VoucherType";
        function Create(request: Serenity.SaveRequest<VoucherTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VoucherTypeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VoucherTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VoucherTypeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class WorkCentreForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface WorkCentreForm {
        WorkCentre: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Suspended: Serenity.BooleanEditor;
        Critical: Serenity.BooleanEditor;
        NoOfPersons: Serenity.DecimalEditor;
        NoOfShifts: Serenity.DecimalEditor;
        FirstSetupHr: Serenity.DecimalEditor;
        FirstCleanHr: Serenity.DecimalEditor;
        OtherSetupHr: Serenity.DecimalEditor;
        OtherCleanHr: Serenity.DecimalEditor;
        QueueHr: Serenity.DecimalEditor;
        OperHrsBasis: Serenity.StringEditor;
        NoOfMachines: Serenity.DecimalEditor;
        CapacityUnit: Serenity.StringEditor;
        MachineUnit: Serenity.StringEditor;
        MachineCost: Serenity.DecimalEditor;
        EnergyUnit: Serenity.StringEditor;
        EnergyCost: Serenity.DecimalEditor;
        WaterUnit: Serenity.StringEditor;
        WaterCost: Serenity.DecimalEditor;
        RentalUnit: Serenity.StringEditor;
        RentalCost: Serenity.DecimalEditor;
        LaborUnit: Serenity.StringEditor;
        LaborCost: Serenity.DecimalEditor;
        InlabUnit: Serenity.StringEditor;
        InlabCost: Serenity.DecimalEditor;
        InmatUnit: Serenity.StringEditor;
        InmatCost: Serenity.DecimalEditor;
        MiscUnit: Serenity.StringEditor;
        MiscCost: Serenity.DecimalEditor;
        Restrict0: Serenity.StringEditor;
        Restrict1: Serenity.StringEditor;
        Restrict2: Serenity.StringEditor;
        Restrict3: Serenity.StringEditor;
        Restrict4: Serenity.StringEditor;
        Restrict5: Serenity.StringEditor;
        Restrict6: Serenity.StringEditor;
        Restrict7: Serenity.StringEditor;
        Restrict8: Serenity.StringEditor;
        Restrict9: Serenity.StringEditor;
        Require0: Serenity.StringEditor;
        Require1: Serenity.StringEditor;
        Require2: Serenity.StringEditor;
        Require3: Serenity.StringEditor;
        Require4: Serenity.StringEditor;
        Require5: Serenity.StringEditor;
        Require6: Serenity.StringEditor;
        Require7: Serenity.StringEditor;
        Require8: Serenity.StringEditor;
        Require9: Serenity.StringEditor;
        AcctMachine: Serenity.StringEditor;
        AcctEnergy: Serenity.StringEditor;
        AcctWater: Serenity.StringEditor;
        AcctRental: Serenity.StringEditor;
        AcctLabor: Serenity.StringEditor;
        AcctInlab: Serenity.StringEditor;
        AcctInmat: Serenity.StringEditor;
        AcctMisc: Serenity.StringEditor;
    }
}
declare namespace Matrix.MasterData {
    interface WorkCentreRow {
        Recnum?: number;
        WorkCentre?: string;
        Description?: string;
        Suspended?: boolean;
        Critical?: boolean;
        BranchNo?: string;
        NoOfPersons?: number;
        NoOfShifts?: number;
        FirstSetupHr?: number;
        FirstCleanHr?: number;
        OtherSetupHr?: number;
        OtherCleanHr?: number;
        QueueHr?: number;
        MachineUnit?: string;
        MachineCost?: number;
        EnergyUnit?: string;
        EnergyCost?: number;
        WaterUnit?: string;
        WaterCost?: number;
        RentalUnit?: string;
        RentalCost?: number;
        LaborUnit?: string;
        LaborCost?: number;
        InlabUnit?: string;
        InlabCost?: number;
        InmatUnit?: string;
        InmatCost?: number;
        MiscUnit?: string;
        MiscCost?: number;
        Restrict0?: string;
        Restrict1?: string;
        Restrict2?: string;
        Restrict3?: string;
        Restrict4?: string;
        Restrict5?: string;
        Restrict6?: string;
        Restrict7?: string;
        Restrict8?: string;
        Restrict9?: string;
        Require0?: string;
        Require1?: string;
        Require2?: string;
        Require3?: string;
        Require4?: string;
        Require5?: string;
        Require6?: string;
        Require7?: string;
        Require8?: string;
        Require9?: string;
        AcctMachine?: string;
        AcctEnergy?: string;
        AcctWater?: string;
        AcctRental?: string;
        AcctLabor?: string;
        AcctInlab?: string;
        AcctInmat?: string;
        AcctMisc?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        BrevisedDate?: string;
        BrevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        OperHrsBasis?: string;
        NoOfMachines?: number;
        CapacityUnit?: string;
    }
    namespace WorkCentreRow {
        const idProperty = "Recnum";
        const nameProperty = "WorkCentre";
        const localTextPrefix = "MasterData.WorkCentre";
        namespace Fields {
            const Recnum: string;
            const WorkCentre: string;
            const Description: string;
            const Suspended: string;
            const Critical: string;
            const BranchNo: string;
            const NoOfPersons: string;
            const NoOfShifts: string;
            const FirstSetupHr: string;
            const FirstCleanHr: string;
            const OtherSetupHr: string;
            const OtherCleanHr: string;
            const QueueHr: string;
            const MachineUnit: string;
            const MachineCost: string;
            const EnergyUnit: string;
            const EnergyCost: string;
            const WaterUnit: string;
            const WaterCost: string;
            const RentalUnit: string;
            const RentalCost: string;
            const LaborUnit: string;
            const LaborCost: string;
            const InlabUnit: string;
            const InlabCost: string;
            const InmatUnit: string;
            const InmatCost: string;
            const MiscUnit: string;
            const MiscCost: string;
            const Restrict0: string;
            const Restrict1: string;
            const Restrict2: string;
            const Restrict3: string;
            const Restrict4: string;
            const Restrict5: string;
            const Restrict6: string;
            const Restrict7: string;
            const Restrict8: string;
            const Restrict9: string;
            const Require0: string;
            const Require1: string;
            const Require2: string;
            const Require3: string;
            const Require4: string;
            const Require5: string;
            const Require6: string;
            const Require7: string;
            const Require8: string;
            const Require9: string;
            const AcctMachine: string;
            const AcctEnergy: string;
            const AcctWater: string;
            const AcctRental: string;
            const AcctLabor: string;
            const AcctInlab: string;
            const AcctInmat: string;
            const AcctMisc: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const BrevisedDate: string;
            const BrevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const OperHrsBasis: string;
            const NoOfMachines: string;
            const CapacityUnit: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace WorkCentreService {
        const baseUrl = "MasterData/WorkCentre";
        function Create(request: Serenity.SaveRequest<WorkCentreRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<WorkCentreRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<WorkCentreRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<WorkCentreRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.MasterData {
}
declare namespace Matrix.MasterData {
    class WorkflowForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface WorkflowForm {
        Workflowname: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Tablename: Serenity.StringEditor;
        Workflowtype: Serenity.IntegerEditor;
        Suspended: Serenity.BooleanEditor;
        Seqno: Serenity.IntegerEditor;
        Xoml: Serenity.TextAreaEditor;
        Rules: Serenity.TextAreaEditor;
        Published: Serenity.BooleanEditor;
        Publishedxoml: Serenity.TextAreaEditor;
        Publishedrules: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.MasterData {
    interface WorkflowRow {
        Workflowname?: string;
        Description?: string;
        Tablename?: string;
        Workflowtype?: number;
        Seqno?: number;
        Xoml?: string;
        Rules?: string;
        Suspended?: boolean;
        Published?: boolean;
        Publishedxoml?: string;
        Publishedrules?: string;
        Createdby?: string;
        Createddate?: string;
        Revisedby?: string;
        Reviseddate?: string;
    }
    namespace WorkflowRow {
        const idProperty = "Workflowname";
        const nameProperty = "Workflowname";
        const localTextPrefix = "MasterData.Workflow";
        namespace Fields {
            const Workflowname: string;
            const Description: string;
            const Tablename: string;
            const Workflowtype: string;
            const Seqno: string;
            const Xoml: string;
            const Rules: string;
            const Suspended: string;
            const Published: string;
            const Publishedxoml: string;
            const Publishedrules: string;
            const Createdby: string;
            const Createddate: string;
            const Revisedby: string;
            const Reviseddate: string;
        }
    }
}
declare namespace Matrix.MasterData {
    namespace WorkflowService {
        const baseUrl = "MasterData/Workflow";
        function Create(request: Serenity.SaveRequest<WorkflowRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<WorkflowRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<WorkflowRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<WorkflowRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Membership {
    class ChangePasswordForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ChangePasswordForm {
        OldPassword: Serenity.PasswordEditor;
        NewPassword: Serenity.PasswordEditor;
        ConfirmPassword: Serenity.PasswordEditor;
    }
}
declare namespace Matrix.Membership {
    interface ChangePasswordRequest extends Serenity.ServiceRequest {
        OldPassword?: string;
        NewPassword?: string;
        ConfirmPassword?: string;
    }
}
declare namespace Matrix.Membership {
    class ForgotPasswordForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ForgotPasswordForm {
        Email: Serenity.EmailEditor;
    }
}
declare namespace Matrix.Membership {
    interface ForgotPasswordRequest extends Serenity.ServiceRequest {
        Email?: string;
    }
}
declare namespace Matrix.Membership {
    class LoginForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface LoginForm {
        Username: Serenity.StringEditor;
        Password: Serenity.PasswordEditor;
        CompanyCode: Serenity.LookupEditor;
    }
}
declare namespace Matrix.Membership {
    interface LoginRequest extends Serenity.ServiceRequest {
        Username?: string;
        Password?: string;
        CompanyCode?: string;
    }
}
declare namespace Matrix.Membership {
    class ResetPasswordForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ResetPasswordForm {
        NewPassword: Serenity.PasswordEditor;
        ConfirmPassword: Serenity.PasswordEditor;
    }
}
declare namespace Matrix.Membership {
    interface ResetPasswordRequest extends Serenity.ServiceRequest {
        Token?: string;
        NewPassword?: string;
        ConfirmPassword?: string;
    }
}
declare namespace Matrix.Membership {
    class SignUpForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface SignUpForm {
        DisplayName: Serenity.StringEditor;
        Email: Serenity.EmailEditor;
        ConfirmEmail: Serenity.EmailEditor;
        Password: Serenity.PasswordEditor;
        ConfirmPassword: Serenity.PasswordEditor;
    }
}
declare namespace Matrix.Membership {
    interface SignUpRequest extends Serenity.ServiceRequest {
        DisplayName?: string;
        Email?: string;
        Password?: string;
    }
}
declare namespace Microsoft.Enums {
    enum ItemType {
        StandardStockItem = 0,
        StandardAssortment = 1,
        ConfiguredAssortment = 2,
        NonStockItem = 3,
    }
}
declare namespace Matrix.Modules.Development {
}
declare namespace Matrix.Modules.Development {
    namespace TableExplorerService {
        const baseUrl = "Development/TableExplorer";
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<TableExplorerColumns>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const List: string;
        }
    }
}
declare namespace Matrix.Production {
}
declare namespace Matrix.Production {
    class BomForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface BomForm {
        BomNo: Serenity.StringEditor;
        Suspended: Serenity.StringEditor;
        AssmItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        StdOutput: Serenity.DecimalEditor;
        EffectFrom: Serenity.DateEditor;
        EffectTo: Serenity.DateEditor;
        PartsVerified: Serenity.StringEditor;
        ProcVerified: Serenity.StringEditor;
        EcnRequired: Serenity.StringEditor;
        BranchNo: Serenity.StringEditor;
        AssemblyLine: Serenity.StringEditor;
        FixedAsmLine: Serenity.StringEditor;
        WorkEstBasis: Serenity.StringEditor;
        StdLotSize: Serenity.DecimalEditor;
        MinLotSize: Serenity.DecimalEditor;
        MaxLotSize: Serenity.DecimalEditor;
        ScrapRate: Serenity.DecimalEditor;
        LastLineNo: Serenity.DecimalEditor;
        LastLogNo: Serenity.DecimalEditor;
        PartsCount: Serenity.DecimalEditor;
        RouteCount: Serenity.DecimalEditor;
        ByproCount: Serenity.DecimalEditor;
        ByproShare: Serenity.DecimalEditor;
        MnproShare: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        LockType: Serenity.StringEditor;
        LockRefNo: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        LastEcnNo: Serenity.StringEditor;
        MassCngId: Serenity.StringEditor;
        AllowChgJob: Serenity.StringEditor;
        NetWt: Serenity.DecimalEditor;
        NetWtUom: Serenity.StringEditor;
        BomRevision: Serenity.StringEditor;
        Flag: Serenity.StringEditor;
        HoldBy: Serenity.StringEditor;
        LastPartsSeqNo: Serenity.DecimalEditor;
        IsApproved: Serenity.StringEditor;
        ApprovedBy: Serenity.StringEditor;
        Preapprove: Serenity.StringEditor;
        ApprovedDate: Serenity.DateEditor;
        Remarks: Serenity.StringEditor;
        IssueRunnerWaste: Serenity.StringEditor;
        RunnerWasteWt: Serenity.DecimalEditor;
        RunnerWasteUom: Serenity.StringEditor;
        UserDefinedField1: Serenity.StringEditor;
        UserDefinedField2: Serenity.StringEditor;
        UserDefinedField3: Serenity.StringEditor;
        UserDefinedField4: Serenity.StringEditor;
        UserDefinedField5: Serenity.StringEditor;
        UserDefinedField6: Serenity.StringEditor;
        UserDefinedField7: Serenity.StringEditor;
        UserDefinedField8: Serenity.StringEditor;
        UserDefinedField9: Serenity.StringEditor;
        UserDefinedField10: Serenity.StringEditor;
        UserDefinedField11: Serenity.StringEditor;
        UserDefinedField12: Serenity.StringEditor;
        UserDefinedField13: Serenity.StringEditor;
        UserDefinedField14: Serenity.StringEditor;
        UserDefinedField15: Serenity.StringEditor;
        UserDefinedField16: Serenity.StringEditor;
        UserDefinedField17: Serenity.StringEditor;
        UserDefinedField18: Serenity.StringEditor;
        UserDefinedField19: Serenity.StringEditor;
        UserDefinedField20: Serenity.StringEditor;
        AllowRohsMatOnly: Serenity.BooleanEditor;
        IssueExtraRunnerWaste: Serenity.BooleanEditor;
        Phantom: Serenity.BooleanEditor;
        DieCutter: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Production {
}
declare namespace Matrix.Production {
    class BomMaterialForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface BomMaterialForm {
        BomNo: Serenity.StringEditor;
        SeqNo: Serenity.DecimalEditor;
        PartItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        QtyPer: Serenity.DecimalEditor;
        WithAltern: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        EntrySeqNo: Serenity.DecimalEditor;
        AssmItemNo: Serenity.StringEditor;
        ScrapRate: Serenity.DecimalEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        LocCount: Serenity.DecimalEditor;
        BlowThruBomNo: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
        LastAltSeqNo: Serenity.DecimalEditor;
        LastEcnNo: Serenity.StringEditor;
        RunnerWaste: Serenity.StringEditor;
        RunnerWasteRate: Serenity.DecimalEditor;
        UserDefinedField1: Serenity.StringEditor;
        UserDefinedField2: Serenity.StringEditor;
        UserDefinedField3: Serenity.StringEditor;
        UserDefinedField4: Serenity.StringEditor;
        UserDefinedField5: Serenity.StringEditor;
        UserDefinedField6: Serenity.StringEditor;
        UserDefinedField7: Serenity.StringEditor;
        UserDefinedField8: Serenity.StringEditor;
        UserDefinedField9: Serenity.StringEditor;
        UserDefinedField10: Serenity.StringEditor;
        UserDefinedField11: Serenity.StringEditor;
        UserDefinedField12: Serenity.StringEditor;
        UserDefinedField13: Serenity.StringEditor;
        UserDefinedField14: Serenity.StringEditor;
        UserDefinedField15: Serenity.StringEditor;
        UserDefinedField16: Serenity.StringEditor;
        UserDefinedField17: Serenity.StringEditor;
        UserDefinedField18: Serenity.StringEditor;
        UserDefinedField19: Serenity.StringEditor;
        UserDefinedField20: Serenity.StringEditor;
        RohsCompliance: Serenity.BooleanEditor;
        Approved: Serenity.BooleanEditor;
        Uom2: Serenity.StringEditor;
        QtyPer2: Serenity.DecimalEditor;
        WorkCentre: Serenity.StringEditor;
        QuotationScrapQty: Serenity.DecimalEditor;
        QuotationScrapRate: Serenity.DecimalEditor;
        QuotationQty: Serenity.DecimalEditor;
        ShowCost: Serenity.BooleanEditor;
        QtyBeforeConversion: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Production {
    interface BomMaterialRow {
        Recnum?: number;
        BomNo?: string;
        SeqNo?: number;
        PartItemNo?: string;
        Description?: string;
        Uom?: string;
        QtyPer?: number;
        WithAltern?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        EntrySeqNo?: number;
        AssmItemNo?: string;
        ScrapRate?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        LocCount?: number;
        BlowThruBomNo?: string;
        Remarks?: string;
        LastAltSeqNo?: number;
        LastEcnNo?: string;
        RunnerWaste?: string;
        RunnerWasteRate?: number;
        UserDefinedField1?: string;
        UserDefinedField2?: string;
        UserDefinedField3?: string;
        UserDefinedField4?: string;
        UserDefinedField5?: string;
        UserDefinedField6?: string;
        UserDefinedField7?: string;
        UserDefinedField8?: string;
        UserDefinedField9?: string;
        UserDefinedField10?: string;
        UserDefinedField11?: string;
        UserDefinedField12?: string;
        UserDefinedField13?: string;
        UserDefinedField14?: string;
        UserDefinedField15?: string;
        UserDefinedField16?: string;
        UserDefinedField17?: string;
        UserDefinedField18?: string;
        UserDefinedField19?: string;
        UserDefinedField20?: string;
        RohsCompliance?: boolean;
        Approved?: boolean;
        Uom2?: string;
        QtyPer2?: number;
        WorkCentre?: string;
        QuotationScrapQty?: number;
        QuotationScrapRate?: number;
        QuotationQty?: number;
        ShowCost?: boolean;
        QtyBeforeConversion?: number;
        BomNoRecnum?: number;
        BomNoSuspended?: string;
        BomNoAssmItemNo?: string;
        BomNoDescription?: string;
        BomNoUom?: string;
        BomNoStdOutput?: number;
        BomNoEffectFrom?: string;
        BomNoEffectTo?: string;
        BomNoPartsVerified?: string;
        BomNoProcVerified?: string;
        BomNoEcnRequired?: string;
        BomNoBranchNo?: string;
        BomNoAssemblyLine?: string;
        BomNoFixedAsmLine?: string;
        BomNoWorkEstBasis?: string;
        BomNoStdLotSize?: number;
        BomNoMinLotSize?: number;
        BomNoMaxLotSize?: number;
        BomNoScrapRate?: number;
        BomNoLastLineNo?: number;
        BomNoLastLogNo?: number;
        BomNoPartsCount?: number;
        BomNoRouteCount?: number;
        BomNoByproCount?: number;
        BomNoByproShare?: number;
        BomNoMnproShare?: number;
        BomNoCreatedDate?: string;
        BomNoCreatedBy?: string;
        BomNoRevisedDate?: string;
        BomNoRevisedBy?: string;
        BomNoLockType?: string;
        BomNoLockRefNo?: string;
        BomNoOwnerBranch?: string;
        BomNoSourceBranch?: string;
        BomNoLastEcnNo?: string;
        BomNoMassCngId?: string;
        BomNoAllowChgJob?: string;
        BomNoNetWt?: number;
        BomNoNetWtUom?: string;
        BomNoBomRevision?: string;
        BomNoFlag?: string;
        BomNoHoldBy?: string;
        BomNoLastPartsSeqNo?: number;
        BomNoIsApproved?: string;
        BomNoApprovedBy?: string;
        BomNoPreapprove?: string;
        BomNoApprovedDate?: string;
        BomNoRemarks?: string;
        BomNoIssueRunnerWaste?: string;
        BomNoRunnerWasteWt?: number;
        BomNoRunnerWasteUom?: string;
        BomNoUserDefinedField1?: string;
        BomNoUserDefinedField2?: string;
        BomNoUserDefinedField3?: string;
        BomNoUserDefinedField4?: string;
        BomNoUserDefinedField5?: string;
        BomNoUserDefinedField6?: string;
        BomNoUserDefinedField7?: string;
        BomNoUserDefinedField8?: string;
        BomNoUserDefinedField9?: string;
        BomNoUserDefinedField10?: string;
        BomNoUserDefinedField11?: string;
        BomNoUserDefinedField12?: string;
        BomNoUserDefinedField13?: string;
        BomNoUserDefinedField14?: string;
        BomNoUserDefinedField15?: string;
        BomNoUserDefinedField16?: string;
        BomNoUserDefinedField17?: string;
        BomNoUserDefinedField18?: string;
        BomNoUserDefinedField19?: string;
        BomNoUserDefinedField20?: string;
        BomNoAllowRohsMatOnly?: boolean;
        BomNoIssueExtraRunnerWaste?: boolean;
        BomNoPhantom?: boolean;
        BomNoDieCutter?: number;
    }
    namespace BomMaterialRow {
        const idProperty = "Recnum";
        const nameProperty = "BomNo";
        const localTextPrefix = "Production.BomMaterial";
        namespace Fields {
            const Recnum: string;
            const BomNo: string;
            const SeqNo: string;
            const PartItemNo: string;
            const Description: string;
            const Uom: string;
            const QtyPer: string;
            const WithAltern: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const EntrySeqNo: string;
            const AssmItemNo: string;
            const ScrapRate: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const LocCount: string;
            const BlowThruBomNo: string;
            const Remarks: string;
            const LastAltSeqNo: string;
            const LastEcnNo: string;
            const RunnerWaste: string;
            const RunnerWasteRate: string;
            const UserDefinedField1: string;
            const UserDefinedField2: string;
            const UserDefinedField3: string;
            const UserDefinedField4: string;
            const UserDefinedField5: string;
            const UserDefinedField6: string;
            const UserDefinedField7: string;
            const UserDefinedField8: string;
            const UserDefinedField9: string;
            const UserDefinedField10: string;
            const UserDefinedField11: string;
            const UserDefinedField12: string;
            const UserDefinedField13: string;
            const UserDefinedField14: string;
            const UserDefinedField15: string;
            const UserDefinedField16: string;
            const UserDefinedField17: string;
            const UserDefinedField18: string;
            const UserDefinedField19: string;
            const UserDefinedField20: string;
            const RohsCompliance: string;
            const Approved: string;
            const Uom2: string;
            const QtyPer2: string;
            const WorkCentre: string;
            const QuotationScrapQty: string;
            const QuotationScrapRate: string;
            const QuotationQty: string;
            const ShowCost: string;
            const QtyBeforeConversion: string;
            const BomNoRecnum: string;
            const BomNoSuspended: string;
            const BomNoAssmItemNo: string;
            const BomNoDescription: string;
            const BomNoUom: string;
            const BomNoStdOutput: string;
            const BomNoEffectFrom: string;
            const BomNoEffectTo: string;
            const BomNoPartsVerified: string;
            const BomNoProcVerified: string;
            const BomNoEcnRequired: string;
            const BomNoBranchNo: string;
            const BomNoAssemblyLine: string;
            const BomNoFixedAsmLine: string;
            const BomNoWorkEstBasis: string;
            const BomNoStdLotSize: string;
            const BomNoMinLotSize: string;
            const BomNoMaxLotSize: string;
            const BomNoScrapRate: string;
            const BomNoLastLineNo: string;
            const BomNoLastLogNo: string;
            const BomNoPartsCount: string;
            const BomNoRouteCount: string;
            const BomNoByproCount: string;
            const BomNoByproShare: string;
            const BomNoMnproShare: string;
            const BomNoCreatedDate: string;
            const BomNoCreatedBy: string;
            const BomNoRevisedDate: string;
            const BomNoRevisedBy: string;
            const BomNoLockType: string;
            const BomNoLockRefNo: string;
            const BomNoOwnerBranch: string;
            const BomNoSourceBranch: string;
            const BomNoLastEcnNo: string;
            const BomNoMassCngId: string;
            const BomNoAllowChgJob: string;
            const BomNoNetWt: string;
            const BomNoNetWtUom: string;
            const BomNoBomRevision: string;
            const BomNoFlag: string;
            const BomNoHoldBy: string;
            const BomNoLastPartsSeqNo: string;
            const BomNoIsApproved: string;
            const BomNoApprovedBy: string;
            const BomNoPreapprove: string;
            const BomNoApprovedDate: string;
            const BomNoRemarks: string;
            const BomNoIssueRunnerWaste: string;
            const BomNoRunnerWasteWt: string;
            const BomNoRunnerWasteUom: string;
            const BomNoUserDefinedField1: string;
            const BomNoUserDefinedField2: string;
            const BomNoUserDefinedField3: string;
            const BomNoUserDefinedField4: string;
            const BomNoUserDefinedField5: string;
            const BomNoUserDefinedField6: string;
            const BomNoUserDefinedField7: string;
            const BomNoUserDefinedField8: string;
            const BomNoUserDefinedField9: string;
            const BomNoUserDefinedField10: string;
            const BomNoUserDefinedField11: string;
            const BomNoUserDefinedField12: string;
            const BomNoUserDefinedField13: string;
            const BomNoUserDefinedField14: string;
            const BomNoUserDefinedField15: string;
            const BomNoUserDefinedField16: string;
            const BomNoUserDefinedField17: string;
            const BomNoUserDefinedField18: string;
            const BomNoUserDefinedField19: string;
            const BomNoUserDefinedField20: string;
            const BomNoAllowRohsMatOnly: string;
            const BomNoIssueExtraRunnerWaste: string;
            const BomNoPhantom: string;
            const BomNoDieCutter: string;
        }
    }
}
declare namespace Matrix.Production {
    namespace BomMaterialService {
        const baseUrl = "Production/BomMaterial";
        function Create(request: Serenity.SaveRequest<BomMaterialRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<BomMaterialRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<BomMaterialRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<BomMaterialRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Production {
}
declare namespace Matrix.Production {
    class BomRoutingStepForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface BomRoutingStepForm {
        BomNo: Serenity.StringEditor;
        SeqNo: Serenity.DecimalEditor;
        OpCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Ticketed: Serenity.StringEditor;
        Reported: Serenity.StringEditor;
        ProdnMode: Serenity.StringEditor;
        WorkCentre: Serenity.StringEditor;
        FixedWcentre: Serenity.StringEditor;
        NoOfWorkers: Serenity.DecimalEditor;
        PieceRate: Serenity.DecimalEditor;
        SubconVendor: Serenity.StringEditor;
        SubconRate: Serenity.DecimalEditor;
        FixedVendor: Serenity.StringEditor;
        MachLoadHr: Serenity.DecimalEditor;
        ManLoadHr: Serenity.DecimalEditor;
        MachProcessHr: Serenity.DecimalEditor;
        ManProcessHr: Serenity.DecimalEditor;
        MachUnloadHr: Serenity.DecimalEditor;
        ManUnloadHr: Serenity.DecimalEditor;
        MachineCost: Serenity.DecimalEditor;
        EnergyCost: Serenity.DecimalEditor;
        WaterCost: Serenity.DecimalEditor;
        RentalCost: Serenity.DecimalEditor;
        LaborCost: Serenity.DecimalEditor;
        InlabCost: Serenity.DecimalEditor;
        InmatCost: Serenity.DecimalEditor;
        MiscCost: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        Specifications: Serenity.StringEditor;
        DependTo: Serenity.DecimalEditor;
        Dependency: Serenity.StringEditor;
        LagHour: Serenity.DecimalEditor;
        MachineNo: Serenity.StringEditor;
        MoldNo: Serenity.StringEditor;
        UserDefinedField1: Serenity.StringEditor;
        UserDefinedField2: Serenity.StringEditor;
        UserDefinedField3: Serenity.StringEditor;
        UserDefinedField4: Serenity.StringEditor;
        UserDefinedField5: Serenity.StringEditor;
        UserDefinedField6: Serenity.StringEditor;
        UserDefinedField7: Serenity.StringEditor;
        UserDefinedField8: Serenity.StringEditor;
        UserDefinedField9: Serenity.StringEditor;
        UserDefinedField10: Serenity.StringEditor;
        UserDefinedField11: Serenity.StringEditor;
        UserDefinedField12: Serenity.StringEditor;
        UserDefinedField13: Serenity.StringEditor;
        UserDefinedField14: Serenity.StringEditor;
        UserDefinedField15: Serenity.StringEditor;
        UserDefinedField16: Serenity.StringEditor;
        UserDefinedField17: Serenity.StringEditor;
        UserDefinedField18: Serenity.StringEditor;
        UserDefinedField19: Serenity.StringEditor;
        UserDefinedField20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Production {
    interface BomRoutingStepRow {
        Recnum?: number;
        BomNo?: string;
        SeqNo?: number;
        OpCode?: string;
        Description?: string;
        Ticketed?: string;
        Reported?: string;
        ProdnMode?: string;
        WorkCentre?: string;
        FixedWcentre?: string;
        NoOfWorkers?: number;
        PieceRate?: number;
        SubconVendor?: string;
        SubconRate?: number;
        FixedVendor?: string;
        MachLoadHr?: number;
        ManLoadHr?: number;
        MachProcessHr?: number;
        ManProcessHr?: number;
        MachUnloadHr?: number;
        ManUnloadHr?: number;
        MachineCost?: number;
        EnergyCost?: number;
        WaterCost?: number;
        RentalCost?: number;
        LaborCost?: number;
        InlabCost?: number;
        InmatCost?: number;
        MiscCost?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Specifications?: string;
        DependTo?: number;
        Dependency?: string;
        LagHour?: number;
        MachineNo?: string;
        MoldNo?: string;
        UserDefinedField1?: string;
        UserDefinedField2?: string;
        UserDefinedField3?: string;
        UserDefinedField4?: string;
        UserDefinedField5?: string;
        UserDefinedField6?: string;
        UserDefinedField7?: string;
        UserDefinedField8?: string;
        UserDefinedField9?: string;
        UserDefinedField10?: string;
        UserDefinedField11?: string;
        UserDefinedField12?: string;
        UserDefinedField13?: string;
        UserDefinedField14?: string;
        UserDefinedField15?: string;
        UserDefinedField16?: string;
        UserDefinedField17?: string;
        UserDefinedField18?: string;
        UserDefinedField19?: string;
        UserDefinedField20?: string;
        BomNoRecnum?: number;
        BomNoSuspended?: string;
        BomNoAssmItemNo?: string;
        BomNoDescription?: string;
        BomNoUom?: string;
        BomNoStdOutput?: number;
        BomNoEffectFrom?: string;
        BomNoEffectTo?: string;
        BomNoPartsVerified?: string;
        BomNoProcVerified?: string;
        BomNoEcnRequired?: string;
        BomNoBranchNo?: string;
        BomNoAssemblyLine?: string;
        BomNoFixedAsmLine?: string;
        BomNoWorkEstBasis?: string;
        BomNoStdLotSize?: number;
        BomNoMinLotSize?: number;
        BomNoMaxLotSize?: number;
        BomNoScrapRate?: number;
        BomNoLastLineNo?: number;
        BomNoLastLogNo?: number;
        BomNoPartsCount?: number;
        BomNoRouteCount?: number;
        BomNoByproCount?: number;
        BomNoByproShare?: number;
        BomNoMnproShare?: number;
        BomNoCreatedDate?: string;
        BomNoCreatedBy?: string;
        BomNoRevisedDate?: string;
        BomNoRevisedBy?: string;
        BomNoLockType?: string;
        BomNoLockRefNo?: string;
        BomNoOwnerBranch?: string;
        BomNoSourceBranch?: string;
        BomNoLastEcnNo?: string;
        BomNoMassCngId?: string;
        BomNoAllowChgJob?: string;
        BomNoNetWt?: number;
        BomNoNetWtUom?: string;
        BomNoBomRevision?: string;
        BomNoFlag?: string;
        BomNoHoldBy?: string;
        BomNoLastPartsSeqNo?: number;
        BomNoIsApproved?: string;
        BomNoApprovedBy?: string;
        BomNoPreapprove?: string;
        BomNoApprovedDate?: string;
        BomNoRemarks?: string;
        BomNoIssueRunnerWaste?: string;
        BomNoRunnerWasteWt?: number;
        BomNoRunnerWasteUom?: string;
        BomNoUserDefinedField1?: string;
        BomNoUserDefinedField2?: string;
        BomNoUserDefinedField3?: string;
        BomNoUserDefinedField4?: string;
        BomNoUserDefinedField5?: string;
        BomNoUserDefinedField6?: string;
        BomNoUserDefinedField7?: string;
        BomNoUserDefinedField8?: string;
        BomNoUserDefinedField9?: string;
        BomNoUserDefinedField10?: string;
        BomNoUserDefinedField11?: string;
        BomNoUserDefinedField12?: string;
        BomNoUserDefinedField13?: string;
        BomNoUserDefinedField14?: string;
        BomNoUserDefinedField15?: string;
        BomNoUserDefinedField16?: string;
        BomNoUserDefinedField17?: string;
        BomNoUserDefinedField18?: string;
        BomNoUserDefinedField19?: string;
        BomNoUserDefinedField20?: string;
        BomNoAllowRohsMatOnly?: boolean;
        BomNoIssueExtraRunnerWaste?: boolean;
        BomNoPhantom?: boolean;
        BomNoDieCutter?: number;
    }
    namespace BomRoutingStepRow {
        const idProperty = "Recnum";
        const nameProperty = "BomNo";
        const localTextPrefix = "Production.BomRoutingStep";
        namespace Fields {
            const Recnum: string;
            const BomNo: string;
            const SeqNo: string;
            const OpCode: string;
            const Description: string;
            const Ticketed: string;
            const Reported: string;
            const ProdnMode: string;
            const WorkCentre: string;
            const FixedWcentre: string;
            const NoOfWorkers: string;
            const PieceRate: string;
            const SubconVendor: string;
            const SubconRate: string;
            const FixedVendor: string;
            const MachLoadHr: string;
            const ManLoadHr: string;
            const MachProcessHr: string;
            const ManProcessHr: string;
            const MachUnloadHr: string;
            const ManUnloadHr: string;
            const MachineCost: string;
            const EnergyCost: string;
            const WaterCost: string;
            const RentalCost: string;
            const LaborCost: string;
            const InlabCost: string;
            const InmatCost: string;
            const MiscCost: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Specifications: string;
            const DependTo: string;
            const Dependency: string;
            const LagHour: string;
            const MachineNo: string;
            const MoldNo: string;
            const UserDefinedField1: string;
            const UserDefinedField2: string;
            const UserDefinedField3: string;
            const UserDefinedField4: string;
            const UserDefinedField5: string;
            const UserDefinedField6: string;
            const UserDefinedField7: string;
            const UserDefinedField8: string;
            const UserDefinedField9: string;
            const UserDefinedField10: string;
            const UserDefinedField11: string;
            const UserDefinedField12: string;
            const UserDefinedField13: string;
            const UserDefinedField14: string;
            const UserDefinedField15: string;
            const UserDefinedField16: string;
            const UserDefinedField17: string;
            const UserDefinedField18: string;
            const UserDefinedField19: string;
            const UserDefinedField20: string;
            const BomNoRecnum: string;
            const BomNoSuspended: string;
            const BomNoAssmItemNo: string;
            const BomNoDescription: string;
            const BomNoUom: string;
            const BomNoStdOutput: string;
            const BomNoEffectFrom: string;
            const BomNoEffectTo: string;
            const BomNoPartsVerified: string;
            const BomNoProcVerified: string;
            const BomNoEcnRequired: string;
            const BomNoBranchNo: string;
            const BomNoAssemblyLine: string;
            const BomNoFixedAsmLine: string;
            const BomNoWorkEstBasis: string;
            const BomNoStdLotSize: string;
            const BomNoMinLotSize: string;
            const BomNoMaxLotSize: string;
            const BomNoScrapRate: string;
            const BomNoLastLineNo: string;
            const BomNoLastLogNo: string;
            const BomNoPartsCount: string;
            const BomNoRouteCount: string;
            const BomNoByproCount: string;
            const BomNoByproShare: string;
            const BomNoMnproShare: string;
            const BomNoCreatedDate: string;
            const BomNoCreatedBy: string;
            const BomNoRevisedDate: string;
            const BomNoRevisedBy: string;
            const BomNoLockType: string;
            const BomNoLockRefNo: string;
            const BomNoOwnerBranch: string;
            const BomNoSourceBranch: string;
            const BomNoLastEcnNo: string;
            const BomNoMassCngId: string;
            const BomNoAllowChgJob: string;
            const BomNoNetWt: string;
            const BomNoNetWtUom: string;
            const BomNoBomRevision: string;
            const BomNoFlag: string;
            const BomNoHoldBy: string;
            const BomNoLastPartsSeqNo: string;
            const BomNoIsApproved: string;
            const BomNoApprovedBy: string;
            const BomNoPreapprove: string;
            const BomNoApprovedDate: string;
            const BomNoRemarks: string;
            const BomNoIssueRunnerWaste: string;
            const BomNoRunnerWasteWt: string;
            const BomNoRunnerWasteUom: string;
            const BomNoUserDefinedField1: string;
            const BomNoUserDefinedField2: string;
            const BomNoUserDefinedField3: string;
            const BomNoUserDefinedField4: string;
            const BomNoUserDefinedField5: string;
            const BomNoUserDefinedField6: string;
            const BomNoUserDefinedField7: string;
            const BomNoUserDefinedField8: string;
            const BomNoUserDefinedField9: string;
            const BomNoUserDefinedField10: string;
            const BomNoUserDefinedField11: string;
            const BomNoUserDefinedField12: string;
            const BomNoUserDefinedField13: string;
            const BomNoUserDefinedField14: string;
            const BomNoUserDefinedField15: string;
            const BomNoUserDefinedField16: string;
            const BomNoUserDefinedField17: string;
            const BomNoUserDefinedField18: string;
            const BomNoUserDefinedField19: string;
            const BomNoUserDefinedField20: string;
            const BomNoAllowRohsMatOnly: string;
            const BomNoIssueExtraRunnerWaste: string;
            const BomNoPhantom: string;
            const BomNoDieCutter: string;
        }
    }
}
declare namespace Matrix.Production {
    namespace BomRoutingStepService {
        const baseUrl = "Production/BomRoutingStep";
        function Create(request: Serenity.SaveRequest<BomRoutingStepRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<BomRoutingStepRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<BomRoutingStepRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<BomRoutingStepRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Production {
    interface BomRow {
        Recnum?: number;
        BomNo?: string;
        Suspended?: string;
        AssmItemNo?: string;
        Description?: string;
        Uom?: string;
        StdOutput?: number;
        EffectFrom?: string;
        EffectTo?: string;
        PartsVerified?: string;
        ProcVerified?: string;
        EcnRequired?: string;
        BranchNo?: string;
        AssemblyLine?: string;
        FixedAsmLine?: string;
        WorkEstBasis?: string;
        StdLotSize?: number;
        MinLotSize?: number;
        MaxLotSize?: number;
        ScrapRate?: number;
        LastLineNo?: number;
        LastLogNo?: number;
        PartsCount?: number;
        RouteCount?: number;
        ByproCount?: number;
        ByproShare?: number;
        MnproShare?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        LockType?: string;
        LockRefNo?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        LastEcnNo?: string;
        MassCngId?: string;
        AllowChgJob?: string;
        NetWt?: number;
        NetWtUom?: string;
        BomRevision?: string;
        Flag?: string;
        HoldBy?: string;
        LastPartsSeqNo?: number;
        IsApproved?: string;
        ApprovedBy?: string;
        Preapprove?: string;
        ApprovedDate?: string;
        Remarks?: string;
        IssueRunnerWaste?: string;
        RunnerWasteWt?: number;
        RunnerWasteUom?: string;
        UserDefinedField1?: string;
        UserDefinedField2?: string;
        UserDefinedField3?: string;
        UserDefinedField4?: string;
        UserDefinedField5?: string;
        UserDefinedField6?: string;
        UserDefinedField7?: string;
        UserDefinedField8?: string;
        UserDefinedField9?: string;
        UserDefinedField10?: string;
        UserDefinedField11?: string;
        UserDefinedField12?: string;
        UserDefinedField13?: string;
        UserDefinedField14?: string;
        UserDefinedField15?: string;
        UserDefinedField16?: string;
        UserDefinedField17?: string;
        UserDefinedField18?: string;
        UserDefinedField19?: string;
        UserDefinedField20?: string;
        AllowRohsMatOnly?: boolean;
        IssueExtraRunnerWaste?: boolean;
        Phantom?: boolean;
        DieCutter?: number;
    }
    namespace BomRow {
        const idProperty = "Recnum";
        const nameProperty = "BomNo";
        const localTextPrefix = "Production.Bom";
        namespace Fields {
            const Recnum: string;
            const BomNo: string;
            const Suspended: string;
            const AssmItemNo: string;
            const Description: string;
            const Uom: string;
            const StdOutput: string;
            const EffectFrom: string;
            const EffectTo: string;
            const PartsVerified: string;
            const ProcVerified: string;
            const EcnRequired: string;
            const BranchNo: string;
            const AssemblyLine: string;
            const FixedAsmLine: string;
            const WorkEstBasis: string;
            const StdLotSize: string;
            const MinLotSize: string;
            const MaxLotSize: string;
            const ScrapRate: string;
            const LastLineNo: string;
            const LastLogNo: string;
            const PartsCount: string;
            const RouteCount: string;
            const ByproCount: string;
            const ByproShare: string;
            const MnproShare: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const LockType: string;
            const LockRefNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const LastEcnNo: string;
            const MassCngId: string;
            const AllowChgJob: string;
            const NetWt: string;
            const NetWtUom: string;
            const BomRevision: string;
            const Flag: string;
            const HoldBy: string;
            const LastPartsSeqNo: string;
            const IsApproved: string;
            const ApprovedBy: string;
            const Preapprove: string;
            const ApprovedDate: string;
            const Remarks: string;
            const IssueRunnerWaste: string;
            const RunnerWasteWt: string;
            const RunnerWasteUom: string;
            const UserDefinedField1: string;
            const UserDefinedField2: string;
            const UserDefinedField3: string;
            const UserDefinedField4: string;
            const UserDefinedField5: string;
            const UserDefinedField6: string;
            const UserDefinedField7: string;
            const UserDefinedField8: string;
            const UserDefinedField9: string;
            const UserDefinedField10: string;
            const UserDefinedField11: string;
            const UserDefinedField12: string;
            const UserDefinedField13: string;
            const UserDefinedField14: string;
            const UserDefinedField15: string;
            const UserDefinedField16: string;
            const UserDefinedField17: string;
            const UserDefinedField18: string;
            const UserDefinedField19: string;
            const UserDefinedField20: string;
            const AllowRohsMatOnly: string;
            const IssueExtraRunnerWaste: string;
            const Phantom: string;
            const DieCutter: string;
        }
    }
}
declare namespace Matrix.Production {
    namespace BomService {
        const baseUrl = "Production/Bom";
        function Create(request: Serenity.SaveRequest<BomRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<BomRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<BomRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<BomRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Production {
}
declare namespace Matrix.Production {
    class JobOrderForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface JobOrderForm {
        JobNo: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        Closed: Serenity.StringEditor;
        Issued: Serenity.StringEditor;
        Finished: Serenity.StringEditor;
        AssemblyType: Serenity.StringEditor;
        SourceSubjob: Serenity.StringEditor;
        SourceSales: Serenity.StringEditor;
        SourceAssort: Serenity.StringEditor;
        SourceRefNo: Serenity.StringEditor;
        SourceLineNo: Serenity.DecimalEditor;
        SourcePartNo: Serenity.DecimalEditor;
        IssueDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        StartDate: Serenity.DateEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        TotalQty: Serenity.DecimalEditor;
        SpecNo: Serenity.StringEditor;
        BomNo: Serenity.StringEditor;
        StdOutput: Serenity.DecimalEditor;
        ProdLotSize: Serenity.DecimalEditor;
        NoOfLots: Serenity.DecimalEditor;
        BatchedLots: Serenity.DecimalEditor;
        HrsPerLot: Serenity.DecimalEditor;
        HrsPerLotCpd: Serenity.DecimalEditor;
        BranchNo: Serenity.StringEditor;
        AssemblyLine: Serenity.StringEditor;
        JobCategory: Serenity.StringEditor;
        JobPriority: Serenity.DecimalEditor;
        HeaderVerified: Serenity.StringEditor;
        ByprodVerified: Serenity.StringEditor;
        BatchVerified: Serenity.StringEditor;
        BomVerified: Serenity.StringEditor;
        RoutingVerifed: Serenity.StringEditor;
        MatschVerified: Serenity.StringEditor;
        WrkschVerified: Serenity.StringEditor;
        CostVerified: Serenity.StringEditor;
        ByprCostShare: Serenity.DecimalEditor;
        TicketNeeded: Serenity.StringEditor;
        TicketClosed: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        PostedDate: Serenity.DateEditor;
        PostedBy: Serenity.StringEditor;
        LastLineNo: Serenity.DecimalEditor;
        LastByprodNo: Serenity.DecimalEditor;
        BatchCount: Serenity.DecimalEditor;
        LastLogNo: Serenity.DecimalEditor;
        LockType: Serenity.StringEditor;
        LockRefNo: Serenity.StringEditor;
        FgLoc: Serenity.StringEditor;
        RmLoc: Serenity.StringEditor;
        CostMaterial: Serenity.DecimalEditor;
        CostLabor: Serenity.DecimalEditor;
        CostSubcon: Serenity.DecimalEditor;
        CostMachine: Serenity.DecimalEditor;
        CostEnergy: Serenity.DecimalEditor;
        CostWater: Serenity.DecimalEditor;
        CostRental: Serenity.DecimalEditor;
        CostInlab: Serenity.DecimalEditor;
        CostInmat: Serenity.DecimalEditor;
        CostMisc: Serenity.DecimalEditor;
        CostOverhead: Serenity.DecimalEditor;
        CostEstimate: Serenity.DecimalEditor;
        CostFinished: Serenity.DecimalEditor;
        CostScrapped: Serenity.DecimalEditor;
        CostCharged: Serenity.DecimalEditor;
        CoacRmConsu: Serenity.DecimalEditor;
        CoacRmScrap: Serenity.DecimalEditor;
        CoacMaterial: Serenity.DecimalEditor;
        CoacLabor: Serenity.DecimalEditor;
        CoacSubcon: Serenity.DecimalEditor;
        CoacMachine: Serenity.DecimalEditor;
        CoacEnergy: Serenity.DecimalEditor;
        CoacWater: Serenity.DecimalEditor;
        CoacRental: Serenity.DecimalEditor;
        CoacInlab: Serenity.DecimalEditor;
        CoacInmat: Serenity.DecimalEditor;
        CoacMisc: Serenity.DecimalEditor;
        CoacOverhead: Serenity.DecimalEditor;
        CostActual: Serenity.DecimalEditor;
        CostVariance: Serenity.DecimalEditor;
        CostWip: Serenity.DecimalEditor;
        AcctWip: Serenity.StringEditor;
        AcctPvar: Serenity.StringEditor;
        AcctProdCost: Serenity.StringEditor;
        CanEdit: Serenity.StringEditor;
        LastSubNo: Serenity.DecimalEditor;
        SubjobVerified: Serenity.StringEditor;
        LotsIssued: Serenity.DecimalEditor;
        LotsFinished: Serenity.DecimalEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        FinishedType: Serenity.StringEditor;
        FinishedDate: Serenity.DateEditor;
        Specifications: Serenity.StringEditor;
        QtyNeeded: Serenity.DecimalEditor;
        ScrapRate: Serenity.DecimalEditor;
        ScrapQty: Serenity.DecimalEditor;
        QtyAdjusted: Serenity.DecimalEditor;
        NetWt: Serenity.DecimalEditor;
        NetWtUom: Serenity.StringEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        BlowThru: Serenity.StringEditor;
        Comments1: Serenity.StringEditor;
        Comments2: Serenity.StringEditor;
        Comments3: Serenity.StringEditor;
        Comments4: Serenity.StringEditor;
        LastTextNo: Serenity.DecimalEditor;
        BomRevision: Serenity.StringEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        LastLinkNo: Serenity.DecimalEditor;
        Flag: Serenity.StringEditor;
        HoldBy: Serenity.StringEditor;
        IncludeScrapRate: Serenity.StringEditor;
        UseItemMasterScrap: Serenity.StringEditor;
        WcBackflush: Serenity.StringEditor;
        Reorder: Serenity.StringEditor;
        CostRework: Serenity.DecimalEditor;
        MoldJob: Serenity.StringEditor;
        MoldDesc: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        Anlys13: Serenity.StringEditor;
        Anlys14: Serenity.StringEditor;
        ProjectNo: Serenity.StringEditor;
        SourceMrpNo: Serenity.StringEditor;
    }
}
declare namespace Matrix.Production {
}
declare namespace Matrix.Production {
    class JobOrderMaterialForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface JobOrderMaterialForm {
        JobNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        PartItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        QtyPer: Serenity.DecimalEditor;
        QtyRequired: Serenity.DecimalEditor;
        QtyReserved: Serenity.DecimalEditor;
        QtyWaitlisted: Serenity.DecimalEditor;
        QtyPurchase: Serenity.DecimalEditor;
        QtyProduce: Serenity.DecimalEditor;
        SubJobNo: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        OrderNo: Serenity.StringEditor;
        OrderDate: Serenity.DateEditor;
        PurchaseUom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        PriceCcy: Serenity.StringEditor;
        ExpectedPrice: Serenity.DecimalEditor;
        DueDate: Serenity.DateEditor;
        SchedDate: Serenity.DateEditor;
        InvCost: Serenity.DecimalEditor;
        StdCost: Serenity.DecimalEditor;
        LatCost: Serenity.DecimalEditor;
        UnitCost: Serenity.DecimalEditor;
        CostMaterial: Serenity.DecimalEditor;
        SubDueDate: Serenity.DateEditor;
        SubStartDate: Serenity.DateEditor;
        SubBomNo: Serenity.StringEditor;
        Specifications: Serenity.StringEditor;
        QtyNeeded: Serenity.DecimalEditor;
        ScrapRate: Serenity.DecimalEditor;
        ScrapQty: Serenity.DecimalEditor;
        QtyAdjusted: Serenity.DecimalEditor;
        SubQty: Serenity.DecimalEditor;
        IsAlternate: Serenity.StringEditor;
        MainLineNo: Serenity.DecimalEditor;
        UsageRate: Serenity.DecimalEditor;
        Loc: Serenity.StringEditor;
        Eod: Serenity.DateEditor;
        Edd: Serenity.DateEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        SubBlowThru: Serenity.StringEditor;
        BinQtyOut: Serenity.DecimalEditor;
        BuyMake: Serenity.StringEditor;
        IncludeScrapRate: Serenity.StringEditor;
        PoNo: Serenity.StringEditor;
        SubWcBackflush: Serenity.StringEditor;
        RunnerWaste: Serenity.StringEditor;
        ReuseRate: Serenity.DecimalEditor;
        RunnerWasteRate: Serenity.DecimalEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        SubFormulaCode: Serenity.StringEditor;
        IncludeJob: Serenity.BooleanEditor;
        QuotationScrapQty: Serenity.DecimalEditor;
        QuotationScrapRate: Serenity.DecimalEditor;
        CustomerProvided: Serenity.BooleanEditor;
        OriginalItemNo: Serenity.StringEditor;
    }
}
declare namespace Matrix.Production {
    interface JobOrderMaterialRow {
        Recnum?: number;
        JobNo?: string;
        LineNo?: number;
        PartItemNo?: string;
        Description?: string;
        Uom?: string;
        QtyPer?: number;
        QtyRequired?: number;
        QtyReserved?: number;
        QtyWaitlisted?: number;
        QtyPurchase?: number;
        QtyProduce?: number;
        SubJobNo?: string;
        VendorNo?: string;
        OrderNo?: string;
        OrderDate?: string;
        PurchaseUom?: string;
        LotSize?: number;
        PriceCcy?: string;
        ExpectedPrice?: number;
        DueDate?: string;
        SchedDate?: string;
        InvCost?: number;
        StdCost?: number;
        LatCost?: number;
        UnitCost?: number;
        CostMaterial?: number;
        SubDueDate?: string;
        SubStartDate?: string;
        SubBomNo?: string;
        Specifications?: string;
        QtyNeeded?: number;
        ScrapRate?: number;
        ScrapQty?: number;
        QtyAdjusted?: number;
        SubQty?: number;
        IsAlternate?: string;
        MainLineNo?: number;
        UsageRate?: number;
        Loc?: string;
        Eod?: string;
        Edd?: string;
        Anlys1?: string;
        Anlys2?: string;
        SubBlowThru?: string;
        BinQtyOut?: number;
        BuyMake?: string;
        IncludeScrapRate?: string;
        PoNo?: string;
        SubWcBackflush?: string;
        RunnerWaste?: string;
        ReuseRate?: number;
        RunnerWasteRate?: number;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        SubFormulaCode?: string;
        IncludeJob?: boolean;
        QuotationScrapQty?: number;
        QuotationScrapRate?: number;
        CustomerProvided?: boolean;
        OriginalItemNo?: string;
        JobNoRecnum?: number;
        JobNoPosted?: string;
        JobNoClosed?: string;
        JobNoIssued?: string;
        JobNoFinished?: string;
        JobNoAssemblyType?: string;
        JobNoSourceSubjob?: string;
        JobNoSourceSales?: string;
        JobNoSourceAssort?: string;
        JobNoSourceRefNo?: string;
        JobNoSourceLineNo?: number;
        JobNoSourcePartNo?: number;
        JobNoIssueDate?: string;
        JobNoDueDate?: string;
        JobNoStartDate?: string;
        JobNoItemNo?: string;
        JobNoDescription?: string;
        JobNoUom?: string;
        JobNoTotalQty?: number;
        JobNoSpecNo?: string;
        JobNoBomNo?: string;
        JobNoStdOutput?: number;
        JobNoProdLotSize?: number;
        JobNoNoOfLots?: number;
        JobNoBatchedLots?: number;
        JobNoHrsPerLot?: number;
        JobNoHrsPerLotCpd?: number;
        JobNoBranchNo?: string;
        JobNoAssemblyLine?: string;
        JobNoJobCategory?: string;
        JobNoJobPriority?: number;
        JobNoHeaderVerified?: string;
        JobNoByprodVerified?: string;
        JobNoBatchVerified?: string;
        JobNoBomVerified?: string;
        JobNoRoutingVerifed?: string;
        JobNoMatschVerified?: string;
        JobNoWrkschVerified?: string;
        JobNoCostVerified?: string;
        JobNoByprCostShare?: number;
        JobNoTicketNeeded?: string;
        JobNoTicketClosed?: string;
        JobNoCreatedDate?: string;
        JobNoCreatedBy?: string;
        JobNoRevisedDate?: string;
        JobNoRevisedBy?: string;
        JobNoPostedDate?: string;
        JobNoPostedBy?: string;
        JobNoLastLineNo?: number;
        JobNoLastByprodNo?: number;
        JobNoBatchCount?: number;
        JobNoLastLogNo?: number;
        JobNoLockType?: string;
        JobNoLockRefNo?: string;
        JobNoFgLoc?: string;
        JobNoRmLoc?: string;
        JobNoCostMaterial?: number;
        JobNoCostLabor?: number;
        JobNoCostSubcon?: number;
        JobNoCostMachine?: number;
        JobNoCostEnergy?: number;
        JobNoCostWater?: number;
        JobNoCostRental?: number;
        JobNoCostInlab?: number;
        JobNoCostInmat?: number;
        JobNoCostMisc?: number;
        JobNoCostOverhead?: number;
        JobNoCostEstimate?: number;
        JobNoCostFinished?: number;
        JobNoCostScrapped?: number;
        JobNoCostCharged?: number;
        JobNoCoacRmConsu?: number;
        JobNoCoacRmScrap?: number;
        JobNoCoacMaterial?: number;
        JobNoCoacLabor?: number;
        JobNoCoacSubcon?: number;
        JobNoCoacMachine?: number;
        JobNoCoacEnergy?: number;
        JobNoCoacWater?: number;
        JobNoCoacRental?: number;
        JobNoCoacInlab?: number;
        JobNoCoacInmat?: number;
        JobNoCoacMisc?: number;
        JobNoCoacOverhead?: number;
        JobNoCostActual?: number;
        JobNoCostVariance?: number;
        JobNoCostWip?: number;
        JobNoAcctWip?: string;
        JobNoAcctPvar?: string;
        JobNoAcctProdCost?: string;
        JobNoCanEdit?: string;
        JobNoLastSubNo?: number;
        JobNoSubjobVerified?: string;
        JobNoLotsIssued?: number;
        JobNoLotsFinished?: number;
        JobNoOwnerBranch?: string;
        JobNoSourceBranch?: string;
        JobNoFinishedType?: string;
        JobNoFinishedDate?: string;
        JobNoSpecifications?: string;
        JobNoQtyNeeded?: number;
        JobNoScrapRate?: number;
        JobNoScrapQty?: number;
        JobNoQtyAdjusted?: number;
        JobNoNetWt?: number;
        JobNoNetWtUom?: string;
        JobNoAnlys1?: string;
        JobNoAnlys2?: string;
        JobNoBlowThru?: string;
        JobNoComments1?: string;
        JobNoComments2?: string;
        JobNoComments3?: string;
        JobNoComments4?: string;
        JobNoLastTextNo?: number;
        JobNoBomRevision?: string;
        JobNoAnlys7?: string;
        JobNoAnlys8?: string;
        JobNoLastLinkNo?: number;
        JobNoFlag?: string;
        JobNoHoldBy?: string;
        JobNoIncludeScrapRate?: string;
        JobNoUseItemMasterScrap?: string;
        JobNoWcBackflush?: string;
        JobNoReorder?: string;
        JobNoCostRework?: number;
        JobNoMoldJob?: string;
        JobNoMoldDesc?: string;
        JobNoAnlys9?: string;
        JobNoAnlys10?: string;
        JobNoAnlys11?: string;
        JobNoAnlys12?: string;
        JobNoAnlys13?: string;
        JobNoAnlys14?: string;
        JobNoProjectNo?: string;
        JobNoSourceMrpNo?: string;
    }
    namespace JobOrderMaterialRow {
        const idProperty = "Recnum";
        const nameProperty = "JobNo";
        const localTextPrefix = "Production.JobOrderMaterial";
        namespace Fields {
            const Recnum: string;
            const JobNo: string;
            const LineNo: string;
            const PartItemNo: string;
            const Description: string;
            const Uom: string;
            const QtyPer: string;
            const QtyRequired: string;
            const QtyReserved: string;
            const QtyWaitlisted: string;
            const QtyPurchase: string;
            const QtyProduce: string;
            const SubJobNo: string;
            const VendorNo: string;
            const OrderNo: string;
            const OrderDate: string;
            const PurchaseUom: string;
            const LotSize: string;
            const PriceCcy: string;
            const ExpectedPrice: string;
            const DueDate: string;
            const SchedDate: string;
            const InvCost: string;
            const StdCost: string;
            const LatCost: string;
            const UnitCost: string;
            const CostMaterial: string;
            const SubDueDate: string;
            const SubStartDate: string;
            const SubBomNo: string;
            const Specifications: string;
            const QtyNeeded: string;
            const ScrapRate: string;
            const ScrapQty: string;
            const QtyAdjusted: string;
            const SubQty: string;
            const IsAlternate: string;
            const MainLineNo: string;
            const UsageRate: string;
            const Loc: string;
            const Eod: string;
            const Edd: string;
            const Anlys1: string;
            const Anlys2: string;
            const SubBlowThru: string;
            const BinQtyOut: string;
            const BuyMake: string;
            const IncludeScrapRate: string;
            const PoNo: string;
            const SubWcBackflush: string;
            const RunnerWaste: string;
            const ReuseRate: string;
            const RunnerWasteRate: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const SubFormulaCode: string;
            const IncludeJob: string;
            const QuotationScrapQty: string;
            const QuotationScrapRate: string;
            const CustomerProvided: string;
            const OriginalItemNo: string;
            const JobNoRecnum: string;
            const JobNoPosted: string;
            const JobNoClosed: string;
            const JobNoIssued: string;
            const JobNoFinished: string;
            const JobNoAssemblyType: string;
            const JobNoSourceSubjob: string;
            const JobNoSourceSales: string;
            const JobNoSourceAssort: string;
            const JobNoSourceRefNo: string;
            const JobNoSourceLineNo: string;
            const JobNoSourcePartNo: string;
            const JobNoIssueDate: string;
            const JobNoDueDate: string;
            const JobNoStartDate: string;
            const JobNoItemNo: string;
            const JobNoDescription: string;
            const JobNoUom: string;
            const JobNoTotalQty: string;
            const JobNoSpecNo: string;
            const JobNoBomNo: string;
            const JobNoStdOutput: string;
            const JobNoProdLotSize: string;
            const JobNoNoOfLots: string;
            const JobNoBatchedLots: string;
            const JobNoHrsPerLot: string;
            const JobNoHrsPerLotCpd: string;
            const JobNoBranchNo: string;
            const JobNoAssemblyLine: string;
            const JobNoJobCategory: string;
            const JobNoJobPriority: string;
            const JobNoHeaderVerified: string;
            const JobNoByprodVerified: string;
            const JobNoBatchVerified: string;
            const JobNoBomVerified: string;
            const JobNoRoutingVerifed: string;
            const JobNoMatschVerified: string;
            const JobNoWrkschVerified: string;
            const JobNoCostVerified: string;
            const JobNoByprCostShare: string;
            const JobNoTicketNeeded: string;
            const JobNoTicketClosed: string;
            const JobNoCreatedDate: string;
            const JobNoCreatedBy: string;
            const JobNoRevisedDate: string;
            const JobNoRevisedBy: string;
            const JobNoPostedDate: string;
            const JobNoPostedBy: string;
            const JobNoLastLineNo: string;
            const JobNoLastByprodNo: string;
            const JobNoBatchCount: string;
            const JobNoLastLogNo: string;
            const JobNoLockType: string;
            const JobNoLockRefNo: string;
            const JobNoFgLoc: string;
            const JobNoRmLoc: string;
            const JobNoCostMaterial: string;
            const JobNoCostLabor: string;
            const JobNoCostSubcon: string;
            const JobNoCostMachine: string;
            const JobNoCostEnergy: string;
            const JobNoCostWater: string;
            const JobNoCostRental: string;
            const JobNoCostInlab: string;
            const JobNoCostInmat: string;
            const JobNoCostMisc: string;
            const JobNoCostOverhead: string;
            const JobNoCostEstimate: string;
            const JobNoCostFinished: string;
            const JobNoCostScrapped: string;
            const JobNoCostCharged: string;
            const JobNoCoacRmConsu: string;
            const JobNoCoacRmScrap: string;
            const JobNoCoacMaterial: string;
            const JobNoCoacLabor: string;
            const JobNoCoacSubcon: string;
            const JobNoCoacMachine: string;
            const JobNoCoacEnergy: string;
            const JobNoCoacWater: string;
            const JobNoCoacRental: string;
            const JobNoCoacInlab: string;
            const JobNoCoacInmat: string;
            const JobNoCoacMisc: string;
            const JobNoCoacOverhead: string;
            const JobNoCostActual: string;
            const JobNoCostVariance: string;
            const JobNoCostWip: string;
            const JobNoAcctWip: string;
            const JobNoAcctPvar: string;
            const JobNoAcctProdCost: string;
            const JobNoCanEdit: string;
            const JobNoLastSubNo: string;
            const JobNoSubjobVerified: string;
            const JobNoLotsIssued: string;
            const JobNoLotsFinished: string;
            const JobNoOwnerBranch: string;
            const JobNoSourceBranch: string;
            const JobNoFinishedType: string;
            const JobNoFinishedDate: string;
            const JobNoSpecifications: string;
            const JobNoQtyNeeded: string;
            const JobNoScrapRate: string;
            const JobNoScrapQty: string;
            const JobNoQtyAdjusted: string;
            const JobNoNetWt: string;
            const JobNoNetWtUom: string;
            const JobNoAnlys1: string;
            const JobNoAnlys2: string;
            const JobNoBlowThru: string;
            const JobNoComments1: string;
            const JobNoComments2: string;
            const JobNoComments3: string;
            const JobNoComments4: string;
            const JobNoLastTextNo: string;
            const JobNoBomRevision: string;
            const JobNoAnlys7: string;
            const JobNoAnlys8: string;
            const JobNoLastLinkNo: string;
            const JobNoFlag: string;
            const JobNoHoldBy: string;
            const JobNoIncludeScrapRate: string;
            const JobNoUseItemMasterScrap: string;
            const JobNoWcBackflush: string;
            const JobNoReorder: string;
            const JobNoCostRework: string;
            const JobNoMoldJob: string;
            const JobNoMoldDesc: string;
            const JobNoAnlys9: string;
            const JobNoAnlys10: string;
            const JobNoAnlys11: string;
            const JobNoAnlys12: string;
            const JobNoAnlys13: string;
            const JobNoAnlys14: string;
            const JobNoProjectNo: string;
            const JobNoSourceMrpNo: string;
        }
    }
}
declare namespace Matrix.Production {
    namespace JobOrderMaterialService {
        const baseUrl = "Production/JobOrderMaterial";
        function Create(request: Serenity.SaveRequest<JobOrderMaterialRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<JobOrderMaterialRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<JobOrderMaterialRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<JobOrderMaterialRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Production {
}
declare namespace Matrix.Production {
    class JobOrderRoutingStepForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface JobOrderRoutingStepForm {
        JobNo: Serenity.StringEditor;
        StepNo: Serenity.DecimalEditor;
        OpCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        ProdnMode: Serenity.StringEditor;
        Ticketed: Serenity.StringEditor;
        Reported: Serenity.StringEditor;
        WorkCentre: Serenity.StringEditor;
        HrsPerLot: Serenity.DecimalEditor;
        PieceRate: Serenity.DecimalEditor;
        SubVendorNo: Serenity.StringEditor;
        SubContractNo: Serenity.StringEditor;
        SubIssueDate: Serenity.DateEditor;
        SubDueDate: Serenity.DateEditor;
        SubLotRate: Serenity.DecimalEditor;
        CostMachine: Serenity.DecimalEditor;
        CostEnergy: Serenity.DecimalEditor;
        CostWater: Serenity.DecimalEditor;
        CostRental: Serenity.DecimalEditor;
        CostLabor: Serenity.DecimalEditor;
        CostInlab: Serenity.DecimalEditor;
        CostInmat: Serenity.DecimalEditor;
        CostMisc: Serenity.DecimalEditor;
        CostSubcon: Serenity.DecimalEditor;
        CostMachCpd: Serenity.DecimalEditor;
        CostEnergyCpd: Serenity.DecimalEditor;
        CostWaterCpd: Serenity.DecimalEditor;
        CostRentalCpd: Serenity.DecimalEditor;
        CostLaborCpd: Serenity.DecimalEditor;
        CostInlabCpd: Serenity.DecimalEditor;
        CostInmatCpd: Serenity.DecimalEditor;
        CostMiscCpd: Serenity.DecimalEditor;
        CostSubCpd: Serenity.DecimalEditor;
        AcctMachine: Serenity.StringEditor;
        AcctEnergy: Serenity.StringEditor;
        AcctWater: Serenity.StringEditor;
        AcctRental: Serenity.StringEditor;
        AcctLabor: Serenity.StringEditor;
        AcctInlab: Serenity.StringEditor;
        AcctInmat: Serenity.StringEditor;
        AcctMisc: Serenity.StringEditor;
        Specifications: Serenity.StringEditor;
        Eod: Serenity.DateEditor;
        Edd: Serenity.DateEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        HrsPerLot1: Serenity.DecimalEditor;
        TotalManHrs: Serenity.DecimalEditor;
        TotalMachHrs: Serenity.DecimalEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Production {
    interface JobOrderRoutingStepRow {
        Recnum?: number;
        JobNo?: string;
        StepNo?: number;
        OpCode?: string;
        Description?: string;
        ProdnMode?: string;
        Ticketed?: string;
        Reported?: string;
        WorkCentre?: string;
        HrsPerLot?: number;
        PieceRate?: number;
        SubVendorNo?: string;
        SubContractNo?: string;
        SubIssueDate?: string;
        SubDueDate?: string;
        SubLotRate?: number;
        CostMachine?: number;
        CostEnergy?: number;
        CostWater?: number;
        CostRental?: number;
        CostLabor?: number;
        CostInlab?: number;
        CostInmat?: number;
        CostMisc?: number;
        CostSubcon?: number;
        CostMachCpd?: number;
        CostEnergyCpd?: number;
        CostWaterCpd?: number;
        CostRentalCpd?: number;
        CostLaborCpd?: number;
        CostInlabCpd?: number;
        CostInmatCpd?: number;
        CostMiscCpd?: number;
        CostSubCpd?: number;
        AcctMachine?: string;
        AcctEnergy?: string;
        AcctWater?: string;
        AcctRental?: string;
        AcctLabor?: string;
        AcctInlab?: string;
        AcctInmat?: string;
        AcctMisc?: string;
        Specifications?: string;
        Eod?: string;
        Edd?: string;
        Anlys1?: string;
        Anlys2?: string;
        HrsPerLot1?: number;
        TotalManHrs?: number;
        TotalMachHrs?: number;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        JobNoRecnum?: number;
        JobNoPosted?: string;
        JobNoClosed?: string;
        JobNoIssued?: string;
        JobNoFinished?: string;
        JobNoAssemblyType?: string;
        JobNoSourceSubjob?: string;
        JobNoSourceSales?: string;
        JobNoSourceAssort?: string;
        JobNoSourceRefNo?: string;
        JobNoSourceLineNo?: number;
        JobNoSourcePartNo?: number;
        JobNoIssueDate?: string;
        JobNoDueDate?: string;
        JobNoStartDate?: string;
        JobNoItemNo?: string;
        JobNoDescription?: string;
        JobNoUom?: string;
        JobNoTotalQty?: number;
        JobNoSpecNo?: string;
        JobNoBomNo?: string;
        JobNoStdOutput?: number;
        JobNoProdLotSize?: number;
        JobNoNoOfLots?: number;
        JobNoBatchedLots?: number;
        JobNoHrsPerLot?: number;
        JobNoHrsPerLotCpd?: number;
        JobNoBranchNo?: string;
        JobNoAssemblyLine?: string;
        JobNoJobCategory?: string;
        JobNoJobPriority?: number;
        JobNoHeaderVerified?: string;
        JobNoByprodVerified?: string;
        JobNoBatchVerified?: string;
        JobNoBomVerified?: string;
        JobNoRoutingVerifed?: string;
        JobNoMatschVerified?: string;
        JobNoWrkschVerified?: string;
        JobNoCostVerified?: string;
        JobNoByprCostShare?: number;
        JobNoTicketNeeded?: string;
        JobNoTicketClosed?: string;
        JobNoCreatedDate?: string;
        JobNoCreatedBy?: string;
        JobNoRevisedDate?: string;
        JobNoRevisedBy?: string;
        JobNoPostedDate?: string;
        JobNoPostedBy?: string;
        JobNoLastLineNo?: number;
        JobNoLastByprodNo?: number;
        JobNoBatchCount?: number;
        JobNoLastLogNo?: number;
        JobNoLockType?: string;
        JobNoLockRefNo?: string;
        JobNoFgLoc?: string;
        JobNoRmLoc?: string;
        JobNoCostMaterial?: number;
        JobNoCostLabor?: number;
        JobNoCostSubcon?: number;
        JobNoCostMachine?: number;
        JobNoCostEnergy?: number;
        JobNoCostWater?: number;
        JobNoCostRental?: number;
        JobNoCostInlab?: number;
        JobNoCostInmat?: number;
        JobNoCostMisc?: number;
        JobNoCostOverhead?: number;
        JobNoCostEstimate?: number;
        JobNoCostFinished?: number;
        JobNoCostScrapped?: number;
        JobNoCostCharged?: number;
        JobNoCoacRmConsu?: number;
        JobNoCoacRmScrap?: number;
        JobNoCoacMaterial?: number;
        JobNoCoacLabor?: number;
        JobNoCoacSubcon?: number;
        JobNoCoacMachine?: number;
        JobNoCoacEnergy?: number;
        JobNoCoacWater?: number;
        JobNoCoacRental?: number;
        JobNoCoacInlab?: number;
        JobNoCoacInmat?: number;
        JobNoCoacMisc?: number;
        JobNoCoacOverhead?: number;
        JobNoCostActual?: number;
        JobNoCostVariance?: number;
        JobNoCostWip?: number;
        JobNoAcctWip?: string;
        JobNoAcctPvar?: string;
        JobNoAcctProdCost?: string;
        JobNoCanEdit?: string;
        JobNoLastSubNo?: number;
        JobNoSubjobVerified?: string;
        JobNoLotsIssued?: number;
        JobNoLotsFinished?: number;
        JobNoOwnerBranch?: string;
        JobNoSourceBranch?: string;
        JobNoFinishedType?: string;
        JobNoFinishedDate?: string;
        JobNoSpecifications?: string;
        JobNoQtyNeeded?: number;
        JobNoScrapRate?: number;
        JobNoScrapQty?: number;
        JobNoQtyAdjusted?: number;
        JobNoNetWt?: number;
        JobNoNetWtUom?: string;
        JobNoAnlys1?: string;
        JobNoAnlys2?: string;
        JobNoBlowThru?: string;
        JobNoComments1?: string;
        JobNoComments2?: string;
        JobNoComments3?: string;
        JobNoComments4?: string;
        JobNoLastTextNo?: number;
        JobNoBomRevision?: string;
        JobNoAnlys7?: string;
        JobNoAnlys8?: string;
        JobNoLastLinkNo?: number;
        JobNoFlag?: string;
        JobNoHoldBy?: string;
        JobNoIncludeScrapRate?: string;
        JobNoUseItemMasterScrap?: string;
        JobNoWcBackflush?: string;
        JobNoReorder?: string;
        JobNoCostRework?: number;
        JobNoMoldJob?: string;
        JobNoMoldDesc?: string;
        JobNoAnlys9?: string;
        JobNoAnlys10?: string;
        JobNoAnlys11?: string;
        JobNoAnlys12?: string;
        JobNoAnlys13?: string;
        JobNoAnlys14?: string;
        JobNoProjectNo?: string;
        JobNoSourceMrpNo?: string;
    }
    namespace JobOrderRoutingStepRow {
        const idProperty = "Recnum";
        const nameProperty = "JobNo";
        const localTextPrefix = "Production.JobOrderRoutingStep";
        namespace Fields {
            const Recnum: string;
            const JobNo: string;
            const StepNo: string;
            const OpCode: string;
            const Description: string;
            const ProdnMode: string;
            const Ticketed: string;
            const Reported: string;
            const WorkCentre: string;
            const HrsPerLot: string;
            const PieceRate: string;
            const SubVendorNo: string;
            const SubContractNo: string;
            const SubIssueDate: string;
            const SubDueDate: string;
            const SubLotRate: string;
            const CostMachine: string;
            const CostEnergy: string;
            const CostWater: string;
            const CostRental: string;
            const CostLabor: string;
            const CostInlab: string;
            const CostInmat: string;
            const CostMisc: string;
            const CostSubcon: string;
            const CostMachCpd: string;
            const CostEnergyCpd: string;
            const CostWaterCpd: string;
            const CostRentalCpd: string;
            const CostLaborCpd: string;
            const CostInlabCpd: string;
            const CostInmatCpd: string;
            const CostMiscCpd: string;
            const CostSubCpd: string;
            const AcctMachine: string;
            const AcctEnergy: string;
            const AcctWater: string;
            const AcctRental: string;
            const AcctLabor: string;
            const AcctInlab: string;
            const AcctInmat: string;
            const AcctMisc: string;
            const Specifications: string;
            const Eod: string;
            const Edd: string;
            const Anlys1: string;
            const Anlys2: string;
            const HrsPerLot1: string;
            const TotalManHrs: string;
            const TotalMachHrs: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const JobNoRecnum: string;
            const JobNoPosted: string;
            const JobNoClosed: string;
            const JobNoIssued: string;
            const JobNoFinished: string;
            const JobNoAssemblyType: string;
            const JobNoSourceSubjob: string;
            const JobNoSourceSales: string;
            const JobNoSourceAssort: string;
            const JobNoSourceRefNo: string;
            const JobNoSourceLineNo: string;
            const JobNoSourcePartNo: string;
            const JobNoIssueDate: string;
            const JobNoDueDate: string;
            const JobNoStartDate: string;
            const JobNoItemNo: string;
            const JobNoDescription: string;
            const JobNoUom: string;
            const JobNoTotalQty: string;
            const JobNoSpecNo: string;
            const JobNoBomNo: string;
            const JobNoStdOutput: string;
            const JobNoProdLotSize: string;
            const JobNoNoOfLots: string;
            const JobNoBatchedLots: string;
            const JobNoHrsPerLot: string;
            const JobNoHrsPerLotCpd: string;
            const JobNoBranchNo: string;
            const JobNoAssemblyLine: string;
            const JobNoJobCategory: string;
            const JobNoJobPriority: string;
            const JobNoHeaderVerified: string;
            const JobNoByprodVerified: string;
            const JobNoBatchVerified: string;
            const JobNoBomVerified: string;
            const JobNoRoutingVerifed: string;
            const JobNoMatschVerified: string;
            const JobNoWrkschVerified: string;
            const JobNoCostVerified: string;
            const JobNoByprCostShare: string;
            const JobNoTicketNeeded: string;
            const JobNoTicketClosed: string;
            const JobNoCreatedDate: string;
            const JobNoCreatedBy: string;
            const JobNoRevisedDate: string;
            const JobNoRevisedBy: string;
            const JobNoPostedDate: string;
            const JobNoPostedBy: string;
            const JobNoLastLineNo: string;
            const JobNoLastByprodNo: string;
            const JobNoBatchCount: string;
            const JobNoLastLogNo: string;
            const JobNoLockType: string;
            const JobNoLockRefNo: string;
            const JobNoFgLoc: string;
            const JobNoRmLoc: string;
            const JobNoCostMaterial: string;
            const JobNoCostLabor: string;
            const JobNoCostSubcon: string;
            const JobNoCostMachine: string;
            const JobNoCostEnergy: string;
            const JobNoCostWater: string;
            const JobNoCostRental: string;
            const JobNoCostInlab: string;
            const JobNoCostInmat: string;
            const JobNoCostMisc: string;
            const JobNoCostOverhead: string;
            const JobNoCostEstimate: string;
            const JobNoCostFinished: string;
            const JobNoCostScrapped: string;
            const JobNoCostCharged: string;
            const JobNoCoacRmConsu: string;
            const JobNoCoacRmScrap: string;
            const JobNoCoacMaterial: string;
            const JobNoCoacLabor: string;
            const JobNoCoacSubcon: string;
            const JobNoCoacMachine: string;
            const JobNoCoacEnergy: string;
            const JobNoCoacWater: string;
            const JobNoCoacRental: string;
            const JobNoCoacInlab: string;
            const JobNoCoacInmat: string;
            const JobNoCoacMisc: string;
            const JobNoCoacOverhead: string;
            const JobNoCostActual: string;
            const JobNoCostVariance: string;
            const JobNoCostWip: string;
            const JobNoAcctWip: string;
            const JobNoAcctPvar: string;
            const JobNoAcctProdCost: string;
            const JobNoCanEdit: string;
            const JobNoLastSubNo: string;
            const JobNoSubjobVerified: string;
            const JobNoLotsIssued: string;
            const JobNoLotsFinished: string;
            const JobNoOwnerBranch: string;
            const JobNoSourceBranch: string;
            const JobNoFinishedType: string;
            const JobNoFinishedDate: string;
            const JobNoSpecifications: string;
            const JobNoQtyNeeded: string;
            const JobNoScrapRate: string;
            const JobNoScrapQty: string;
            const JobNoQtyAdjusted: string;
            const JobNoNetWt: string;
            const JobNoNetWtUom: string;
            const JobNoAnlys1: string;
            const JobNoAnlys2: string;
            const JobNoBlowThru: string;
            const JobNoComments1: string;
            const JobNoComments2: string;
            const JobNoComments3: string;
            const JobNoComments4: string;
            const JobNoLastTextNo: string;
            const JobNoBomRevision: string;
            const JobNoAnlys7: string;
            const JobNoAnlys8: string;
            const JobNoLastLinkNo: string;
            const JobNoFlag: string;
            const JobNoHoldBy: string;
            const JobNoIncludeScrapRate: string;
            const JobNoUseItemMasterScrap: string;
            const JobNoWcBackflush: string;
            const JobNoReorder: string;
            const JobNoCostRework: string;
            const JobNoMoldJob: string;
            const JobNoMoldDesc: string;
            const JobNoAnlys9: string;
            const JobNoAnlys10: string;
            const JobNoAnlys11: string;
            const JobNoAnlys12: string;
            const JobNoAnlys13: string;
            const JobNoAnlys14: string;
            const JobNoProjectNo: string;
            const JobNoSourceMrpNo: string;
        }
    }
}
declare namespace Matrix.Production {
    namespace JobOrderRoutingStepService {
        const baseUrl = "Production/JobOrderRoutingStep";
        function Create(request: Serenity.SaveRequest<JobOrderRoutingStepRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<JobOrderRoutingStepRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<JobOrderRoutingStepRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<JobOrderRoutingStepRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Production {
    interface JobOrderRow {
        Recnum?: number;
        JobNo?: string;
        Posted?: string;
        Closed?: string;
        Issued?: string;
        Finished?: string;
        AssemblyType?: string;
        SourceSubjob?: string;
        SourceSales?: string;
        SourceAssort?: string;
        SourceRefNo?: string;
        SourceLineNo?: number;
        SourcePartNo?: number;
        IssueDate?: string;
        DueDate?: string;
        StartDate?: string;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        TotalQty?: number;
        SpecNo?: string;
        BomNo?: string;
        StdOutput?: number;
        ProdLotSize?: number;
        NoOfLots?: number;
        BatchedLots?: number;
        HrsPerLot?: number;
        HrsPerLotCpd?: number;
        BranchNo?: string;
        AssemblyLine?: string;
        JobCategory?: string;
        JobPriority?: number;
        HeaderVerified?: string;
        ByprodVerified?: string;
        BatchVerified?: string;
        BomVerified?: string;
        RoutingVerifed?: string;
        MatschVerified?: string;
        WrkschVerified?: string;
        CostVerified?: string;
        ByprCostShare?: number;
        TicketNeeded?: string;
        TicketClosed?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LastLineNo?: number;
        LastByprodNo?: number;
        BatchCount?: number;
        LastLogNo?: number;
        LockType?: string;
        LockRefNo?: string;
        FgLoc?: string;
        RmLoc?: string;
        CostMaterial?: number;
        CostLabor?: number;
        CostSubcon?: number;
        CostMachine?: number;
        CostEnergy?: number;
        CostWater?: number;
        CostRental?: number;
        CostInlab?: number;
        CostInmat?: number;
        CostMisc?: number;
        CostOverhead?: number;
        CostEstimate?: number;
        CostFinished?: number;
        CostScrapped?: number;
        CostCharged?: number;
        CoacRmConsu?: number;
        CoacRmScrap?: number;
        CoacMaterial?: number;
        CoacLabor?: number;
        CoacSubcon?: number;
        CoacMachine?: number;
        CoacEnergy?: number;
        CoacWater?: number;
        CoacRental?: number;
        CoacInlab?: number;
        CoacInmat?: number;
        CoacMisc?: number;
        CoacOverhead?: number;
        CostActual?: number;
        CostVariance?: number;
        CostWip?: number;
        AcctWip?: string;
        AcctPvar?: string;
        AcctProdCost?: string;
        CanEdit?: string;
        LastSubNo?: number;
        SubjobVerified?: string;
        LotsIssued?: number;
        LotsFinished?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        FinishedType?: string;
        FinishedDate?: string;
        Specifications?: string;
        QtyNeeded?: number;
        ScrapRate?: number;
        ScrapQty?: number;
        QtyAdjusted?: number;
        NetWt?: number;
        NetWtUom?: string;
        Anlys1?: string;
        Anlys2?: string;
        BlowThru?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        LastTextNo?: number;
        BomRevision?: string;
        Anlys7?: string;
        Anlys8?: string;
        LastLinkNo?: number;
        Flag?: string;
        HoldBy?: string;
        IncludeScrapRate?: string;
        UseItemMasterScrap?: string;
        WcBackflush?: string;
        Reorder?: string;
        CostRework?: number;
        MoldJob?: string;
        MoldDesc?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        ProjectNo?: string;
        SourceMrpNo?: string;
    }
    namespace JobOrderRow {
        const idProperty = "Recnum";
        const nameProperty = "JobNo";
        const localTextPrefix = "Production.JobOrder";
        namespace Fields {
            const Recnum: string;
            const JobNo: string;
            const Posted: string;
            const Closed: string;
            const Issued: string;
            const Finished: string;
            const AssemblyType: string;
            const SourceSubjob: string;
            const SourceSales: string;
            const SourceAssort: string;
            const SourceRefNo: string;
            const SourceLineNo: string;
            const SourcePartNo: string;
            const IssueDate: string;
            const DueDate: string;
            const StartDate: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const TotalQty: string;
            const SpecNo: string;
            const BomNo: string;
            const StdOutput: string;
            const ProdLotSize: string;
            const NoOfLots: string;
            const BatchedLots: string;
            const HrsPerLot: string;
            const HrsPerLotCpd: string;
            const BranchNo: string;
            const AssemblyLine: string;
            const JobCategory: string;
            const JobPriority: string;
            const HeaderVerified: string;
            const ByprodVerified: string;
            const BatchVerified: string;
            const BomVerified: string;
            const RoutingVerifed: string;
            const MatschVerified: string;
            const WrkschVerified: string;
            const CostVerified: string;
            const ByprCostShare: string;
            const TicketNeeded: string;
            const TicketClosed: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LastLineNo: string;
            const LastByprodNo: string;
            const BatchCount: string;
            const LastLogNo: string;
            const LockType: string;
            const LockRefNo: string;
            const FgLoc: string;
            const RmLoc: string;
            const CostMaterial: string;
            const CostLabor: string;
            const CostSubcon: string;
            const CostMachine: string;
            const CostEnergy: string;
            const CostWater: string;
            const CostRental: string;
            const CostInlab: string;
            const CostInmat: string;
            const CostMisc: string;
            const CostOverhead: string;
            const CostEstimate: string;
            const CostFinished: string;
            const CostScrapped: string;
            const CostCharged: string;
            const CoacRmConsu: string;
            const CoacRmScrap: string;
            const CoacMaterial: string;
            const CoacLabor: string;
            const CoacSubcon: string;
            const CoacMachine: string;
            const CoacEnergy: string;
            const CoacWater: string;
            const CoacRental: string;
            const CoacInlab: string;
            const CoacInmat: string;
            const CoacMisc: string;
            const CoacOverhead: string;
            const CostActual: string;
            const CostVariance: string;
            const CostWip: string;
            const AcctWip: string;
            const AcctPvar: string;
            const AcctProdCost: string;
            const CanEdit: string;
            const LastSubNo: string;
            const SubjobVerified: string;
            const LotsIssued: string;
            const LotsFinished: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const FinishedType: string;
            const FinishedDate: string;
            const Specifications: string;
            const QtyNeeded: string;
            const ScrapRate: string;
            const ScrapQty: string;
            const QtyAdjusted: string;
            const NetWt: string;
            const NetWtUom: string;
            const Anlys1: string;
            const Anlys2: string;
            const BlowThru: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const LastTextNo: string;
            const BomRevision: string;
            const Anlys7: string;
            const Anlys8: string;
            const LastLinkNo: string;
            const Flag: string;
            const HoldBy: string;
            const IncludeScrapRate: string;
            const UseItemMasterScrap: string;
            const WcBackflush: string;
            const Reorder: string;
            const CostRework: string;
            const MoldJob: string;
            const MoldDesc: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const ProjectNo: string;
            const SourceMrpNo: string;
        }
    }
}
declare namespace Matrix.Production {
    namespace JobOrderService {
        const baseUrl = "Production/JobOrder";
        function Create(request: Serenity.SaveRequest<JobOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<JobOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<JobOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<JobOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class GrnForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface GrnForm {
        GrnNo: Serenity.StringEditor;
        ReceivedDate: Serenity.DateEditor;
        ShipTo: Serenity.StringEditor;
        InspectPriority: Serenity.DecimalEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        CutoffDate: Serenity.DateEditor;
        DoNo: Serenity.StringEditor;
        InvoiceNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PayTerms: Serenity.StringEditor;
        DiscPcent: Serenity.DecimalEditor;
        DiscDays: Serenity.DecimalEditor;
        DueDays: Serenity.DecimalEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
        DpsCover: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        OrderDetailList: GrnOrderDetailEditor;
        EntryMethod: Serenity.StringEditor;
        WithInvoice: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        Inspected: Serenity.StringEditor;
        Returned: Serenity.StringEditor;
        DiscountDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        ComputeTax: Serenity.StringEditor;
        Comments1: Serenity.TextAreaEditor;
        Comments2: Serenity.TextAreaEditor;
        Comments3: Serenity.TextAreaEditor;
        Comments4: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class GrnOrderDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface GrnOrderDetailForm {
        GrnNo: Serenity.StringEditor;
        EntryNo: Serenity.DecimalEditor;
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        QtyBalance: Serenity.DecimalEditor;
        QtyDue: Serenity.DecimalEditor;
        QtyReceived: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        Ptax: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        AtaxAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        PtaxAmt: Serenity.DecimalEditor;
        AtaxRate: Serenity.DecimalEditor;
        LdiscRate: Serenity.DecimalEditor;
        AtaxAmtCpd: Serenity.DecimalEditor;
        LdiscAmtCpd: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocPtaxAmt: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        LocAtaxAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        LogNo: Serenity.DecimalEditor;
        ReceivedDate: Serenity.DateEditor;
        VendorNo: Serenity.StringEditor;
        ShipTo: Serenity.StringEditor;
        Inspected: Serenity.StringEditor;
        QtyInspected: Serenity.DecimalEditor;
        QtyAccepted: Serenity.DecimalEditor;
        QtyRejected: Serenity.DecimalEditor;
        Returned: Serenity.StringEditor;
        QcHold: Serenity.StringEditor;
        AcctPurchase: Serenity.StringEditor;
        AcctLdisc: Serenity.StringEditor;
        AcctPtax: Serenity.StringEditor;
        AcctAtax: Serenity.StringEditor;
        ItemTaxCode: Serenity.StringEditor;
        QtyReturned: Serenity.DecimalEditor;
        RetPriceAmt: Serenity.DecimalEditor;
        RetPtaxAmt: Serenity.DecimalEditor;
        RetExtPrice: Serenity.DecimalEditor;
        RetLdiscAmt: Serenity.DecimalEditor;
        RetAtaxAmt: Serenity.DecimalEditor;
        RetItemAmt: Serenity.DecimalEditor;
        LretPriceAmt: Serenity.DecimalEditor;
        LretPtaxAmt: Serenity.DecimalEditor;
        LretExtPrice: Serenity.DecimalEditor;
        LretLdiscAmt: Serenity.DecimalEditor;
        LretAtaxAmt: Serenity.DecimalEditor;
        LretItemAmt: Serenity.DecimalEditor;
        CostAccepted: Serenity.DecimalEditor;
        CostRejected: Serenity.DecimalEditor;
        CostReturned: Serenity.DecimalEditor;
        ExtDescription: Serenity.StringEditor;
        Loc: Serenity.StringEditor;
        PutaxPcent: Serenity.DecimalEditor;
        PutaxAmt: Serenity.DecimalEditor;
        LocPutaxAmt: Serenity.DecimalEditor;
        InspectPriority: Serenity.DecimalEditor;
        QcHoldLoc: Serenity.StringEditor;
        JobNo: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
        MaterialCost: Serenity.DecimalEditor;
        VendorItemNo: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface GrnOrderDetailRow {
        Recnum?: number;
        GrnNo?: string;
        EntryNo?: number;
        OrderNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        QtyBalance?: number;
        QtyDue?: number;
        QtyReceived?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        AtaxRate?: number;
        LdiscRate?: number;
        AtaxAmtCpd?: number;
        LdiscAmtCpd?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        Posted?: string;
        LogNo?: number;
        ReceivedDate?: string;
        VendorNo?: string;
        ShipTo?: string;
        Inspected?: string;
        QtyInspected?: number;
        QtyAccepted?: number;
        QtyRejected?: number;
        Returned?: string;
        QcHold?: string;
        AcctPurchase?: string;
        AcctLdisc?: string;
        AcctPtax?: string;
        AcctAtax?: string;
        ItemTaxCode?: string;
        QtyReturned?: number;
        RetPriceAmt?: number;
        RetPtaxAmt?: number;
        RetExtPrice?: number;
        RetLdiscAmt?: number;
        RetAtaxAmt?: number;
        RetItemAmt?: number;
        LretPriceAmt?: number;
        LretPtaxAmt?: number;
        LretExtPrice?: number;
        LretLdiscAmt?: number;
        LretAtaxAmt?: number;
        LretItemAmt?: number;
        CostAccepted?: number;
        CostRejected?: number;
        CostReturned?: number;
        ExtDescription?: string;
        Loc?: string;
        PutaxPcent?: number;
        PutaxAmt?: number;
        LocPutaxAmt?: number;
        InspectPriority?: number;
        QcHoldLoc?: string;
        JobNo?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        MaterialCost?: number;
        VendorItemNo?: string;
        GrnNoRecnum?: number;
        GrnNoEntryMethod?: string;
        GrnNoWithInvoice?: string;
        GrnNoReceivedDate?: string;
        GrnNoPosted?: string;
        GrnNoInspected?: string;
        GrnNoReturned?: string;
        GrnNoShipTo?: string;
        GrnNoOwnerBranch?: string;
        GrnNoSourceBranch?: string;
        GrnNoVendorNo?: string;
        GrnNoVendorName?: string;
        GrnNoDoNo?: string;
        GrnNoInvoiceNo?: string;
        GrnNoPayTerms?: string;
        GrnNoDiscDays?: number;
        GrnNoDiscPcent?: number;
        GrnNoDueDays?: number;
        GrnNoDiscountDate?: string;
        GrnNoDueDate?: string;
        GrnNoCcy?: string;
        GrnNoExchRate?: number;
        GrnNoComputeTax?: string;
        GrnNoTotPriceAmt?: number;
        GrnNoTotPtaxAmt?: number;
        GrnNoTotExtPrice?: number;
        GrnNoTotLdiscAmt?: number;
        GrnNoTotAtaxAmt?: number;
        GrnNoTotItemAmt?: number;
        GrnNoTotTdiscAmt?: number;
        GrnNoNetTradeAmt?: number;
        GrnNoTotChgsAmt?: number;
        GrnNoNetOrdrAmt?: number;
        GrnNoTotGtaxAmt?: number;
        GrnNoNetPayAmt?: number;
        GrnNoDpsCover?: number;
        GrnNoDpsApplied?: number;
        GrnNoNetBalAmt?: number;
        GrnNoLocPriceAmt?: number;
        GrnNoLocPtaxAmt?: number;
        GrnNoLocExtPrice?: number;
        GrnNoLocLdiscAmt?: number;
        GrnNoLocAtaxAmt?: number;
        GrnNoLocItemAmt?: number;
        GrnNoLocTdiscAmt?: number;
        GrnNoLocChgsAmt?: number;
        GrnNoLocGtaxAmt?: number;
        GrnNoLocPayAmt?: number;
        GrnNoLocDpsApplied?: number;
        GrnNoCreatedDate?: string;
        GrnNoCreatedBy?: string;
        GrnNoRevisedDate?: string;
        GrnNoRevisedBy?: string;
        GrnNoPostedDate?: string;
        GrnNoPostedBy?: string;
        GrnNoLastOrderNo?: number;
        GrnNoLastEntryNo?: number;
        GrnNoLastChgsNo?: number;
        GrnNoLockType?: string;
        GrnNoLockRefNo?: string;
        GrnNoLastLogNo?: number;
        GrnNoAcctVendor?: string;
        GrnNoAcctTdisc?: string;
        GrnNoAcctGtax?: string;
        GrnNoVendTaxCode?: string;
        GrnNoCustTaxCode?: string;
        GrnNoRetPriceAmt?: number;
        GrnNoRetPtaxAmt?: number;
        GrnNoRetExtPrice?: number;
        GrnNoRetLdiscAmt?: number;
        GrnNoRetAtaxAmt?: number;
        GrnNoRetItemAmt?: number;
        GrnNoRetTdiscAmt?: number;
        GrnNoRetGtaxAmt?: number;
        GrnNoRetChgsAmt?: number;
        GrnNoRetPayAmt?: number;
        GrnNoLretPriceAmt?: number;
        GrnNoLretPtaxAmt?: number;
        GrnNoLretExtPrice?: number;
        GrnNoLretLdiscAmt?: number;
        GrnNoLretAtaxAmt?: number;
        GrnNoLretItemAmt?: number;
        GrnNoLretTdiscAmt?: number;
        GrnNoLretGtaxAmt?: number;
        GrnNoLretChgsAmt?: number;
        GrnNoLretPayAmt?: number;
        GrnNoSettleAt?: string;
        GrnNoCheckCrlimit?: string;
        GrnNoCheckCrbal?: number;
        GrnNoManual?: string;
        GrnNoPutaxType?: string;
        GrnNoGputaxPcent?: number;
        GrnNoTotGputaxAmt?: number;
        GrnNoPoPutaxType?: string;
        GrnNoPoGputaxPcent?: number;
        GrnNoLocGputaxAmt?: number;
        GrnNoOrderCount?: number;
        GrnNoTotLputaxAmt?: number;
        GrnNoLocLputaxAmt?: number;
        GrnNoCutoffDate?: string;
        GrnNoInspectPriority?: number;
        GrnNoAnlys9?: string;
        GrnNoAnlys10?: string;
        GrnNoAnlys11?: string;
        GrnNoAnlys12?: string;
        GrnNoFlag?: string;
        GrnNoHoldBy?: string;
        GrnNoComments1?: string;
        GrnNoComments2?: string;
        GrnNoComments3?: string;
        GrnNoComments4?: string;
        GrnNoLastTextNo?: number;
        GrnNoAnlys13?: string;
        GrnNoAnlys14?: string;
        GrnNoAnlys15?: string;
        GrnNoAnlys16?: string;
        GrnNoAnlys17?: string;
        GrnNoAnlys18?: string;
        GrnNoRefCompanyCode?: string;
        GrnNoRefShipmentRefNo?: string;
    }
    namespace GrnOrderDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "GrnNo";
        const localTextPrefix = "Purchasing.GrnOrderDetail";
        namespace Fields {
            const Recnum: string;
            const GrnNo: string;
            const EntryNo: string;
            const OrderNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const QtyBalance: string;
            const QtyDue: string;
            const QtyReceived: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const AtaxRate: string;
            const LdiscRate: string;
            const AtaxAmtCpd: string;
            const LdiscAmtCpd: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const Posted: string;
            const LogNo: string;
            const ReceivedDate: string;
            const VendorNo: string;
            const ShipTo: string;
            const Inspected: string;
            const QtyInspected: string;
            const QtyAccepted: string;
            const QtyRejected: string;
            const Returned: string;
            const QcHold: string;
            const AcctPurchase: string;
            const AcctLdisc: string;
            const AcctPtax: string;
            const AcctAtax: string;
            const ItemTaxCode: string;
            const QtyReturned: string;
            const RetPriceAmt: string;
            const RetPtaxAmt: string;
            const RetExtPrice: string;
            const RetLdiscAmt: string;
            const RetAtaxAmt: string;
            const RetItemAmt: string;
            const LretPriceAmt: string;
            const LretPtaxAmt: string;
            const LretExtPrice: string;
            const LretLdiscAmt: string;
            const LretAtaxAmt: string;
            const LretItemAmt: string;
            const CostAccepted: string;
            const CostRejected: string;
            const CostReturned: string;
            const ExtDescription: string;
            const Loc: string;
            const PutaxPcent: string;
            const PutaxAmt: string;
            const LocPutaxAmt: string;
            const InspectPriority: string;
            const QcHoldLoc: string;
            const JobNo: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const MaterialCost: string;
            const VendorItemNo: string;
            const GrnNoRecnum: string;
            const GrnNoEntryMethod: string;
            const GrnNoWithInvoice: string;
            const GrnNoReceivedDate: string;
            const GrnNoPosted: string;
            const GrnNoInspected: string;
            const GrnNoReturned: string;
            const GrnNoShipTo: string;
            const GrnNoOwnerBranch: string;
            const GrnNoSourceBranch: string;
            const GrnNoVendorNo: string;
            const GrnNoVendorName: string;
            const GrnNoDoNo: string;
            const GrnNoInvoiceNo: string;
            const GrnNoPayTerms: string;
            const GrnNoDiscDays: string;
            const GrnNoDiscPcent: string;
            const GrnNoDueDays: string;
            const GrnNoDiscountDate: string;
            const GrnNoDueDate: string;
            const GrnNoCcy: string;
            const GrnNoExchRate: string;
            const GrnNoComputeTax: string;
            const GrnNoTotPriceAmt: string;
            const GrnNoTotPtaxAmt: string;
            const GrnNoTotExtPrice: string;
            const GrnNoTotLdiscAmt: string;
            const GrnNoTotAtaxAmt: string;
            const GrnNoTotItemAmt: string;
            const GrnNoTotTdiscAmt: string;
            const GrnNoNetTradeAmt: string;
            const GrnNoTotChgsAmt: string;
            const GrnNoNetOrdrAmt: string;
            const GrnNoTotGtaxAmt: string;
            const GrnNoNetPayAmt: string;
            const GrnNoDpsCover: string;
            const GrnNoDpsApplied: string;
            const GrnNoNetBalAmt: string;
            const GrnNoLocPriceAmt: string;
            const GrnNoLocPtaxAmt: string;
            const GrnNoLocExtPrice: string;
            const GrnNoLocLdiscAmt: string;
            const GrnNoLocAtaxAmt: string;
            const GrnNoLocItemAmt: string;
            const GrnNoLocTdiscAmt: string;
            const GrnNoLocChgsAmt: string;
            const GrnNoLocGtaxAmt: string;
            const GrnNoLocPayAmt: string;
            const GrnNoLocDpsApplied: string;
            const GrnNoCreatedDate: string;
            const GrnNoCreatedBy: string;
            const GrnNoRevisedDate: string;
            const GrnNoRevisedBy: string;
            const GrnNoPostedDate: string;
            const GrnNoPostedBy: string;
            const GrnNoLastOrderNo: string;
            const GrnNoLastEntryNo: string;
            const GrnNoLastChgsNo: string;
            const GrnNoLockType: string;
            const GrnNoLockRefNo: string;
            const GrnNoLastLogNo: string;
            const GrnNoAcctVendor: string;
            const GrnNoAcctTdisc: string;
            const GrnNoAcctGtax: string;
            const GrnNoVendTaxCode: string;
            const GrnNoCustTaxCode: string;
            const GrnNoRetPriceAmt: string;
            const GrnNoRetPtaxAmt: string;
            const GrnNoRetExtPrice: string;
            const GrnNoRetLdiscAmt: string;
            const GrnNoRetAtaxAmt: string;
            const GrnNoRetItemAmt: string;
            const GrnNoRetTdiscAmt: string;
            const GrnNoRetGtaxAmt: string;
            const GrnNoRetChgsAmt: string;
            const GrnNoRetPayAmt: string;
            const GrnNoLretPriceAmt: string;
            const GrnNoLretPtaxAmt: string;
            const GrnNoLretExtPrice: string;
            const GrnNoLretLdiscAmt: string;
            const GrnNoLretAtaxAmt: string;
            const GrnNoLretItemAmt: string;
            const GrnNoLretTdiscAmt: string;
            const GrnNoLretGtaxAmt: string;
            const GrnNoLretChgsAmt: string;
            const GrnNoLretPayAmt: string;
            const GrnNoSettleAt: string;
            const GrnNoCheckCrlimit: string;
            const GrnNoCheckCrbal: string;
            const GrnNoManual: string;
            const GrnNoPutaxType: string;
            const GrnNoGputaxPcent: string;
            const GrnNoTotGputaxAmt: string;
            const GrnNoPoPutaxType: string;
            const GrnNoPoGputaxPcent: string;
            const GrnNoLocGputaxAmt: string;
            const GrnNoOrderCount: string;
            const GrnNoTotLputaxAmt: string;
            const GrnNoLocLputaxAmt: string;
            const GrnNoCutoffDate: string;
            const GrnNoInspectPriority: string;
            const GrnNoAnlys9: string;
            const GrnNoAnlys10: string;
            const GrnNoAnlys11: string;
            const GrnNoAnlys12: string;
            const GrnNoFlag: string;
            const GrnNoHoldBy: string;
            const GrnNoComments1: string;
            const GrnNoComments2: string;
            const GrnNoComments3: string;
            const GrnNoComments4: string;
            const GrnNoLastTextNo: string;
            const GrnNoAnlys13: string;
            const GrnNoAnlys14: string;
            const GrnNoAnlys15: string;
            const GrnNoAnlys16: string;
            const GrnNoAnlys17: string;
            const GrnNoAnlys18: string;
            const GrnNoRefCompanyCode: string;
            const GrnNoRefShipmentRefNo: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace GrnOrderDetailService {
        const baseUrl = "Purchasing/GrnOrderDetail";
        function Create(request: Serenity.SaveRequest<GrnOrderDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<GrnOrderDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<GrnOrderDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<GrnOrderDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    class GrnOrderForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface GrnOrderForm {
        GrnNo: Serenity.StringEditor;
        SeqNo: Serenity.DecimalEditor;
        OrderNo: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        OrderDate: Serenity.DateEditor;
        NextDueDate: Serenity.DateEditor;
        Final: Serenity.StringEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        TotPriceAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TotExtPrice: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        TotAtaxAmt: Serenity.DecimalEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetOrdrAmt: Serenity.DecimalEditor;
        TotGtaxAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
        DpsCover: Serenity.DecimalEditor;
        DpsPcent: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        LocDpsApplied: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        TdiscRate: Serenity.DecimalEditor;
        GtaxRate: Serenity.DecimalEditor;
        DpsRate: Serenity.DecimalEditor;
        TotTdiscCpd: Serenity.DecimalEditor;
        TotGtaxCpd: Serenity.DecimalEditor;
        DpsAppliedCpd: Serenity.DecimalEditor;
        LastLineNo: Serenity.DecimalEditor;
        LastChgsNo: Serenity.DecimalEditor;
        LogNo: Serenity.DecimalEditor;
        LastLogNo: Serenity.DecimalEditor;
        Buyer: Serenity.StringEditor;
        ReceivedDate: Serenity.DateEditor;
        DetailCount: Serenity.DecimalEditor;
        ChargesCount: Serenity.DecimalEditor;
        DpsEntryNo: Serenity.DecimalEditor;
        CheckCrbal: Serenity.DecimalEditor;
        PutaxType: Serenity.StringEditor;
        GputaxPcent: Serenity.DecimalEditor;
        TotGputaxAmt: Serenity.DecimalEditor;
        TotLputaxAmt: Serenity.DecimalEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        ReceiveAll: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        Anlys13: Serenity.StringEditor;
        Anlys14: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface GrnOrderRow {
        Recnum?: number;
        GrnNo?: string;
        SeqNo?: number;
        OrderNo?: string;
        Posted?: string;
        OrderDate?: string;
        NextDueDate?: string;
        Final?: string;
        Anlys1?: string;
        Anlys2?: string;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        DpsCover?: number;
        DpsPcent?: number;
        DpsApplied?: number;
        LocDpsApplied?: number;
        NetBalAmt?: number;
        TdiscRate?: number;
        GtaxRate?: number;
        DpsRate?: number;
        TotTdiscCpd?: number;
        TotGtaxCpd?: number;
        DpsAppliedCpd?: number;
        LastLineNo?: number;
        LastChgsNo?: number;
        LogNo?: number;
        LastLogNo?: number;
        Buyer?: string;
        ReceivedDate?: string;
        DetailCount?: number;
        ChargesCount?: number;
        DpsEntryNo?: number;
        CheckCrbal?: number;
        PutaxType?: string;
        GputaxPcent?: number;
        TotGputaxAmt?: number;
        TotLputaxAmt?: number;
        Anlys7?: string;
        Anlys8?: string;
        ReceiveAll?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        GrnNoRecnum?: number;
        GrnNoEntryMethod?: string;
        GrnNoWithInvoice?: string;
        GrnNoReceivedDate?: string;
        GrnNoPosted?: string;
        GrnNoInspected?: string;
        GrnNoReturned?: string;
        GrnNoShipTo?: string;
        GrnNoOwnerBranch?: string;
        GrnNoSourceBranch?: string;
        GrnNoVendorNo?: string;
        GrnNoVendorName?: string;
        GrnNoDoNo?: string;
        GrnNoInvoiceNo?: string;
        GrnNoPayTerms?: string;
        GrnNoDiscDays?: number;
        GrnNoDiscPcent?: number;
        GrnNoDueDays?: number;
        GrnNoDiscountDate?: string;
        GrnNoDueDate?: string;
        GrnNoCcy?: string;
        GrnNoExchRate?: number;
        GrnNoComputeTax?: string;
        GrnNoTotPriceAmt?: number;
        GrnNoTotPtaxAmt?: number;
        GrnNoTotExtPrice?: number;
        GrnNoTotLdiscAmt?: number;
        GrnNoTotAtaxAmt?: number;
        GrnNoTotItemAmt?: number;
        GrnNoTotTdiscAmt?: number;
        GrnNoNetTradeAmt?: number;
        GrnNoTotChgsAmt?: number;
        GrnNoNetOrdrAmt?: number;
        GrnNoTotGtaxAmt?: number;
        GrnNoNetPayAmt?: number;
        GrnNoDpsCover?: number;
        GrnNoDpsApplied?: number;
        GrnNoNetBalAmt?: number;
        GrnNoLocPriceAmt?: number;
        GrnNoLocPtaxAmt?: number;
        GrnNoLocExtPrice?: number;
        GrnNoLocLdiscAmt?: number;
        GrnNoLocAtaxAmt?: number;
        GrnNoLocItemAmt?: number;
        GrnNoLocTdiscAmt?: number;
        GrnNoLocChgsAmt?: number;
        GrnNoLocGtaxAmt?: number;
        GrnNoLocPayAmt?: number;
        GrnNoLocDpsApplied?: number;
        GrnNoCreatedDate?: string;
        GrnNoCreatedBy?: string;
        GrnNoRevisedDate?: string;
        GrnNoRevisedBy?: string;
        GrnNoPostedDate?: string;
        GrnNoPostedBy?: string;
        GrnNoLastOrderNo?: number;
        GrnNoLastEntryNo?: number;
        GrnNoLastChgsNo?: number;
        GrnNoLockType?: string;
        GrnNoLockRefNo?: string;
        GrnNoLastLogNo?: number;
        GrnNoAcctVendor?: string;
        GrnNoAcctTdisc?: string;
        GrnNoAcctGtax?: string;
        GrnNoVendTaxCode?: string;
        GrnNoCustTaxCode?: string;
        GrnNoRetPriceAmt?: number;
        GrnNoRetPtaxAmt?: number;
        GrnNoRetExtPrice?: number;
        GrnNoRetLdiscAmt?: number;
        GrnNoRetAtaxAmt?: number;
        GrnNoRetItemAmt?: number;
        GrnNoRetTdiscAmt?: number;
        GrnNoRetGtaxAmt?: number;
        GrnNoRetChgsAmt?: number;
        GrnNoRetPayAmt?: number;
        GrnNoLretPriceAmt?: number;
        GrnNoLretPtaxAmt?: number;
        GrnNoLretExtPrice?: number;
        GrnNoLretLdiscAmt?: number;
        GrnNoLretAtaxAmt?: number;
        GrnNoLretItemAmt?: number;
        GrnNoLretTdiscAmt?: number;
        GrnNoLretGtaxAmt?: number;
        GrnNoLretChgsAmt?: number;
        GrnNoLretPayAmt?: number;
        GrnNoSettleAt?: string;
        GrnNoCheckCrlimit?: string;
        GrnNoCheckCrbal?: number;
        GrnNoManual?: string;
        GrnNoPutaxType?: string;
        GrnNoGputaxPcent?: number;
        GrnNoTotGputaxAmt?: number;
        GrnNoPoPutaxType?: string;
        GrnNoPoGputaxPcent?: number;
        GrnNoLocGputaxAmt?: number;
        GrnNoOrderCount?: number;
        GrnNoTotLputaxAmt?: number;
        GrnNoLocLputaxAmt?: number;
        GrnNoCutoffDate?: string;
        GrnNoInspectPriority?: number;
        GrnNoAnlys9?: string;
        GrnNoAnlys10?: string;
        GrnNoAnlys11?: string;
        GrnNoAnlys12?: string;
        GrnNoFlag?: string;
        GrnNoHoldBy?: string;
        GrnNoComments1?: string;
        GrnNoComments2?: string;
        GrnNoComments3?: string;
        GrnNoComments4?: string;
        GrnNoLastTextNo?: number;
        GrnNoAnlys13?: string;
        GrnNoAnlys14?: string;
        GrnNoAnlys15?: string;
        GrnNoAnlys16?: string;
        GrnNoAnlys17?: string;
        GrnNoAnlys18?: string;
        GrnNoRefCompanyCode?: string;
        GrnNoRefShipmentRefNo?: string;
    }
    namespace GrnOrderRow {
        const idProperty = "Recnum";
        const nameProperty = "GrnNo";
        const localTextPrefix = "Purchasing.GrnOrder";
        namespace Fields {
            const Recnum: string;
            const GrnNo: string;
            const SeqNo: string;
            const OrderNo: string;
            const Posted: string;
            const OrderDate: string;
            const NextDueDate: string;
            const Final: string;
            const Anlys1: string;
            const Anlys2: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const DpsCover: string;
            const DpsPcent: string;
            const DpsApplied: string;
            const LocDpsApplied: string;
            const NetBalAmt: string;
            const TdiscRate: string;
            const GtaxRate: string;
            const DpsRate: string;
            const TotTdiscCpd: string;
            const TotGtaxCpd: string;
            const DpsAppliedCpd: string;
            const LastLineNo: string;
            const LastChgsNo: string;
            const LogNo: string;
            const LastLogNo: string;
            const Buyer: string;
            const ReceivedDate: string;
            const DetailCount: string;
            const ChargesCount: string;
            const DpsEntryNo: string;
            const CheckCrbal: string;
            const PutaxType: string;
            const GputaxPcent: string;
            const TotGputaxAmt: string;
            const TotLputaxAmt: string;
            const Anlys7: string;
            const Anlys8: string;
            const ReceiveAll: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const GrnNoRecnum: string;
            const GrnNoEntryMethod: string;
            const GrnNoWithInvoice: string;
            const GrnNoReceivedDate: string;
            const GrnNoPosted: string;
            const GrnNoInspected: string;
            const GrnNoReturned: string;
            const GrnNoShipTo: string;
            const GrnNoOwnerBranch: string;
            const GrnNoSourceBranch: string;
            const GrnNoVendorNo: string;
            const GrnNoVendorName: string;
            const GrnNoDoNo: string;
            const GrnNoInvoiceNo: string;
            const GrnNoPayTerms: string;
            const GrnNoDiscDays: string;
            const GrnNoDiscPcent: string;
            const GrnNoDueDays: string;
            const GrnNoDiscountDate: string;
            const GrnNoDueDate: string;
            const GrnNoCcy: string;
            const GrnNoExchRate: string;
            const GrnNoComputeTax: string;
            const GrnNoTotPriceAmt: string;
            const GrnNoTotPtaxAmt: string;
            const GrnNoTotExtPrice: string;
            const GrnNoTotLdiscAmt: string;
            const GrnNoTotAtaxAmt: string;
            const GrnNoTotItemAmt: string;
            const GrnNoTotTdiscAmt: string;
            const GrnNoNetTradeAmt: string;
            const GrnNoTotChgsAmt: string;
            const GrnNoNetOrdrAmt: string;
            const GrnNoTotGtaxAmt: string;
            const GrnNoNetPayAmt: string;
            const GrnNoDpsCover: string;
            const GrnNoDpsApplied: string;
            const GrnNoNetBalAmt: string;
            const GrnNoLocPriceAmt: string;
            const GrnNoLocPtaxAmt: string;
            const GrnNoLocExtPrice: string;
            const GrnNoLocLdiscAmt: string;
            const GrnNoLocAtaxAmt: string;
            const GrnNoLocItemAmt: string;
            const GrnNoLocTdiscAmt: string;
            const GrnNoLocChgsAmt: string;
            const GrnNoLocGtaxAmt: string;
            const GrnNoLocPayAmt: string;
            const GrnNoLocDpsApplied: string;
            const GrnNoCreatedDate: string;
            const GrnNoCreatedBy: string;
            const GrnNoRevisedDate: string;
            const GrnNoRevisedBy: string;
            const GrnNoPostedDate: string;
            const GrnNoPostedBy: string;
            const GrnNoLastOrderNo: string;
            const GrnNoLastEntryNo: string;
            const GrnNoLastChgsNo: string;
            const GrnNoLockType: string;
            const GrnNoLockRefNo: string;
            const GrnNoLastLogNo: string;
            const GrnNoAcctVendor: string;
            const GrnNoAcctTdisc: string;
            const GrnNoAcctGtax: string;
            const GrnNoVendTaxCode: string;
            const GrnNoCustTaxCode: string;
            const GrnNoRetPriceAmt: string;
            const GrnNoRetPtaxAmt: string;
            const GrnNoRetExtPrice: string;
            const GrnNoRetLdiscAmt: string;
            const GrnNoRetAtaxAmt: string;
            const GrnNoRetItemAmt: string;
            const GrnNoRetTdiscAmt: string;
            const GrnNoRetGtaxAmt: string;
            const GrnNoRetChgsAmt: string;
            const GrnNoRetPayAmt: string;
            const GrnNoLretPriceAmt: string;
            const GrnNoLretPtaxAmt: string;
            const GrnNoLretExtPrice: string;
            const GrnNoLretLdiscAmt: string;
            const GrnNoLretAtaxAmt: string;
            const GrnNoLretItemAmt: string;
            const GrnNoLretTdiscAmt: string;
            const GrnNoLretGtaxAmt: string;
            const GrnNoLretChgsAmt: string;
            const GrnNoLretPayAmt: string;
            const GrnNoSettleAt: string;
            const GrnNoCheckCrlimit: string;
            const GrnNoCheckCrbal: string;
            const GrnNoManual: string;
            const GrnNoPutaxType: string;
            const GrnNoGputaxPcent: string;
            const GrnNoTotGputaxAmt: string;
            const GrnNoPoPutaxType: string;
            const GrnNoPoGputaxPcent: string;
            const GrnNoLocGputaxAmt: string;
            const GrnNoOrderCount: string;
            const GrnNoTotLputaxAmt: string;
            const GrnNoLocLputaxAmt: string;
            const GrnNoCutoffDate: string;
            const GrnNoInspectPriority: string;
            const GrnNoAnlys9: string;
            const GrnNoAnlys10: string;
            const GrnNoAnlys11: string;
            const GrnNoAnlys12: string;
            const GrnNoFlag: string;
            const GrnNoHoldBy: string;
            const GrnNoComments1: string;
            const GrnNoComments2: string;
            const GrnNoComments3: string;
            const GrnNoComments4: string;
            const GrnNoLastTextNo: string;
            const GrnNoAnlys13: string;
            const GrnNoAnlys14: string;
            const GrnNoAnlys15: string;
            const GrnNoAnlys16: string;
            const GrnNoAnlys17: string;
            const GrnNoAnlys18: string;
            const GrnNoRefCompanyCode: string;
            const GrnNoRefShipmentRefNo: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace GrnOrderService {
        const baseUrl = "Purchasing/GrnOrder";
        function Create(request: Serenity.SaveRequest<GrnOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<GrnOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<GrnOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<GrnOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    interface GrnRow {
        Recnum?: number;
        GrnNo?: string;
        EntryMethod?: string;
        WithInvoice?: string;
        ReceivedDate?: string;
        Posted?: string;
        Inspected?: string;
        Returned?: string;
        ShipTo?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        VendorNo?: string;
        VendorName?: string;
        DoNo?: string;
        InvoiceNo?: string;
        PayTerms?: string;
        DiscDays?: number;
        DiscPcent?: number;
        DueDays?: number;
        DiscountDate?: string;
        DueDate?: string;
        Ccy?: string;
        ExchRate?: number;
        ComputeTax?: string;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        DpsCover?: number;
        DpsApplied?: number;
        NetBalAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocTdiscAmt?: number;
        LocChgsAmt?: number;
        LocGtaxAmt?: number;
        LocPayAmt?: number;
        LocDpsApplied?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LastOrderNo?: number;
        LastEntryNo?: number;
        LastChgsNo?: number;
        LockType?: string;
        LockRefNo?: string;
        LastLogNo?: number;
        AcctVendor?: string;
        AcctTdisc?: string;
        AcctGtax?: string;
        VendTaxCode?: string;
        CustTaxCode?: string;
        RetPriceAmt?: number;
        RetPtaxAmt?: number;
        RetExtPrice?: number;
        RetLdiscAmt?: number;
        RetAtaxAmt?: number;
        RetItemAmt?: number;
        RetTdiscAmt?: number;
        RetGtaxAmt?: number;
        RetChgsAmt?: number;
        RetPayAmt?: number;
        LretPriceAmt?: number;
        LretPtaxAmt?: number;
        LretExtPrice?: number;
        LretLdiscAmt?: number;
        LretAtaxAmt?: number;
        LretItemAmt?: number;
        LretTdiscAmt?: number;
        LretGtaxAmt?: number;
        LretChgsAmt?: number;
        LretPayAmt?: number;
        SettleAt?: string;
        CheckCrlimit?: string;
        CheckCrbal?: number;
        Manual?: string;
        PutaxType?: string;
        GputaxPcent?: number;
        TotGputaxAmt?: number;
        PoPutaxType?: string;
        PoGputaxPcent?: number;
        LocGputaxAmt?: number;
        OrderCount?: number;
        TotLputaxAmt?: number;
        LocLputaxAmt?: number;
        CutoffDate?: string;
        InspectPriority?: number;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Flag?: string;
        HoldBy?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        LastTextNo?: number;
        Anlys13?: string;
        Anlys14?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        RefCompanyCode?: string;
        RefShipmentRefNo?: string;
        ItemDetailList?: GrnOrderDetailRow[];
        OrderDetailList?: GrnOrderRow[];
    }
    namespace GrnRow {
        const idProperty = "GrnNo";
        const nameProperty = "GrnNo";
        const localTextPrefix = "Purchasing.Grn";
        namespace Fields {
            const Recnum: string;
            const GrnNo: string;
            const EntryMethod: string;
            const WithInvoice: string;
            const ReceivedDate: string;
            const Posted: string;
            const Inspected: string;
            const Returned: string;
            const ShipTo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const VendorNo: string;
            const VendorName: string;
            const DoNo: string;
            const InvoiceNo: string;
            const PayTerms: string;
            const DiscDays: string;
            const DiscPcent: string;
            const DueDays: string;
            const DiscountDate: string;
            const DueDate: string;
            const Ccy: string;
            const ExchRate: string;
            const ComputeTax: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const DpsCover: string;
            const DpsApplied: string;
            const NetBalAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocTdiscAmt: string;
            const LocChgsAmt: string;
            const LocGtaxAmt: string;
            const LocPayAmt: string;
            const LocDpsApplied: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LastOrderNo: string;
            const LastEntryNo: string;
            const LastChgsNo: string;
            const LockType: string;
            const LockRefNo: string;
            const LastLogNo: string;
            const AcctVendor: string;
            const AcctTdisc: string;
            const AcctGtax: string;
            const VendTaxCode: string;
            const CustTaxCode: string;
            const RetPriceAmt: string;
            const RetPtaxAmt: string;
            const RetExtPrice: string;
            const RetLdiscAmt: string;
            const RetAtaxAmt: string;
            const RetItemAmt: string;
            const RetTdiscAmt: string;
            const RetGtaxAmt: string;
            const RetChgsAmt: string;
            const RetPayAmt: string;
            const LretPriceAmt: string;
            const LretPtaxAmt: string;
            const LretExtPrice: string;
            const LretLdiscAmt: string;
            const LretAtaxAmt: string;
            const LretItemAmt: string;
            const LretTdiscAmt: string;
            const LretGtaxAmt: string;
            const LretChgsAmt: string;
            const LretPayAmt: string;
            const SettleAt: string;
            const CheckCrlimit: string;
            const CheckCrbal: string;
            const Manual: string;
            const PutaxType: string;
            const GputaxPcent: string;
            const TotGputaxAmt: string;
            const PoPutaxType: string;
            const PoGputaxPcent: string;
            const LocGputaxAmt: string;
            const OrderCount: string;
            const TotLputaxAmt: string;
            const LocLputaxAmt: string;
            const CutoffDate: string;
            const InspectPriority: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Flag: string;
            const HoldBy: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const LastTextNo: string;
            const Anlys13: string;
            const Anlys14: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const RefCompanyCode: string;
            const RefShipmentRefNo: string;
            const ItemDetailList: string;
            const OrderDetailList: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace GrnService {
        const baseUrl = "Purchasing/Grn";
        function Create(request: Serenity.SaveRequest<GrnRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<GrnRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<GrnRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<GrnRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseInspectionDetailForm {
        RefNo: Serenity.StringEditor;
        EntryNo: Serenity.DecimalEditor;
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        QtyReceived: Serenity.DecimalEditor;
        QtyPending: Serenity.DecimalEditor;
        QtyInspected: Serenity.DecimalEditor;
        QtyRejected: Serenity.DecimalEditor;
        Reorder: Serenity.StringEditor;
        Price: Serenity.DecimalEditor;
        Ptax: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        AtaxAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        PtaxAmt: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocPtaxAmt: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        LocAtaxAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        GrnNo: Serenity.StringEditor;
        Loc: Serenity.StringEditor;
        InspectionDate: Serenity.DateEditor;
        Posted: Serenity.StringEditor;
        LogNo: Serenity.DecimalEditor;
        VendorNo: Serenity.StringEditor;
        AcctPurchase: Serenity.StringEditor;
        AcctLdisc: Serenity.StringEditor;
        AcctGtax: Serenity.StringEditor;
        CostAccepted: Serenity.DecimalEditor;
        CostRejected: Serenity.DecimalEditor;
        Remarks: Serenity.StringEditor;
        ExtDescription: Serenity.StringEditor;
        AdjustRcvd: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseInspectionDetailRow {
        Recnum?: number;
        RefNo?: string;
        EntryNo?: number;
        OrderNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        QtyReceived?: number;
        QtyPending?: number;
        QtyInspected?: number;
        QtyRejected?: number;
        Reorder?: string;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        GrnNo?: string;
        Loc?: string;
        InspectionDate?: string;
        Posted?: string;
        LogNo?: number;
        VendorNo?: string;
        AcctPurchase?: string;
        AcctLdisc?: string;
        AcctGtax?: string;
        CostAccepted?: number;
        CostRejected?: number;
        Remarks?: string;
        ExtDescription?: string;
        AdjustRcvd?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        RefNoRecnum?: number;
        RefNoInspectionDate?: string;
        RefNoEntryMethod?: string;
        RefNoPosted?: string;
        RefNoInspectedBy?: string;
        RefNoLoc?: string;
        RefNoGrnNo?: string;
        RefNoVendorNo?: string;
        RefNoVendorName?: string;
        RefNoReceivedDate?: string;
        RefNoCcy?: string;
        RefNoExchRate?: number;
        RefNoFullInspection?: string;
        RefNoPendingCount?: number;
        RefNoWithRejects?: string;
        RefNoHoldItems?: string;
        RefNoReOrderNo?: string;
        RefNoReOrderDate?: string;
        RefNoReDueDate?: string;
        RefNoReSchedDate?: string;
        RefNoReShipTo?: string;
        RefNoReShipVia?: string;
        RefNoReShipTerms?: string;
        RefNoReCount?: number;
        RefNoTotPriceAmt?: number;
        RefNoTotPtaxAmt?: number;
        RefNoTotExtPrice?: number;
        RefNoTotLdiscAmt?: number;
        RefNoTotAtaxAmt?: number;
        RefNoTotItemAmt?: number;
        RefNoTdiscPcent?: number;
        RefNoTotTdiscAmt?: number;
        RefNoNetTradeAmt?: number;
        RefNoLocPriceAmt?: number;
        RefNoLocPtaxAmt?: number;
        RefNoLocExtPrice?: number;
        RefNoLocLdiscAmt?: number;
        RefNoLocAtaxAmt?: number;
        RefNoLocItemAmt?: number;
        RefNoLocTdiscAmt?: number;
        RefNoCreatedDate?: string;
        RefNoCreatedBy?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoPostedDate?: string;
        RefNoPostedBy?: string;
        RefNoLogNo?: number;
        RefNoLastLogNo?: string;
        RefNoOwnerBranch?: string;
        RefNoSourceBranch?: string;
        RefNoSettleAt?: string;
        RefNoAnlys1?: string;
        RefNoAnlys2?: string;
        RefNoAnlys7?: string;
        RefNoAnlys8?: string;
        RefNoDoNo?: string;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
    }
    namespace PurchaseInspectionDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Purchasing.PurchaseInspectionDetail";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const EntryNo: string;
            const OrderNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const QtyReceived: string;
            const QtyPending: string;
            const QtyInspected: string;
            const QtyRejected: string;
            const Reorder: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const GrnNo: string;
            const Loc: string;
            const InspectionDate: string;
            const Posted: string;
            const LogNo: string;
            const VendorNo: string;
            const AcctPurchase: string;
            const AcctLdisc: string;
            const AcctGtax: string;
            const CostAccepted: string;
            const CostRejected: string;
            const Remarks: string;
            const ExtDescription: string;
            const AdjustRcvd: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const RefNoRecnum: string;
            const RefNoInspectionDate: string;
            const RefNoEntryMethod: string;
            const RefNoPosted: string;
            const RefNoInspectedBy: string;
            const RefNoLoc: string;
            const RefNoGrnNo: string;
            const RefNoVendorNo: string;
            const RefNoVendorName: string;
            const RefNoReceivedDate: string;
            const RefNoCcy: string;
            const RefNoExchRate: string;
            const RefNoFullInspection: string;
            const RefNoPendingCount: string;
            const RefNoWithRejects: string;
            const RefNoHoldItems: string;
            const RefNoReOrderNo: string;
            const RefNoReOrderDate: string;
            const RefNoReDueDate: string;
            const RefNoReSchedDate: string;
            const RefNoReShipTo: string;
            const RefNoReShipVia: string;
            const RefNoReShipTerms: string;
            const RefNoReCount: string;
            const RefNoTotPriceAmt: string;
            const RefNoTotPtaxAmt: string;
            const RefNoTotExtPrice: string;
            const RefNoTotLdiscAmt: string;
            const RefNoTotAtaxAmt: string;
            const RefNoTotItemAmt: string;
            const RefNoTdiscPcent: string;
            const RefNoTotTdiscAmt: string;
            const RefNoNetTradeAmt: string;
            const RefNoLocPriceAmt: string;
            const RefNoLocPtaxAmt: string;
            const RefNoLocExtPrice: string;
            const RefNoLocLdiscAmt: string;
            const RefNoLocAtaxAmt: string;
            const RefNoLocItemAmt: string;
            const RefNoLocTdiscAmt: string;
            const RefNoCreatedDate: string;
            const RefNoCreatedBy: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoPostedDate: string;
            const RefNoPostedBy: string;
            const RefNoLogNo: string;
            const RefNoLastLogNo: string;
            const RefNoOwnerBranch: string;
            const RefNoSourceBranch: string;
            const RefNoSettleAt: string;
            const RefNoAnlys1: string;
            const RefNoAnlys2: string;
            const RefNoAnlys7: string;
            const RefNoAnlys8: string;
            const RefNoDoNo: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseInspectionDetailService {
        const baseUrl = "Purchasing/PurchaseInspectionDetail";
        function Create(request: Serenity.SaveRequest<PurchaseInspectionDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseInspectionDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseInspectionDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseInspectionDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseInspectionForm {
        RefNo: Serenity.StringEditor;
        InspectionDate: Serenity.DateEditor;
        InspectedBy: Serenity.StringEditor;
        Loc: Serenity.StringEditor;
        GrnNo: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        ReceivedDate: Serenity.DateEditor;
        DetailList: Sales.QuotationDetailEditor;
        ReOrderNo: Serenity.StringEditor;
        ReOrderDate: Serenity.DateEditor;
        ReDueDate: Serenity.DateEditor;
        ReSchedDate: Serenity.DateEditor;
        ReShipTo: Serenity.StringEditor;
        ReShipVia: Serenity.StringEditor;
        ReShipTerms: Serenity.StringEditor;
        Comments1: Serenity.StringEditor;
        Comments2: Serenity.StringEditor;
        Comments3: Serenity.StringEditor;
        Comments4: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionInstructionForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseInspectionInstructionForm {
        RefNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        EntryNo: Serenity.DecimalEditor;
        InspectCode: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
        Qty: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseInspectionInstructionRow {
        Recnum?: number;
        RefNo?: string;
        LineNo?: number;
        EntryNo?: number;
        InspectCode?: string;
        Description?: string;
        Remarks?: string;
        Qty?: number;
    }
    namespace PurchaseInspectionInstructionRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Purchasing.PurchaseInspectionInstruction";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const LineNo: string;
            const EntryNo: string;
            const InspectCode: string;
            const Description: string;
            const Remarks: string;
            const Qty: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseInspectionInstructionService {
        const baseUrl = "Purchasing/PurchaseInspectionInstruction";
        function Create(request: Serenity.SaveRequest<PurchaseInspectionInstructionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseInspectionInstructionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseInspectionInstructionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseInspectionInstructionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseInspectionRow {
        Recnum?: number;
        RefNo?: string;
        InspectionDate?: string;
        EntryMethod?: string;
        Posted?: string;
        InspectedBy?: string;
        Loc?: string;
        GrnNo?: string;
        VendorNo?: string;
        VendorName?: string;
        ReceivedDate?: string;
        Ccy?: string;
        ExchRate?: number;
        FullInspection?: string;
        PendingCount?: number;
        WithRejects?: string;
        HoldItems?: string;
        ReOrderNo?: string;
        ReOrderDate?: string;
        ReDueDate?: string;
        ReSchedDate?: string;
        ReShipTo?: string;
        ReShipVia?: string;
        ReShipTerms?: string;
        ReCount?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocTdiscAmt?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LogNo?: number;
        LastLogNo?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        SettleAt?: string;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        DoNo?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        DetailList?: PurchaseInspectionDetailRow[];
    }
    namespace PurchaseInspectionRow {
        const idProperty = "RefNo";
        const nameProperty = "RefNo";
        const localTextPrefix = "Purchasing.PurchaseInspection";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const InspectionDate: string;
            const EntryMethod: string;
            const Posted: string;
            const InspectedBy: string;
            const Loc: string;
            const GrnNo: string;
            const VendorNo: string;
            const VendorName: string;
            const ReceivedDate: string;
            const Ccy: string;
            const ExchRate: string;
            const FullInspection: string;
            const PendingCount: string;
            const WithRejects: string;
            const HoldItems: string;
            const ReOrderNo: string;
            const ReOrderDate: string;
            const ReDueDate: string;
            const ReSchedDate: string;
            const ReShipTo: string;
            const ReShipVia: string;
            const ReShipTerms: string;
            const ReCount: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocTdiscAmt: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LogNo: string;
            const LastLogNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const SettleAt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const DoNo: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseInspectionService {
        const baseUrl = "Purchasing/PurchaseInspection";
        function Create(request: Serenity.SaveRequest<PurchaseInspectionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseInspectionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseInspectionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseInspectionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class PurchaseOrderDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseOrderDetailForm {
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        Posted: Serenity.StringEditor;
        Closed: Serenity.StringEditor;
        ItemNo: Serenity.StringEditor;
        VendorItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        Qty: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        Ptax: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        AtaxAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        PtaxAmt: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        FirstShipQty: Serenity.DecimalEditor;
        OtherShipQty: Serenity.DecimalEditor;
        LastShipNo: Serenity.DecimalEditor;
        WeightUom: Serenity.StringEditor;
        GrossWt: Serenity.DecimalEditor;
        NetWt: Serenity.DecimalEditor;
        DimensionUom: Serenity.StringEditor;
        Flength: Serenity.DecimalEditor;
        Width: Serenity.DecimalEditor;
        Height: Serenity.DecimalEditor;
        Volume: Serenity.DecimalEditor;
        PriceCpd: Serenity.DecimalEditor;
        PtaxCpd: Serenity.DecimalEditor;
        AtaxCpd: Serenity.DecimalEditor;
        DiscCpd: Serenity.DecimalEditor;
        GrossWtCpd: Serenity.DecimalEditor;
        NetWtCpd: Serenity.DecimalEditor;
        VolumeCpd: Serenity.DecimalEditor;
        InnerPkgType: Serenity.StringEditor;
        InnerQty: Serenity.DecimalEditor;
        InnerPkgs: Serenity.DecimalEditor;
        InnerExcsQty: Serenity.DecimalEditor;
        OuterPkgType: Serenity.StringEditor;
        OuterQty: Serenity.DecimalEditor;
        OuterPkgs: Serenity.DecimalEditor;
        OuterExcsQty: Serenity.DecimalEditor;
        QtyReceived: Serenity.DecimalEditor;
        SchedCount: Serenity.DecimalEditor;
        ExtDescription: Serenity.StringEditor;
        QtyPending: Serenity.DecimalEditor;
        JobNo: Serenity.StringEditor;
        OriginQty: Serenity.DecimalEditor;
        PutaxPcent: Serenity.DecimalEditor;
        PutaxAmt: Serenity.DecimalEditor;
        TotAllocatedQty: Serenity.DecimalEditor;
        IweightUom: Serenity.StringEditor;
        IgrossWt: Serenity.DecimalEditor;
        InetWt: Serenity.DecimalEditor;
        Ivolume: Serenity.DecimalEditor;
        TotGrossWt: Serenity.DecimalEditor;
        TotNetWt: Serenity.DecimalEditor;
        Dimension: Serenity.StringEditor;
        ReorderQty: Serenity.DecimalEditor;
        Remark: Serenity.StringEditor;
        SubconJob: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
        MrpRequiredQty: Serenity.DecimalEditor;
        OverReceiptPcent: Serenity.DecimalEditor;
        ZeroPrice: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseOrderDetailRow {
        Recnum?: number;
        OrderNo?: string;
        LineNo?: number;
        Posted?: string;
        Closed?: string;
        ItemNo?: string;
        VendorItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        Qty?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        FirstShipQty?: number;
        OtherShipQty?: number;
        LastShipNo?: number;
        WeightUom?: string;
        GrossWt?: number;
        NetWt?: number;
        DimensionUom?: string;
        Flength?: number;
        Width?: number;
        Height?: number;
        Volume?: number;
        PriceCpd?: number;
        PtaxCpd?: number;
        AtaxCpd?: number;
        DiscCpd?: number;
        GrossWtCpd?: number;
        NetWtCpd?: number;
        VolumeCpd?: number;
        InnerPkgType?: string;
        InnerQty?: number;
        InnerPkgs?: number;
        InnerExcsQty?: number;
        OuterPkgType?: string;
        OuterQty?: number;
        OuterPkgs?: number;
        OuterExcsQty?: number;
        QtyReceived?: number;
        SchedCount?: number;
        ExtDescription?: string;
        QtyPending?: number;
        JobNo?: string;
        OriginQty?: number;
        PutaxPcent?: number;
        PutaxAmt?: number;
        TotAllocatedQty?: number;
        IweightUom?: string;
        IgrossWt?: number;
        InetWt?: number;
        Ivolume?: number;
        TotGrossWt?: number;
        TotNetWt?: number;
        Dimension?: string;
        ReorderQty?: number;
        Remark?: string;
        SubconJob?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        MrpRequiredQty?: number;
        OverReceiptPcent?: number;
        ZeroPrice?: boolean;
        OrderNoRecnum?: number;
        OrderNoPosted?: string;
        OrderNoClosed?: string;
        OrderNoVendorNo?: string;
        OrderNoVendorName?: string;
        OrderNoVendorAddress?: string;
        OrderNoVendorAddress2?: string;
        OrderNoVendorAddress3?: string;
        OrderNoVendorAddress4?: string;
        OrderNoOrderDate?: string;
        OrderNoDueDate?: string;
        OrderNoSchedDate?: string;
        OrderNoShipTo?: string;
        OrderNoAddress?: string;
        OrderNoAddress2?: string;
        OrderNoAddress3?: string;
        OrderNoAddress4?: string;
        OrderNoMultiShip?: string;
        OrderNoComputeTax?: string;
        OrderNoShipVia?: string;
        OrderNoShipmentTerms?: string;
        OrderNoBuyer?: string;
        OrderNoPayTerms?: string;
        OrderNoAnlys1?: string;
        OrderNoAnlys2?: string;
        OrderNoCcy?: string;
        OrderNoExchRate?: number;
        OrderNoSourceType?: string;
        OrderNoSourceRefNo?: string;
        OrderNoLastSchedNo?: number;
        OrderNoLastLineNo?: number;
        OrderNoLastTextNo?: number;
        OrderNoTotPriceAmt?: number;
        OrderNoTotPtaxAmt?: number;
        OrderNoTotExtPrice?: number;
        OrderNoTotLdiscAmt?: number;
        OrderNoTotAtaxAmt?: number;
        OrderNoTotItemAmt?: number;
        OrderNoTdiscPcent?: number;
        OrderNoTotTdiscAmt?: number;
        OrderNoNetTradeAmt?: number;
        OrderNoTotChgsAmt?: number;
        OrderNoNetOrdrAmt?: number;
        OrderNoTotGtaxAmt?: number;
        OrderNoNetPayAmt?: number;
        OrderNoDpsPcent?: number;
        OrderNoTotDpsAmt?: number;
        OrderNoNetBalAmt?: number;
        OrderNoTotTdiscCpd?: number;
        OrderNoTotGtaxCpd?: number;
        OrderNoTotDpsCpd?: number;
        OrderNoDpsRefNo?: string;
        OrderNoDpsFundCode?: string;
        OrderNoDpsPayee?: string;
        OrderNoDpsChequeNo?: string;
        OrderNoDpsDate?: string;
        OrderNoCreatedDate?: string;
        OrderNoCreatedBy?: string;
        OrderNoRevisedDate?: string;
        OrderNoRevisedBy?: string;
        OrderNoPostedDate?: string;
        OrderNoPostedBy?: string;
        OrderNoLockType?: string;
        OrderNoLockRefNo?: string;
        OrderNoLastLogNo?: number;
        OrderNoOwnerBranch?: string;
        OrderNoSourceBranch?: string;
        OrderNoComments1?: string;
        OrderNoComments2?: string;
        OrderNoComments3?: string;
        OrderNoComments4?: string;
        OrderNoServerRevised?: string;
        OrderNoWebAmended?: string;
        OrderNoPubAccess?: string;
        OrderNoConfirmed?: string;
        OrderNoCheckCrlimit?: string;
        OrderNoCheckCrbal?: number;
        OrderNoJobNo?: string;
        OrderNoConsign?: string;
        OrderNoPortLoading?: string;
        OrderNoPortDischarge?: string;
        OrderNoVesselName?: string;
        OrderNoForwarder?: string;
        OrderNoLcNo?: string;
        OrderNoOriginCountry?: string;
        OrderNoPutaxType?: string;
        OrderNoGputaxPcent?: number;
        OrderNoTotGputaxAmt?: number;
        OrderNoTotLputaxAmt?: number;
        OrderNoAnlys7?: string;
        OrderNoAnlys8?: string;
        OrderNoLastLinkNo?: number;
        OrderNoFlag?: string;
        OrderNoHoldBy?: string;
        OrderNoSubconPo?: string;
        OrderNoMrpExclude?: string;
        OrderNoFromPr?: string;
        OrderNoAnlys9?: string;
        OrderNoAnlys10?: string;
        OrderNoAnlys11?: string;
        OrderNoAnlys12?: string;
        OrderNoAnlys13?: string;
        OrderNoAnlys14?: string;
        OrderNoRefCompanyCode?: string;
        OrderNoRefSalesOrderNo?: string;
        OrderNoTaxTerms?: string;
        OrderNoCustomTerms?: string;
        OrderNoLmeCost?: number;
        OrderNoLmeCcy?: string;
        OrderNoLmeExchRate?: number;
        OrderNoAddressCode?: string;
        OrderNoContactPerson?: string;
        OrderNoContactTitle?: string;
        OrderNoTelNo?: string;
        OrderNoFaxNo?: string;
    }
    namespace PurchaseOrderDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Purchasing.PurchaseOrderDetail";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const LineNo: string;
            const Posted: string;
            const Closed: string;
            const ItemNo: string;
            const VendorItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const Qty: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const FirstShipQty: string;
            const OtherShipQty: string;
            const LastShipNo: string;
            const WeightUom: string;
            const GrossWt: string;
            const NetWt: string;
            const DimensionUom: string;
            const Flength: string;
            const Width: string;
            const Height: string;
            const Volume: string;
            const PriceCpd: string;
            const PtaxCpd: string;
            const AtaxCpd: string;
            const DiscCpd: string;
            const GrossWtCpd: string;
            const NetWtCpd: string;
            const VolumeCpd: string;
            const InnerPkgType: string;
            const InnerQty: string;
            const InnerPkgs: string;
            const InnerExcsQty: string;
            const OuterPkgType: string;
            const OuterQty: string;
            const OuterPkgs: string;
            const OuterExcsQty: string;
            const QtyReceived: string;
            const SchedCount: string;
            const ExtDescription: string;
            const QtyPending: string;
            const JobNo: string;
            const OriginQty: string;
            const PutaxPcent: string;
            const PutaxAmt: string;
            const TotAllocatedQty: string;
            const IweightUom: string;
            const IgrossWt: string;
            const InetWt: string;
            const Ivolume: string;
            const TotGrossWt: string;
            const TotNetWt: string;
            const Dimension: string;
            const ReorderQty: string;
            const Remark: string;
            const SubconJob: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const MrpRequiredQty: string;
            const OverReceiptPcent: string;
            const ZeroPrice: string;
            const OrderNoRecnum: string;
            const OrderNoPosted: string;
            const OrderNoClosed: string;
            const OrderNoVendorNo: string;
            const OrderNoVendorName: string;
            const OrderNoVendorAddress: string;
            const OrderNoVendorAddress2: string;
            const OrderNoVendorAddress3: string;
            const OrderNoVendorAddress4: string;
            const OrderNoOrderDate: string;
            const OrderNoDueDate: string;
            const OrderNoSchedDate: string;
            const OrderNoShipTo: string;
            const OrderNoAddress: string;
            const OrderNoAddress2: string;
            const OrderNoAddress3: string;
            const OrderNoAddress4: string;
            const OrderNoMultiShip: string;
            const OrderNoComputeTax: string;
            const OrderNoShipVia: string;
            const OrderNoShipmentTerms: string;
            const OrderNoBuyer: string;
            const OrderNoPayTerms: string;
            const OrderNoAnlys1: string;
            const OrderNoAnlys2: string;
            const OrderNoCcy: string;
            const OrderNoExchRate: string;
            const OrderNoSourceType: string;
            const OrderNoSourceRefNo: string;
            const OrderNoLastSchedNo: string;
            const OrderNoLastLineNo: string;
            const OrderNoLastTextNo: string;
            const OrderNoTotPriceAmt: string;
            const OrderNoTotPtaxAmt: string;
            const OrderNoTotExtPrice: string;
            const OrderNoTotLdiscAmt: string;
            const OrderNoTotAtaxAmt: string;
            const OrderNoTotItemAmt: string;
            const OrderNoTdiscPcent: string;
            const OrderNoTotTdiscAmt: string;
            const OrderNoNetTradeAmt: string;
            const OrderNoTotChgsAmt: string;
            const OrderNoNetOrdrAmt: string;
            const OrderNoTotGtaxAmt: string;
            const OrderNoNetPayAmt: string;
            const OrderNoDpsPcent: string;
            const OrderNoTotDpsAmt: string;
            const OrderNoNetBalAmt: string;
            const OrderNoTotTdiscCpd: string;
            const OrderNoTotGtaxCpd: string;
            const OrderNoTotDpsCpd: string;
            const OrderNoDpsRefNo: string;
            const OrderNoDpsFundCode: string;
            const OrderNoDpsPayee: string;
            const OrderNoDpsChequeNo: string;
            const OrderNoDpsDate: string;
            const OrderNoCreatedDate: string;
            const OrderNoCreatedBy: string;
            const OrderNoRevisedDate: string;
            const OrderNoRevisedBy: string;
            const OrderNoPostedDate: string;
            const OrderNoPostedBy: string;
            const OrderNoLockType: string;
            const OrderNoLockRefNo: string;
            const OrderNoLastLogNo: string;
            const OrderNoOwnerBranch: string;
            const OrderNoSourceBranch: string;
            const OrderNoComments1: string;
            const OrderNoComments2: string;
            const OrderNoComments3: string;
            const OrderNoComments4: string;
            const OrderNoServerRevised: string;
            const OrderNoWebAmended: string;
            const OrderNoPubAccess: string;
            const OrderNoConfirmed: string;
            const OrderNoCheckCrlimit: string;
            const OrderNoCheckCrbal: string;
            const OrderNoJobNo: string;
            const OrderNoConsign: string;
            const OrderNoPortLoading: string;
            const OrderNoPortDischarge: string;
            const OrderNoVesselName: string;
            const OrderNoForwarder: string;
            const OrderNoLcNo: string;
            const OrderNoOriginCountry: string;
            const OrderNoPutaxType: string;
            const OrderNoGputaxPcent: string;
            const OrderNoTotGputaxAmt: string;
            const OrderNoTotLputaxAmt: string;
            const OrderNoAnlys7: string;
            const OrderNoAnlys8: string;
            const OrderNoLastLinkNo: string;
            const OrderNoFlag: string;
            const OrderNoHoldBy: string;
            const OrderNoSubconPo: string;
            const OrderNoMrpExclude: string;
            const OrderNoFromPr: string;
            const OrderNoAnlys9: string;
            const OrderNoAnlys10: string;
            const OrderNoAnlys11: string;
            const OrderNoAnlys12: string;
            const OrderNoAnlys13: string;
            const OrderNoAnlys14: string;
            const OrderNoRefCompanyCode: string;
            const OrderNoRefSalesOrderNo: string;
            const OrderNoTaxTerms: string;
            const OrderNoCustomTerms: string;
            const OrderNoLmeCost: string;
            const OrderNoLmeCcy: string;
            const OrderNoLmeExchRate: string;
            const OrderNoAddressCode: string;
            const OrderNoContactPerson: string;
            const OrderNoContactTitle: string;
            const OrderNoTelNo: string;
            const OrderNoFaxNo: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseOrderDetailService {
        const baseUrl = "Purchasing/PurchaseOrderDetail";
        function Create(request: Serenity.SaveRequest<PurchaseOrderDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseOrderDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseOrderDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseOrderDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseOrderForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseOrderForm {
        OrderNo: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        VendorAddress: Serenity.StringEditor;
        VendorAddress2: Serenity.StringEditor;
        VendorAddress3: Serenity.StringEditor;
        VendorAddress4: Serenity.StringEditor;
        ShipTo: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        OrderDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        SchedDate: Serenity.DateEditor;
        Buyer: Serenity.StringEditor;
        PortLoading: Serenity.StringEditor;
        PortDischarge: Serenity.StringEditor;
        ShipVia: Serenity.StringEditor;
        ShipmentTerms: Serenity.StringEditor;
        Forwarder: Serenity.StringEditor;
        LcNo: Serenity.StringEditor;
        VesselName: Serenity.StringEditor;
        OriginCountry: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PayTerms: Serenity.StringEditor;
        MultiShip: Serenity.StringEditor;
        MrpExclude: Serenity.StringEditor;
        ItemDetailList: PurchaseOrderDetailEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        TotGtaxAmt: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        DpsPcent: Serenity.DecimalEditor;
        TotDpsAmt: Serenity.DecimalEditor;
        DpsFundCode: Serenity.StringEditor;
        DpsDate: Serenity.DateEditor;
        DpsChequeNo: Serenity.StringEditor;
        DpsRefNo: Serenity.StringEditor;
        DpsPayee: Serenity.TextAreaEditor;
        Comments1: Serenity.TextAreaEditor;
        Comments2: Serenity.TextAreaEditor;
        Comments3: Serenity.TextAreaEditor;
        Comments4: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseOrderRow {
        Recnum?: number;
        OrderNo?: string;
        Posted?: boolean;
        Closed?: boolean;
        VendorNo?: string;
        VendorName?: string;
        VendorAddress?: string;
        VendorAddress2?: string;
        VendorAddress3?: string;
        VendorAddress4?: string;
        OrderDate?: string;
        DueDate?: string;
        SchedDate?: string;
        ShipTo?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        MultiShip?: string;
        ComputeTax?: string;
        ShipVia?: string;
        ShipmentTerms?: string;
        Buyer?: string;
        PayTerms?: string;
        Anlys1?: string;
        Anlys2?: string;
        Ccy?: string;
        ExchRate?: number;
        SourceType?: string;
        SourceRefNo?: string;
        LastSchedNo?: number;
        LastLineNo?: number;
        LastTextNo?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        DpsPcent?: number;
        TotDpsAmt?: number;
        NetBalAmt?: number;
        TotTdiscCpd?: number;
        TotGtaxCpd?: number;
        TotDpsCpd?: number;
        DpsRefNo?: string;
        DpsFundCode?: string;
        DpsPayee?: string;
        DpsChequeNo?: string;
        DpsDate?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LockType?: string;
        LockRefNo?: string;
        LastLogNo?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        ServerRevised?: string;
        WebAmended?: string;
        PubAccess?: string;
        Confirmed?: string;
        CheckCrlimit?: string;
        CheckCrbal?: number;
        JobNo?: string;
        Consign?: string;
        PortLoading?: string;
        PortDischarge?: string;
        VesselName?: string;
        Forwarder?: string;
        LcNo?: string;
        OriginCountry?: string;
        PutaxType?: string;
        GputaxPcent?: number;
        TotGputaxAmt?: number;
        TotLputaxAmt?: number;
        Anlys7?: string;
        Anlys8?: string;
        LastLinkNo?: number;
        Flag?: string;
        HoldBy?: string;
        SubconPo?: string;
        MrpExclude?: string;
        FromPr?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        RefCompanyCode?: string;
        RefSalesOrderNo?: string;
        TaxTerms?: string;
        CustomTerms?: string;
        LmeCost?: number;
        LmeCcy?: string;
        LmeExchRate?: number;
        AddressCode?: string;
        ContactPerson?: string;
        ContactTitle?: string;
        TelNo?: string;
        FaxNo?: string;
        ItemDetailList?: PurchaseOrderDetailRow[];
    }
    namespace PurchaseOrderRow {
        const idProperty = "OrderNo";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Purchasing.PurchaseOrder";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const Posted: string;
            const Closed: string;
            const VendorNo: string;
            const VendorName: string;
            const VendorAddress: string;
            const VendorAddress2: string;
            const VendorAddress3: string;
            const VendorAddress4: string;
            const OrderDate: string;
            const DueDate: string;
            const SchedDate: string;
            const ShipTo: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const MultiShip: string;
            const ComputeTax: string;
            const ShipVia: string;
            const ShipmentTerms: string;
            const Buyer: string;
            const PayTerms: string;
            const Anlys1: string;
            const Anlys2: string;
            const Ccy: string;
            const ExchRate: string;
            const SourceType: string;
            const SourceRefNo: string;
            const LastSchedNo: string;
            const LastLineNo: string;
            const LastTextNo: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const DpsPcent: string;
            const TotDpsAmt: string;
            const NetBalAmt: string;
            const TotTdiscCpd: string;
            const TotGtaxCpd: string;
            const TotDpsCpd: string;
            const DpsRefNo: string;
            const DpsFundCode: string;
            const DpsPayee: string;
            const DpsChequeNo: string;
            const DpsDate: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LockType: string;
            const LockRefNo: string;
            const LastLogNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const ServerRevised: string;
            const WebAmended: string;
            const PubAccess: string;
            const Confirmed: string;
            const CheckCrlimit: string;
            const CheckCrbal: string;
            const JobNo: string;
            const Consign: string;
            const PortLoading: string;
            const PortDischarge: string;
            const VesselName: string;
            const Forwarder: string;
            const LcNo: string;
            const OriginCountry: string;
            const PutaxType: string;
            const GputaxPcent: string;
            const TotGputaxAmt: string;
            const TotLputaxAmt: string;
            const Anlys7: string;
            const Anlys8: string;
            const LastLinkNo: string;
            const Flag: string;
            const HoldBy: string;
            const SubconPo: string;
            const MrpExclude: string;
            const FromPr: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const RefCompanyCode: string;
            const RefSalesOrderNo: string;
            const TaxTerms: string;
            const CustomTerms: string;
            const LmeCost: string;
            const LmeCcy: string;
            const LmeExchRate: string;
            const AddressCode: string;
            const ContactPerson: string;
            const ContactTitle: string;
            const TelNo: string;
            const FaxNo: string;
            const ItemDetailList: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseOrderService {
        const baseUrl = "Purchasing/PurchaseOrder";
        function Create(request: Serenity.SaveRequest<PurchaseOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseRequisitionDetailForm {
        ReqNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        Qty: Serenity.DecimalEditor;
        ExtDescription: Serenity.StringEditor;
        QtyAllocated: Serenity.DecimalEditor;
        Remark: Serenity.StringEditor;
        QtyPreAllocated: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseRequisitionDetailRow {
        Recnum?: number;
        ReqNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        Qty?: number;
        ExtDescription?: string;
        QtyAllocated?: number;
        Remark?: string;
        QtyPreAllocated?: number;
        ReqNoRecnum?: number;
        ReqNoClosed?: string;
        ReqNoRequestBy?: string;
        ReqNoRequestDate?: string;
        ReqNoDueDate?: string;
        ReqNoRemindDate?: string;
        ReqNoReminded?: string;
        ReqNoRecipients?: string;
        ReqNoComments1?: string;
        ReqNoComments2?: string;
        ReqNoComments3?: string;
        ReqNoComments4?: string;
        ReqNoCreatedBy?: string;
        ReqNoCreatedDate?: string;
        ReqNoRevisedBy?: string;
        ReqNoRevisedDate?: string;
        ReqNoClosedBy?: string;
        ReqNoClosedDate?: string;
        ReqNoMessageId?: number;
        ReqNoStatus?: string;
        ReqNoApproved?: string;
        ReqNoApprovedBy?: string;
        ReqNoApprovedDate?: string;
    }
    namespace PurchaseRequisitionDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "ReqNo";
        const localTextPrefix = "Purchasing.PurchaseRequisitionDetail";
        namespace Fields {
            const Recnum: string;
            const ReqNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const Qty: string;
            const ExtDescription: string;
            const QtyAllocated: string;
            const Remark: string;
            const QtyPreAllocated: string;
            const ReqNoRecnum: string;
            const ReqNoClosed: string;
            const ReqNoRequestBy: string;
            const ReqNoRequestDate: string;
            const ReqNoDueDate: string;
            const ReqNoRemindDate: string;
            const ReqNoReminded: string;
            const ReqNoRecipients: string;
            const ReqNoComments1: string;
            const ReqNoComments2: string;
            const ReqNoComments3: string;
            const ReqNoComments4: string;
            const ReqNoCreatedBy: string;
            const ReqNoCreatedDate: string;
            const ReqNoRevisedBy: string;
            const ReqNoRevisedDate: string;
            const ReqNoClosedBy: string;
            const ReqNoClosedDate: string;
            const ReqNoMessageId: string;
            const ReqNoStatus: string;
            const ReqNoApproved: string;
            const ReqNoApprovedBy: string;
            const ReqNoApprovedDate: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseRequisitionDetailService {
        const baseUrl = "Purchasing/PurchaseRequisitionDetail";
        function Create(request: Serenity.SaveRequest<PurchaseRequisitionDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseRequisitionDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseRequisitionDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseRequisitionDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseRequisitionForm {
        ReqNo: Serenity.StringEditor;
        RequestBy: Serenity.StringEditor;
        RequestDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        RemindDate: Serenity.DateEditor;
        Reminded: Serenity.StringEditor;
        Recipients: Serenity.StringEditor;
        DetailList: PurchaseRequisitionDetailEditor;
        Comments1: Serenity.TextAreaEditor;
        Comments2: Serenity.TextAreaEditor;
        Comments3: Serenity.TextAreaEditor;
        Comments4: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseRequisitionRow {
        Recnum?: number;
        ReqNo?: string;
        Closed?: string;
        RequestBy?: string;
        RequestDate?: string;
        DueDate?: string;
        RemindDate?: string;
        Reminded?: string;
        Recipients?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        CreatedBy?: string;
        CreatedDate?: string;
        RevisedBy?: string;
        RevisedDate?: string;
        ClosedBy?: string;
        ClosedDate?: string;
        MessageId?: number;
        Status?: string;
        Approved?: string;
        ApprovedBy?: string;
        ApprovedDate?: string;
    }
    namespace PurchaseRequisitionRow {
        const idProperty = "ReqNo";
        const nameProperty = "ReqNo";
        const localTextPrefix = "Purchasing.PurchaseRequisition";
        namespace Fields {
            const Recnum: string;
            const ReqNo: string;
            const Closed: string;
            const RequestBy: string;
            const RequestDate: string;
            const DueDate: string;
            const RemindDate: string;
            const Reminded: string;
            const Recipients: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const CreatedBy: string;
            const CreatedDate: string;
            const RevisedBy: string;
            const RevisedDate: string;
            const ClosedBy: string;
            const ClosedDate: string;
            const MessageId: string;
            const Status: string;
            const Approved: string;
            const ApprovedBy: string;
            const ApprovedDate: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseRequisitionService {
        const baseUrl = "Purchasing/PurchaseRequisition";
        function Create(request: Serenity.SaveRequest<PurchaseRequisitionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseRequisitionRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseRequisitionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseRequisitionRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnChargeForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseReturnChargeForm {
        RefNo: Serenity.StringEditor;
        EntryNo: Serenity.DecimalEditor;
        OrderNo: Serenity.StringEditor;
        SeqNo: Serenity.DecimalEditor;
        ChargeType: Serenity.StringEditor;
        Particulars: Serenity.StringEditor;
        BalAmt: Serenity.DecimalEditor;
        ReturnAmt: Serenity.DecimalEditor;
        LocReturnAmt: Serenity.DecimalEditor;
        AcctPurchase: Serenity.StringEditor;
        Deduction: Serenity.StringEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys7: Serenity.StringEditor;
        Anlys8: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        Anlys13: Serenity.StringEditor;
        Anlys14: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseReturnChargeRow {
        Recnum?: number;
        RefNo?: string;
        EntryNo?: number;
        OrderNo?: string;
        SeqNo?: number;
        ChargeType?: string;
        Particulars?: string;
        BalAmt?: number;
        ReturnAmt?: number;
        LocReturnAmt?: number;
        AcctPurchase?: string;
        Deduction?: string;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        RefNoRecnum?: number;
        RefNoEntryMethod?: string;
        RefNoPosted?: string;
        RefNoTranDate?: string;
        RefNoGrnNo?: string;
        RefNoVendorNo?: string;
        RefNoVendorName?: string;
        RefNoDoNo?: string;
        RefNoInvoiceNo?: string;
        RefNoHoldItems?: string;
        RefNoLoc?: string;
        RefNoCcy?: string;
        RefNoExchRate?: number;
        RefNoTotPriceAmt?: number;
        RefNoTotPtaxAmt?: number;
        RefNoTotExtPrice?: number;
        RefNoTotLdiscAmt?: number;
        RefNoTotAtaxAmt?: number;
        RefNoTotItemAmt?: number;
        RefNoTotRefundAmt?: number;
        RefNoTotVariaAmt?: number;
        RefNoTdiscPcent?: number;
        RefNoTotTdiscAmt?: number;
        RefNoNetTradeAmt?: number;
        RefNoTotChgsAmt?: number;
        RefNoNetOrdrAmt?: number;
        RefNoTotGtaxAmt?: number;
        RefNoNetPayAmt?: number;
        RefNoTotTdiscCpd?: number;
        RefNoLocPriceAmt?: number;
        RefNoLocPtaxAmt?: number;
        RefNoLocExtPrice?: number;
        RefNoLocLdiscAmt?: number;
        RefNoLocAtaxAmt?: number;
        RefNoLocItemAmt?: number;
        RefNoLocRefundAmt?: number;
        RefNoLocVariaAmt?: number;
        RefNoLocTdiscAmt?: number;
        RefNoLocChgsAmt?: number;
        RefNoLocGtaxAmt?: number;
        RefNoLocPayAmt?: number;
        RefNoAcctVendor?: string;
        RefNoAcctTdisc?: string;
        RefNoAcctGtax?: string;
        RefNoCreatedDate?: string;
        RefNoCreatedBy?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoPostedDate?: string;
        RefNoPostedBy?: string;
        RefNoLogNo?: number;
        RefNoLastLogNo?: number;
        RefNoOwnerBranch?: string;
        RefNoSourceBranch?: string;
        RefNoSettleAt?: string;
        RefNoReason?: string;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
        RefNoAnlys15?: string;
        RefNoAnlys16?: string;
        RefNoAnlys17?: string;
        RefNoAnlys18?: string;
    }
    namespace PurchaseReturnChargeRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Purchasing.PurchaseReturnCharge";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const EntryNo: string;
            const OrderNo: string;
            const SeqNo: string;
            const ChargeType: string;
            const Particulars: string;
            const BalAmt: string;
            const ReturnAmt: string;
            const LocReturnAmt: string;
            const AcctPurchase: string;
            const Deduction: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const RefNoRecnum: string;
            const RefNoEntryMethod: string;
            const RefNoPosted: string;
            const RefNoTranDate: string;
            const RefNoGrnNo: string;
            const RefNoVendorNo: string;
            const RefNoVendorName: string;
            const RefNoDoNo: string;
            const RefNoInvoiceNo: string;
            const RefNoHoldItems: string;
            const RefNoLoc: string;
            const RefNoCcy: string;
            const RefNoExchRate: string;
            const RefNoTotPriceAmt: string;
            const RefNoTotPtaxAmt: string;
            const RefNoTotExtPrice: string;
            const RefNoTotLdiscAmt: string;
            const RefNoTotAtaxAmt: string;
            const RefNoTotItemAmt: string;
            const RefNoTotRefundAmt: string;
            const RefNoTotVariaAmt: string;
            const RefNoTdiscPcent: string;
            const RefNoTotTdiscAmt: string;
            const RefNoNetTradeAmt: string;
            const RefNoTotChgsAmt: string;
            const RefNoNetOrdrAmt: string;
            const RefNoTotGtaxAmt: string;
            const RefNoNetPayAmt: string;
            const RefNoTotTdiscCpd: string;
            const RefNoLocPriceAmt: string;
            const RefNoLocPtaxAmt: string;
            const RefNoLocExtPrice: string;
            const RefNoLocLdiscAmt: string;
            const RefNoLocAtaxAmt: string;
            const RefNoLocItemAmt: string;
            const RefNoLocRefundAmt: string;
            const RefNoLocVariaAmt: string;
            const RefNoLocTdiscAmt: string;
            const RefNoLocChgsAmt: string;
            const RefNoLocGtaxAmt: string;
            const RefNoLocPayAmt: string;
            const RefNoAcctVendor: string;
            const RefNoAcctTdisc: string;
            const RefNoAcctGtax: string;
            const RefNoCreatedDate: string;
            const RefNoCreatedBy: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoPostedDate: string;
            const RefNoPostedBy: string;
            const RefNoLogNo: string;
            const RefNoLastLogNo: string;
            const RefNoOwnerBranch: string;
            const RefNoSourceBranch: string;
            const RefNoSettleAt: string;
            const RefNoReason: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
            const RefNoAnlys15: string;
            const RefNoAnlys16: string;
            const RefNoAnlys17: string;
            const RefNoAnlys18: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseReturnChargeService {
        const baseUrl = "Purchasing/PurchaseReturnCharge";
        function Create(request: Serenity.SaveRequest<PurchaseReturnChargeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseReturnChargeRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseReturnChargeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseReturnChargeRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseReturnDetailForm {
        RefNo: Serenity.StringEditor;
        EntryNo: Serenity.DecimalEditor;
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        QtyBalance: Serenity.DecimalEditor;
        QtyReturned: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        Ptax: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        AtaxAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        RefundAmt: Serenity.DecimalEditor;
        VariaAmt: Serenity.DecimalEditor;
        LdiscRate: Serenity.DecimalEditor;
        AtaxRate: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        PtaxAmt: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocPtaxAmt: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        LocAtaxAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        LocRefundAmt: Serenity.DecimalEditor;
        LocVariaAmt: Serenity.DecimalEditor;
        AcctPurchase: Serenity.StringEditor;
        AcctLdisc: Serenity.StringEditor;
        AcctPtax: Serenity.StringEditor;
        AcctAtax: Serenity.StringEditor;
        AcctVariance: Serenity.StringEditor;
        CostReturned: Serenity.DecimalEditor;
        Loc: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Reorder: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
        InspectionRefNo: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseReturnDetailRow {
        Recnum?: number;
        RefNo?: string;
        EntryNo?: number;
        OrderNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        QtyBalance?: number;
        QtyReturned?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        RefundAmt?: number;
        VariaAmt?: number;
        LdiscRate?: number;
        AtaxRate?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocRefundAmt?: number;
        LocVariaAmt?: number;
        AcctPurchase?: string;
        AcctLdisc?: string;
        AcctPtax?: string;
        AcctAtax?: string;
        AcctVariance?: string;
        CostReturned?: number;
        Loc?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        Reorder?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        InspectionRefNo?: string;
        Remarks?: string;
        RefNoRecnum?: number;
        RefNoEntryMethod?: string;
        RefNoPosted?: string;
        RefNoTranDate?: string;
        RefNoGrnNo?: string;
        RefNoVendorNo?: string;
        RefNoVendorName?: string;
        RefNoDoNo?: string;
        RefNoInvoiceNo?: string;
        RefNoHoldItems?: string;
        RefNoLoc?: string;
        RefNoCcy?: string;
        RefNoExchRate?: number;
        RefNoTotPriceAmt?: number;
        RefNoTotPtaxAmt?: number;
        RefNoTotExtPrice?: number;
        RefNoTotLdiscAmt?: number;
        RefNoTotAtaxAmt?: number;
        RefNoTotItemAmt?: number;
        RefNoTotRefundAmt?: number;
        RefNoTotVariaAmt?: number;
        RefNoTdiscPcent?: number;
        RefNoTotTdiscAmt?: number;
        RefNoNetTradeAmt?: number;
        RefNoTotChgsAmt?: number;
        RefNoNetOrdrAmt?: number;
        RefNoTotGtaxAmt?: number;
        RefNoNetPayAmt?: number;
        RefNoTotTdiscCpd?: number;
        RefNoLocPriceAmt?: number;
        RefNoLocPtaxAmt?: number;
        RefNoLocExtPrice?: number;
        RefNoLocLdiscAmt?: number;
        RefNoLocAtaxAmt?: number;
        RefNoLocItemAmt?: number;
        RefNoLocRefundAmt?: number;
        RefNoLocVariaAmt?: number;
        RefNoLocTdiscAmt?: number;
        RefNoLocChgsAmt?: number;
        RefNoLocGtaxAmt?: number;
        RefNoLocPayAmt?: number;
        RefNoAcctVendor?: string;
        RefNoAcctTdisc?: string;
        RefNoAcctGtax?: string;
        RefNoCreatedDate?: string;
        RefNoCreatedBy?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoPostedDate?: string;
        RefNoPostedBy?: string;
        RefNoLogNo?: number;
        RefNoLastLogNo?: number;
        RefNoOwnerBranch?: string;
        RefNoSourceBranch?: string;
        RefNoSettleAt?: string;
        RefNoReason?: string;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
        RefNoAnlys15?: string;
        RefNoAnlys16?: string;
        RefNoAnlys17?: string;
        RefNoAnlys18?: string;
    }
    namespace PurchaseReturnDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Purchasing.PurchaseReturnDetail";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const EntryNo: string;
            const OrderNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const QtyBalance: string;
            const QtyReturned: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const RefundAmt: string;
            const VariaAmt: string;
            const LdiscRate: string;
            const AtaxRate: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocRefundAmt: string;
            const LocVariaAmt: string;
            const AcctPurchase: string;
            const AcctLdisc: string;
            const AcctPtax: string;
            const AcctAtax: string;
            const AcctVariance: string;
            const CostReturned: string;
            const Loc: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const Reorder: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const InspectionRefNo: string;
            const Remarks: string;
            const RefNoRecnum: string;
            const RefNoEntryMethod: string;
            const RefNoPosted: string;
            const RefNoTranDate: string;
            const RefNoGrnNo: string;
            const RefNoVendorNo: string;
            const RefNoVendorName: string;
            const RefNoDoNo: string;
            const RefNoInvoiceNo: string;
            const RefNoHoldItems: string;
            const RefNoLoc: string;
            const RefNoCcy: string;
            const RefNoExchRate: string;
            const RefNoTotPriceAmt: string;
            const RefNoTotPtaxAmt: string;
            const RefNoTotExtPrice: string;
            const RefNoTotLdiscAmt: string;
            const RefNoTotAtaxAmt: string;
            const RefNoTotItemAmt: string;
            const RefNoTotRefundAmt: string;
            const RefNoTotVariaAmt: string;
            const RefNoTdiscPcent: string;
            const RefNoTotTdiscAmt: string;
            const RefNoNetTradeAmt: string;
            const RefNoTotChgsAmt: string;
            const RefNoNetOrdrAmt: string;
            const RefNoTotGtaxAmt: string;
            const RefNoNetPayAmt: string;
            const RefNoTotTdiscCpd: string;
            const RefNoLocPriceAmt: string;
            const RefNoLocPtaxAmt: string;
            const RefNoLocExtPrice: string;
            const RefNoLocLdiscAmt: string;
            const RefNoLocAtaxAmt: string;
            const RefNoLocItemAmt: string;
            const RefNoLocRefundAmt: string;
            const RefNoLocVariaAmt: string;
            const RefNoLocTdiscAmt: string;
            const RefNoLocChgsAmt: string;
            const RefNoLocGtaxAmt: string;
            const RefNoLocPayAmt: string;
            const RefNoAcctVendor: string;
            const RefNoAcctTdisc: string;
            const RefNoAcctGtax: string;
            const RefNoCreatedDate: string;
            const RefNoCreatedBy: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoPostedDate: string;
            const RefNoPostedBy: string;
            const RefNoLogNo: string;
            const RefNoLastLogNo: string;
            const RefNoOwnerBranch: string;
            const RefNoSourceBranch: string;
            const RefNoSettleAt: string;
            const RefNoReason: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
            const RefNoAnlys15: string;
            const RefNoAnlys16: string;
            const RefNoAnlys17: string;
            const RefNoAnlys18: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseReturnDetailService {
        const baseUrl = "Purchasing/PurchaseReturnDetail";
        function Create(request: Serenity.SaveRequest<PurchaseReturnDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseReturnDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseReturnDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseReturnDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface PurchaseReturnForm {
        RefNo: Serenity.StringEditor;
        EntryMethod: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        TranDate: Serenity.DateEditor;
        GrnNo: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        DoNo: Serenity.StringEditor;
        InvoiceNo: Serenity.StringEditor;
        HoldItems: Serenity.StringEditor;
        Loc: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        TotPriceAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TotExtPrice: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        TotAtaxAmt: Serenity.DecimalEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotRefundAmt: Serenity.DecimalEditor;
        TotVariaAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetOrdrAmt: Serenity.DecimalEditor;
        TotGtaxAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
        TotTdiscCpd: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocPtaxAmt: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        LocAtaxAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        LocRefundAmt: Serenity.DecimalEditor;
        LocVariaAmt: Serenity.DecimalEditor;
        LocTdiscAmt: Serenity.DecimalEditor;
        LocChgsAmt: Serenity.DecimalEditor;
        LocGtaxAmt: Serenity.DecimalEditor;
        LocPayAmt: Serenity.DecimalEditor;
        AcctVendor: Serenity.StringEditor;
        AcctTdisc: Serenity.StringEditor;
        AcctGtax: Serenity.StringEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        PostedDate: Serenity.DateEditor;
        PostedBy: Serenity.StringEditor;
        LogNo: Serenity.DecimalEditor;
        LastLogNo: Serenity.DecimalEditor;
        OwnerBranch: Serenity.StringEditor;
        SourceBranch: Serenity.StringEditor;
        SettleAt: Serenity.StringEditor;
        Reason: Serenity.StringEditor;
        Anlys9: Serenity.StringEditor;
        Anlys10: Serenity.StringEditor;
        Anlys11: Serenity.StringEditor;
        Anlys12: Serenity.StringEditor;
        Anlys13: Serenity.StringEditor;
        Anlys14: Serenity.StringEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface PurchaseReturnRow {
        Recnum?: number;
        RefNo?: string;
        EntryMethod?: string;
        Posted?: string;
        TranDate?: string;
        GrnNo?: string;
        VendorNo?: string;
        VendorName?: string;
        DoNo?: string;
        InvoiceNo?: string;
        HoldItems?: string;
        Loc?: string;
        Ccy?: string;
        ExchRate?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TotRefundAmt?: number;
        TotVariaAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        TotTdiscCpd?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocRefundAmt?: number;
        LocVariaAmt?: number;
        LocTdiscAmt?: number;
        LocChgsAmt?: number;
        LocGtaxAmt?: number;
        LocPayAmt?: number;
        AcctVendor?: string;
        AcctTdisc?: string;
        AcctGtax?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LogNo?: number;
        LastLogNo?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        SettleAt?: string;
        Reason?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
    }
    namespace PurchaseReturnRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Purchasing.PurchaseReturn";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const EntryMethod: string;
            const Posted: string;
            const TranDate: string;
            const GrnNo: string;
            const VendorNo: string;
            const VendorName: string;
            const DoNo: string;
            const InvoiceNo: string;
            const HoldItems: string;
            const Loc: string;
            const Ccy: string;
            const ExchRate: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TotRefundAmt: string;
            const TotVariaAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const TotTdiscCpd: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocRefundAmt: string;
            const LocVariaAmt: string;
            const LocTdiscAmt: string;
            const LocChgsAmt: string;
            const LocGtaxAmt: string;
            const LocPayAmt: string;
            const AcctVendor: string;
            const AcctTdisc: string;
            const AcctGtax: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LogNo: string;
            const LastLogNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const SettleAt: string;
            const Reason: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace PurchaseReturnService {
        const baseUrl = "Purchasing/PurchaseReturn";
        function Create(request: Serenity.SaveRequest<PurchaseReturnRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<PurchaseReturnRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<PurchaseReturnRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<PurchaseReturnRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class VendorQuotationForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VendorQuotationForm {
        OrderNo: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
        VendorRefNo: Serenity.StringEditor;
        VendorAddress: Serenity.StringEditor;
        VendorAddress2: Serenity.StringEditor;
        VendorAddress3: Serenity.StringEditor;
        VendorAddress4: Serenity.StringEditor;
        OrderDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        SchedDate: Serenity.DateEditor;
        ValidUntil: Serenity.DateEditor;
        ShipTo: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        Buyer: Serenity.StringEditor;
        MultiShip: Serenity.StringEditor;
        PortLoading: Serenity.StringEditor;
        PortDischarge: Serenity.StringEditor;
        ShipVia: Serenity.StringEditor;
        ShipmentTerms: Serenity.StringEditor;
        VesselName: Serenity.StringEditor;
        Forwarder: Serenity.StringEditor;
        LcNo: Serenity.StringEditor;
        OriginCountry: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PayTerms: Serenity.StringEditor;
        PutaxType: Serenity.StringEditor;
        ComputeTax: Serenity.StringEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        Comments1: Serenity.TextAreaEditor;
        Comments2: Serenity.TextAreaEditor;
        Comments3: Serenity.TextAreaEditor;
        Comments4: Serenity.TextAreaEditor;
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class VendorQuotationItemAdditionalInfoForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VendorQuotationItemAdditionalInfoForm {
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.IntegerEditor;
        EntryNo: Serenity.IntegerEditor;
        Caption: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        BitmapPath: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface VendorQuotationItemAdditionalInfoRow {
        Recnum?: number;
        OrderNo?: string;
        LineNo?: number;
        EntryNo?: number;
        Caption?: string;
        Description?: string;
        BitmapPath?: string;
    }
    namespace VendorQuotationItemAdditionalInfoRow {
        const idProperty = "Recnum";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Purchasing.VendorQuotationItemAdditionalInfo";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const LineNo: string;
            const EntryNo: string;
            const Caption: string;
            const Description: string;
            const BitmapPath: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace VendorQuotationItemAdditionalInfoService {
        const baseUrl = "Purchasing/VendorQuotationItemAdditionalInfo";
        function Create(request: Serenity.SaveRequest<VendorQuotationItemAdditionalInfoRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VendorQuotationItemAdditionalInfoRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VendorQuotationItemAdditionalInfoRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VendorQuotationItemAdditionalInfoRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class VendorQuotationRemarkForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VendorQuotationRemarkForm {
        OrderNo: Serenity.StringEditor;
        TextNo: Serenity.IntegerEditor;
        TextType: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Remarks: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface VendorQuotationRemarkRow {
        Recnum?: number;
        OrderNo?: string;
        TextNo?: number;
        TextType?: string;
        Description?: string;
        Remarks?: string;
        OrderNoRecnum?: number;
        OrderNoClosed?: string;
        OrderNoVendorNo?: string;
        OrderNoVendorName?: string;
        OrderNoVendorAddress?: string;
        OrderNoVendorAddress2?: string;
        OrderNoVendorAddress3?: string;
        OrderNoVendorAddress4?: string;
        OrderNoOrderDate?: string;
        OrderNoDueDate?: string;
        OrderNoSchedDate?: string;
        OrderNoShipTo?: string;
        OrderNoAddress?: string;
        OrderNoAddress2?: string;
        OrderNoAddress3?: string;
        OrderNoAddress4?: string;
        OrderNoMultiShip?: string;
        OrderNoComputeTax?: string;
        OrderNoShipVia?: string;
        OrderNoShipmentTerms?: string;
        OrderNoBuyer?: string;
        OrderNoPayTerms?: string;
        OrderNoAnlys1?: string;
        OrderNoAnlys2?: string;
        OrderNoCcy?: string;
        OrderNoExchRate?: number;
        OrderNoSourceType?: string;
        OrderNoSourceRefNo?: string;
        OrderNoLastSchedNo?: number;
        OrderNoLastLineNo?: number;
        OrderNoLastTextNo?: number;
        OrderNoTotPriceAmt?: number;
        OrderNoTotPtaxAmt?: number;
        OrderNoTotExtPrice?: number;
        OrderNoTotLdiscAmt?: number;
        OrderNoTotAtaxAmt?: number;
        OrderNoTotItemAmt?: number;
        OrderNoTdiscPcent?: number;
        OrderNoTotTdiscAmt?: number;
        OrderNoNetTradeAmt?: number;
        OrderNoTotChgsAmt?: number;
        OrderNoNetOrdrAmt?: number;
        OrderNoTotGtaxAmt?: number;
        OrderNoNetPayAmt?: number;
        OrderNoDpsPcent?: number;
        OrderNoTotDpsAmt?: number;
        OrderNoNetBalAmt?: number;
        OrderNoTotTdiscCpd?: number;
        OrderNoTotGtaxCpd?: number;
        OrderNoTotDpsCpd?: number;
        OrderNoCreatedDate?: string;
        OrderNoCreatedBy?: string;
        OrderNoRevisedDate?: string;
        OrderNoRevisedBy?: string;
        OrderNoPostedDate?: string;
        OrderNoPostedBy?: string;
        OrderNoLockRefNo?: string;
        OrderNoLastLogNo?: number;
        OrderNoOwnerBranch?: string;
        OrderNoSourceBranch?: string;
        OrderNoComments1?: string;
        OrderNoComments2?: string;
        OrderNoComments3?: string;
        OrderNoComments4?: string;
        OrderNoPortLoading?: string;
        OrderNoPortDischarge?: string;
        OrderNoVesselName?: string;
        OrderNoForwarder?: string;
        OrderNoLcNo?: string;
        OrderNoOriginCountry?: string;
        OrderNoPutaxType?: string;
        OrderNoGputaxPcent?: number;
        OrderNoTotGputaxAmt?: number;
        OrderNoTotLputaxAmt?: number;
        OrderNoAnlys7?: string;
        OrderNoAnlys8?: string;
        OrderNoVendorRefNo?: string;
        OrderNoValidUntil?: string;
        OrderNoClosedBy?: string;
        OrderNoClosedDate?: string;
        OrderNoAnlys9?: string;
        OrderNoAnlys10?: string;
        OrderNoAnlys11?: string;
        OrderNoAnlys12?: string;
        OrderNoAnlys13?: string;
        OrderNoAnlys14?: string;
    }
    namespace VendorQuotationRemarkRow {
        const idProperty = "Recnum";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Purchasing.VendorQuotationRemark";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const TextNo: string;
            const TextType: string;
            const Description: string;
            const Remarks: string;
            const OrderNoRecnum: string;
            const OrderNoClosed: string;
            const OrderNoVendorNo: string;
            const OrderNoVendorName: string;
            const OrderNoVendorAddress: string;
            const OrderNoVendorAddress2: string;
            const OrderNoVendorAddress3: string;
            const OrderNoVendorAddress4: string;
            const OrderNoOrderDate: string;
            const OrderNoDueDate: string;
            const OrderNoSchedDate: string;
            const OrderNoShipTo: string;
            const OrderNoAddress: string;
            const OrderNoAddress2: string;
            const OrderNoAddress3: string;
            const OrderNoAddress4: string;
            const OrderNoMultiShip: string;
            const OrderNoComputeTax: string;
            const OrderNoShipVia: string;
            const OrderNoShipmentTerms: string;
            const OrderNoBuyer: string;
            const OrderNoPayTerms: string;
            const OrderNoAnlys1: string;
            const OrderNoAnlys2: string;
            const OrderNoCcy: string;
            const OrderNoExchRate: string;
            const OrderNoSourceType: string;
            const OrderNoSourceRefNo: string;
            const OrderNoLastSchedNo: string;
            const OrderNoLastLineNo: string;
            const OrderNoLastTextNo: string;
            const OrderNoTotPriceAmt: string;
            const OrderNoTotPtaxAmt: string;
            const OrderNoTotExtPrice: string;
            const OrderNoTotLdiscAmt: string;
            const OrderNoTotAtaxAmt: string;
            const OrderNoTotItemAmt: string;
            const OrderNoTdiscPcent: string;
            const OrderNoTotTdiscAmt: string;
            const OrderNoNetTradeAmt: string;
            const OrderNoTotChgsAmt: string;
            const OrderNoNetOrdrAmt: string;
            const OrderNoTotGtaxAmt: string;
            const OrderNoNetPayAmt: string;
            const OrderNoDpsPcent: string;
            const OrderNoTotDpsAmt: string;
            const OrderNoNetBalAmt: string;
            const OrderNoTotTdiscCpd: string;
            const OrderNoTotGtaxCpd: string;
            const OrderNoTotDpsCpd: string;
            const OrderNoCreatedDate: string;
            const OrderNoCreatedBy: string;
            const OrderNoRevisedDate: string;
            const OrderNoRevisedBy: string;
            const OrderNoPostedDate: string;
            const OrderNoPostedBy: string;
            const OrderNoLockRefNo: string;
            const OrderNoLastLogNo: string;
            const OrderNoOwnerBranch: string;
            const OrderNoSourceBranch: string;
            const OrderNoComments1: string;
            const OrderNoComments2: string;
            const OrderNoComments3: string;
            const OrderNoComments4: string;
            const OrderNoPortLoading: string;
            const OrderNoPortDischarge: string;
            const OrderNoVesselName: string;
            const OrderNoForwarder: string;
            const OrderNoLcNo: string;
            const OrderNoOriginCountry: string;
            const OrderNoPutaxType: string;
            const OrderNoGputaxPcent: string;
            const OrderNoTotGputaxAmt: string;
            const OrderNoTotLputaxAmt: string;
            const OrderNoAnlys7: string;
            const OrderNoAnlys8: string;
            const OrderNoVendorRefNo: string;
            const OrderNoValidUntil: string;
            const OrderNoClosedBy: string;
            const OrderNoClosedDate: string;
            const OrderNoAnlys9: string;
            const OrderNoAnlys10: string;
            const OrderNoAnlys11: string;
            const OrderNoAnlys12: string;
            const OrderNoAnlys13: string;
            const OrderNoAnlys14: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace VendorQuotationRemarkService {
        const baseUrl = "Purchasing/VendorQuotationRemark";
        function Create(request: Serenity.SaveRequest<VendorQuotationRemarkRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VendorQuotationRemarkRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VendorQuotationRemarkRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VendorQuotationRemarkRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    interface VendorQuotationRow {
        Recnum?: number;
        OrderNo?: string;
        Closed?: string;
        VendorNo?: string;
        VendorName?: string;
        VendorAddress?: string;
        VendorAddress2?: string;
        VendorAddress3?: string;
        VendorAddress4?: string;
        OrderDate?: string;
        DueDate?: string;
        SchedDate?: string;
        ShipTo?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        MultiShip?: string;
        ComputeTax?: string;
        ShipVia?: string;
        ShipmentTerms?: string;
        Buyer?: string;
        PayTerms?: string;
        Anlys1?: string;
        Anlys2?: string;
        Ccy?: string;
        ExchRate?: number;
        SourceType?: string;
        SourceRefNo?: string;
        LastSchedNo?: number;
        LastLineNo?: number;
        LastTextNo?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        DpsPcent?: number;
        TotDpsAmt?: number;
        NetBalAmt?: number;
        TotTdiscCpd?: number;
        TotGtaxCpd?: number;
        TotDpsCpd?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LockRefNo?: string;
        LastLogNo?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        PortLoading?: string;
        PortDischarge?: string;
        VesselName?: string;
        Forwarder?: string;
        LcNo?: string;
        OriginCountry?: string;
        PutaxType?: string;
        GputaxPcent?: number;
        TotGputaxAmt?: number;
        TotLputaxAmt?: number;
        Anlys7?: string;
        Anlys8?: string;
        VendorRefNo?: string;
        ValidUntil?: string;
        ClosedBy?: string;
        ClosedDate?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
    }
    namespace VendorQuotationRow {
        const idProperty = "Recnum";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Purchasing.VendorQuotation";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const Closed: string;
            const VendorNo: string;
            const VendorName: string;
            const VendorAddress: string;
            const VendorAddress2: string;
            const VendorAddress3: string;
            const VendorAddress4: string;
            const OrderDate: string;
            const DueDate: string;
            const SchedDate: string;
            const ShipTo: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const MultiShip: string;
            const ComputeTax: string;
            const ShipVia: string;
            const ShipmentTerms: string;
            const Buyer: string;
            const PayTerms: string;
            const Anlys1: string;
            const Anlys2: string;
            const Ccy: string;
            const ExchRate: string;
            const SourceType: string;
            const SourceRefNo: string;
            const LastSchedNo: string;
            const LastLineNo: string;
            const LastTextNo: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const DpsPcent: string;
            const TotDpsAmt: string;
            const NetBalAmt: string;
            const TotTdiscCpd: string;
            const TotGtaxCpd: string;
            const TotDpsCpd: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LockRefNo: string;
            const LastLogNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const PortLoading: string;
            const PortDischarge: string;
            const VesselName: string;
            const Forwarder: string;
            const LcNo: string;
            const OriginCountry: string;
            const PutaxType: string;
            const GputaxPcent: string;
            const TotGputaxAmt: string;
            const TotLputaxAmt: string;
            const Anlys7: string;
            const Anlys8: string;
            const VendorRefNo: string;
            const ValidUntil: string;
            const ClosedBy: string;
            const ClosedDate: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
        }
    }
}
declare namespace Matrix.Purchasing {
}
declare namespace Matrix.Purchasing {
    class VendorQuotationScheduleForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface VendorQuotationScheduleForm {
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.IntegerEditor;
        ShipNo: Serenity.IntegerEditor;
        DueDate: Serenity.DateEditor;
        SchedDate: Serenity.DateEditor;
        ShipVia: Serenity.StringEditor;
        ShipmentTerms: Serenity.StringEditor;
        Qty: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        ShipTo: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        VendorNo: Serenity.StringEditor;
        Buyer: Serenity.StringEditor;
        VendorName: Serenity.StringEditor;
    }
}
declare namespace Matrix.Purchasing {
    interface VendorQuotationScheduleRow {
        Recnum?: number;
        OrderNo?: string;
        LineNo?: number;
        ShipNo?: number;
        DueDate?: string;
        SchedDate?: string;
        ShipVia?: string;
        ShipmentTerms?: string;
        Qty?: number;
        ItemNo?: string;
        ShipTo?: string;
        Uom?: string;
        LotSize?: number;
        VendorNo?: string;
        Buyer?: string;
        VendorName?: string;
    }
    namespace VendorQuotationScheduleRow {
        const idProperty = "Recnum";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Purchasing.VendorQuotationSchedule";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const LineNo: string;
            const ShipNo: string;
            const DueDate: string;
            const SchedDate: string;
            const ShipVia: string;
            const ShipmentTerms: string;
            const Qty: string;
            const ItemNo: string;
            const ShipTo: string;
            const Uom: string;
            const LotSize: string;
            const VendorNo: string;
            const Buyer: string;
            const VendorName: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace VendorQuotationScheduleService {
        const baseUrl = "Purchasing/VendorQuotationSchedule";
        function Create(request: Serenity.SaveRequest<VendorQuotationScheduleRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VendorQuotationScheduleRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VendorQuotationScheduleRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VendorQuotationScheduleRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Purchasing {
    namespace VendorQuotationService {
        const baseUrl = "Purchasing/VendorQuotation";
        function Create(request: Serenity.SaveRequest<VendorQuotationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<VendorQuotationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<VendorQuotationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<VendorQuotationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
    class QuotationDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface QuotationDetailForm {
        RefNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        Qty: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        Ptax: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        AtaxAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        PtaxAmt: Serenity.DecimalEditor;
        PriceCpd: Serenity.DecimalEditor;
        PtaxCpd: Serenity.DecimalEditor;
        CreatedDate: Serenity.DateEditor;
        CreatedBy: Serenity.StringEditor;
        RevisedDate: Serenity.DateEditor;
        RevisedBy: Serenity.StringEditor;
        Configurable: Serenity.StringEditor;
        CustItemNo: Serenity.StringEditor;
        SpecNo: Serenity.StringEditor;
        BomNo: Serenity.StringEditor;
        StdAssort: Serenity.StringEditor;
        ExtDescription: Serenity.StringEditor;
        SltaxPcent: Serenity.DecimalEditor;
        SltaxAmt: Serenity.DecimalEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        MarkupPcent: Serenity.DecimalEditor;
        Markup: Serenity.DecimalEditor;
        MoldBomNo: Serenity.StringEditor;
        MoldFormulaCode: Serenity.StringEditor;
        MoldExpectedQty: Serenity.DecimalEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
    }
}
declare namespace Matrix.Sales {
    interface QuotationDetailRow {
        Recnum?: number;
        RefNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        Qty?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        PriceCpd?: number;
        PtaxCpd?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        Configurable?: string;
        CustItemNo?: string;
        SpecNo?: string;
        BomNo?: string;
        StdAssort?: string;
        ExtDescription?: string;
        SltaxPcent?: number;
        SltaxAmt?: number;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        MarkupPcent?: number;
        Markup?: number;
        MoldBomNo?: string;
        MoldFormulaCode?: string;
        MoldExpectedQty?: number;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        RefNoRecnum?: number;
        RefNoIssueDate?: string;
        RefNoValidUntil?: string;
        RefNoClosed?: string;
        RefNoCustomerNo?: string;
        RefNoCustomerName?: string;
        RefNoAddress?: string;
        RefNoAddress2?: string;
        RefNoAddress3?: string;
        RefNoAddress4?: string;
        RefNoAttention?: string;
        RefNoShipVia?: string;
        RefNoShipmentTerms?: string;
        RefNoBaseLoc?: string;
        RefNoSalesman?: string;
        RefNoPayTerms?: string;
        RefNoPriceCode?: string;
        RefNoAnlys1?: string;
        RefNoAnlys2?: string;
        RefNoCcy?: string;
        RefNoExchRate?: number;
        RefNoComputeTax?: string;
        RefNoLastLineNo?: number;
        RefNoLastMailNo?: number;
        RefNoLastTextNo?: number;
        RefNoTotPriceAmt?: number;
        RefNoTotPtaxAmt?: number;
        RefNoTotExtPrice?: number;
        RefNoTotLdiscAmt?: number;
        RefNoTotAtaxAmt?: number;
        RefNoTotItemAmt?: number;
        RefNoTdiscPcent?: number;
        RefNoTotTdiscAmt?: number;
        RefNoNetTradeAmt?: number;
        RefNoTotChgsAmt?: number;
        RefNoNetOrdrAmt?: number;
        RefNoTotGtaxAmt?: number;
        RefNoNetPayAmt?: number;
        RefNoDpsPcent?: number;
        RefNoTotDpsAmt?: number;
        RefNoCreatedDate?: string;
        RefNoCreatedBy?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoTotTdiscCpd?: number;
        RefNoTotGtaxCpd?: number;
        RefNoTotDpsCpd?: number;
        RefNoClosedDate?: string;
        RefNoClosedBy?: string;
        RefNoComments1?: string;
        RefNoComments2?: string;
        RefNoComments3?: string;
        RefNoComments4?: string;
        RefNoWebPublished?: string;
        RefNoConfirmed?: string;
        RefNoRfqNo?: string;
        RefNoWebUserName?: string;
        RefNoShipTo?: string;
        RefNoTelNo?: string;
        RefNoFaxNo?: string;
        RefNoPortLoading?: string;
        RefNoPortDischarge?: string;
        RefNoOriginCountry?: string;
        RefNoSltaxType?: string;
        RefNoGsltaxPcent?: number;
        RefNoTotGsltaxAmt?: number;
        RefNoTotLsltaxAmt?: number;
        RefNoAnlys7?: string;
        RefNoAnlys8?: string;
        RefNoMarkupDecimal?: number;
        RefNoPkgUnit?: string;
        RefNoWeightUnit?: string;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
        RefNoItemCode?: string;
        RefNoTransport?: string;
    }
    namespace QuotationDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Sales.QuotationDetail";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const Qty: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const PriceCpd: string;
            const PtaxCpd: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const Configurable: string;
            const CustItemNo: string;
            const SpecNo: string;
            const BomNo: string;
            const StdAssort: string;
            const ExtDescription: string;
            const SltaxPcent: string;
            const SltaxAmt: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const MarkupPcent: string;
            const Markup: string;
            const MoldBomNo: string;
            const MoldFormulaCode: string;
            const MoldExpectedQty: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const RefNoRecnum: string;
            const RefNoIssueDate: string;
            const RefNoValidUntil: string;
            const RefNoClosed: string;
            const RefNoCustomerNo: string;
            const RefNoCustomerName: string;
            const RefNoAddress: string;
            const RefNoAddress2: string;
            const RefNoAddress3: string;
            const RefNoAddress4: string;
            const RefNoAttention: string;
            const RefNoShipVia: string;
            const RefNoShipmentTerms: string;
            const RefNoBaseLoc: string;
            const RefNoSalesman: string;
            const RefNoPayTerms: string;
            const RefNoPriceCode: string;
            const RefNoAnlys1: string;
            const RefNoAnlys2: string;
            const RefNoCcy: string;
            const RefNoExchRate: string;
            const RefNoComputeTax: string;
            const RefNoLastLineNo: string;
            const RefNoLastMailNo: string;
            const RefNoLastTextNo: string;
            const RefNoTotPriceAmt: string;
            const RefNoTotPtaxAmt: string;
            const RefNoTotExtPrice: string;
            const RefNoTotLdiscAmt: string;
            const RefNoTotAtaxAmt: string;
            const RefNoTotItemAmt: string;
            const RefNoTdiscPcent: string;
            const RefNoTotTdiscAmt: string;
            const RefNoNetTradeAmt: string;
            const RefNoTotChgsAmt: string;
            const RefNoNetOrdrAmt: string;
            const RefNoTotGtaxAmt: string;
            const RefNoNetPayAmt: string;
            const RefNoDpsPcent: string;
            const RefNoTotDpsAmt: string;
            const RefNoCreatedDate: string;
            const RefNoCreatedBy: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoTotTdiscCpd: string;
            const RefNoTotGtaxCpd: string;
            const RefNoTotDpsCpd: string;
            const RefNoClosedDate: string;
            const RefNoClosedBy: string;
            const RefNoComments1: string;
            const RefNoComments2: string;
            const RefNoComments3: string;
            const RefNoComments4: string;
            const RefNoWebPublished: string;
            const RefNoConfirmed: string;
            const RefNoRfqNo: string;
            const RefNoWebUserName: string;
            const RefNoShipTo: string;
            const RefNoTelNo: string;
            const RefNoFaxNo: string;
            const RefNoPortLoading: string;
            const RefNoPortDischarge: string;
            const RefNoOriginCountry: string;
            const RefNoSltaxType: string;
            const RefNoGsltaxPcent: string;
            const RefNoTotGsltaxAmt: string;
            const RefNoTotLsltaxAmt: string;
            const RefNoAnlys7: string;
            const RefNoAnlys8: string;
            const RefNoMarkupDecimal: string;
            const RefNoPkgUnit: string;
            const RefNoWeightUnit: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
            const RefNoItemCode: string;
            const RefNoTransport: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace QuotationDetailService {
        const baseUrl = "Sales/QuotationDetail";
        function Create(request: Serenity.SaveRequest<QuotationDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<QuotationDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<QuotationDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<QuotationDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
    class QuotationForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface QuotationForm {
        RefNo: Serenity.StringEditor;
        IssueDate: Serenity.DateEditor;
        ValidUntil: Serenity.DateEditor;
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        PortLoading: Serenity.StringEditor;
        PortDischarge: Serenity.StringEditor;
        ShipVia: Serenity.StringEditor;
        ShipmentTerms: Serenity.StringEditor;
        OriginCountry: Serenity.StringEditor;
        ShipTo: Serenity.StringEditor;
        Attention: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        TelNo: Serenity.StringEditor;
        FaxNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PayTerms: Serenity.StringEditor;
        Salesman: Serenity.StringEditor;
        PriceCode: Serenity.StringEditor;
        BaseLoc: Serenity.StringEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
        DpsPcent: Serenity.DecimalEditor;
        TotDpsAmt: Serenity.DecimalEditor;
        DetailList: QuotationDetailEditor;
        Comments1: Serenity.StringEditor;
        Comments2: Serenity.StringEditor;
        Comments3: Serenity.StringEditor;
        Comments4: Serenity.StringEditor;
    }
}
declare namespace Matrix.Sales {
    interface QuotationRow {
        Recnum?: number;
        RefNo?: string;
        IssueDate?: string;
        ValidUntil?: string;
        Closed?: string;
        CustomerNo?: string;
        CustomerName?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        Attention?: string;
        ShipVia?: string;
        ShipmentTerms?: string;
        BaseLoc?: string;
        Salesman?: string;
        PayTerms?: string;
        PriceCode?: string;
        Anlys1?: string;
        Anlys2?: string;
        Ccy?: string;
        ExchRate?: number;
        ComputeTax?: string;
        LastLineNo?: number;
        LastMailNo?: number;
        LastTextNo?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        DpsPcent?: number;
        TotDpsAmt?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        TotTdiscCpd?: number;
        TotGtaxCpd?: number;
        TotDpsCpd?: number;
        ClosedDate?: string;
        ClosedBy?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        WebPublished?: string;
        Confirmed?: string;
        RfqNo?: string;
        WebUserName?: string;
        ShipTo?: string;
        TelNo?: string;
        FaxNo?: string;
        PortLoading?: string;
        PortDischarge?: string;
        OriginCountry?: string;
        SltaxType?: string;
        GsltaxPcent?: number;
        TotGsltaxAmt?: number;
        TotLsltaxAmt?: number;
        Anlys7?: string;
        Anlys8?: string;
        MarkupDecimal?: number;
        PkgUnit?: string;
        WeightUnit?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        ItemCode?: string;
        Transport?: string;
        DetailList?: QuotationDetailRow[];
    }
    namespace QuotationRow {
        const idProperty = "RefNo";
        const nameProperty = "RefNo";
        const localTextPrefix = "Sales.Quotation";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const IssueDate: string;
            const ValidUntil: string;
            const Closed: string;
            const CustomerNo: string;
            const CustomerName: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const Attention: string;
            const ShipVia: string;
            const ShipmentTerms: string;
            const BaseLoc: string;
            const Salesman: string;
            const PayTerms: string;
            const PriceCode: string;
            const Anlys1: string;
            const Anlys2: string;
            const Ccy: string;
            const ExchRate: string;
            const ComputeTax: string;
            const LastLineNo: string;
            const LastMailNo: string;
            const LastTextNo: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const DpsPcent: string;
            const TotDpsAmt: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const TotTdiscCpd: string;
            const TotGtaxCpd: string;
            const TotDpsCpd: string;
            const ClosedDate: string;
            const ClosedBy: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const WebPublished: string;
            const Confirmed: string;
            const RfqNo: string;
            const WebUserName: string;
            const ShipTo: string;
            const TelNo: string;
            const FaxNo: string;
            const PortLoading: string;
            const PortDischarge: string;
            const OriginCountry: string;
            const SltaxType: string;
            const GsltaxPcent: string;
            const TotGsltaxAmt: string;
            const TotLsltaxAmt: string;
            const Anlys7: string;
            const Anlys8: string;
            const MarkupDecimal: string;
            const PkgUnit: string;
            const WeightUnit: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const ItemCode: string;
            const Transport: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace QuotationService {
        const baseUrl = "Sales/Quotation";
        function Create(request: Serenity.SaveRequest<QuotationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<QuotationRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<QuotationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<QuotationRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
    class SalesOrderDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface SalesOrderDetailForm {
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        Qty: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Sales {
    interface SalesOrderDetailRow {
        Recnum?: number;
        OrderNo?: string;
        LineNo?: number;
        Posted?: string;
        Closed?: string;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        Qty?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        CommisType?: string;
        CommisRefNo?: string;
        Configurable?: string;
        FirstShipQty?: number;
        OtherShipQty?: number;
        LastShipNo?: number;
        Reserved?: string;
        ResvStubNo?: string;
        Waitlisted?: string;
        WaitlistNo?: string;
        WeightUom?: string;
        GrossWt?: number;
        NetWt?: number;
        DimensionUom?: string;
        Flength?: number;
        Width?: number;
        Height?: number;
        UnitVolume?: number;
        Volume?: number;
        PriceCpd?: number;
        PtaxCpd?: number;
        AtaxCpd?: number;
        DiscCpd?: number;
        GrossWtCpd?: number;
        NetWtCpd?: number;
        VolumeCpd?: number;
        InnerPkgType?: string;
        InnerQty?: number;
        InnerPkgs?: number;
        InnerExcsQty?: number;
        OuterPkgType?: string;
        OuterQty?: number;
        OuterPkgs?: number;
        OuterExcsQty?: number;
        StartCtnNo?: number;
        QtyShipped?: number;
        ItemTaxCode?: string;
        CustItemNo?: string;
        SpecNo?: string;
        BomNo?: string;
        QtyPacked?: number;
        JobNo?: string;
        ProdBranch?: string;
        AssemblyLine?: string;
        ProdDueDate?: string;
        MakeIt?: string;
        ProdStartDate?: string;
        SchedCount?: number;
        StdAssort?: string;
        ExtDescription?: string;
        QtyPending?: number;
        VendorNo?: string;
        VendorPrice?: number;
        VendorPack?: string;
        VendorCcy?: string;
        OriginQty?: number;
        SltaxPcent?: number;
        SltaxAmt?: number;
        ReorderQty?: number;
        IncludeScrapRate?: string;
        MarkupPcent?: number;
        Markup?: number;
        ItemCode?: string;
        MoldBomNo?: string;
        MoldFormulaCode?: string;
        MoldExpectedQty?: number;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        ShipmarkRmk?: string;
        LotSizeCost?: number;
        ReleaseQty?: number;
        BlanketRef?: string;
        BlanketLineNo?: number;
        OrderNoRecnum?: number;
        OrderNoPosted?: string;
        OrderNoClosed?: string;
        OrderNoCustomerNo?: string;
        OrderNoCustomerName?: string;
        OrderNoOrderDate?: string;
        OrderNoDueDate?: string;
        OrderNoSchedDate?: string;
        OrderNoCustomerPo?: string;
        OrderNoShipTo?: string;
        OrderNoAddress?: string;
        OrderNoAddress2?: string;
        OrderNoAddress3?: string;
        OrderNoAddress4?: string;
        OrderNoMultiShip?: string;
        OrderNoAutoPo?: string;
        OrderNoAutoJob?: string;
        OrderNoComputeTax?: string;
        OrderNoAutoResv?: string;
        OrderNoAutoWait?: string;
        OrderNoVendorNo?: string;
        OrderNoPoNo?: string;
        OrderNoPoPayTerms?: string;
        OrderNoPoShipTo?: string;
        OrderNoPoBuyer?: string;
        OrderNoShipVia?: string;
        OrderNoShipmentTerms?: string;
        OrderNoSalesman?: string;
        OrderNoPayTerms?: string;
        OrderNoPriceCode?: string;
        OrderNoAnlys1?: string;
        OrderNoAnlys2?: string;
        OrderNoCcy?: string;
        OrderNoExchRate?: number;
        OrderNoShipFrom?: string;
        OrderNoLastSchedNo?: number;
        OrderNoLastLineNo?: number;
        OrderNoLastTextNo?: number;
        OrderNoLastCtnNo?: number;
        OrderNoTotPriceAmt?: number;
        OrderNoTotPtaxAmt?: number;
        OrderNoTotExtPrice?: number;
        OrderNoTotLdiscAmt?: number;
        OrderNoTotAtaxAmt?: number;
        OrderNoTotItemAmt?: number;
        OrderNoTdiscPcent?: number;
        OrderNoTotTdiscAmt?: number;
        OrderNoNetTradeAmt?: number;
        OrderNoTotChgsAmt?: number;
        OrderNoNetOrdrAmt?: number;
        OrderNoTotGtaxAmt?: number;
        OrderNoNetPayAmt?: number;
        OrderNoDpsPcent?: number;
        OrderNoTotDpsAmt?: number;
        OrderNoNetBalAmt?: number;
        OrderNoTotTdiscCpd?: number;
        OrderNoTotGtaxCpd?: number;
        OrderNoTotDpsCpd?: number;
        OrderNoDpsReceiptNo?: string;
        OrderNoDpsFundCode?: string;
        OrderNoDpsReference?: string;
        OrderNoDpsRcptDate?: string;
        OrderNoCreatedDate?: string;
        OrderNoCreatedBy?: string;
        OrderNoRevisedDate?: string;
        OrderNoRevisedBy?: string;
        OrderNoPostedDate?: string;
        OrderNoPostedBy?: string;
        OrderNoPrevisedDate?: string;
        OrderNoPrevisedBy?: string;
        OrderNoLockType?: string;
        OrderNoLockRefNo?: string;
        OrderNoLastLogNo?: number;
        OrderNoVendTaxCode?: string;
        OrderNoCustTaxCode?: string;
        OrderNoPackingOk?: string;
        OrderNoWeightUom?: string;
        OrderNoGrWt?: number;
        OrderNoNtWt?: number;
        OrderNoDimensionUom?: string;
        OrderNoVolume?: number;
        OrderNoOwnerBranch?: string;
        OrderNoSourceBranch?: string;
        OrderNoComments1?: string;
        OrderNoComments2?: string;
        OrderNoComments3?: string;
        OrderNoComments4?: string;
        OrderNoCheckCrlimit?: string;
        OrderNoCheckCrbal?: number;
        OrderNoWebPublished?: string;
        OrderNoSendWebMsg?: string;
        OrderNoWebUserName?: string;
        OrderNoAttention?: string;
        OrderNoTelNo?: string;
        OrderNoFaxNo?: string;
        OrderNoPortLoading?: string;
        OrderNoPortDischarge?: string;
        OrderNoVesselName?: string;
        OrderNoForwarder?: string;
        OrderNoLcNo?: string;
        OrderNoOriginCountry?: string;
        OrderNoMrpExclude?: string;
        OrderNoSltaxType?: string;
        OrderNoGsltaxPcent?: number;
        OrderNoTotGsltaxAmt?: number;
        OrderNoTotLsltaxAmt?: number;
        OrderNoLastTextNo1?: number;
        OrderNoComments5?: string;
        OrderNoComments6?: string;
        OrderNoComments7?: string;
        OrderNoComments8?: string;
        OrderNoAnlys7?: string;
        OrderNoAnlys8?: string;
        OrderNoFlag?: string;
        OrderNoHoldBy?: string;
        OrderNoQuoRefNo?: string;
        OrderNoBrandCode?: string;
        OrderNoItemCode?: string;
        OrderNoPkgUnit?: string;
        OrderNoWeightUnit?: string;
        OrderNoAnlys9?: string;
        OrderNoAnlys10?: string;
        OrderNoAnlys11?: string;
        OrderNoAnlys12?: string;
        OrderNoAnlys13?: string;
        OrderNoAnlys14?: string;
        OrderNoOrderType?: string;
        OrderNoRefCompanyCode?: string;
        OrderNoRefPurchaseOrderNo?: string;
    }
    namespace SalesOrderDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Sales.SalesOrderDetail";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const LineNo: string;
            const Posted: string;
            const Closed: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const Qty: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const CommisType: string;
            const CommisRefNo: string;
            const Configurable: string;
            const FirstShipQty: string;
            const OtherShipQty: string;
            const LastShipNo: string;
            const Reserved: string;
            const ResvStubNo: string;
            const Waitlisted: string;
            const WaitlistNo: string;
            const WeightUom: string;
            const GrossWt: string;
            const NetWt: string;
            const DimensionUom: string;
            const Flength: string;
            const Width: string;
            const Height: string;
            const UnitVolume: string;
            const Volume: string;
            const PriceCpd: string;
            const PtaxCpd: string;
            const AtaxCpd: string;
            const DiscCpd: string;
            const GrossWtCpd: string;
            const NetWtCpd: string;
            const VolumeCpd: string;
            const InnerPkgType: string;
            const InnerQty: string;
            const InnerPkgs: string;
            const InnerExcsQty: string;
            const OuterPkgType: string;
            const OuterQty: string;
            const OuterPkgs: string;
            const OuterExcsQty: string;
            const StartCtnNo: string;
            const QtyShipped: string;
            const ItemTaxCode: string;
            const CustItemNo: string;
            const SpecNo: string;
            const BomNo: string;
            const QtyPacked: string;
            const JobNo: string;
            const ProdBranch: string;
            const AssemblyLine: string;
            const ProdDueDate: string;
            const MakeIt: string;
            const ProdStartDate: string;
            const SchedCount: string;
            const StdAssort: string;
            const ExtDescription: string;
            const QtyPending: string;
            const VendorNo: string;
            const VendorPrice: string;
            const VendorPack: string;
            const VendorCcy: string;
            const OriginQty: string;
            const SltaxPcent: string;
            const SltaxAmt: string;
            const ReorderQty: string;
            const IncludeScrapRate: string;
            const MarkupPcent: string;
            const Markup: string;
            const ItemCode: string;
            const MoldBomNo: string;
            const MoldFormulaCode: string;
            const MoldExpectedQty: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const ShipmarkRmk: string;
            const LotSizeCost: string;
            const ReleaseQty: string;
            const BlanketRef: string;
            const BlanketLineNo: string;
            const OrderNoRecnum: string;
            const OrderNoPosted: string;
            const OrderNoClosed: string;
            const OrderNoCustomerNo: string;
            const OrderNoCustomerName: string;
            const OrderNoOrderDate: string;
            const OrderNoDueDate: string;
            const OrderNoSchedDate: string;
            const OrderNoCustomerPo: string;
            const OrderNoShipTo: string;
            const OrderNoAddress: string;
            const OrderNoAddress2: string;
            const OrderNoAddress3: string;
            const OrderNoAddress4: string;
            const OrderNoMultiShip: string;
            const OrderNoAutoPo: string;
            const OrderNoAutoJob: string;
            const OrderNoComputeTax: string;
            const OrderNoAutoResv: string;
            const OrderNoAutoWait: string;
            const OrderNoVendorNo: string;
            const OrderNoPoNo: string;
            const OrderNoPoPayTerms: string;
            const OrderNoPoShipTo: string;
            const OrderNoPoBuyer: string;
            const OrderNoShipVia: string;
            const OrderNoShipmentTerms: string;
            const OrderNoSalesman: string;
            const OrderNoPayTerms: string;
            const OrderNoPriceCode: string;
            const OrderNoAnlys1: string;
            const OrderNoAnlys2: string;
            const OrderNoCcy: string;
            const OrderNoExchRate: string;
            const OrderNoShipFrom: string;
            const OrderNoLastSchedNo: string;
            const OrderNoLastLineNo: string;
            const OrderNoLastTextNo: string;
            const OrderNoLastCtnNo: string;
            const OrderNoTotPriceAmt: string;
            const OrderNoTotPtaxAmt: string;
            const OrderNoTotExtPrice: string;
            const OrderNoTotLdiscAmt: string;
            const OrderNoTotAtaxAmt: string;
            const OrderNoTotItemAmt: string;
            const OrderNoTdiscPcent: string;
            const OrderNoTotTdiscAmt: string;
            const OrderNoNetTradeAmt: string;
            const OrderNoTotChgsAmt: string;
            const OrderNoNetOrdrAmt: string;
            const OrderNoTotGtaxAmt: string;
            const OrderNoNetPayAmt: string;
            const OrderNoDpsPcent: string;
            const OrderNoTotDpsAmt: string;
            const OrderNoNetBalAmt: string;
            const OrderNoTotTdiscCpd: string;
            const OrderNoTotGtaxCpd: string;
            const OrderNoTotDpsCpd: string;
            const OrderNoDpsReceiptNo: string;
            const OrderNoDpsFundCode: string;
            const OrderNoDpsReference: string;
            const OrderNoDpsRcptDate: string;
            const OrderNoCreatedDate: string;
            const OrderNoCreatedBy: string;
            const OrderNoRevisedDate: string;
            const OrderNoRevisedBy: string;
            const OrderNoPostedDate: string;
            const OrderNoPostedBy: string;
            const OrderNoPrevisedDate: string;
            const OrderNoPrevisedBy: string;
            const OrderNoLockType: string;
            const OrderNoLockRefNo: string;
            const OrderNoLastLogNo: string;
            const OrderNoVendTaxCode: string;
            const OrderNoCustTaxCode: string;
            const OrderNoPackingOk: string;
            const OrderNoWeightUom: string;
            const OrderNoGrWt: string;
            const OrderNoNtWt: string;
            const OrderNoDimensionUom: string;
            const OrderNoVolume: string;
            const OrderNoOwnerBranch: string;
            const OrderNoSourceBranch: string;
            const OrderNoComments1: string;
            const OrderNoComments2: string;
            const OrderNoComments3: string;
            const OrderNoComments4: string;
            const OrderNoCheckCrlimit: string;
            const OrderNoCheckCrbal: string;
            const OrderNoWebPublished: string;
            const OrderNoSendWebMsg: string;
            const OrderNoWebUserName: string;
            const OrderNoAttention: string;
            const OrderNoTelNo: string;
            const OrderNoFaxNo: string;
            const OrderNoPortLoading: string;
            const OrderNoPortDischarge: string;
            const OrderNoVesselName: string;
            const OrderNoForwarder: string;
            const OrderNoLcNo: string;
            const OrderNoOriginCountry: string;
            const OrderNoMrpExclude: string;
            const OrderNoSltaxType: string;
            const OrderNoGsltaxPcent: string;
            const OrderNoTotGsltaxAmt: string;
            const OrderNoTotLsltaxAmt: string;
            const OrderNoLastTextNo1: string;
            const OrderNoComments5: string;
            const OrderNoComments6: string;
            const OrderNoComments7: string;
            const OrderNoComments8: string;
            const OrderNoAnlys7: string;
            const OrderNoAnlys8: string;
            const OrderNoFlag: string;
            const OrderNoHoldBy: string;
            const OrderNoQuoRefNo: string;
            const OrderNoBrandCode: string;
            const OrderNoItemCode: string;
            const OrderNoPkgUnit: string;
            const OrderNoWeightUnit: string;
            const OrderNoAnlys9: string;
            const OrderNoAnlys10: string;
            const OrderNoAnlys11: string;
            const OrderNoAnlys12: string;
            const OrderNoAnlys13: string;
            const OrderNoAnlys14: string;
            const OrderNoOrderType: string;
            const OrderNoRefCompanyCode: string;
            const OrderNoRefPurchaseOrderNo: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace SalesOrderDetailService {
        const baseUrl = "Sales/SalesOrderDetail";
        function Create(request: Serenity.SaveRequest<SalesOrderDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<SalesOrderDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<SalesOrderDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<SalesOrderDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
    class SalesOrderForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface SalesOrderForm {
        OrderNo: Serenity.StringEditor;
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        CustomerPo: Serenity.StringEditor;
        QuoRefNo: Serenity.StringEditor;
        OrderDate: Serenity.DateEditor;
        DueDate: Serenity.DateEditor;
        SchedDate: Serenity.DateEditor;
        PortLoading: Serenity.StringEditor;
        ShipVia: Serenity.StringEditor;
        VesselName: Serenity.StringEditor;
        LcNo: Serenity.StringEditor;
        PortDischarge: Serenity.StringEditor;
        ShipmentTerms: Serenity.StringEditor;
        Forwarder: Serenity.StringEditor;
        OriginCountry: Serenity.StringEditor;
        Salesman: Serenity.StringEditor;
        PriceCode: Serenity.StringEditor;
        ShipFrom: Serenity.StringEditor;
        ShipTo: Serenity.StringEditor;
        Attention: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        TelNo: Serenity.StringEditor;
        FaxNo: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PayTerms: Serenity.StringEditor;
        VendorNo: Serenity.StringEditor;
        PoNo: Serenity.StringEditor;
        PoPayTerms: Serenity.StringEditor;
        PoShipTo: Serenity.StringEditor;
        PoBuyer: Serenity.StringEditor;
        MultiShip: Serenity.StringEditor;
        AutoResv: Serenity.StringEditor;
        AutoPo: Serenity.StringEditor;
        AutoJob: Serenity.StringEditor;
        DetailList: SalesOrderDetailEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        TotGtaxAmt: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        DpsPcent: Serenity.DecimalEditor;
        TotDpsAmt: Serenity.DecimalEditor;
        DpsReceiptNo: Serenity.StringEditor;
        DpsRcptDate: Serenity.DateEditor;
        DpsFundCode: Serenity.StringEditor;
        DpsReference: Serenity.StringEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        Comments1: Serenity.StringEditor;
        Comments2: Serenity.StringEditor;
        Comments3: Serenity.StringEditor;
        Comments4: Serenity.StringEditor;
        Comments5: Serenity.StringEditor;
        Comments6: Serenity.StringEditor;
        Comments7: Serenity.StringEditor;
        Comments8: Serenity.StringEditor;
    }
}
declare namespace Matrix.Sales {
    interface SalesOrderRow {
        Recnum?: number;
        OrderNo?: string;
        Posted?: string;
        Closed?: string;
        CustomerNo?: string;
        CustomerName?: string;
        OrderDate?: string;
        DueDate?: string;
        SchedDate?: string;
        CustomerPo?: string;
        ShipTo?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        MultiShip?: string;
        AutoPo?: string;
        AutoJob?: string;
        ComputeTax?: string;
        AutoResv?: string;
        AutoWait?: string;
        VendorNo?: string;
        PoNo?: string;
        PoPayTerms?: string;
        PoShipTo?: string;
        PoBuyer?: string;
        ShipVia?: string;
        ShipmentTerms?: string;
        Salesman?: string;
        PayTerms?: string;
        PriceCode?: string;
        Anlys1?: string;
        Anlys2?: string;
        Ccy?: string;
        ExchRate?: number;
        ShipFrom?: string;
        LastSchedNo?: number;
        LastLineNo?: number;
        LastTextNo?: number;
        LastCtnNo?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        DpsPcent?: number;
        TotDpsAmt?: number;
        NetBalAmt?: number;
        TotTdiscCpd?: number;
        TotGtaxCpd?: number;
        TotDpsCpd?: number;
        DpsReceiptNo?: string;
        DpsFundCode?: string;
        DpsReference?: string;
        DpsRcptDate?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        PrevisedDate?: string;
        PrevisedBy?: string;
        LockType?: string;
        LockRefNo?: string;
        LastLogNo?: number;
        VendTaxCode?: string;
        CustTaxCode?: string;
        PackingOk?: string;
        WeightUom?: string;
        GrWt?: number;
        NtWt?: number;
        DimensionUom?: string;
        Volume?: number;
        OwnerBranch?: string;
        SourceBranch?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        CheckCrlimit?: string;
        CheckCrbal?: number;
        WebPublished?: string;
        SendWebMsg?: string;
        WebUserName?: string;
        Attention?: string;
        TelNo?: string;
        FaxNo?: string;
        PortLoading?: string;
        PortDischarge?: string;
        VesselName?: string;
        Forwarder?: string;
        LcNo?: string;
        OriginCountry?: string;
        MrpExclude?: string;
        SltaxType?: string;
        GsltaxPcent?: number;
        TotGsltaxAmt?: number;
        TotLsltaxAmt?: number;
        LastTextNo1?: number;
        Comments5?: string;
        Comments6?: string;
        Comments7?: string;
        Comments8?: string;
        Anlys7?: string;
        Anlys8?: string;
        Flag?: string;
        HoldBy?: string;
        QuoRefNo?: string;
        BrandCode?: string;
        ItemCode?: string;
        PkgUnit?: string;
        WeightUnit?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        OrderType?: string;
        RefCompanyCode?: string;
        RefPurchaseOrderNo?: string;
        DetailList?: SalesOrderDetailRow[];
    }
    namespace SalesOrderRow {
        const idProperty = "OrderNo";
        const nameProperty = "OrderNo";
        const localTextPrefix = "Sales.SalesOrder";
        namespace Fields {
            const Recnum: string;
            const OrderNo: string;
            const Posted: string;
            const Closed: string;
            const CustomerNo: string;
            const CustomerName: string;
            const OrderDate: string;
            const DueDate: string;
            const SchedDate: string;
            const CustomerPo: string;
            const ShipTo: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const MultiShip: string;
            const AutoPo: string;
            const AutoJob: string;
            const ComputeTax: string;
            const AutoResv: string;
            const AutoWait: string;
            const VendorNo: string;
            const PoNo: string;
            const PoPayTerms: string;
            const PoShipTo: string;
            const PoBuyer: string;
            const ShipVia: string;
            const ShipmentTerms: string;
            const Salesman: string;
            const PayTerms: string;
            const PriceCode: string;
            const Anlys1: string;
            const Anlys2: string;
            const Ccy: string;
            const ExchRate: string;
            const ShipFrom: string;
            const LastSchedNo: string;
            const LastLineNo: string;
            const LastTextNo: string;
            const LastCtnNo: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const DpsPcent: string;
            const TotDpsAmt: string;
            const NetBalAmt: string;
            const TotTdiscCpd: string;
            const TotGtaxCpd: string;
            const TotDpsCpd: string;
            const DpsReceiptNo: string;
            const DpsFundCode: string;
            const DpsReference: string;
            const DpsRcptDate: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const PrevisedDate: string;
            const PrevisedBy: string;
            const LockType: string;
            const LockRefNo: string;
            const LastLogNo: string;
            const VendTaxCode: string;
            const CustTaxCode: string;
            const PackingOk: string;
            const WeightUom: string;
            const GrWt: string;
            const NtWt: string;
            const DimensionUom: string;
            const Volume: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const CheckCrlimit: string;
            const CheckCrbal: string;
            const WebPublished: string;
            const SendWebMsg: string;
            const WebUserName: string;
            const Attention: string;
            const TelNo: string;
            const FaxNo: string;
            const PortLoading: string;
            const PortDischarge: string;
            const VesselName: string;
            const Forwarder: string;
            const LcNo: string;
            const OriginCountry: string;
            const MrpExclude: string;
            const SltaxType: string;
            const GsltaxPcent: string;
            const TotGsltaxAmt: string;
            const TotLsltaxAmt: string;
            const LastTextNo1: string;
            const Comments5: string;
            const Comments6: string;
            const Comments7: string;
            const Comments8: string;
            const Anlys7: string;
            const Anlys8: string;
            const Flag: string;
            const HoldBy: string;
            const QuoRefNo: string;
            const BrandCode: string;
            const ItemCode: string;
            const PkgUnit: string;
            const WeightUnit: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const OrderType: string;
            const RefCompanyCode: string;
            const RefPurchaseOrderNo: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace SalesOrderService {
        const baseUrl = "Sales/SalesOrder";
        function Create(request: Serenity.SaveRequest<SalesOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<SalesOrderRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<SalesOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<SalesOrderRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
    class SalesReturnDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface SalesReturnDetailForm {
        EntryNo: Serenity.DecimalEditor;
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        RefundAmt: Serenity.DecimalEditor;
        Reorder: Serenity.BooleanEditor;
    }
}
declare namespace Matrix.Sales {
    interface SalesReturnDetailRow {
        Recnum?: number;
        RefNo?: string;
        EntryNo?: number;
        OrderNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        QtyBalance?: number;
        QtyReturned?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        RefundAmt?: number;
        VariaAmt?: number;
        LdiscRate?: number;
        AtaxRate?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocRefundAmt?: number;
        LocVariaAmt?: number;
        AcctSales?: string;
        AcctLdisc?: string;
        AcctPtax?: string;
        AcctAtax?: string;
        AcctVariance?: string;
        CommisType?: string;
        CommisRefNo?: string;
        CostReturned?: number;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        Reorder?: boolean;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        RefNoRecnum?: number;
        RefNoPosted?: string;
        RefNoTranDate?: string;
        RefNoShipmentRef?: string;
        RefNoCustomerNo?: string;
        RefNoCustomerName?: string;
        RefNoLoc?: string;
        RefNoCcy?: string;
        RefNoExchRate?: number;
        RefNoTotPriceAmt?: number;
        RefNoTotPtaxAmt?: number;
        RefNoTotExtPrice?: number;
        RefNoTotLdiscAmt?: number;
        RefNoTotAtaxAmt?: number;
        RefNoTotItemAmt?: number;
        RefNoTotRefundAmt?: number;
        RefNoTotVariaAmt?: number;
        RefNoTdiscPcent?: number;
        RefNoTotTdiscAmt?: number;
        RefNoNetTradeAmt?: number;
        RefNoTotChgsAmt?: number;
        RefNoNetOrdrAmt?: number;
        RefNoTotGtaxAmt?: number;
        RefNoNetPayAmt?: number;
        RefNoLocPriceAmt?: number;
        RefNoLocPtaxAmt?: number;
        RefNoLocExtPrice?: number;
        RefNoLocLdiscAmt?: number;
        RefNoLocAtaxAmt?: number;
        RefNoLocItemAmt?: number;
        RefNoLocRefundAmt?: number;
        RefNoLocVariaAmt?: number;
        RefNoLocTdiscAmt?: number;
        RefNoLocChgsAmt?: number;
        RefNoLocGtaxAmt?: number;
        RefNoLocPayAmt?: number;
        RefNoTotTdiscCpd?: number;
        RefNoAcctCustomer?: string;
        RefNoAcctTdisc?: string;
        RefNoAcctGtax?: string;
        RefNoCreatedDate?: string;
        RefNoCreatedBy?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoPostedDate?: string;
        RefNoPostedBy?: string;
        RefNoLogNo?: number;
        RefNoLastLogNo?: number;
        RefNoGlLink?: string;
        RefNoGlLinkType?: string;
        RefNoGlLinkNo?: string;
        RefNoOwnerBranch?: string;
        RefNoSourceBranch?: string;
        RefNoReason?: string;
        RefNoAnlys1?: string;
        RefNoAnlys2?: string;
        RefNoAnlys7?: string;
        RefNoAnlys8?: string;
        RefNoReturnOnly?: string;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
    }
    namespace SalesReturnDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Sales.SalesReturnDetail";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const EntryNo: string;
            const OrderNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const QtyBalance: string;
            const QtyReturned: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const RefundAmt: string;
            const VariaAmt: string;
            const LdiscRate: string;
            const AtaxRate: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocRefundAmt: string;
            const LocVariaAmt: string;
            const AcctSales: string;
            const AcctLdisc: string;
            const AcctPtax: string;
            const AcctAtax: string;
            const AcctVariance: string;
            const CommisType: string;
            const CommisRefNo: string;
            const CostReturned: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const Reorder: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const RefNoRecnum: string;
            const RefNoPosted: string;
            const RefNoTranDate: string;
            const RefNoShipmentRef: string;
            const RefNoCustomerNo: string;
            const RefNoCustomerName: string;
            const RefNoLoc: string;
            const RefNoCcy: string;
            const RefNoExchRate: string;
            const RefNoTotPriceAmt: string;
            const RefNoTotPtaxAmt: string;
            const RefNoTotExtPrice: string;
            const RefNoTotLdiscAmt: string;
            const RefNoTotAtaxAmt: string;
            const RefNoTotItemAmt: string;
            const RefNoTotRefundAmt: string;
            const RefNoTotVariaAmt: string;
            const RefNoTdiscPcent: string;
            const RefNoTotTdiscAmt: string;
            const RefNoNetTradeAmt: string;
            const RefNoTotChgsAmt: string;
            const RefNoNetOrdrAmt: string;
            const RefNoTotGtaxAmt: string;
            const RefNoNetPayAmt: string;
            const RefNoLocPriceAmt: string;
            const RefNoLocPtaxAmt: string;
            const RefNoLocExtPrice: string;
            const RefNoLocLdiscAmt: string;
            const RefNoLocAtaxAmt: string;
            const RefNoLocItemAmt: string;
            const RefNoLocRefundAmt: string;
            const RefNoLocVariaAmt: string;
            const RefNoLocTdiscAmt: string;
            const RefNoLocChgsAmt: string;
            const RefNoLocGtaxAmt: string;
            const RefNoLocPayAmt: string;
            const RefNoTotTdiscCpd: string;
            const RefNoAcctCustomer: string;
            const RefNoAcctTdisc: string;
            const RefNoAcctGtax: string;
            const RefNoCreatedDate: string;
            const RefNoCreatedBy: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoPostedDate: string;
            const RefNoPostedBy: string;
            const RefNoLogNo: string;
            const RefNoLastLogNo: string;
            const RefNoGlLink: string;
            const RefNoGlLinkType: string;
            const RefNoGlLinkNo: string;
            const RefNoOwnerBranch: string;
            const RefNoSourceBranch: string;
            const RefNoReason: string;
            const RefNoAnlys1: string;
            const RefNoAnlys2: string;
            const RefNoAnlys7: string;
            const RefNoAnlys8: string;
            const RefNoReturnOnly: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace SalesReturnDetailService {
        const baseUrl = "Sales/SalesReturnDetail";
        function Create(request: Serenity.SaveRequest<SalesReturnDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<SalesReturnDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<SalesReturnDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<SalesReturnDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
    class SalesReturnForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface SalesReturnForm {
        RefNo: Serenity.StringEditor;
        TranDate: Serenity.DateEditor;
        Loc: Serenity.StringEditor;
        ShipmentRef: Serenity.StringEditor;
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        Reason: Serenity.TextAreaEditor;
        DetailList: SalesReturnDetailEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotRefundAmt: Serenity.DecimalEditor;
        TdiscPcent: Serenity.DecimalEditor;
        TotLdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotChgsAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Sales {
    interface SalesReturnRow {
        Recnum?: number;
        RefNo?: string;
        Posted?: string;
        TranDate?: string;
        ShipmentRef?: string;
        CustomerNo?: string;
        CustomerName?: string;
        Loc?: string;
        Ccy?: string;
        ExchRate?: number;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TotRefundAmt?: number;
        TotVariaAmt?: number;
        TdiscPcent?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocRefundAmt?: number;
        LocVariaAmt?: number;
        LocTdiscAmt?: number;
        LocChgsAmt?: number;
        LocGtaxAmt?: number;
        LocPayAmt?: number;
        TotTdiscCpd?: number;
        AcctCustomer?: string;
        AcctTdisc?: string;
        AcctGtax?: string;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        LogNo?: number;
        LastLogNo?: number;
        GlLink?: string;
        GlLinkType?: string;
        GlLinkNo?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        Reason?: string;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        ReturnOnly?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        DetailList?: SalesReturnDetailRow[];
    }
    namespace SalesReturnRow {
        const idProperty = "RefNo";
        const nameProperty = "RefNo";
        const localTextPrefix = "Sales.SalesReturn";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const Posted: string;
            const TranDate: string;
            const ShipmentRef: string;
            const CustomerNo: string;
            const CustomerName: string;
            const Loc: string;
            const Ccy: string;
            const ExchRate: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TotRefundAmt: string;
            const TotVariaAmt: string;
            const TdiscPcent: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocRefundAmt: string;
            const LocVariaAmt: string;
            const LocTdiscAmt: string;
            const LocChgsAmt: string;
            const LocGtaxAmt: string;
            const LocPayAmt: string;
            const TotTdiscCpd: string;
            const AcctCustomer: string;
            const AcctTdisc: string;
            const AcctGtax: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const LogNo: string;
            const LastLogNo: string;
            const GlLink: string;
            const GlLinkType: string;
            const GlLinkNo: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const Reason: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const ReturnOnly: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace SalesReturnService {
        const baseUrl = "Sales/SalesReturn";
        function Create(request: Serenity.SaveRequest<SalesReturnRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<SalesReturnRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<SalesReturnRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<SalesReturnRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
}
declare namespace Matrix.Sales {
    class ShipmentDetailForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ShipmentDetailForm {
        RefNo: Serenity.StringEditor;
        EntryNo: Serenity.DecimalEditor;
        Selected: Serenity.StringEditor;
        OrderNo: Serenity.StringEditor;
        LineNo: Serenity.DecimalEditor;
        ItemNo: Serenity.StringEditor;
        Description: Serenity.StringEditor;
        Uom: Serenity.StringEditor;
        LotSize: Serenity.DecimalEditor;
        Configurable: Serenity.StringEditor;
        QtyBalance: Serenity.DecimalEditor;
        QtyDue: Serenity.DecimalEditor;
        QtyShipped: Serenity.DecimalEditor;
        Price: Serenity.DecimalEditor;
        Ptax: Serenity.DecimalEditor;
        NetPrice: Serenity.DecimalEditor;
        ExtPrice: Serenity.DecimalEditor;
        LdiscPcent: Serenity.DecimalEditor;
        LdiscAmt: Serenity.DecimalEditor;
        AtaxAmt: Serenity.DecimalEditor;
        NetItemAmt: Serenity.DecimalEditor;
        PriceAmt: Serenity.DecimalEditor;
        PtaxAmt: Serenity.DecimalEditor;
        LdiscRate: Serenity.DecimalEditor;
        AtaxRate: Serenity.DecimalEditor;
        LdiscAmtCpd: Serenity.DecimalEditor;
        AtaxAmtCpd: Serenity.DecimalEditor;
        LocPriceAmt: Serenity.DecimalEditor;
        LocPtaxAmt: Serenity.DecimalEditor;
        LocExtPrice: Serenity.DecimalEditor;
        LocLdiscAmt: Serenity.DecimalEditor;
        LocAtaxAmt: Serenity.DecimalEditor;
        LocItemAmt: Serenity.DecimalEditor;
        Anlys1: Serenity.StringEditor;
        Anlys2: Serenity.StringEditor;
        Anlys3: Serenity.StringEditor;
        Anlys4: Serenity.StringEditor;
        Anlys5: Serenity.StringEditor;
        Anlys6: Serenity.StringEditor;
        Posted: Serenity.StringEditor;
        LogNo: Serenity.DecimalEditor;
        Returned: Serenity.StringEditor;
        ShipmentDate: Serenity.DateEditor;
        CustomerNo: Serenity.StringEditor;
        ShipFrom: Serenity.StringEditor;
        CommisType: Serenity.StringEditor;
        CommisRefNo: Serenity.StringEditor;
        CustItemNo: Serenity.StringEditor;
        AcctSales: Serenity.StringEditor;
        AcctLdisc: Serenity.StringEditor;
        AcctPtax: Serenity.StringEditor;
        AcctAtax: Serenity.StringEditor;
        ItemTaxCode: Serenity.StringEditor;
        QtyReturned: Serenity.DecimalEditor;
        RetPriceAmt: Serenity.DecimalEditor;
        RetPtaxAmt: Serenity.DecimalEditor;
        RetExtPrice: Serenity.DecimalEditor;
        RetLdiscAmt: Serenity.DecimalEditor;
        RetAtaxAmt: Serenity.DecimalEditor;
        RetItemAmt: Serenity.DecimalEditor;
        LretPriceAmt: Serenity.DecimalEditor;
        LretPtaxAmt: Serenity.DecimalEditor;
        LretExtPrice: Serenity.DecimalEditor;
        LretLdiscAmt: Serenity.DecimalEditor;
        LretAtaxAmt: Serenity.DecimalEditor;
        LretItemAmt: Serenity.DecimalEditor;
        QtyPacked: Serenity.DecimalEditor;
        CostReturned: Serenity.DecimalEditor;
        StdAssort: Serenity.StringEditor;
        ExtDescription: Serenity.StringEditor;
        VendorPack: Serenity.StringEditor;
        SltaxPcent: Serenity.DecimalEditor;
        SltaxAmt: Serenity.DecimalEditor;
        LocSltaxAmt: Serenity.DecimalEditor;
        AcctSltax: Serenity.StringEditor;
        MarkupPcent: Serenity.DecimalEditor;
        Markup: Serenity.DecimalEditor;
        Anlys15: Serenity.StringEditor;
        Anlys16: Serenity.StringEditor;
        Anlys17: Serenity.StringEditor;
        Anlys18: Serenity.StringEditor;
        Anlys19: Serenity.StringEditor;
        Anlys20: Serenity.StringEditor;
        LotSizeCost: Serenity.DecimalEditor;
    }
}
declare namespace Matrix.Sales {
    interface ShipmentDetailRow {
        Recnum?: number;
        RefNo?: string;
        EntryNo?: number;
        Selected?: string;
        OrderNo?: string;
        LineNo?: number;
        ItemNo?: string;
        Description?: string;
        Uom?: string;
        LotSize?: number;
        Configurable?: string;
        QtyBalance?: number;
        QtyDue?: number;
        QtyShipped?: number;
        Price?: number;
        Ptax?: number;
        NetPrice?: number;
        ExtPrice?: number;
        LdiscPcent?: number;
        LdiscAmt?: number;
        AtaxAmt?: number;
        NetItemAmt?: number;
        PriceAmt?: number;
        PtaxAmt?: number;
        LdiscRate?: number;
        AtaxRate?: number;
        LdiscAmtCpd?: number;
        AtaxAmtCpd?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys3?: string;
        Anlys4?: string;
        Anlys5?: string;
        Anlys6?: string;
        Posted?: string;
        LogNo?: number;
        Returned?: string;
        ShipmentDate?: string;
        CustomerNo?: string;
        ShipFrom?: string;
        CommisType?: string;
        CommisRefNo?: string;
        CustItemNo?: string;
        AcctSales?: string;
        AcctLdisc?: string;
        AcctPtax?: string;
        AcctAtax?: string;
        ItemTaxCode?: string;
        QtyReturned?: number;
        RetPriceAmt?: number;
        RetPtaxAmt?: number;
        RetExtPrice?: number;
        RetLdiscAmt?: number;
        RetAtaxAmt?: number;
        RetItemAmt?: number;
        LretPriceAmt?: number;
        LretPtaxAmt?: number;
        LretExtPrice?: number;
        LretLdiscAmt?: number;
        LretAtaxAmt?: number;
        LretItemAmt?: number;
        QtyPacked?: number;
        CostReturned?: number;
        StdAssort?: string;
        ExtDescription?: string;
        VendorPack?: string;
        SltaxPcent?: number;
        SltaxAmt?: number;
        LocSltaxAmt?: number;
        AcctSltax?: string;
        MarkupPcent?: number;
        Markup?: number;
        Anlys15?: string;
        Anlys16?: string;
        Anlys17?: string;
        Anlys18?: string;
        Anlys19?: string;
        Anlys20?: string;
        LotSizeCost?: number;
        RefNoRecnum?: number;
        RefNoShipmentDate?: string;
        RefNoPosted?: string;
        RefNoReturned?: string;
        RefNoCustomerNo?: string;
        RefNoCustomerName?: string;
        RefNoShipTo?: string;
        RefNoAddress?: string;
        RefNoAddress2?: string;
        RefNoAddress3?: string;
        RefNoAddress4?: string;
        RefNoCutoffDate?: string;
        RefNoShipVia?: string;
        RefNoShipmentTerms?: string;
        RefNoVesselName?: string;
        RefNoEtd?: string;
        RefNoEta?: string;
        RefNoPayTerms?: string;
        RefNoDiscDays?: number;
        RefNoDiscPercent?: number;
        RefNoNetDays?: number;
        RefNoDiscountDate?: string;
        RefNoDueDate?: string;
        RefNoExpectedDate?: string;
        RefNoCcy?: string;
        RefNoExchRate?: number;
        RefNoShipFrom?: string;
        RefNoOwnerBranch?: string;
        RefNoSourceBranch?: string;
        RefNoComputeTax?: string;
        RefNoTotPriceAmt?: number;
        RefNoTotPtaxAmt?: number;
        RefNoTotExtPrice?: number;
        RefNoTotLdiscAmt?: number;
        RefNoTotAtaxAmt?: number;
        RefNoTotItemAmt?: number;
        RefNoTotTdiscAmt?: number;
        RefNoNetTradeAmt?: number;
        RefNoTotChgsAmt?: number;
        RefNoNetOrdrAmt?: number;
        RefNoTotGtaxAmt?: number;
        RefNoNetPayAmt?: number;
        RefNoDpsCover?: number;
        RefNoDpsApplied?: number;
        RefNoNetBalAmt?: number;
        RefNoCpdTdiscAmt?: number;
        RefNoCpdGtaxAmt?: number;
        RefNoCpdDpsAmt?: number;
        RefNoLocPriceAmt?: number;
        RefNoLocPtaxAmt?: number;
        RefNoLocExtPrice?: number;
        RefNoLocLdiscAmt?: number;
        RefNoLocAtaxAmt?: number;
        RefNoLocItemAmt?: number;
        RefNoLocTdiscAmt?: number;
        RefNoLocChgsAmt?: number;
        RefNoLocGtaxAmt?: number;
        RefNoLocPayAmt?: number;
        RefNoLocDpsApplied?: number;
        RefNoCreatedDate?: string;
        RefNoCreatedBy?: string;
        RefNoRevisedDate?: string;
        RefNoRevisedBy?: string;
        RefNoPostedDate?: string;
        RefNoPostedBy?: string;
        RefNoPrevisedDate?: string;
        RefNoPrevisedBy?: string;
        RefNoLastEntryNo?: number;
        RefNoLastChgsNo?: number;
        RefNoLastTextNo?: number;
        RefNoLastCtnNo?: number;
        RefNoLockType?: string;
        RefNoLockRefNo?: string;
        RefNoLastLogNo?: number;
        RefNoNewItemCount?: number;
        RefNoNewChgsCount?: number;
        RefNoAcctCustomer?: string;
        RefNoAcctTdisc?: string;
        RefNoAcctGtax?: string;
        RefNoDpsApplyRef?: string;
        RefNoVendTaxCode?: string;
        RefNoCustTaxCode?: string;
        RefNoRetPriceAmt?: number;
        RefNoRetPtaxAmt?: number;
        RefNoRetExtPrice?: number;
        RefNoRetLdiscAmt?: number;
        RefNoRetAtaxAmt?: number;
        RefNoRetItemAmt?: number;
        RefNoRetTdiscAmt?: number;
        RefNoRetGtaxAmt?: number;
        RefNoRetChgsAmt?: number;
        RefNoRetPayAmt?: number;
        RefNoLretPriceAmt?: number;
        RefNoLretPtaxAmt?: number;
        RefNoLretExtPrice?: number;
        RefNoLretLdiscAmt?: number;
        RefNoLretAtaxAmt?: number;
        RefNoLretItemAmt?: number;
        RefNoLretTdiscAmt?: number;
        RefNoLretGtaxAmt?: number;
        RefNoLretChgsAmt?: number;
        RefNoLretPayAmt?: number;
        RefNoWeightUom?: string;
        RefNoGrWt?: number;
        RefNoNtWt?: number;
        RefNoDimensionUom?: string;
        RefNoVolume?: number;
        RefNoGlLink?: string;
        RefNoGlLinkType?: string;
        RefNoGlLinkNo?: string;
        RefNoPackingOk?: string;
        RefNoComments1?: string;
        RefNoComments2?: string;
        RefNoComments3?: string;
        RefNoComments4?: string;
        RefNoSettleAt?: string;
        RefNoCheckCrlimit?: string;
        RefNoCheckCrbal?: number;
        RefNoAttention?: string;
        RefNoTelNo?: string;
        RefNoFaxNo?: string;
        RefNoPortLoading?: string;
        RefNoPortDischarge?: string;
        RefNoForwarder?: string;
        RefNoLcNo?: string;
        RefNoOriginCountry?: string;
        RefNoComments5?: string;
        RefNoComments6?: string;
        RefNoComments7?: string;
        RefNoComments8?: string;
        RefNoIssueBank?: string;
        RefNoIssueDate?: string;
        RefNoSltaxType?: string;
        RefNoGsltaxPcent?: number;
        RefNoTotGsltaxAmt?: number;
        RefNoTotLsltaxAmt?: number;
        RefNoLocGsltaxAmt?: number;
        RefNoLocLsltaxAmt?: number;
        RefNoSoSltaxType?: string;
        RefNoSoGsltaxPcent?: number;
        RefNoOrderCount?: number;
        RefNoAcctSltax?: string;
        RefNoLastTextNo1?: number;
        RefNoAnlys1?: string;
        RefNoAnlys2?: string;
        RefNoAnlys7?: string;
        RefNoAnlys8?: string;
        RefNoDnOnly?: string;
        RefNoInvoiced?: string;
        RefNoInvoiceNo?: string;
        RefNoFlag?: string;
        RefNoHoldBy?: string;
        RefNoAnlys9?: string;
        RefNoAnlys10?: string;
        RefNoAnlys11?: string;
        RefNoAnlys12?: string;
        RefNoAnlys13?: string;
        RefNoAnlys14?: string;
        RefNoManualShipmentDetail?: boolean;
        RefNoRefCompanyCode?: string;
        RefNoRefGrnNo?: string;
        RefNoLcName?: string;
    }
    namespace ShipmentDetailRow {
        const idProperty = "Recnum";
        const nameProperty = "RefNo";
        const localTextPrefix = "Sales.ShipmentDetail";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const EntryNo: string;
            const Selected: string;
            const OrderNo: string;
            const LineNo: string;
            const ItemNo: string;
            const Description: string;
            const Uom: string;
            const LotSize: string;
            const Configurable: string;
            const QtyBalance: string;
            const QtyDue: string;
            const QtyShipped: string;
            const Price: string;
            const Ptax: string;
            const NetPrice: string;
            const ExtPrice: string;
            const LdiscPcent: string;
            const LdiscAmt: string;
            const AtaxAmt: string;
            const NetItemAmt: string;
            const PriceAmt: string;
            const PtaxAmt: string;
            const LdiscRate: string;
            const AtaxRate: string;
            const LdiscAmtCpd: string;
            const AtaxAmtCpd: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys3: string;
            const Anlys4: string;
            const Anlys5: string;
            const Anlys6: string;
            const Posted: string;
            const LogNo: string;
            const Returned: string;
            const ShipmentDate: string;
            const CustomerNo: string;
            const ShipFrom: string;
            const CommisType: string;
            const CommisRefNo: string;
            const CustItemNo: string;
            const AcctSales: string;
            const AcctLdisc: string;
            const AcctPtax: string;
            const AcctAtax: string;
            const ItemTaxCode: string;
            const QtyReturned: string;
            const RetPriceAmt: string;
            const RetPtaxAmt: string;
            const RetExtPrice: string;
            const RetLdiscAmt: string;
            const RetAtaxAmt: string;
            const RetItemAmt: string;
            const LretPriceAmt: string;
            const LretPtaxAmt: string;
            const LretExtPrice: string;
            const LretLdiscAmt: string;
            const LretAtaxAmt: string;
            const LretItemAmt: string;
            const QtyPacked: string;
            const CostReturned: string;
            const StdAssort: string;
            const ExtDescription: string;
            const VendorPack: string;
            const SltaxPcent: string;
            const SltaxAmt: string;
            const LocSltaxAmt: string;
            const AcctSltax: string;
            const MarkupPcent: string;
            const Markup: string;
            const Anlys15: string;
            const Anlys16: string;
            const Anlys17: string;
            const Anlys18: string;
            const Anlys19: string;
            const Anlys20: string;
            const LotSizeCost: string;
            const RefNoRecnum: string;
            const RefNoShipmentDate: string;
            const RefNoPosted: string;
            const RefNoReturned: string;
            const RefNoCustomerNo: string;
            const RefNoCustomerName: string;
            const RefNoShipTo: string;
            const RefNoAddress: string;
            const RefNoAddress2: string;
            const RefNoAddress3: string;
            const RefNoAddress4: string;
            const RefNoCutoffDate: string;
            const RefNoShipVia: string;
            const RefNoShipmentTerms: string;
            const RefNoVesselName: string;
            const RefNoEtd: string;
            const RefNoEta: string;
            const RefNoPayTerms: string;
            const RefNoDiscDays: string;
            const RefNoDiscPercent: string;
            const RefNoNetDays: string;
            const RefNoDiscountDate: string;
            const RefNoDueDate: string;
            const RefNoExpectedDate: string;
            const RefNoCcy: string;
            const RefNoExchRate: string;
            const RefNoShipFrom: string;
            const RefNoOwnerBranch: string;
            const RefNoSourceBranch: string;
            const RefNoComputeTax: string;
            const RefNoTotPriceAmt: string;
            const RefNoTotPtaxAmt: string;
            const RefNoTotExtPrice: string;
            const RefNoTotLdiscAmt: string;
            const RefNoTotAtaxAmt: string;
            const RefNoTotItemAmt: string;
            const RefNoTotTdiscAmt: string;
            const RefNoNetTradeAmt: string;
            const RefNoTotChgsAmt: string;
            const RefNoNetOrdrAmt: string;
            const RefNoTotGtaxAmt: string;
            const RefNoNetPayAmt: string;
            const RefNoDpsCover: string;
            const RefNoDpsApplied: string;
            const RefNoNetBalAmt: string;
            const RefNoCpdTdiscAmt: string;
            const RefNoCpdGtaxAmt: string;
            const RefNoCpdDpsAmt: string;
            const RefNoLocPriceAmt: string;
            const RefNoLocPtaxAmt: string;
            const RefNoLocExtPrice: string;
            const RefNoLocLdiscAmt: string;
            const RefNoLocAtaxAmt: string;
            const RefNoLocItemAmt: string;
            const RefNoLocTdiscAmt: string;
            const RefNoLocChgsAmt: string;
            const RefNoLocGtaxAmt: string;
            const RefNoLocPayAmt: string;
            const RefNoLocDpsApplied: string;
            const RefNoCreatedDate: string;
            const RefNoCreatedBy: string;
            const RefNoRevisedDate: string;
            const RefNoRevisedBy: string;
            const RefNoPostedDate: string;
            const RefNoPostedBy: string;
            const RefNoPrevisedDate: string;
            const RefNoPrevisedBy: string;
            const RefNoLastEntryNo: string;
            const RefNoLastChgsNo: string;
            const RefNoLastTextNo: string;
            const RefNoLastCtnNo: string;
            const RefNoLockType: string;
            const RefNoLockRefNo: string;
            const RefNoLastLogNo: string;
            const RefNoNewItemCount: string;
            const RefNoNewChgsCount: string;
            const RefNoAcctCustomer: string;
            const RefNoAcctTdisc: string;
            const RefNoAcctGtax: string;
            const RefNoDpsApplyRef: string;
            const RefNoVendTaxCode: string;
            const RefNoCustTaxCode: string;
            const RefNoRetPriceAmt: string;
            const RefNoRetPtaxAmt: string;
            const RefNoRetExtPrice: string;
            const RefNoRetLdiscAmt: string;
            const RefNoRetAtaxAmt: string;
            const RefNoRetItemAmt: string;
            const RefNoRetTdiscAmt: string;
            const RefNoRetGtaxAmt: string;
            const RefNoRetChgsAmt: string;
            const RefNoRetPayAmt: string;
            const RefNoLretPriceAmt: string;
            const RefNoLretPtaxAmt: string;
            const RefNoLretExtPrice: string;
            const RefNoLretLdiscAmt: string;
            const RefNoLretAtaxAmt: string;
            const RefNoLretItemAmt: string;
            const RefNoLretTdiscAmt: string;
            const RefNoLretGtaxAmt: string;
            const RefNoLretChgsAmt: string;
            const RefNoLretPayAmt: string;
            const RefNoWeightUom: string;
            const RefNoGrWt: string;
            const RefNoNtWt: string;
            const RefNoDimensionUom: string;
            const RefNoVolume: string;
            const RefNoGlLink: string;
            const RefNoGlLinkType: string;
            const RefNoGlLinkNo: string;
            const RefNoPackingOk: string;
            const RefNoComments1: string;
            const RefNoComments2: string;
            const RefNoComments3: string;
            const RefNoComments4: string;
            const RefNoSettleAt: string;
            const RefNoCheckCrlimit: string;
            const RefNoCheckCrbal: string;
            const RefNoAttention: string;
            const RefNoTelNo: string;
            const RefNoFaxNo: string;
            const RefNoPortLoading: string;
            const RefNoPortDischarge: string;
            const RefNoForwarder: string;
            const RefNoLcNo: string;
            const RefNoOriginCountry: string;
            const RefNoComments5: string;
            const RefNoComments6: string;
            const RefNoComments7: string;
            const RefNoComments8: string;
            const RefNoIssueBank: string;
            const RefNoIssueDate: string;
            const RefNoSltaxType: string;
            const RefNoGsltaxPcent: string;
            const RefNoTotGsltaxAmt: string;
            const RefNoTotLsltaxAmt: string;
            const RefNoLocGsltaxAmt: string;
            const RefNoLocLsltaxAmt: string;
            const RefNoSoSltaxType: string;
            const RefNoSoGsltaxPcent: string;
            const RefNoOrderCount: string;
            const RefNoAcctSltax: string;
            const RefNoLastTextNo1: string;
            const RefNoAnlys1: string;
            const RefNoAnlys2: string;
            const RefNoAnlys7: string;
            const RefNoAnlys8: string;
            const RefNoDnOnly: string;
            const RefNoInvoiced: string;
            const RefNoInvoiceNo: string;
            const RefNoFlag: string;
            const RefNoHoldBy: string;
            const RefNoAnlys9: string;
            const RefNoAnlys10: string;
            const RefNoAnlys11: string;
            const RefNoAnlys12: string;
            const RefNoAnlys13: string;
            const RefNoAnlys14: string;
            const RefNoManualShipmentDetail: string;
            const RefNoRefCompanyCode: string;
            const RefNoRefGrnNo: string;
            const RefNoLcName: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace ShipmentDetailService {
        const baseUrl = "Sales/ShipmentDetail";
        function Create(request: Serenity.SaveRequest<ShipmentDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ShipmentDetailRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ShipmentDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ShipmentDetailRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix.Sales {
    class ShipmentForm extends Serenity.PrefixedContext {
        static formKey: string;
    }
    interface ShipmentForm {
        RefNo: Serenity.StringEditor;
        ShipmentDate: Serenity.DateEditor;
        ShipFrom: Serenity.StringEditor;
        CustomerNo: Serenity.StringEditor;
        CustomerName: Serenity.StringEditor;
        CutoffDate: Serenity.DateEditor;
        ShipTo: Serenity.StringEditor;
        Attention: Serenity.StringEditor;
        Address: Serenity.StringEditor;
        Address2: Serenity.StringEditor;
        Address3: Serenity.StringEditor;
        Address4: Serenity.StringEditor;
        TelNo: Serenity.StringEditor;
        FaxNo: Serenity.StringEditor;
        PortLoading: Serenity.StringEditor;
        ShipVia: Serenity.StringEditor;
        VesselName: Serenity.StringEditor;
        LcNo: Serenity.StringEditor;
        PortDischarge: Serenity.StringEditor;
        ShipmentTerms: Serenity.StringEditor;
        Forwarder: Serenity.StringEditor;
        OriginCountry: Serenity.StringEditor;
        Etd: Serenity.DateEditor;
        Eta: Serenity.DateEditor;
        IssueBank: Serenity.StringEditor;
        IssueDate: Serenity.DateEditor;
        Ccy: Serenity.StringEditor;
        ExchRate: Serenity.DecimalEditor;
        PayTerms: Serenity.StringEditor;
        DiscPercent: Serenity.DecimalEditor;
        DiscDays: Serenity.DecimalEditor;
        DueDate: Serenity.DateEditor;
        ExpectedDate: Serenity.DateEditor;
        TotItemAmt: Serenity.DecimalEditor;
        TotTdiscAmt: Serenity.DecimalEditor;
        NetTradeAmt: Serenity.DecimalEditor;
        TotAtaxAmt: Serenity.DecimalEditor;
        TotPtaxAmt: Serenity.DecimalEditor;
        NetPayAmt: Serenity.DecimalEditor;
        DpsCover: Serenity.DecimalEditor;
        DpsApplied: Serenity.DecimalEditor;
        NetBalAmt: Serenity.DecimalEditor;
        ManualShipmentDetail: Serenity.BooleanEditor;
        RefCompanyCode: Serenity.StringEditor;
        DetailList: ShipmentDetailEditor;
        RefGrnNo: Serenity.StringEditor;
        LcName: Serenity.StringEditor;
        Comments1: Serenity.StringEditor;
        Comments2: Serenity.StringEditor;
        Comments3: Serenity.StringEditor;
        Comments4: Serenity.StringEditor;
        Comments5: Serenity.StringEditor;
        Comments6: Serenity.StringEditor;
        Comments7: Serenity.StringEditor;
        Comments8: Serenity.StringEditor;
    }
}
declare namespace Matrix.Sales {
    interface ShipmentRow {
        Recnum?: number;
        RefNo?: string;
        ShipmentDate?: string;
        Posted?: boolean;
        Returned?: boolean;
        CustomerNo?: string;
        CustomerName?: string;
        ShipTo?: string;
        Address?: string;
        Address2?: string;
        Address3?: string;
        Address4?: string;
        CutoffDate?: string;
        ShipVia?: string;
        ShipmentTerms?: string;
        VesselName?: string;
        Etd?: string;
        Eta?: string;
        PayTerms?: string;
        DiscDays?: number;
        DiscPercent?: number;
        NetDays?: number;
        DiscountDate?: string;
        DueDate?: string;
        ExpectedDate?: string;
        Ccy?: string;
        ExchRate?: number;
        ShipFrom?: string;
        OwnerBranch?: string;
        SourceBranch?: string;
        ComputeTax?: string;
        TotPriceAmt?: number;
        TotPtaxAmt?: number;
        TotExtPrice?: number;
        TotLdiscAmt?: number;
        TotAtaxAmt?: number;
        TotItemAmt?: number;
        TotTdiscAmt?: number;
        NetTradeAmt?: number;
        TotChgsAmt?: number;
        NetOrdrAmt?: number;
        TotGtaxAmt?: number;
        NetPayAmt?: number;
        DpsCover?: number;
        DpsApplied?: number;
        NetBalAmt?: number;
        CpdTdiscAmt?: number;
        CpdGtaxAmt?: number;
        CpdDpsAmt?: number;
        LocPriceAmt?: number;
        LocPtaxAmt?: number;
        LocExtPrice?: number;
        LocLdiscAmt?: number;
        LocAtaxAmt?: number;
        LocItemAmt?: number;
        LocTdiscAmt?: number;
        LocChgsAmt?: number;
        LocGtaxAmt?: number;
        LocPayAmt?: number;
        LocDpsApplied?: number;
        CreatedDate?: string;
        CreatedBy?: string;
        RevisedDate?: string;
        RevisedBy?: string;
        PostedDate?: string;
        PostedBy?: string;
        PrevisedDate?: string;
        PrevisedBy?: string;
        LastEntryNo?: number;
        LastChgsNo?: number;
        LastTextNo?: number;
        LastCtnNo?: number;
        LockType?: string;
        LockRefNo?: string;
        LastLogNo?: number;
        NewItemCount?: number;
        NewChgsCount?: number;
        AcctCustomer?: string;
        AcctTdisc?: string;
        AcctGtax?: string;
        DpsApplyRef?: string;
        VendTaxCode?: string;
        CustTaxCode?: string;
        RetPriceAmt?: number;
        RetPtaxAmt?: number;
        RetExtPrice?: number;
        RetLdiscAmt?: number;
        RetAtaxAmt?: number;
        RetItemAmt?: number;
        RetTdiscAmt?: number;
        RetGtaxAmt?: number;
        RetChgsAmt?: number;
        RetPayAmt?: number;
        LretPriceAmt?: number;
        LretPtaxAmt?: number;
        LretExtPrice?: number;
        LretLdiscAmt?: number;
        LretAtaxAmt?: number;
        LretItemAmt?: number;
        LretTdiscAmt?: number;
        LretGtaxAmt?: number;
        LretChgsAmt?: number;
        LretPayAmt?: number;
        WeightUom?: string;
        GrWt?: number;
        NtWt?: number;
        DimensionUom?: string;
        Volume?: number;
        GlLink?: string;
        GlLinkType?: string;
        GlLinkNo?: string;
        PackingOk?: string;
        Comments1?: string;
        Comments2?: string;
        Comments3?: string;
        Comments4?: string;
        SettleAt?: string;
        CheckCrlimit?: string;
        CheckCrbal?: number;
        Attention?: string;
        TelNo?: string;
        FaxNo?: string;
        PortLoading?: string;
        PortDischarge?: string;
        Forwarder?: string;
        LcNo?: string;
        OriginCountry?: string;
        Comments5?: string;
        Comments6?: string;
        Comments7?: string;
        Comments8?: string;
        IssueBank?: string;
        IssueDate?: string;
        SltaxType?: string;
        GsltaxPcent?: number;
        TotGsltaxAmt?: number;
        TotLsltaxAmt?: number;
        LocGsltaxAmt?: number;
        LocLsltaxAmt?: number;
        SoSltaxType?: string;
        SoGsltaxPcent?: number;
        OrderCount?: number;
        AcctSltax?: string;
        LastTextNo1?: number;
        Anlys1?: string;
        Anlys2?: string;
        Anlys7?: string;
        Anlys8?: string;
        DnOnly?: string;
        Invoiced?: boolean;
        InvoiceNo?: string;
        Flag?: string;
        HoldBy?: string;
        Anlys9?: string;
        Anlys10?: string;
        Anlys11?: string;
        Anlys12?: string;
        Anlys13?: string;
        Anlys14?: string;
        ManualShipmentDetail?: boolean;
        RefCompanyCode?: string;
        RefGrnNo?: string;
        LcName?: string;
        DetailList?: ShipmentDetailRow[];
    }
    namespace ShipmentRow {
        const idProperty = "RefNo";
        const nameProperty = "RefNo";
        const localTextPrefix = "Sales.Shipment";
        namespace Fields {
            const Recnum: string;
            const RefNo: string;
            const ShipmentDate: string;
            const Posted: string;
            const Returned: string;
            const CustomerNo: string;
            const CustomerName: string;
            const ShipTo: string;
            const Address: string;
            const Address2: string;
            const Address3: string;
            const Address4: string;
            const CutoffDate: string;
            const ShipVia: string;
            const ShipmentTerms: string;
            const VesselName: string;
            const Etd: string;
            const Eta: string;
            const PayTerms: string;
            const DiscDays: string;
            const DiscPercent: string;
            const NetDays: string;
            const DiscountDate: string;
            const DueDate: string;
            const ExpectedDate: string;
            const Ccy: string;
            const ExchRate: string;
            const ShipFrom: string;
            const OwnerBranch: string;
            const SourceBranch: string;
            const ComputeTax: string;
            const TotPriceAmt: string;
            const TotPtaxAmt: string;
            const TotExtPrice: string;
            const TotLdiscAmt: string;
            const TotAtaxAmt: string;
            const TotItemAmt: string;
            const TotTdiscAmt: string;
            const NetTradeAmt: string;
            const TotChgsAmt: string;
            const NetOrdrAmt: string;
            const TotGtaxAmt: string;
            const NetPayAmt: string;
            const DpsCover: string;
            const DpsApplied: string;
            const NetBalAmt: string;
            const CpdTdiscAmt: string;
            const CpdGtaxAmt: string;
            const CpdDpsAmt: string;
            const LocPriceAmt: string;
            const LocPtaxAmt: string;
            const LocExtPrice: string;
            const LocLdiscAmt: string;
            const LocAtaxAmt: string;
            const LocItemAmt: string;
            const LocTdiscAmt: string;
            const LocChgsAmt: string;
            const LocGtaxAmt: string;
            const LocPayAmt: string;
            const LocDpsApplied: string;
            const CreatedDate: string;
            const CreatedBy: string;
            const RevisedDate: string;
            const RevisedBy: string;
            const PostedDate: string;
            const PostedBy: string;
            const PrevisedDate: string;
            const PrevisedBy: string;
            const LastEntryNo: string;
            const LastChgsNo: string;
            const LastTextNo: string;
            const LastCtnNo: string;
            const LockType: string;
            const LockRefNo: string;
            const LastLogNo: string;
            const NewItemCount: string;
            const NewChgsCount: string;
            const AcctCustomer: string;
            const AcctTdisc: string;
            const AcctGtax: string;
            const DpsApplyRef: string;
            const VendTaxCode: string;
            const CustTaxCode: string;
            const RetPriceAmt: string;
            const RetPtaxAmt: string;
            const RetExtPrice: string;
            const RetLdiscAmt: string;
            const RetAtaxAmt: string;
            const RetItemAmt: string;
            const RetTdiscAmt: string;
            const RetGtaxAmt: string;
            const RetChgsAmt: string;
            const RetPayAmt: string;
            const LretPriceAmt: string;
            const LretPtaxAmt: string;
            const LretExtPrice: string;
            const LretLdiscAmt: string;
            const LretAtaxAmt: string;
            const LretItemAmt: string;
            const LretTdiscAmt: string;
            const LretGtaxAmt: string;
            const LretChgsAmt: string;
            const LretPayAmt: string;
            const WeightUom: string;
            const GrWt: string;
            const NtWt: string;
            const DimensionUom: string;
            const Volume: string;
            const GlLink: string;
            const GlLinkType: string;
            const GlLinkNo: string;
            const PackingOk: string;
            const Comments1: string;
            const Comments2: string;
            const Comments3: string;
            const Comments4: string;
            const SettleAt: string;
            const CheckCrlimit: string;
            const CheckCrbal: string;
            const Attention: string;
            const TelNo: string;
            const FaxNo: string;
            const PortLoading: string;
            const PortDischarge: string;
            const Forwarder: string;
            const LcNo: string;
            const OriginCountry: string;
            const Comments5: string;
            const Comments6: string;
            const Comments7: string;
            const Comments8: string;
            const IssueBank: string;
            const IssueDate: string;
            const SltaxType: string;
            const GsltaxPcent: string;
            const TotGsltaxAmt: string;
            const TotLsltaxAmt: string;
            const LocGsltaxAmt: string;
            const LocLsltaxAmt: string;
            const SoSltaxType: string;
            const SoGsltaxPcent: string;
            const OrderCount: string;
            const AcctSltax: string;
            const LastTextNo1: string;
            const Anlys1: string;
            const Anlys2: string;
            const Anlys7: string;
            const Anlys8: string;
            const DnOnly: string;
            const Invoiced: string;
            const InvoiceNo: string;
            const Flag: string;
            const HoldBy: string;
            const Anlys9: string;
            const Anlys10: string;
            const Anlys11: string;
            const Anlys12: string;
            const Anlys13: string;
            const Anlys14: string;
            const ManualShipmentDetail: string;
            const RefCompanyCode: string;
            const RefGrnNo: string;
            const LcName: string;
            const DetailList: string;
        }
    }
}
declare namespace Matrix.Sales {
    namespace ShipmentService {
        const baseUrl = "Sales/Shipment";
        function Create(request: Serenity.SaveRequest<ShipmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Update(request: Serenity.SaveRequest<ShipmentRow>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<ShipmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<ShipmentRow>) => void, opt?: Q.ServiceOptions<any>): JQueryXHR;
        namespace Methods {
            const Create: string;
            const Update: string;
            const Delete: string;
            const Retrieve: string;
            const List: string;
        }
    }
}
declare namespace Matrix {
    enum SalesOrderType {
        Sample = 65,
        Blanket = 66,
        Release = 82,
        Standard = 83,
    }
    class SalesOrderTypeOption {
        Mapping: KeyedCollection<string>;
        constructor();
    }
}
declare namespace Matrix {
    interface ScriptUserDefinition {
        Username?: string;
        DisplayName?: string;
        IsAdmin?: boolean;
        Permissions?: {
            [key: string]: boolean;
        };
    }
}
declare namespace Matrix.Modules.Development {
    class TableExplorerControlGrid extends Serenity.EntityGrid<TableExplorerColumns, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): any;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
    interface TableExplorerColumns {
        LineNo?: number;
        Table?: string;
        Entity?: string;
    }
    namespace TableExplorerColumns {
        const idProperty = "LineNo";
        const nameProperty = "Table";
        const localTextPrefix = "Administration.User";
        const lookupKey = "Administration.User";
        function getLookup(): Q.Lookup<TableExplorerColumns>;
        namespace Fields {
            const LineNo: number;
            const Table: string;
            const Entity: string;
        }
    }
}
declare namespace Matrix.MasterData {
    class CustomerApprovalGrid extends Serenity.EntityGrid<CustomerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CustomerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class ItemApprovalGrid extends Serenity.EntityGrid<ItemRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ItemDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
        private rowSelection;
        protected createToolbarExtensions(): void;
        protected getColumns(): Slick.Column[];
        protected getViewOptions(): Slick.RemoteViewOptions;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionApprovalGrid extends Serenity.EntityGrid<PurchaseRequisitionRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseRequisitionDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class VendorApprovalGrid extends Serenity.EntityGrid<VendorRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Administration {
    class CompanyDialog extends Serenity.EntityDialog<CompanyRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CompanyForm;
    }
}
declare namespace Matrix.Administration {
    class CompanyGrid extends Serenity.EntityGrid<CompanyRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CompanyDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogDialog extends Serenity.EntityDialog<LookupDialogRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: LookupDialogForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogFilterColumnDetailDialog extends Serenity.EntityDialog<LookupDialogFilterColumnDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: LookupDialogFilterColumnDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogFilterColumnDetailGrid extends Serenity.EntityGrid<LookupDialogFilterColumnDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof LookupDialogFilterColumnDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogFilterDetailDialog extends Serenity.EntityDialog<LookupDialogFilterDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: LookupDialogFilterDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogFilterDetailGrid extends Serenity.EntityGrid<LookupDialogFilterDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof LookupDialogFilterDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogFilterDialog extends Serenity.EntityDialog<LookupDialogFilterRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: LookupDialogFilterForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogFilterGrid extends Serenity.EntityGrid<LookupDialogFilterRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof LookupDialogFilterDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogGrid extends Serenity.EntityGrid<LookupDialogRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof LookupDialogDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogDialog extends Serenity.EntityDialog<ReportDialogRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ReportDialogForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogGrid extends Serenity.EntityGrid<ReportDialogRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ReportDialogDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getColumns(): Slick.Column[];
        protected getButtons(): Serenity.ToolButton[];
        protected onClick(e: JQueryEventObject, row: number, cell: number): void;
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogOptionDialog extends Serenity.EntityDialog<ReportDialogOptionRow, any> {
        protected getFormKey(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ReportDialogOptionForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Common {
    class GridEditorBase<TEntity> extends Serenity.EntityGrid<TEntity, any> implements Serenity.IGetEditValue, Serenity.ISetEditValue {
        protected getIdProperty(): string;
        protected nextId: number;
        constructor(container: JQuery);
        protected id(entity: TEntity): any;
        protected getNextId(): string;
        protected setNewId(entity: TEntity): void;
        protected save(opt: Serenity.ServiceOptions<any>, callback: (r: Serenity.ServiceResponse) => void): void;
        protected deleteEntity(id: number): boolean;
        protected validateEntity(row: TEntity, id: number): boolean;
        protected setEntities(items: TEntity[]): void;
        protected getNewEntity(): TEntity;
        protected getButtons(): Serenity.ToolButton[];
        protected editItem(entityOrId: any): void;
        getEditValue(property: any, target: any): void;
        setEditValue(source: any, property: any): void;
        value: TEntity[];
        protected getGridCanLoad(): boolean;
        protected usePager(): boolean;
        protected getInitialTitle(): any;
        protected createQuickSearchInput(): void;
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogOptionEditor extends Common.GridEditorBase<ReportDialogOptionRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ReportDialogOptionDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogOptionGrid extends Serenity.EntityGrid<ReportDialogOptionRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ReportDialogOptionDialog;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogOptionItemDialog extends Serenity.EntityDialog<ReportDialogOptionItemRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ReportDialogOptionItemForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportDialogOptionItemGrid extends Serenity.EntityGrid<ReportDialogOptionItemRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ReportDialogOptionItemDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.EnterpriseSys {
    class ReportPreivewDialog extends Serenity.TemplatedDialog<any> {
        reportId: string;
        desc: string;
        rows: any;
        constructor(reportId: any);
        load(reportId: string): void;
        static initializePage(): void;
        protected onDialogOpen(): void;
        protected getDialogOptions(): JQueryUI.DialogOptions;
    }
}
declare namespace Matrix.Administration {
    class LookupDialog extends Serenity.TemplatedDialog<any> {
        LookupName: string;
        LookupFilter: string;
        CurrentPageIndex: number;
        TargetId: string;
        vuejs: any;
        KeyValue1: string;
        KeyValue2: string;
        KeyValue3: string;
        constructor(data: any);
        protected onDialogOpen(): void;
        private InitializeDialog(response);
        private InitializeVueJS(parent, response, lookupName, lookupFilter, currentPageIndex);
        protected getDialogOptions(): JQueryUI.DialogOptions;
    }
}
declare namespace Matrix.Administration {
    class LookupDialogController {
        controls: any;
        constructor(data?: any);
        InitiaizeLookupUI(): void;
        InitiaizeLookupExecution(): void;
    }
}
declare namespace Matrix.Administration {
    class TranslationDialog extends Serenity.EntityDialog<TranslationRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: TranslationForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Administration {
    class TranslationGrid extends Serenity.EntityGrid<TranslationRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof TranslationDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        private nextId;
        constructor(container: JQuery);
        protected onViewProcessData(response: Serenity.ListResponse<TranslationRow>): Serenity.ListResponse<TranslationRow>;
        protected getDefaultSortBy(): string[];
    }
}
declare namespace Matrix.Administration {
    class UserDialog extends Serenity.EntityDialog<UserRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getIsActiveProperty(): boolean;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: UserForm;
        constructor();
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
        protected afterLoadEntity(): void;
    }
}
declare namespace Matrix.Administration {
    class UserGrid extends Serenity.EntityGrid<UserRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof UserDialog;
        protected getIdProperty(): string;
        protected getIsActiveProperty(): boolean;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getDefaultSortBy(): string[];
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Administration {
    class UserDefinedQueryDialog extends Serenity.EntityDialog<UserDefinedQueryRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: UserDefinedQueryForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Administration {
    class UserDefinedQueryGrid extends Serenity.EntityGrid<UserDefinedQueryRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof UserDefinedQueryDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
        protected getButtons(): Serenity.ToolButton[];
        protected getColumns(): Slick.Column[];
        protected onClick(e: JQueryEventObject, row: number, cell: number): void;
    }
}
declare namespace Matrix {
    interface IKeyedCollection<T> {
        Add(key: string, value: T): any;
        ContainsKey(key: string): boolean;
        Count(): number;
        Item(key: string): T;
        Keys(): string[];
        Remove(key: string): T;
        Values(): T[];
    }
    class KeyedCollection<T> implements IKeyedCollection<T> {
        private items;
        private count;
        ContainsKey(key: string): boolean;
        Count(): number;
        Add(key: string, value: T): void;
        Remove(key: string): T;
        Item(key: string): T;
        Keys(): string[];
        Values(): T[];
    }
}
declare namespace App {
    class DateTime {
        static today(): Date;
        static addDays(date: Date, days: number): Date;
        static addMonths(date: Date, months: number): Date;
        static addHours(date: Date, hours: number): Date;
        static addMintues(date: Date, minutes: number): Date;
        static CheckDateTimeFormatToMinute(value: any): boolean;
        static CheckDateTimeFormatToDay(value: any): boolean;
    }
    class Object {
        static isNullOrUndefined(value: any): boolean;
    }
    class Guid {
        static Empty: string;
        static isEmpty(value: string | any): boolean;
    }
    class Array {
        static RemoveAt(index: number, data: any[]): any[];
    }
    class Common {
        static HandleError(reason: any): void;
    }
    class Table {
        static InitGridControl(): void;
        private static TableStripedHandle();
        private static InitMultiGrid();
        static InitMergeRowsKendoGrid(mergeColumns: any[], target: any): void;
        static InitMergeRowsKendoGridWithGroup(mergeColumns: any[], target: any): void;
    }
    class Util {
        static GetUrlParms(parmname: string, matchCase?: boolean): any;
        static Timestamp(): any;
        static InitFormValidStyle(myForm: any): void;
        static SetWindowAdaptiveHeight(fixedElement: Object[], adaptElemnet: Object[], opts: any): number;
        static FindValue(eleName: string, array: any): any;
        static Title(title: string, num: string): string;
        static DisplayErroMsg(resp: any): string;
        static NoRecordTemp: string;
        static SDTemp: string;
        static EnhanceControl(): void;
        static GoBack(): void;
        static GoBackAndRefresh(): void;
        static ExtractMessages(messagedata: any, level?: number): string[];
        static OkBtnHandle(): void;
    }
}
declare namespace Matrix {
    class ItemTypeOption {
        Mapping: KeyedCollection<string>;
        constructor();
    }
    class NavigationIcon {
        Mapping: KeyedCollection<string>;
        constructor();
    }
}
declare namespace Matrix.LanguageList {
    function getValue(): string[][];
}
declare namespace Matrix.Common {
    class UserPreferenceStorage implements Serenity.SettingStorage {
        getItem(key: string): string;
        setItem(key: string, data: string): void;
    }
}
declare namespace Matrix.ScriptInitialization {
}
declare namespace Matrix {
    class SelectableEntityGrid<TItem, TOptions> extends Serenity.EntityGrid<TItem, TOptions> {
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix {
    class BasicProgressDialog extends Serenity.TemplatedDialog<any> {
        constructor();
        cancelled: boolean;
        max: number;
        value: number;
        title: string;
        cancelTitle: string;
        getDialogOptions(): JQueryUI.DialogOptions;
        initDialog(): void;
        getTemplate(): string;
    }
}
declare namespace Matrix.Common {
    class BulkServiceAction {
        protected keys: string[];
        protected queue: string[];
        protected queueIndex: number;
        protected progressDialog: BasicProgressDialog;
        protected pendingRequests: number;
        protected completedRequests: number;
        protected errorByKey: Q.Dictionary<Serenity.ServiceError>;
        private successCount;
        private errorCount;
        done: () => void;
        protected createProgressDialog(): void;
        protected getConfirmationFormat(): string;
        protected getConfirmationMessage(targetCount: any): string;
        protected confirm(targetCount: any, action: any): void;
        protected getNothingToProcessMessage(): string;
        protected nothingToProcess(): void;
        protected getParallelRequests(): number;
        protected getBatchSize(): number;
        protected startParallelExecution(): void;
        protected serviceCallCleanup(): void;
        protected executeForBatch(batch: string[]): void;
        protected executeNextBatch(): void;
        protected getAllHadErrorsFormat(): string;
        protected showAllHadErrors(): void;
        protected getSomeHadErrorsFormat(): string;
        protected showSomeHadErrors(): void;
        protected getAllSuccessFormat(): string;
        protected showAllSuccess(): void;
        protected showResults(): void;
        execute(keys: string[]): void;
        get_successCount(): any;
        set_successCount(value: number): void;
        get_errorCount(): any;
        set_errorCount(value: number): void;
    }
}
declare namespace Matrix.DialogUtils {
    function pendingChangesConfirmation(element: JQuery, hasPendingChanges: () => boolean): void;
}
declare namespace Matrix.Common {
    class EnumSelectFormatter implements Slick.Formatter {
        constructor();
        format(ctx: Slick.FormatterContext): string;
        enumKey: string;
        allowClear: boolean;
        emptyItemText: string;
    }
}
declare namespace Matrix.Common {
    interface ExcelExportOptions {
        grid: Serenity.DataGrid<any, any>;
        service: string;
        onViewSubmit: () => boolean;
        title?: string;
        hint?: string;
        separator?: boolean;
    }
    namespace ExcelExportHelper {
        function createToolButton(options: ExcelExportOptions): Serenity.ToolButton;
    }
}
declare namespace Matrix.Common {
    class GridEditorDialog<TEntity> extends Serenity.EntityDialog<TEntity, any> {
        protected getIdProperty(): string;
        onSave: (options: Serenity.ServiceOptions<Serenity.SaveResponse>, callback: (response: Serenity.SaveResponse) => void) => void;
        onDelete: (options: Serenity.ServiceOptions<Serenity.DeleteResponse>, callback: (response: Serenity.DeleteResponse) => void) => void;
        destroy(): void;
        protected updateInterface(): void;
        protected saveHandler(options: Serenity.ServiceOptions<Serenity.SaveResponse>, callback: (response: Serenity.SaveResponse) => void): void;
        protected deleteHandler(options: Serenity.ServiceOptions<Serenity.DeleteResponse>, callback: (response: Serenity.DeleteResponse) => void): void;
    }
}
declare namespace Matrix {
    /**
     * This is an editor widget but it only displays a text, not edits it.
     *
     */
    class StaticTextBlock extends Serenity.Widget<StaticTextBlockOptions> implements Serenity.ISetEditValue {
        private value;
        constructor(container: JQuery, options: StaticTextBlockOptions);
        private updateElementContent();
        /**
         * By implementing ISetEditValue interface, we allow this editor to display its field value.
         * But only do this when our text content is not explicitly set in options
         */
        setEditValue(source: any, property: Serenity.PropertyItem): void;
    }
    interface StaticTextBlockOptions {
        text: string;
        isHtml: boolean;
        isLocalText: boolean;
        hideLabel: boolean;
    }
}
declare namespace Matrix.Document {
    class AttachmentDialog extends Serenity.EntityDialog<AttachmentRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AttachmentForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Document {
    class AttachmentGrid extends Serenity.EntityGrid<AttachmentRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AttachmentDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getColumns(): Slick.Column[];
        protected onClick(e: JQueryEventObject, row: number, cell: number): void;
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.EnterpriseSys {
    class DocumentPreivewDialog extends Serenity.TemplatedDialog<any> {
        reportId: string;
        desc: string;
        rows: any;
        constructor(reportId: any);
        load(reportId: string): void;
        static initializePage(): void;
        protected onDialogOpen(): void;
        protected getDialogOptions(): JQueryUI.DialogOptions;
    }
}
declare namespace Matrix.Finance {
    class AccountReconciliationAdjustmentDialog extends Serenity.EntityDialog<AccountReconciliationAdjustmentRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountReconciliationAdjustmentForm;
    }
}
declare namespace Matrix.Finance {
    class AccountReconciliationAdjustmentGrid extends Serenity.EntityGrid<AccountReconciliationAdjustmentRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountReconciliationAdjustmentDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountReconciliationDetailDialog extends Serenity.EntityDialog<AccountReconciliationDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountReconciliationDetailForm;
    }
}
declare namespace Matrix.Finance {
    class AccountReconciliationDetailGrid extends Serenity.EntityGrid<AccountReconciliationDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountReconciliationDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountReconciliationDialog extends Serenity.EntityDialog<AccountReconciliationRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountReconciliationForm;
    }
}
declare namespace Matrix.Finance {
    class AccountReconciliationGrid extends Serenity.EntityGrid<AccountReconciliationRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountReconciliationDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceDetailDialog extends Serenity.EntityDialog<AccountsPayableInvoiceDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayableInvoiceDetailForm;
    }
}
declare module Matrix.Finance {
    class AccountsPayableInvoiceDetailEditor extends Common.GridEditorBase<AccountsPayableInvoiceDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableInvoiceDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceDetailGrid extends Serenity.EntityGrid<AccountsPayableInvoiceDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableInvoiceDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceDialog extends Serenity.EntityDialog<AccountsPayableInvoiceRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayableInvoiceForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceGrid extends Serenity.EntityGrid<AccountsPayableInvoiceRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableInvoiceDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceOrderDialog extends Serenity.EntityDialog<AccountsPayableInvoiceOrderRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayableInvoiceOrderForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceOrderEditor extends Common.GridEditorBase<AccountsPayableInvoiceOrderRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableInvoiceOrderDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceOrderGrid extends Serenity.EntityGrid<AccountsPayableInvoiceOrderRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableInvoiceOrderDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceSummaryDialog extends Serenity.EntityDialog<AccountsPayableInvoiceSummaryRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayableInvoiceSummaryForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableInvoiceSummaryGrid extends Serenity.EntityGrid<AccountsPayableInvoiceSummaryRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableInvoiceSummaryDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableJournalDialog extends Serenity.EntityDialog<AccountsPayableJournalRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayableJournalForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableJournalGrid extends Serenity.EntityGrid<AccountsPayableJournalRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableJournalDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableLedgerDialog extends Serenity.EntityDialog<AccountsPayableLedgerRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayableLedgerForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayableLedgerGrid extends Serenity.EntityGrid<AccountsPayableLedgerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayableLedgerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentCurrencyDialog extends Serenity.EntityDialog<AccountsPayablePaymentCurrencyRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayablePaymentCurrencyForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentCurrencyGrid extends Serenity.EntityGrid<AccountsPayablePaymentCurrencyRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayablePaymentCurrencyDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentDetailDialog extends Serenity.EntityDialog<AccountsPayablePaymentDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayablePaymentDetailForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentDetailEditor extends Common.GridEditorBase<AccountsPayablePaymentDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayablePaymentDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentDetailGrid extends Serenity.EntityGrid<AccountsPayablePaymentDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayablePaymentDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentDialog extends Serenity.EntityDialog<AccountsPayablePaymentRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsPayablePaymentForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsPayablePaymentGrid extends Serenity.EntityGrid<AccountsPayablePaymentRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsPayablePaymentDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableCommissionDialog extends Serenity.EntityDialog<AccountsReceivableCommissionRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivableCommissionForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableCommissionGrid extends Serenity.EntityGrid<AccountsReceivableCommissionRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableCommissionDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceDetailDialog extends Serenity.EntityDialog<AccountsReceivableInvoiceDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivableInvoiceDetailForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceDetailGrid extends Serenity.EntityGrid<AccountsReceivableInvoiceDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableInvoiceDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceDialog extends Serenity.EntityDialog<AccountsReceivableInvoiceRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivableInvoiceForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceGrid extends Serenity.EntityGrid<AccountsReceivableInvoiceRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableInvoiceDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceOrderDialog extends Serenity.EntityDialog<AccountsReceivableInvoiceOrderRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivableInvoiceOrderForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceOrderEditor extends Common.GridEditorBase<AccountsReceivableInvoiceOrderRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableInvoiceOrderDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
    class AccountsReceivableInvoiceDetailEditor extends Common.GridEditorBase<AccountsReceivableInvoiceDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableInvoiceDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
    class AccountsReceivableCommissionEditor extends Common.GridEditorBase<AccountsReceivableCommissionRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableCommissionDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableInvoiceOrderGrid extends Serenity.EntityGrid<AccountsReceivableInvoiceOrderRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableInvoiceOrderDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableJournalDialog extends Serenity.EntityDialog<AccountsReceivableJournalRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivableJournalForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableJournalGrid extends Serenity.EntityGrid<AccountsReceivableJournalRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableJournalDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableLedgerDialog extends Serenity.EntityDialog<AccountsReceivableLedgerRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivableLedgerForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivableLedgerGrid extends Serenity.EntityGrid<AccountsReceivableLedgerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivableLedgerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentCurrencyDialog extends Serenity.EntityDialog<AccountsReceivablePaymentCurrencyRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivablePaymentCurrencyForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentCurrencyGrid extends Serenity.EntityGrid<AccountsReceivablePaymentCurrencyRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivablePaymentCurrencyDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDepositDialog extends Serenity.EntityDialog<AccountsReceivablePaymentDepositRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivablePaymentDepositForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDepositGrid extends Serenity.EntityGrid<AccountsReceivablePaymentDepositRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivablePaymentDepositDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDepositRowDetailEditor extends Common.GridEditorBase<AccountsReceivablePaymentDepositRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivablePaymentDepositDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDetailDetailEditor extends Common.GridEditorBase<AccountsReceivablePaymentDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivablePaymentDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDetailDialog extends Serenity.EntityDialog<AccountsReceivablePaymentDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivablePaymentDetailForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDetailGrid extends Serenity.EntityGrid<AccountsReceivablePaymentDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivablePaymentDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentDialog extends Serenity.EntityDialog<AccountsReceivablePaymentRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountsReceivablePaymentForm;
    }
}
declare namespace Matrix.Finance {
    class AccountsReceivablePaymentGrid extends Serenity.EntityGrid<AccountsReceivablePaymentRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountsReceivablePaymentDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class CostCenterBudgetDialog extends Serenity.EntityDialog<CostCenterBudgetRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CostCenterBudgetForm;
    }
}
declare namespace Matrix.Finance {
    class CostCenterBudgetGrid extends Serenity.EntityGrid<CostCenterBudgetRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CostCenterBudgetDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class CurrencyBalanceDialog extends Serenity.EntityDialog<CurrencyBalanceRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CurrencyBalanceForm;
    }
}
declare namespace Matrix.Finance {
    class CurrencyBalanceGrid extends Serenity.EntityGrid<CurrencyBalanceRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CurrencyBalanceDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class CurrencyLedgerDialog extends Serenity.EntityDialog<CurrencyLedgerRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CurrencyLedgerForm;
    }
}
declare namespace Matrix.Finance {
    class CurrencyLedgerGrid extends Serenity.EntityGrid<CurrencyLedgerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CurrencyLedgerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class CurrencyLedgerSummaryDialog extends Serenity.EntityDialog<CurrencyLedgerSummaryRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CurrencyLedgerSummaryForm;
    }
}
declare namespace Matrix.Finance {
    class CurrencyLedgerSummaryGrid extends Serenity.EntityGrid<CurrencyLedgerSummaryRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CurrencyLedgerSummaryDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class LedgerSummaryDialog extends Serenity.EntityDialog<LedgerSummaryRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: LedgerSummaryForm;
    }
}
declare namespace Matrix.Finance {
    class LedgerSummaryGrid extends Serenity.EntityGrid<LedgerSummaryRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof LedgerSummaryDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherDetailDialog extends Serenity.EntityDialog<PeriodicVoucherDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PeriodicVoucherDetailForm;
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherDetailEditor extends Common.GridEditorBase<PeriodicVoucherDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PeriodicVoucherDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherDetailGrid extends Serenity.EntityGrid<PeriodicVoucherDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PeriodicVoucherDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherDialog extends Serenity.EntityDialog<PeriodicVoucherRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PeriodicVoucherForm;
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherGrid extends Serenity.EntityGrid<PeriodicVoucherRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PeriodicVoucherDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherScheduleDetailEditor extends Common.GridEditorBase<PeriodicVoucherScheduleRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PeriodicVoucherScheduleDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherScheduleDialog extends Serenity.EntityDialog<PeriodicVoucherScheduleRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PeriodicVoucherScheduleForm;
    }
}
declare namespace Matrix.Finance {
    class PeriodicVoucherScheduleGrid extends Serenity.EntityGrid<PeriodicVoucherScheduleRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PeriodicVoucherScheduleDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class VoucherCurrencyDetailDialog extends Serenity.EntityDialog<VoucherCurrencyDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VoucherCurrencyDetailForm;
    }
}
declare namespace Matrix.Finance {
    class VoucherCurrencyDetailGrid extends Serenity.EntityGrid<VoucherCurrencyDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VoucherCurrencyDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class VoucherDetailDialog extends Serenity.EntityDialog<VoucherDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VoucherDetailForm;
    }
}
declare namespace Matrix.Finance {
    class VoucherDetailEditor extends Common.GridEditorBase<VoucherDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VoucherDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Finance {
    class VoucherDetailGrid extends Serenity.EntityGrid<VoucherDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VoucherDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class VoucherDialog extends Serenity.EntityDialog<VoucherRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VoucherForm;
    }
}
declare namespace Matrix.Finance {
    class VoucherGrid extends Serenity.EntityGrid<VoucherRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VoucherDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class VoucherCancellationDialog extends Serenity.EntityDialog<VoucherCancellationRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VoucherCancellationForm;
    }
}
declare namespace Matrix.Finance {
    class VoucherCancellationGrid extends Serenity.EntityGrid<VoucherCancellationRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VoucherCancellationDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Finance {
    class VoucherPresetDialog extends Serenity.EntityDialog<VoucherPresetRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VoucherPresetForm;
    }
}
declare namespace Matrix.Finance {
    class VoucherPresetGrid extends Serenity.EntityGrid<VoucherPresetRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VoucherPresetDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Inventory {
    class FifoControlDialog extends Serenity.EntityDialog<FifoControlRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: FifoControlForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Inventory {
    class FifoControlGrid extends Serenity.EntityGrid<FifoControlRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof FifoControlDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Inventory {
    class InventoryBalanceDialog extends Serenity.EntityDialog<InventoryBalanceRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: InventoryBalanceForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Inventory {
    class InventoryBalanceGrid extends Serenity.EntityGrid<InventoryBalanceRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof InventoryBalanceDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementDetailDialog extends Serenity.EntityDialog<InventoryMovementDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: InventoryMovementDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementDetailEditor extends Common.GridEditorBase<InventoryMovementDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof InventoryMovementDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementDetailGrid extends Serenity.EntityGrid<InventoryMovementDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof InventoryMovementDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementDialog extends Serenity.EntityDialog<InventoryMovementRow, any> {
        static FlowType: string;
        constructor(container: JQuery);
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: any;
        protected getEntityTitle(): string;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Inventory {
    class InventoryMovementGrid extends Serenity.EntityGrid<InventoryMovementRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof InventoryMovementDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        flowType: string;
        protected getSlickOptions(): Slick.GridOptions;
        setFlowType(flowType: string): void;
        protected createSlickGrid(): Slick.Grid;
        constructor(container: JQuery, flowType: string);
        protected getButtons(): Serenity.ToolButton[];
        protected getQuickFilters(): Serenity.QuickFilter<Serenity.Widget<any>, any>[];
    }
}
declare namespace Matrix.Inventory {
    class ItemLotDialog extends Serenity.EntityDialog<ItemLotRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ItemLotForm;
    }
}
declare namespace Matrix.Inventory {
    class ItemLotGrid extends Serenity.EntityGrid<ItemLotRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ItemLotDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        private sourceLanguage;
        protected createToolbarExtensions(): void;
        protected onViewSubmit(): boolean;
    }
}
declare namespace Matrix.Inventory {
    class ItemLotSerialDialog extends Serenity.EntityDialog<ItemLotSerialRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ItemLotSerialForm;
    }
}
declare namespace Matrix.Inventory {
    class ItemLotSerialGrid extends Serenity.EntityGrid<ItemLotSerialRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ItemLotSerialDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        private sourceLanguage;
        protected createToolbarExtensions(): void;
        protected onViewSubmit(): boolean;
    }
}
declare namespace Matrix.Inventory {
    class StockJournalDialog extends Serenity.EntityDialog<StockJournalRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: StockJournalForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Inventory {
    class StockJournalGrid extends Serenity.EntityGrid<StockJournalRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof StockJournalDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
        protected getButtons(): Serenity.ToolButton[];
        refreshGrid(param: any): void;
    }
}
declare namespace Matrix.Inventory {
    class StockLedgerDialog extends Serenity.EntityDialog<StockLedgerRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: StockLedgerForm;
    }
}
declare namespace Matrix.Inventory {
    class StockLedgerGrid extends Serenity.EntityGrid<StockLedgerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof StockLedgerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class AccountBudgetDetailEditor extends Common.GridEditorBase<AccountBudgetRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountBudgetDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.MasterData {
    class AccountBudgetDialog extends Serenity.EntityDialog<AccountBudgetRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountBudgetForm;
    }
}
declare namespace Matrix.MasterData {
    class AccountBudgetGrid extends Serenity.EntityGrid<AccountBudgetRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountBudgetDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class AccountDialog extends Serenity.EntityDialog<AccountRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AccountForm;
    }
}
declare namespace Matrix.MasterData {
    class AccountGrid extends Serenity.EntityGrid<AccountRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AccountDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class AddressTypeDialog extends Serenity.EntityDialog<AddressTypeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AddressTypeForm;
    }
}
declare namespace Matrix.MasterData {
    class AddressTypeGrid extends Serenity.EntityGrid<AddressTypeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AddressTypeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class AnalysisCategoryDetailEditor extends Common.GridEditorBase<AnalysisCodeRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AnalysisCodeDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.MasterData {
    class AnalysisCategoryDialog extends Serenity.EntityDialog<AnalysisCategoryRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AnalysisCategoryForm;
    }
}
declare namespace Matrix.MasterData {
    class AnalysisCategoryGrid extends Serenity.EntityGrid<AnalysisCategoryRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AnalysisCategoryDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class AnalysisCodeDialog extends Serenity.EntityDialog<AnalysisCodeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AnalysisCodeForm;
    }
}
declare namespace Matrix.MasterData {
    class AnalysisCodeGrid extends Serenity.EntityGrid<AnalysisCodeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AnalysisCodeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class AssemblyLineDialog extends Serenity.EntityDialog<AssemblyLineRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AssemblyLineForm;
    }
}
declare namespace Matrix.MasterData {
    class AssemblyLineGrid extends Serenity.EntityGrid<AssemblyLineRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AssemblyLineDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class AssemblyLineWorkCentreDetailDialog extends Serenity.EntityDialog<AssemblyLineWorkCentreDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AssemblyLineWorkCentreDetailForm;
    }
}
declare namespace Matrix.MasterData {
    class AssemblyLineWorkCentreDetailEditor extends Common.GridEditorBase<ExchangeRateRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AnalysisCodeDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.MasterData {
    class AssemblyLineWorkCentreDetailGrid extends Serenity.EntityGrid<AssemblyLineWorkCentreDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AssemblyLineWorkCentreDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class AttachmentFileTypeDialog extends Serenity.EntityDialog<AttachmentFileTypeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: AttachmentFileTypeForm;
    }
}
declare namespace Matrix.MasterData {
    class AttachmentFileTypeGrid extends Serenity.EntityGrid<AttachmentFileTypeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AttachmentFileTypeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class BalanceSheetLayoutDialog extends Serenity.EntityDialog<BalanceSheetLayoutRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: BalanceSheetLayoutForm;
    }
}
declare namespace Matrix.MasterData {
    class BalanceSheetLayoutGrid extends Serenity.EntityGrid<BalanceSheetLayoutRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof BalanceSheetLayoutDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class BuyerControlDialog extends Serenity.EntityDialog<BuyerControlRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: BuyerControlForm;
    }
}
declare namespace Matrix.MasterData {
    class BuyerControlGrid extends Serenity.EntityGrid<BuyerControlRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof BuyerControlDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class BuyerDialog extends Serenity.EntityDialog<BuyerRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: BuyerForm;
    }
}
declare namespace Matrix.MasterData {
    class BuyerGrid extends Serenity.EntityGrid<BuyerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof BuyerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class CalendarDetailDialog extends Serenity.EntityDialog<CalendarDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CalendarDetailForm;
    }
}
declare namespace Matrix.MasterData {
    class CalendarDetailGrid extends Serenity.EntityGrid<CalendarDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CalendarDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class CalendarDialog extends Serenity.EntityDialog<CalendarRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CalendarForm;
    }
}
declare namespace Matrix.MasterData {
    class CalendarGrid extends Serenity.EntityGrid<CalendarRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CalendarDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class CalendarNoteDialog extends Serenity.EntityDialog<CalendarNoteRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CalendarNoteForm;
    }
}
declare namespace Matrix.MasterData {
    class CalendarNoteGrid extends Serenity.EntityGrid<CalendarNoteRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CalendarNoteDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class ChargeTypeDialog extends Serenity.EntityDialog<ChargeTypeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ChargeTypeForm;
    }
}
declare namespace Matrix.MasterData {
    class ChargeTypeGrid extends Serenity.EntityGrid<ChargeTypeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ChargeTypeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class CollectionDialog extends Serenity.EntityDialog<CollectionRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CollectionForm;
    }
}
declare namespace Matrix.MasterData {
    class CollectionGrid extends Serenity.EntityGrid<CollectionRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CollectionDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class ColorDialog extends Serenity.EntityDialog<ColorRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ColorForm;
    }
}
declare namespace Matrix.MasterData {
    class ColorGrid extends Serenity.EntityGrid<ColorRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ColorDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
        protected getColumns(): Slick.Column[];
    }
}
declare namespace Matrix.MasterData {
    class CommodityDialog extends Serenity.EntityDialog<CommodityRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CommodityForm;
    }
}
declare namespace Matrix.MasterData {
    class CommodityGrid extends Serenity.EntityGrid<CommodityRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CommodityDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Basic {
    class CompanyParameterDialog extends Serenity.EntityDialog<CompanyParameterRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CompanyParameterForm;
        protected updateInterface(): void;
        protected onSaveSuccess(response: any): void;
    }
}
declare namespace Matrix.Basic {
    class CompanyParameterGrid extends Serenity.EntityGrid<CompanyParameterRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CompanyParameterDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Basic {
    class CompanySettingDialog extends Serenity.EntityDialog<CompanySettingRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CompanySettingForm;
    }
}
declare namespace Matrix.Basic {
    class CompanySettingGrid extends Serenity.EntityGrid<CompanySettingRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CompanySettingDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class ContactTypeDialog extends Serenity.EntityDialog<ContactTypeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ContactTypeForm;
    }
}
declare namespace Matrix.MasterData {
    class ContactTypeGrid extends Serenity.EntityGrid<ContactTypeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ContactTypeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Enterprise {
    class CurrencyDialog extends Serenity.EntityDialog<CurrencyRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CurrencyForm;
    }
}
declare namespace Matrix.Enterprise {
    class CurrencyGrid extends Serenity.EntityGrid<CurrencyRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CurrencyDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class ExchangeRateDetailEditor extends Common.GridEditorBase<ExchangeRateRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof AnalysisCodeDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.MasterData {
    class ExchangeRateDialog extends Serenity.EntityDialog<ExchangeRateRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ExchangeRateForm;
    }
}
declare namespace Matrix.MasterData {
    class ExchangeRateGrid extends Serenity.EntityGrid<ExchangeRateRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ExchangeRateDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class CustomerDialog extends Serenity.EntityDialog<CustomerRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CustomerForm;
    }
}
declare namespace Matrix.MasterData {
    class CustomerGrid extends Serenity.EntityGrid<CustomerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CustomerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class CustomerGroupDialog extends Serenity.EntityDialog<CustomerGroupRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CustomerGroupForm;
    }
}
declare namespace Matrix.Enterprise {
    class CustomerGroupGrid extends Serenity.EntityGrid<CustomerGroupRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CustomerGroupDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class CustomerLinkTypeDialog extends Serenity.EntityDialog<CustomerLinkTypeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: CustomerLinkTypeForm;
    }
}
declare namespace Matrix.MasterData {
    class CustomerLinkTypeGrid extends Serenity.EntityGrid<CustomerLinkTypeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof CustomerLinkTypeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Enterprise {
    class DepartmentDialog extends Serenity.EntityDialog<DepartmentRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: DepartmentForm;
        protected afterLoadEntity(): void;
    }
}
declare namespace Matrix.Enterprise {
    class DepartmentGrid extends Serenity.EntityGrid<DepartmentRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof DepartmentDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class EmployeeDialog extends Serenity.EntityDialog<EmployeeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: EmployeeForm;
    }
}
declare namespace Matrix.MasterData {
    class EmployeeGrid extends Serenity.EntityGrid<EmployeeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof EmployeeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class FiscalPeriodDialog extends Serenity.EntityDialog<FiscalPeriodRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: FiscalPeriodForm;
    }
}
declare namespace Matrix.MasterData {
    class FiscalPeriodGrid extends Serenity.EntityGrid<FiscalPeriodRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof FiscalPeriodDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        private sourceLanguage;
        protected createToolbarExtensions(): void;
        protected onViewSubmit(): boolean;
    }
}
declare namespace Matrix.MasterData {
    class FiscalYearDialog extends Serenity.EntityDialog<FiscalYearRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: FiscalYearForm;
    }
}
declare namespace Matrix.MasterData {
    class FiscalYearGrid extends Serenity.EntityGrid<FiscalYearRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof FiscalYearDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.MasterData {
    class FundCodeDialog extends Serenity.EntityDialog<FundCodeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: FundCodeForm;
    }
}
declare namespace Matrix.MasterData {
    class FundCodeGrid extends Serenity.EntityGrid<FundCodeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof FundCodeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class ItemDialog extends Serenity.EntityDialog<ItemRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ItemForm;
    }
}
declare namespace Matrix.MasterData {
    class ItemGrid extends Serenity.EntityGrid<ItemRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ItemDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class AllocationMethodFormatter implements Slick.Formatter {
        format(ctx: Slick.FormatterContext): string;
    }
}
declare namespace Matrix.Enterprise {
    class ItemGroupDialog extends Serenity.EntityDialog<ItemGroupRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ItemGroupForm;
    }
}
declare namespace Matrix.Enterprise {
    class ItemGroupGrid extends Serenity.EntityGrid<ItemGroupRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ItemGroupDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class ItemTypeFormatter implements Slick.Formatter {
        format(ctx: Slick.FormatterContext): string;
    }
}
declare namespace Matrix.Enterprise {
    class JobCategoryDialog extends Serenity.EntityDialog<JobCategoryRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: JobCategoryForm;
    }
}
declare namespace Matrix.Enterprise {
    class JobCategoryGrid extends Serenity.EntityGrid<JobCategoryRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof JobCategoryDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class LocationDialog extends Serenity.EntityDialog<LocationRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: LocationForm;
    }
}
declare namespace Matrix.MasterData {
    class LocationGrid extends Serenity.EntityGrid<LocationRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof LocationDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class MachineDialog extends Serenity.EntityDialog<MachineRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: MachineForm;
    }
}
declare namespace Matrix.MasterData {
    class MachineGrid extends Serenity.EntityGrid<MachineRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof MachineDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class MessageAttachmentDialog extends Serenity.EntityDialog<MessageAttachmentRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: MessageAttachmentForm;
    }
}
declare namespace Matrix.MasterData {
    class MessageAttachmentGrid extends Serenity.EntityGrid<MessageAttachmentRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof MessageAttachmentDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class MessageDialog extends Serenity.EntityDialog<MessageRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: MessageForm;
    }
}
declare namespace Matrix.MasterData {
    class MessageGrid extends Serenity.EntityGrid<MessageRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof MessageDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class MoldDialog extends Serenity.EntityDialog<MoldRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: MoldForm;
    }
}
declare namespace Matrix.MasterData {
    class MoldGrid extends Serenity.EntityGrid<MoldRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof MoldDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class OperationDialog extends Serenity.EntityDialog<OperationRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: OperationForm;
    }
}
declare namespace Matrix.MasterData {
    class OperationGrid extends Serenity.EntityGrid<OperationRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof OperationDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class PanelDialog extends Serenity.EntityDialog<PanelRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PanelForm;
    }
}
declare namespace Matrix.MasterData {
    class PanelGrid extends Serenity.EntityGrid<PanelRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PanelDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
    }
}
declare namespace Matrix.MasterData {
    class PayTermDialog extends Serenity.EntityDialog<PayTermRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PayTermForm;
    }
}
declare namespace Matrix.MasterData {
    class PayTermGrid extends Serenity.EntityGrid<PayTermRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PayTermDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class PlannerDialog extends Serenity.EntityDialog<PlannerRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PlannerForm;
    }
}
declare namespace Matrix.MasterData {
    class PlannerGrid extends Serenity.EntityGrid<PlannerRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PlannerDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class PortCodeDialog extends Serenity.EntityDialog<PortCodeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PortCodeForm;
    }
}
declare namespace Matrix.MasterData {
    class PortCodeGrid extends Serenity.EntityGrid<PortCodeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PortCodeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class ProfitAndLossLayoutDialog extends Serenity.EntityDialog<ProfitAndLossLayoutRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ProfitAndLossLayoutForm;
    }
}
declare namespace Matrix.MasterData {
    class ProfitAndLossLayoutGrid extends Serenity.EntityGrid<ProfitAndLossLayoutRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ProfitAndLossLayoutDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class ReasonCodeDialog extends Serenity.EntityDialog<ReasonCodeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ReasonCodeForm;
    }
}
declare namespace Matrix.MasterData {
    class ReasonCodeGrid extends Serenity.EntityGrid<ReasonCodeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ReasonCodeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class SalesmanDialog extends Serenity.EntityDialog<SalesmanRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: SalesmanForm;
    }
}
declare namespace Matrix.MasterData {
    class SalesmanGrid extends Serenity.EntityGrid<SalesmanRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SalesmanDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class ShipViaCodeDialog extends Serenity.EntityDialog<ShipViaCodeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ShipViaCodeForm;
    }
}
declare namespace Matrix.MasterData {
    class ShipViaCodeGrid extends Serenity.EntityGrid<ShipViaCodeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ShipViaCodeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class SizeDialog extends Serenity.EntityDialog<SizeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: SizeForm;
    }
}
declare namespace Matrix.MasterData {
    class SizeGrid extends Serenity.EntityGrid<SizeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SizeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class StyleDialog extends Serenity.EntityDialog<StyleRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: StyleForm;
    }
}
declare namespace Matrix.MasterData {
    class StyleGrid extends Serenity.EntityGrid<StyleRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof StyleDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class TabDetailDialog extends Serenity.EntityDialog<TabDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: TabDetailForm;
    }
}
declare namespace Matrix.MasterData {
    class TabDetailGrid extends Serenity.EntityGrid<TabDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof TabDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class TabDialog extends Serenity.EntityDialog<TabRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: TabForm;
    }
}
declare namespace Matrix.MasterData {
    class TabGrid extends Serenity.EntityGrid<TabRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof TabDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class TextTypeDialog extends Serenity.EntityDialog<TextTypeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: TextTypeForm;
    }
}
declare namespace Matrix.MasterData {
    class TextTypeGrid extends Serenity.EntityGrid<TextTypeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof TextTypeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class UnitDialog extends Serenity.EntityDialog<UnitRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: UnitForm;
    }
}
declare namespace Matrix.MasterData {
    class UnitGrid extends Serenity.EntityGrid<UnitRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof UnitDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class VendorControlGrid extends Serenity.EntityGrid<VendorRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class VendorDialog extends Serenity.EntityDialog<VendorRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VendorForm;
    }
}
declare namespace Matrix.Enterprise {
    class VendorGrid extends Serenity.EntityGrid<VendorRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class VendorGroupDialog extends Serenity.EntityDialog<VendorGroupRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VendorGroupForm;
    }
}
declare namespace Matrix.Enterprise {
    class VendorGroupGrid extends Serenity.EntityGrid<VendorGroupRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorGroupDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class VoucherTypeDialog extends Serenity.EntityDialog<VoucherTypeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VoucherTypeForm;
    }
}
declare namespace Matrix.MasterData {
    class VoucherTypeGrid extends Serenity.EntityGrid<VoucherTypeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VoucherTypeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.MasterData {
    class WorkCentreDialog extends Serenity.EntityDialog<WorkCentreRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: WorkCentreForm;
    }
}
declare namespace Matrix.MasterData {
    class WorkCentreGrid extends Serenity.EntityGrid<WorkCentreRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof WorkCentreDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.MasterData {
    class WorkflowDialog extends Serenity.EntityDialog<WorkflowRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: WorkflowForm;
    }
}
declare namespace Matrix.MasterData {
    class WorkflowGrid extends Serenity.EntityGrid<WorkflowRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof WorkflowDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Membership {
    class LoginPanel extends Serenity.PropertyPanel<LoginRequest, any> {
        private form;
        constructor(container: JQuery);
        protected getFormKey(): string;
        protected getTemplateName(): string;
    }
}
declare namespace Matrix.Production {
    class BomDialog extends Serenity.EntityDialog<BomRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: BomForm;
    }
}
declare namespace Matrix.Production {
    class BomGrid extends Serenity.EntityGrid<BomRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof BomDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Production {
    class BomMaterialDialog extends Serenity.EntityDialog<BomMaterialRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: BomMaterialForm;
    }
}
declare namespace Matrix.Production {
    class BomMaterialGrid extends Serenity.EntityGrid<BomMaterialRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof BomMaterialDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Production {
    class BomRoutingStepDialog extends Serenity.EntityDialog<BomRoutingStepRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: BomRoutingStepForm;
    }
}
declare namespace Matrix.Production {
    class BomRoutingStepGrid extends Serenity.EntityGrid<BomRoutingStepRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof BomRoutingStepDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Production {
    class JobOrderDialog extends Serenity.EntityDialog<JobOrderRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: JobOrderForm;
    }
}
declare namespace Matrix.Production {
    class JobOrderGrid extends Serenity.EntityGrid<JobOrderRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof JobOrderDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Production {
    class JobOrderMaterialDialog extends Serenity.EntityDialog<JobOrderMaterialRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: JobOrderMaterialForm;
    }
}
declare namespace Matrix.Production {
    class JobOrderMaterialGrid extends Serenity.EntityGrid<JobOrderMaterialRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof JobOrderMaterialDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Production {
    class JobOrderRoutingStepDialog extends Serenity.EntityDialog<JobOrderRoutingStepRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: JobOrderRoutingStepForm;
    }
}
declare namespace Matrix.Production {
    class JobOrderRoutingStepGrid extends Serenity.EntityGrid<JobOrderRoutingStepRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof JobOrderRoutingStepDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionDetailDialog extends Serenity.EntityDialog<PurchaseInspectionDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseInspectionDetailForm;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionDetailGrid extends Serenity.EntityGrid<PurchaseInspectionDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseInspectionDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionDialog extends Serenity.EntityDialog<PurchaseInspectionRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseInspectionForm;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionGrid extends Serenity.EntityGrid<PurchaseInspectionRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseInspectionDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionInstructionDialog extends Serenity.EntityDialog<PurchaseInspectionInstructionRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseInspectionInstructionForm;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseInspectionInstructionGrid extends Serenity.EntityGrid<PurchaseInspectionInstructionRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseInspectionInstructionDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseOrderDetailDialog extends Serenity.EntityDialog<PurchaseOrderDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseOrderDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseOrderDetailEditor extends Common.GridEditorBase<PurchaseOrderDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseOrderDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseOrderDetailGrid extends Serenity.EntityGrid<PurchaseOrderDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseOrderDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseOrderDialog extends Serenity.EntityDialog<PurchaseOrderRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseOrderForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseOrderGrid extends Serenity.EntityGrid<PurchaseOrderRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseOrderDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionDetailDialog extends Serenity.EntityDialog<PurchaseRequisitionDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseRequisitionDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionDetailEditor extends Common.GridEditorBase<PurchaseRequisitionDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseRequisitionDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionDetailGrid extends Serenity.EntityGrid<PurchaseRequisitionDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseRequisitionDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionDialog extends Serenity.EntityDialog<PurchaseRequisitionRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseRequisitionForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseRequisitionGrid extends Serenity.EntityGrid<PurchaseRequisitionRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseRequisitionDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnChargeDialog extends Serenity.EntityDialog<PurchaseReturnChargeRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseReturnChargeForm;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnChargeGrid extends Serenity.EntityGrid<PurchaseReturnChargeRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseReturnChargeDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnDetailDialog extends Serenity.EntityDialog<PurchaseReturnDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseReturnDetailForm;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnDetailGrid extends Serenity.EntityGrid<PurchaseReturnDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseReturnDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnDialog extends Serenity.EntityDialog<PurchaseReturnRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: PurchaseReturnForm;
    }
}
declare namespace Matrix.Purchasing {
    class PurchaseReturnGrid extends Serenity.EntityGrid<PurchaseReturnRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof PurchaseReturnDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class GrnDialog extends Serenity.EntityDialog<GrnRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: GrnForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Purchasing {
    class GrnGrid extends Serenity.EntityGrid<GrnRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof GrnDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Purchasing {
    class GrnOrderDetailDialog extends Serenity.EntityDialog<GrnOrderDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: GrnOrderDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Purchasing {
    class GrnOrderDetailEditor extends Common.GridEditorBase<GrnOrderDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof GrnOrderDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Purchasing {
    class GrnOrderDetailGrid extends Serenity.EntityGrid<GrnOrderDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof GrnOrderDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Purchasing {
    class GrnOrderDialog extends Serenity.EntityDialog<GrnOrderRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: GrnOrderForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Purchasing {
    class GrnOrderEditor extends Common.GridEditorBase<GrnOrderRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof GrnOrderDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Purchasing {
    class GrnOrderGrid extends Serenity.EntityGrid<GrnOrderRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof GrnOrderDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationDialog extends Serenity.EntityDialog<VendorQuotationRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VendorQuotationForm;
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationGrid extends Serenity.EntityGrid<VendorQuotationRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorQuotationDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationItemAdditionalInfoDialog extends Serenity.EntityDialog<VendorQuotationItemAdditionalInfoRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VendorQuotationItemAdditionalInfoForm;
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationItemAdditionalInfoGrid extends Serenity.EntityGrid<VendorQuotationItemAdditionalInfoRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorQuotationItemAdditionalInfoDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationRemarkDialog extends Serenity.EntityDialog<VendorQuotationRemarkRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VendorQuotationRemarkForm;
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationRemarkGrid extends Serenity.EntityGrid<VendorQuotationRemarkRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorQuotationRemarkDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationScheduleDialog extends Serenity.EntityDialog<VendorQuotationScheduleRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: VendorQuotationScheduleForm;
    }
}
declare namespace Matrix.Purchasing {
    class VendorQuotationScheduleGrid extends Serenity.EntityGrid<VendorQuotationScheduleRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof VendorQuotationScheduleDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Sales {
    class QuotationDetailDialog extends Serenity.EntityDialog<QuotationDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: QuotationDetailForm;
    }
}
declare namespace Matrix.Sales {
    class QuotationDetailEditor extends Common.GridEditorBase<QuotationDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof QuotationDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        protected usePager(): boolean;
    }
}
declare namespace Matrix.Sales {
    class QuotationDetailGrid extends Serenity.EntityGrid<QuotationDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof QuotationDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Sales {
    class QuotationDialog extends Serenity.EntityDialog<QuotationRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: QuotationForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Sales {
    class QuotationGrid extends Serenity.EntityGrid<QuotationRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof QuotationDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Sales {
    class SalesOrderDetailDialog extends Serenity.EntityDialog<SalesOrderDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: SalesOrderDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Sales {
    class SalesOrderDetailEditor extends Common.GridEditorBase<QuotationDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SalesOrderDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Sales {
    class SalesOrderDetailGrid extends Serenity.EntityGrid<SalesOrderDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SalesOrderDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Sales {
    class SalesOrderDialog extends Serenity.EntityDialog<SalesOrderRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: SalesOrderForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Sales {
    class SalesOrderGrid extends Serenity.EntityGrid<SalesOrderRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SalesOrderDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Enterprise {
    class SalesOrderTypeFormatter implements Slick.Formatter {
        format(ctx: Slick.FormatterContext): string;
    }
}
declare namespace Matrix.Sales {
    class SalesReturnDetailDialog extends Serenity.EntityDialog<SalesReturnDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: SalesReturnDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Sales {
    class SalesReturnDetailEditor extends Common.GridEditorBase<SalesReturnDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SalesReturnDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Sales {
    class SalesReturnDetailGrid extends Serenity.EntityGrid<SalesReturnDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SalesReturnDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Sales {
    class SalesReturnDialog extends Serenity.EntityDialog<SalesReturnRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: SalesReturnForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Sales {
    class SalesReturnGrid extends Serenity.EntityGrid<SalesReturnRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof SalesReturnDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Sales {
    class ShipmentDetailDialog extends Serenity.EntityDialog<ShipmentDetailRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ShipmentDetailForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Sales {
    class ShipmentDetailEditor extends Common.GridEditorBase<ShipmentDetailRow> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ShipmentDetailDialog;
        protected getLocalTextPrefix(): string;
        constructor(container: JQuery);
        validateEntity(row: any, id: any): boolean;
        protected getButtons(): Serenity.ToolButton[];
    }
}
declare namespace Matrix.Sales {
    class ShipmentDetailGrid extends Serenity.EntityGrid<ShipmentDetailRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ShipmentDetailDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Sales {
    class ShipmentDialog extends Serenity.EntityDialog<ShipmentRow, any> {
        protected getFormKey(): string;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getNameProperty(): string;
        protected getService(): string;
        protected form: ShipmentForm;
        protected getToolbarButtons(): Serenity.ToolButton[];
        protected updateInterface(): void;
    }
}
declare namespace Matrix.Sales {
    class ShipmentGrid extends Serenity.EntityGrid<ShipmentRow, any> {
        protected getColumnsKey(): string;
        protected getDialogType(): typeof ShipmentDialog;
        protected getIdProperty(): string;
        protected getLocalTextPrefix(): string;
        protected getService(): string;
        constructor(container: JQuery);
        protected getButtons(): Serenity.ToolButton[];
        protected getSlickOptions(): Slick.GridOptions;
        protected createSlickGrid(): Slick.Grid;
    }
}
declare namespace Matrix.Authorization {
    let userDefinition: ScriptUserDefinition;
    function hasPermission(permissionKey: string): boolean;
}
declare namespace Matrix.Common {
    class LanguageSelection extends Serenity.Widget<any> {
        constructor(select: JQuery, currentLanguage: string);
    }
}
declare namespace Matrix.Common {
    class SidebarSearch extends Serenity.Widget<any> {
        private menuUL;
        constructor(input: JQuery, menuUL: JQuery);
        protected updateMatchFlags(text: string): void;
    }
}
declare namespace Matrix.Common {
    class ThemeSelection extends Serenity.Widget<any> {
        constructor(select: JQuery);
        protected getCurrentTheme(): string;
    }
}
declare var jsPDF: any;
declare namespace Matrix.Common {
    interface PdfExportOptions {
        grid: Serenity.DataGrid<any, any>;
        onViewSubmit: () => boolean;
        title?: string;
        hint?: string;
        separator?: boolean;
        reportTitle?: string;
        titleTop?: number;
        titleFontSize?: number;
        fileName?: string;
        pageNumbers?: boolean;
        columnTitles?: {
            [key: string]: string;
        };
        tableOptions?: jsPDF.AutoTableOptions;
        output?: string;
        autoPrint?: boolean;
        printDateTimeHeader?: boolean;
    }
    namespace PdfExportHelper {
        function exportToPdf(options: PdfExportOptions): void;
        function createToolButton(options: PdfExportOptions): Serenity.ToolButton;
    }
}
declare var jsPDF: any;
declare namespace Matrix.Common {
    class ReportDialog extends Serenity.TemplatedDialog<ReportDialogOptions> {
        private report;
        private propertyGrid;
        constructor(options: ReportDialogOptions);
        protected getDialogButtons(): any;
        protected createPropertyGrid(): void;
        protected loadReport(reportKey: string): void;
        protected updateInterface(): void;
        executeReport(target: string, ext: string, download: boolean): void;
        getToolbarButtons(): {
            title: string;
            cssClass: string;
            onClick: () => void;
        }[];
    }
    interface ReportDialogOptions {
        reportKey: string;
    }
}
declare namespace Matrix.Common {
    interface ReportExecuteOptions {
        reportKey: string;
        download?: boolean;
        extension?: 'pdf' | 'htm' | 'html' | 'xlsx' | 'docx';
        getParams?: () => any;
        params?: {
            [key: string]: any;
        };
        target?: string;
    }
    interface ReportButtonOptions extends ReportExecuteOptions {
        title?: string;
        cssClass?: string;
        icon?: string;
    }
    namespace ReportHelper {
        function createToolButton(options: ReportButtonOptions): Serenity.ToolButton;
        function execute(options: ReportExecuteOptions): void;
    }
}
declare var jsPDF: any;
declare namespace Matrix.Common {
    class ReportPage extends Serenity.Widget<any> {
        private reportKey;
        private propertyItems;
        private propertyGrid;
        constructor(element: JQuery);
        protected updateMatchFlags(text: string): void;
        protected categoryClick(e: any): void;
        protected reportLinkClick(e: any): void;
    }
}
declare namespace Enterprise {
    class String {
        static Empty: string;
        static IsNullOrWhiteSpace(value: string): boolean;
        static Join(delimiter: string, ...args: (string | object | Array<any>)[]): string;
        static Format(format: string, ...args: any[]): string;
        private static parsePattern(match, arg);
        private static getDisplayDateFromString(input);
        private static getSortableDateFromString(input);
        private static formatNumber(input, formatTemplate);
        private static join(delimiter, ...args);
    }
    class StringBuilder {
        Values: string[];
        constructor(value?: string);
        ToString(): string;
        Append(value: string): void;
        AppendFormat(format: string, ...args: any[]): void;
        Clear(): void;
    }
}
declare namespace Matrix.Membership {
    class ChangePasswordPanel extends Serenity.PropertyPanel<ChangePasswordRequest, any> {
        protected getFormKey(): string;
        private form;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Membership {
    class ForgotPasswordPanel extends Serenity.PropertyPanel<ForgotPasswordRequest, any> {
        protected getFormKey(): string;
        private form;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Membership {
    class ResetPasswordPanel extends Serenity.PropertyPanel<ResetPasswordRequest, any> {
        protected getFormKey(): string;
        private form;
        constructor(container: JQuery);
    }
}
declare namespace Matrix.Membership {
    class SignUpPanel extends Serenity.PropertyPanel<SignUpRequest, any> {
        protected getFormKey(): string;
        private form;
        constructor(container: JQuery);
    }
}
