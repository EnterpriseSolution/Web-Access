var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var CompanyForm = /** @class */ (function (_super) {
            __extends(CompanyForm, _super);
            function CompanyForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CompanyForm.formKey = 'Administration.CompanyForm';
            return CompanyForm;
        }(Serenity.PrefixedContext));
        Administration.CompanyForm = CompanyForm;
        [['CompanyCode', function () { return Serenity.StringEditor; }],
            ['CompanyName', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['DbServer', function () { return Serenity.StringEditor; }],
            ['DbDatabase', function () { return Serenity.StringEditor; }],
            ['DbUser', function () { return Serenity.StringEditor; }],
            ['DbPassword', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CompanyForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var CompanyRow;
        (function (CompanyRow) {
            CompanyRow.idProperty = 'CompanyCode';
            CompanyRow.nameProperty = 'CompanyName';
            CompanyRow.localTextPrefix = 'Administration.Company';
            CompanyRow.lookupKey = 'Administration.Company';
            function getLookup() {
                return Q.getLookup('Administration.Company');
            }
            CompanyRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = CompanyRow.Fields || (CompanyRow.Fields = {}));
            [
                'Recnum',
                'CompanyCode',
                'CompanyName',
                'Suspended',
                'DbServer',
                'DbDatabase',
                'DbUser',
                'DbPassword',
                'DbDriver',
                'DbReptDriver',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'AcctAnlys1Opt',
                'AcctAnlys2Opt',
                'AcctAnlys3Opt',
                'AcctAnlys4Opt',
                'VochAnlys1Opt',
                'VochAnlys2Opt',
                'VochAnlys3Opt',
                'VochAnlys4Opt',
                'VochAnlys5Opt',
                'VochAnlys6Opt',
                'ItemAnlys1Opt',
                'ItemAnlys2Opt',
                'ItemAnlys3Opt',
                'ItemAnlys4Opt',
                'CustAnlys1Opt',
                'CustAnlys2Opt',
                'CustAnlys3Opt',
                'CustAnlys4Opt',
                'VendAnlys1Opt',
                'VendAnlys2Opt',
                'VendAnlys3Opt',
                'VendAnlys4Opt',
                'SaleAnlys1Opt',
                'SaleAnlys2Opt',
                'SaleAnlys3Opt',
                'SaleAnlys4Opt',
                'SaleAnlys5Opt',
                'SaleAnlys6Opt',
                'PurcAnlys1Opt',
                'PurcAnlys2Opt',
                'PurcAnlys3Opt',
                'PurcAnlys4Opt',
                'PurcAnlys5Opt',
                'PurcAnlys6Opt',
                'MvmtAnlys1Opt',
                'MvmtAnlys2Opt',
                'MvmtAnlys3Opt',
                'MvmtAnlys4Opt',
                'MvmtAnlys5Opt',
                'MvmtAnlys6Opt',
                'ArevisedDate',
                'ArevisedBy',
                'JordAnlys1Opt',
                'JordAnlys2Opt',
                'JordAnlys3Opt',
                'JordAnlys4Opt',
                'JordAnlys5Opt',
                'JordAnlys6Opt',
                'VochAnlys7Opt',
                'VochAnlys8Opt',
                'SaleAnlys7Opt',
                'SaleAnlys8Opt',
                'PurcAnlys7Opt',
                'PurcAnlys8Opt',
                'MvmtAnlys7Opt',
                'MvmtAnlys8Opt',
                'JordAnlys7Opt',
                'JordAnlys8Opt',
                'ArAnlys1Opt',
                'ArAnlys2Opt',
                'ArAnlys3Opt',
                'ArAnlys4Opt',
                'ArAnlys5Opt',
                'ArAnlys6Opt',
                'ArAnlys7Opt',
                'ArAnlys8Opt',
                'ApAnlys1Opt',
                'ApAnlys2Opt',
                'ApAnlys3Opt',
                'ApAnlys4Opt',
                'ApAnlys5Opt',
                'ApAnlys6Opt',
                'ApAnlys7Opt',
                'ApAnlys8Opt',
                'Odbc',
                'MasterCompany',
                'AcctAnlys5Opt',
                'AcctAnlys6Opt',
                'AcctAnlys7Opt',
                'AcctAnlys8Opt',
                'AcctAnlys9Opt',
                'AcctAnlys10Opt',
                'ItemAnlys5Opt',
                'ItemAnlys6Opt',
                'ItemAnlys7Opt',
                'ItemAnlys8Opt',
                'ItemAnlys9Opt',
                'ItemAnlys10Opt',
                'CustAnlys5Opt',
                'CustAnlys6Opt',
                'CustAnlys7Opt',
                'CustAnlys8Opt',
                'CustAnlys9Opt',
                'CustAnlys10Opt',
                'VendAnlys5Opt',
                'VendAnlys6Opt',
                'VendAnlys7Opt',
                'VendAnlys8Opt',
                'VendAnlys9Opt',
                'VendAnlys10Opt',
                'SaleAnlys9Opt',
                'SaleAnlys10Opt',
                'SaleAnlys11Opt',
                'SaleAnlys12Opt',
                'SaleAnlys13Opt',
                'SaleAnlys14Opt',
                'SaleAnlys15Opt',
                'SaleAnlys16Opt',
                'SaleAnlys17Opt',
                'SaleAnlys18Opt',
                'SaleAnlys19Opt',
                'SaleAnlys20Opt',
                'PurcAnlys9Opt',
                'PurcAnlys10Opt',
                'PurcAnlys11Opt',
                'PurcAnlys12Opt',
                'PurcAnlys13Opt',
                'PurcAnlys14Opt',
                'PurcAnlys15Opt',
                'PurcAnlys16Opt',
                'PurcAnlys17Opt',
                'PurcAnlys18Opt',
                'PurcAnlys19Opt',
                'PurcAnlys20Opt',
                'MvmtAnlys9Opt',
                'MvmtAnlys10Opt',
                'MvmtAnlys11Opt',
                'MvmtAnlys12Opt',
                'MvmtAnlys13Opt',
                'MvmtAnlys14Opt',
                'MvmtAnlys15Opt',
                'MvmtAnlys16Opt',
                'MvmtAnlys17Opt',
                'MvmtAnlys18Opt',
                'MvmtAnlys19Opt',
                'MvmtAnlys20Opt',
                'JordAnlys9Opt',
                'JordAnlys10Opt',
                'JordAnlys11Opt',
                'JordAnlys12Opt',
                'JordAnlys13Opt',
                'JordAnlys14Opt',
                'JordAnlys15Opt',
                'JordAnlys16Opt',
                'JordAnlys17Opt',
                'JordAnlys18Opt',
                'JordAnlys19Opt',
                'JordAnlys20Opt',
                'ArAnlys9Opt',
                'ArAnlys10Opt',
                'ArAnlys11Opt',
                'ArAnlys12Opt',
                'ArAnlys13Opt',
                'ArAnlys14Opt',
                'ArAnlys15Opt',
                'ArAnlys16Opt',
                'ArAnlys17Opt',
                'ArAnlys18Opt',
                'ArAnlys19Opt',
                'ArAnlys20Opt',
                'ApAnlys9Opt',
                'ApAnlys10Opt',
                'ApAnlys11Opt',
                'ApAnlys12Opt',
                'ApAnlys13Opt',
                'ApAnlys14Opt',
                'ApAnlys15Opt',
                'ApAnlys16Opt',
                'ApAnlys17Opt',
                'ApAnlys18Opt',
                'ApAnlys19Opt',
                'ApAnlys20Opt',
                'VochAnlys9Opt',
                'VochAnlys10Opt',
                'VochAnlys11Opt',
                'VochAnlys12Opt',
                'VochAnlys13Opt',
                'VochAnlys14Opt',
                'VochAnlys15Opt',
                'VochAnlys16Opt',
                'VochAnlys17Opt',
                'VochAnlys18Opt',
                'VochAnlys19Opt',
                'VochAnlys20Opt',
                'OlapServer',
                'OlapDatabase',
                'ExpiryDate',
                'MaxUsers'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CompanyRow = Administration.CompanyRow || (Administration.CompanyRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var CompanyService;
        (function (CompanyService) {
            CompanyService.baseUrl = 'Administration/Company';
            var Methods;
            (function (Methods) {
            })(Methods = CompanyService.Methods || (CompanyService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CompanyService[x] = function (r, s, o) {
                    return Q.serviceRequest(CompanyService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CompanyService.baseUrl + '/' + x;
            });
        })(CompanyService = Administration.CompanyService || (Administration.CompanyService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterColumnDetailForm = /** @class */ (function (_super) {
            __extends(LookupDialogFilterColumnDetailForm, _super);
            function LookupDialogFilterColumnDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LookupDialogFilterColumnDetailForm.formKey = 'Administration.LookupDialogFilterColumnDetail';
            return LookupDialogFilterColumnDetailForm;
        }(Serenity.PrefixedContext));
        Administration.LookupDialogFilterColumnDetailForm = LookupDialogFilterColumnDetailForm;
        [['FilterName', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.IntegerEditor; }],
            ['FieldName', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(LookupDialogFilterColumnDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterColumnDetailRow;
        (function (LookupDialogFilterColumnDetailRow) {
            LookupDialogFilterColumnDetailRow.idProperty = 'LookupName';
            LookupDialogFilterColumnDetailRow.nameProperty = 'LookupName';
            LookupDialogFilterColumnDetailRow.localTextPrefix = 'Administration.LookupDialogFilterColumnDetail';
            var Fields;
            (function (Fields) {
            })(Fields = LookupDialogFilterColumnDetailRow.Fields || (LookupDialogFilterColumnDetailRow.Fields = {}));
            [
                'LookupName',
                'FilterName',
                'EntryNo',
                'FieldName'
            ].forEach(function (x) { return Fields[x] = x; });
        })(LookupDialogFilterColumnDetailRow = Administration.LookupDialogFilterColumnDetailRow || (Administration.LookupDialogFilterColumnDetailRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterColumnDetailService;
        (function (LookupDialogFilterColumnDetailService) {
            LookupDialogFilterColumnDetailService.baseUrl = 'Administration/LookupDialogFilterColumnDetail';
            var Methods;
            (function (Methods) {
            })(Methods = LookupDialogFilterColumnDetailService.Methods || (LookupDialogFilterColumnDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LookupDialogFilterColumnDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(LookupDialogFilterColumnDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = LookupDialogFilterColumnDetailService.baseUrl + '/' + x;
            });
        })(LookupDialogFilterColumnDetailService = Administration.LookupDialogFilterColumnDetailService || (Administration.LookupDialogFilterColumnDetailService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterDetailForm = /** @class */ (function (_super) {
            __extends(LookupDialogFilterDetailForm, _super);
            function LookupDialogFilterDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LookupDialogFilterDetailForm.formKey = 'Administration.LookupDialogFilterDetail';
            return LookupDialogFilterDetailForm;
        }(Serenity.PrefixedContext));
        Administration.LookupDialogFilterDetailForm = LookupDialogFilterDetailForm;
        [['FilterName', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.IntegerEditor; }],
            ['EntityName', function () { return Serenity.StringEditor; }],
            ['FieldName', function () { return Serenity.StringEditor; }],
            ['FieldValue', function () { return Serenity.StringEditor; }],
            ['Operator', function () { return Serenity.IntegerEditor; }]
        ].forEach(function (x) { return Object.defineProperty(LookupDialogFilterDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterDetailRow;
        (function (LookupDialogFilterDetailRow) {
            LookupDialogFilterDetailRow.idProperty = 'LookupName';
            LookupDialogFilterDetailRow.nameProperty = 'LookupName';
            LookupDialogFilterDetailRow.localTextPrefix = 'Administration.LookupDialogFilterDetail';
            var Fields;
            (function (Fields) {
            })(Fields = LookupDialogFilterDetailRow.Fields || (LookupDialogFilterDetailRow.Fields = {}));
            [
                'LookupName',
                'FilterName',
                'EntryNo',
                'EntityName',
                'FieldName',
                'FieldValue',
                'Operator'
            ].forEach(function (x) { return Fields[x] = x; });
        })(LookupDialogFilterDetailRow = Administration.LookupDialogFilterDetailRow || (Administration.LookupDialogFilterDetailRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterDetailService;
        (function (LookupDialogFilterDetailService) {
            LookupDialogFilterDetailService.baseUrl = 'Administration/LookupDialogFilterDetail';
            var Methods;
            (function (Methods) {
            })(Methods = LookupDialogFilterDetailService.Methods || (LookupDialogFilterDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LookupDialogFilterDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(LookupDialogFilterDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = LookupDialogFilterDetailService.baseUrl + '/' + x;
            });
        })(LookupDialogFilterDetailService = Administration.LookupDialogFilterDetailService || (Administration.LookupDialogFilterDetailService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterForm = /** @class */ (function (_super) {
            __extends(LookupDialogFilterForm, _super);
            function LookupDialogFilterForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LookupDialogFilterForm.formKey = 'Administration.LookupDialogFilter';
            return LookupDialogFilterForm;
        }(Serenity.PrefixedContext));
        Administration.LookupDialogFilterForm = LookupDialogFilterForm;
        [['FilterName', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Filter', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(LookupDialogFilterForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterRow;
        (function (LookupDialogFilterRow) {
            LookupDialogFilterRow.idProperty = 'LookupName';
            LookupDialogFilterRow.nameProperty = 'LookupName';
            LookupDialogFilterRow.localTextPrefix = 'Administration.LookupDialogFilter';
            var Fields;
            (function (Fields) {
            })(Fields = LookupDialogFilterRow.Fields || (LookupDialogFilterRow.Fields = {}));
            [
                'LookupName',
                'FilterName',
                'Description',
                'Filter',
                'LookupNameDescription',
                'LookupNameQueryId',
                'LookupNameKeyField1',
                'LookupNameKeyField2',
                'LookupNameKeyField3',
                'LookupNameSuspended',
                'LookupNameCreatedBy',
                'LookupNameCreatedDate',
                'LookupNameRevisedBy',
                'LookupNameRevisedDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(LookupDialogFilterRow = Administration.LookupDialogFilterRow || (Administration.LookupDialogFilterRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterService;
        (function (LookupDialogFilterService) {
            LookupDialogFilterService.baseUrl = 'Administration/LookupDialogFilter';
            var Methods;
            (function (Methods) {
            })(Methods = LookupDialogFilterService.Methods || (LookupDialogFilterService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LookupDialogFilterService[x] = function (r, s, o) {
                    return Q.serviceRequest(LookupDialogFilterService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = LookupDialogFilterService.baseUrl + '/' + x;
            });
        })(LookupDialogFilterService = Administration.LookupDialogFilterService || (Administration.LookupDialogFilterService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogForm = /** @class */ (function (_super) {
            __extends(LookupDialogForm, _super);
            function LookupDialogForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LookupDialogForm.formKey = 'Administration.LookupDialog';
            return LookupDialogForm;
        }(Serenity.PrefixedContext));
        Administration.LookupDialogForm = LookupDialogForm;
        [['Description', function () { return Serenity.StringEditor; }],
            ['QueryId', function () { return Serenity.StringEditor; }],
            ['KeyField1', function () { return Serenity.StringEditor; }],
            ['KeyField2', function () { return Serenity.StringEditor; }],
            ['KeyField3', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }]
        ].forEach(function (x) { return Object.defineProperty(LookupDialogForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogRow;
        (function (LookupDialogRow) {
            LookupDialogRow.idProperty = 'LookupName';
            LookupDialogRow.nameProperty = 'LookupName';
            LookupDialogRow.localTextPrefix = 'Administration.LookupDialog';
            var Fields;
            (function (Fields) {
            })(Fields = LookupDialogRow.Fields || (LookupDialogRow.Fields = {}));
            [
                'LookupName',
                'Description',
                'QueryId',
                'KeyField1',
                'KeyField2',
                'KeyField3',
                'Suspended',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(LookupDialogRow = Administration.LookupDialogRow || (Administration.LookupDialogRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogService;
        (function (LookupDialogService) {
            LookupDialogService.baseUrl = 'Administration/LookupDialog';
            var Methods;
            (function (Methods) {
            })(Methods = LookupDialogService.Methods || (LookupDialogService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LookupDialogService[x] = function (r, s, o) {
                    return Q.serviceRequest(LookupDialogService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = LookupDialogService.baseUrl + '/' + x;
            });
        })(LookupDialogService = Administration.LookupDialogService || (Administration.LookupDialogService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var TranslationForm = /** @class */ (function (_super) {
            __extends(TranslationForm, _super);
            function TranslationForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TranslationForm.formKey = 'Administration.Translation';
            return TranslationForm;
        }(Serenity.PrefixedContext));
        Administration.TranslationForm = TranslationForm;
        [['LanguageCode', function () { return Serenity.EnumEditor; }],
            ['KeyText', function () { return Serenity.StringEditor; }],
            ['DisplayText', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(TranslationForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var TranslationRow;
        (function (TranslationRow) {
            TranslationRow.nameProperty = 'DisplayText';
            TranslationRow.localTextPrefix = 'Administration.Translation';
            var Fields;
            (function (Fields) {
            })(Fields = TranslationRow.Fields || (TranslationRow.Fields = {}));
            [
                'LanguageCode',
                'KeyText',
                'DisplayText'
            ].forEach(function (x) { return Fields[x] = x; });
        })(TranslationRow = Administration.TranslationRow || (Administration.TranslationRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var TranslationService;
        (function (TranslationService) {
            TranslationService.baseUrl = 'Administration/Translation';
            var Methods;
            (function (Methods) {
            })(Methods = TranslationService.Methods || (TranslationService.Methods = {}));
            [
                'Retrieve',
                'List',
                'Lookup'
            ].forEach(function (x) {
                TranslationService[x] = function (r, s, o) {
                    return Q.serviceRequest(TranslationService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = TranslationService.baseUrl + '/' + x;
            });
        })(TranslationService = Administration.TranslationService || (Administration.TranslationService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserDefinedQueryForm = /** @class */ (function (_super) {
            __extends(UserDefinedQueryForm, _super);
            function UserDefinedQueryForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            UserDefinedQueryForm.formKey = 'Administration.UserDefinedQuery';
            return UserDefinedQueryForm;
        }(Serenity.PrefixedContext));
        Administration.UserDefinedQueryForm = UserDefinedQueryForm;
        [['Description', function () { return Serenity.StringEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['AllowDuplicates', function () { return Serenity.BooleanEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['DataSource', function () { return Serenity.IntegerEditor; }],
            ['UseAsEnquiry', function () { return Serenity.BooleanEditor; }],
            ['UseAsLookup', function () { return Serenity.BooleanEditor; }],
            ['UseAsAlert', function () { return Serenity.BooleanEditor; }],
            ['UseAsComparation', function () { return Serenity.BooleanEditor; }],
            ['FunctionCode', function () { return Serenity.StringEditor; }],
            ['PrimaryKeyFields', function () { return Serenity.StringEditor; }],
            ['CustomerNoEntityName', function () { return Serenity.StringEditor; }],
            ['CustomerNoFieldName', function () { return Serenity.StringEditor; }],
            ['VendorNoEntityName', function () { return Serenity.StringEditor; }],
            ['VendorNoFieldName', function () { return Serenity.StringEditor; }],
            ['Filter', function () { return Serenity.StringEditor; }],
            ['Sql', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(UserDefinedQueryForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserDefinedQueryRow;
        (function (UserDefinedQueryRow) {
            UserDefinedQueryRow.idProperty = 'QueryId';
            UserDefinedQueryRow.nameProperty = 'Description';
            UserDefinedQueryRow.localTextPrefix = 'Administration.UserDefinedQuery';
            var Fields;
            (function (Fields) {
            })(Fields = UserDefinedQueryRow.Fields || (UserDefinedQueryRow.Fields = {}));
            [
                'QueryId',
                'Description',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'AllowDuplicates',
                'Suspended',
                'DataSource',
                'UseAsEnquiry',
                'UseAsLookup',
                'UseAsAlert',
                'UseAsComparation',
                'FunctionCode',
                'PrimaryKeyFields',
                'CustomerNoEntityName',
                'CustomerNoFieldName',
                'VendorNoEntityName',
                'VendorNoFieldName',
                'Filter',
                'Sql'
            ].forEach(function (x) { return Fields[x] = x; });
        })(UserDefinedQueryRow = Administration.UserDefinedQueryRow || (Administration.UserDefinedQueryRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserDefinedQueryService;
        (function (UserDefinedQueryService) {
            UserDefinedQueryService.baseUrl = 'Administration/UserDefinedQuery';
            var Methods;
            (function (Methods) {
            })(Methods = UserDefinedQueryService.Methods || (UserDefinedQueryService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                UserDefinedQueryService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserDefinedQueryService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = UserDefinedQueryService.baseUrl + '/' + x;
            });
        })(UserDefinedQueryService = Administration.UserDefinedQueryService || (Administration.UserDefinedQueryService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserForm = /** @class */ (function (_super) {
            __extends(UserForm, _super);
            function UserForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            UserForm.formKey = 'Administration.User';
            return UserForm;
        }(Serenity.PrefixedContext));
        Administration.UserForm = UserForm;
        [['UserId', function () { return Serenity.StringEditor; }],
            ['Username', function () { return Serenity.StringEditor; }],
            ['Email', function () { return Serenity.EmailEditor; }],
            ['Password', function () { return Serenity.PasswordEditor; }]
        ].forEach(function (x) { return Object.defineProperty(UserForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserRow;
        (function (UserRow) {
            UserRow.idProperty = 'UserId';
            UserRow.nameProperty = 'Username';
            UserRow.localTextPrefix = 'Administration.User';
            UserRow.lookupKey = 'Administration.User';
            function getLookup() {
                return Q.getLookup('Administration.User');
            }
            UserRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = UserRow.Fields || (UserRow.Fields = {}));
            [
                'UserId',
                'Username',
                'UserGroup',
                'Email',
                'Suspended',
                'Password'
            ].forEach(function (x) { return Fields[x] = x; });
        })(UserRow = Administration.UserRow || (Administration.UserRow = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserService;
        (function (UserService) {
            UserService.baseUrl = 'Administration/User';
            var Methods;
            (function (Methods) {
            })(Methods = UserService.Methods || (UserService.Methods = {}));
            [
                'Delete',
                'Undelete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                UserService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = UserService.baseUrl + '/' + x;
            });
        })(UserService = Administration.UserService || (Administration.UserService = {}));
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var AllocationMethod;
    (function (AllocationMethod) {
        AllocationMethod[AllocationMethod["ActualCost"] = 65] = "ActualCost";
        AllocationMethod[AllocationMethod["FifoAllocation"] = 70] = "FifoAllocation";
        AllocationMethod[AllocationMethod["LifoAllocation"] = 76] = "LifoAllocation";
        AllocationMethod[AllocationMethod["NoAllocation"] = 78] = "NoAllocation";
    })(AllocationMethod = Matrix.AllocationMethod || (Matrix.AllocationMethod = {}));
    var AllocationMethodOption = /** @class */ (function () {
        function AllocationMethodOption() {
            this.Mapping = new Matrix.KeyedCollection();
            this.Mapping.Add("A", "Actual Cost"); //65,
            this.Mapping.Add("F", "First-In-First-Out"); //70,
            this.Mapping.Add("L", "Last-In-First-Out"); //76,
            this.Mapping.Add("N", "No Allocation"); //78
        }
        return AllocationMethodOption;
    }());
    Matrix.AllocationMethodOption = AllocationMethodOption;
    Serenity.Decorators.registerEnum(AllocationMethod, 'Enums.AllocationMethod');
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanyParameterForm = /** @class */ (function (_super) {
            __extends(CompanyParameterForm, _super);
            function CompanyParameterForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CompanyParameterForm.formKey = 'Basic.CompanyParameter';
            return CompanyParameterForm;
        }(Serenity.PrefixedContext));
        Basic.CompanyParameterForm = CompanyParameterForm;
        [['CompanyName', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['PostCode', function () { return Serenity.StringEditor; }],
            ['TelNo', function () { return Serenity.StringEditor; }],
            ['FaxNo', function () { return Serenity.StringEditor; }],
            ['Email', function () { return Serenity.StringEditor; }],
            ['TaxAcctNo', function () { return Serenity.StringEditor; }],
            ['BusRegNo', function () { return Serenity.StringEditor; }],
            ['AltName', function () { return Serenity.StringEditor; }],
            ['AltAddress', function () { return Serenity.StringEditor; }],
            ['AltAddress2', function () { return Serenity.StringEditor; }],
            ['AltAddress3', function () { return Serenity.StringEditor; }],
            ['AltAddress4', function () { return Serenity.StringEditor; }],
            ['VerifySettings', function () { return Serenity.BooleanEditor; }],
            ['BranchNo', function () { return Serenity.StringEditor; }],
            ['NoOfPeriods', function () { return Serenity.DecimalEditor; }],
            ['CurrentPeriod', function () { return Serenity.StringEditor; }],
            ['OpenPrdFrom', function () { return Serenity.StringEditor; }],
            ['OpenPrdTo', function () { return Serenity.StringEditor; }],
            ['BaseCurrency', function () { return Serenity.StringEditor; }],
            ['AllocMethod', function () { return Serenity.StringEditor; }],
            ['ItmNoLen', function () { return Serenity.DecimalEditor; }],
            ['ItmNoGridLen', function () { return Serenity.DecimalEditor; }],
            ['BomNoGridLen', function () { return Serenity.DecimalEditor; }],
            ['AllowEntries', function () { return Serenity.StringEditor; }],
            ['LineNoEntry', function () { return Serenity.StringEditor; }],
            ['WithInspection', function () { return Serenity.StringEditor; }],
            ['WithDept', function () { return Serenity.StringEditor; }],
            ['WithCostCtr', function () { return Serenity.StringEditor; }],
            ['WithAccpac', function () { return Serenity.StringEditor; }],
            ['AccpacIgrp', function () { return Serenity.StringEditor; }],
            ['WithBinCtrl', function () { return Serenity.StringEditor; }],
            ['WithLot', function () { return Serenity.StringEditor; }],
            ['WithSqlAttm', function () { return Serenity.StringEditor; }],
            ['AcctRetEarn', function () { return Serenity.StringEditor; }],
            ['AcctCurEarn', function () { return Serenity.StringEditor; }],
            ['AcctEndBs', function () { return Serenity.StringEditor; }],
            ['LocReceiving', function () { return Serenity.StringEditor; }],
            ['LocShipment', function () { return Serenity.StringEditor; }],
            ['LocPos', function () { return Serenity.StringEditor; }],
            ['LocMaterial', function () { return Serenity.StringEditor; }],
            ['LocProduce', function () { return Serenity.StringEditor; }],
            ['IcRevaluation', function () { return Serenity.StringEditor; }],
            ['FgStdCosting', function () { return Serenity.StringEditor; }],
            ['CostingMethod', function () { return Serenity.StringEditor; }],
            ['AllowLotOpt', function () { return Serenity.StringEditor; }],
            ['PmntFundCode', function () { return Serenity.StringEditor; }],
            ['RcptFundCode', function () { return Serenity.StringEditor; }],
            ['SalesPayTerms', function () { return Serenity.StringEditor; }],
            ['PurchPayTerms', function () { return Serenity.StringEditor; }],
            ['ItemGroup', function () { return Serenity.StringEditor; }],
            ['CustomerGroup', function () { return Serenity.StringEditor; }],
            ['VendorGroup', function () { return Serenity.StringEditor; }],
            ['SlsoMultiship', function () { return Serenity.StringEditor; }],
            ['SlsoResv', function () { return Serenity.StringEditor; }],
            ['SlsoAssortment', function () { return Serenity.StringEditor; }],
            ['SlsoDeposits', function () { return Serenity.StringEditor; }],
            ['SlsoMeasures', function () { return Serenity.StringEditor; }],
            ['SlsoAutoPo', function () { return Serenity.StringEditor; }],
            ['SlsoAutoJob', function () { return Serenity.StringEditor; }],
            ['SlsoExtInst', function () { return Serenity.StringEditor; }],
            ['SlsoExtDesc', function () { return Serenity.StringEditor; }],
            ['SlsoReqSman', function () { return Serenity.StringEditor; }],
            ['SlsoText1', function () { return Serenity.StringEditor; }],
            ['SlsoText2', function () { return Serenity.StringEditor; }],
            ['SlsoText3', function () { return Serenity.StringEditor; }],
            ['SlsoText4', function () { return Serenity.StringEditor; }],
            ['SlsoDueLead', function () { return Serenity.DecimalEditor; }],
            ['SlsoSchLead', function () { return Serenity.DecimalEditor; }],
            ['SlsoQuoteDays', function () { return Serenity.DecimalEditor; }],
            ['SlshCutDays', function () { return Serenity.DecimalEditor; }],
            ['SlsoAddrCode', function () { return Serenity.StringEditor; }],
            ['SlsoAddrType', function () { return Serenity.StringEditor; }],
            ['SlsoShipVia', function () { return Serenity.StringEditor; }],
            ['SlsoShipTerms', function () { return Serenity.StringEditor; }],
            ['PupoMultiship', function () { return Serenity.StringEditor; }],
            ['PupoDeposits', function () { return Serenity.StringEditor; }],
            ['PupoMeasures', function () { return Serenity.StringEditor; }],
            ['PupoReqBuyer', function () { return Serenity.StringEditor; }],
            ['PupoLineDisc', function () { return Serenity.StringEditor; }],
            ['PupoReorder', function () { return Serenity.StringEditor; }],
            ['PupoText1', function () { return Serenity.StringEditor; }],
            ['PupoText2', function () { return Serenity.StringEditor; }],
            ['PupoText3', function () { return Serenity.StringEditor; }],
            ['PupoText4', function () { return Serenity.StringEditor; }],
            ['PupoCutDays', function () { return Serenity.DecimalEditor; }],
            ['PupoBuyer', function () { return Serenity.StringEditor; }],
            ['PupoShipVia', function () { return Serenity.StringEditor; }],
            ['PupoShipTerms', function () { return Serenity.StringEditor; }],
            ['ProdEcnReq', function () { return Serenity.StringEditor; }],
            ['ProdByprod', function () { return Serenity.StringEditor; }],
            ['ProdPictDesc1', function () { return Serenity.StringEditor; }],
            ['ProdPictDesc2', function () { return Serenity.StringEditor; }],
            ['ProdPictDesc3', function () { return Serenity.StringEditor; }],
            ['ProdPictDesc4', function () { return Serenity.StringEditor; }],
            ['ProdWeightUom', function () { return Serenity.StringEditor; }],
            ['ProdDimenUom', function () { return Serenity.StringEditor; }],
            ['ProdScrapRate', function () { return Serenity.DecimalEditor; }],
            ['ProdStdLsize', function () { return Serenity.DecimalEditor; }],
            ['ProdMinLsize', function () { return Serenity.DecimalEditor; }],
            ['ProdMaxLsize', function () { return Serenity.DecimalEditor; }],
            ['ProdStdOutput', function () { return Serenity.DecimalEditor; }],
            ['ShopWksCover', function () { return Serenity.DecimalEditor; }],
            ['MrpHorzDate', function () { return Serenity.DateEditor; }],
            ['ShopPlanner', function () { return Serenity.StringEditor; }],
            ['ShopJobCat', function () { return Serenity.StringEditor; }],
            ['PrpmText1', function () { return Serenity.StringEditor; }],
            ['PrpmText2', function () { return Serenity.StringEditor; }],
            ['PrpmText3', function () { return Serenity.StringEditor; }],
            ['PrpmText4', function () { return Serenity.StringEditor; }],
            ['MrpCount', function () { return Serenity.DecimalEditor; }],
            ['MrpRefNo', function () { return Serenity.StringEditor; }],
            ['MrpRunDate', function () { return Serenity.DateEditor; }],
            ['IcReceipts', function () { return Serenity.StringEditor; }],
            ['IcIssuance', function () { return Serenity.StringEditor; }],
            ['IcTransfer', function () { return Serenity.StringEditor; }],
            ['IcAdjustment', function () { return Serenity.StringEditor; }],
            ['MvtSlShipment', function () { return Serenity.StringEditor; }],
            ['MvtSlReturn', function () { return Serenity.StringEditor; }],
            ['MvtPuReceipt', function () { return Serenity.StringEditor; }],
            ['MvtPuInspect', function () { return Serenity.StringEditor; }],
            ['MvtPuReturn', function () { return Serenity.StringEditor; }],
            ['VochArInvo', function () { return Serenity.StringEditor; }],
            ['VochArMemo', function () { return Serenity.StringEditor; }],
            ['VochArAdj', function () { return Serenity.StringEditor; }],
            ['VochArPay', function () { return Serenity.StringEditor; }],
            ['GlHdrTxt', function () { return Serenity.StringEditor; }],
            ['GlRefEntry', function () { return Serenity.StringEditor; }],
            ['GlDtlTxt', function () { return Serenity.StringEditor; }],
            ['GlLrefEntry', function () { return Serenity.StringEditor; }],
            ['GlRefLabel', function () { return Serenity.StringEditor; }],
            ['GlLrefLabel', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CompanyParameterForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanyParameterRow;
        (function (CompanyParameterRow) {
            CompanyParameterRow.idProperty = 'Recnum';
            CompanyParameterRow.nameProperty = 'CompanyName';
            CompanyParameterRow.localTextPrefix = 'BasicInformation.CompanyParameter';
            var Fields;
            (function (Fields) {
            })(Fields = CompanyParameterRow.Fields || (CompanyParameterRow.Fields = {}));
            [
                'Recnum',
                'CompanyName',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'PostCode',
                'TelNo',
                'FaxNo',
                'Email',
                'TaxAcctNo',
                'BusRegNo',
                'DrevisedDate',
                'DrevisedBy',
                'BranchNo',
                'BaseCurrency',
                'NoOfPeriods',
                'CurrentPeriod',
                'OpenPrdFrom',
                'OpenPrdTo',
                'AllowEntries',
                'AcctRetEarn',
                'AcctCurEarn',
                'AcctEndBs',
                'LocReceiving',
                'LocShipment',
                'LocPos',
                'LocMaterial',
                'LocProduce',
                'IcRevaluation',
                'FgStdCosting',
                'AllocMethod',
                'CostingMethod',
                'AllowLotOpt',
                'PmntFundCode',
                'RcptFundCode',
                'SalesPayTerms',
                'PurchPayTerms',
                'ItemGroup',
                'CustomerGroup',
                'VendorGroup',
                'SlCgtaxCode',
                'SlCltaxCode',
                'SlVgtaxCode',
                'SlVltaxCode',
                'SlItaxCode',
                'PuCgtaxCode',
                'PuCltaxCode',
                'PuVgtaxCode',
                'PuVltaxCode',
                'PuItaxCode',
                'WithTaxation',
                'ProcSalesGtax',
                'ProcSalesLtax',
                'ProcPurchGtax',
                'ProcPurchLtax',
                'TrevisedDate',
                'TrevisedBy',
                'RevisedDate',
                'RevisedBy',
                'AltName',
                'AltAddress',
                'AltAddress2',
                'AltAddress3',
                'AltAddress4',
                'MainBranPath',
                'MainBranCount',
                'OnlineBranUpd',
                'WithCostCtr',
                'WithDept',
                'WithBinCtrl',
                'WithInspection',
                'AcctItmAsset',
                'AcctItmWip',
                'AcctItmConsum',
                'AcctItmScrap',
                'AcctItmPvar',
                'AcctItmReval',
                'AcctItmVaria',
                'AcctItmSales',
                'AcctItmSlret',
                'AcctItmSldisc',
                'AcctItmCogs',
                'AcctItmPurch',
                'AcctItmPuret',
                'AcctItmPudisc',
                'AcctItmPutax',
                'AcctMvtIssue',
                'AcctMvtRcpt',
                'AcctMvtAdj',
                'AcctSlsMisc',
                'AcctSlsMscret',
                'AcctSlsTrdisc',
                'AcctSlsLntax',
                'AcctSlsGrtax',
                'AcctPurMisc',
                'AcctPurMscret',
                'AcctPurTrdisc',
                'AcctPurGrtax',
                'AcctArCash',
                'AcctArCust',
                'AcctArDisc',
                'AcctArAdj',
                'AcctArForex',
                'AcctApCash',
                'AcctApVend',
                'AcctApDisc',
                'AcctApAdj',
                'AcctApForex',
                'AcctApVaria',
                'AcctMachine',
                'AcctEnergy',
                'AcctWater',
                'AcctRental',
                'AcctLabor',
                'AcctInlab',
                'AcctInmat',
                'AcctMisc',
                'AcctSuspAr',
                'AcctSuspAp',
                'AcctSuspIc',
                'AcctSuspPr',
                'AcctSuspFa',
                'AcctSuspSub',
                'AcctSuspIncom',
                'AcctSuspExpen',
                'ArevisedDate',
                'ArevisedBy',
                'BrevisedDate',
                'BrevisedBy',
                'DeptProd',
                'DeptSales',
                'DeptPurch',
                'NoOfShift',
                'Shift1Hrs',
                'Shift2Hrs',
                'Shift3Hrs',
                'Shift1Start',
                'Shift2Start',
                'Shift3Start',
                'FirstWeekDay',
                'CanReceive1',
                'CanReceive2',
                'CanReceive3',
                'CanReceive4',
                'CanReceive5',
                'CanReceive6',
                'CanReceive7',
                'CanShip1',
                'CanShip2',
                'CanShip3',
                'CanShip4',
                'CanShip5',
                'CanShip6',
                'CanShip7',
                'IsHoliday1',
                'IsHoliday2',
                'IsHoliday3',
                'IsHoliday4',
                'IsHoliday5',
                'IsHoliday6',
                'IsHoliday7',
                'HalfDay1',
                'HalfDay2',
                'HalfDay3',
                'HalfDay4',
                'HalfDay5',
                'HalfDay6',
                'HalfDay7',
                'CrevisedDate',
                'CrevisedBy',
                'LogNoShip',
                'LogNoDlry',
                'LogNoMvmt',
                'LogNoArOpen',
                'LogNoApOpen',
                'LogNoLedg',
                'InvtCostAvail',
                'InvtCostLdg',
                'OnSalesCount',
                'OnPurchCount',
                'OnJobCount',
                'ArInvoAmtBal',
                'ArOpenAmtBal',
                'ArNetAmtBal',
                'ApInvoAmtBal',
                'ApOpenAmtBal',
                'ApNetAmtBal',
                'VerifySettings',
                'LogoBmp',
                'XconnectOn',
                'UloadPath',
                'UloadBatchNo',
                'DloadPath',
                'DloadBatchNo',
                'DloadRecnum',
                'DloadCommand',
                'UloadCommand',
                'CompanyCode',
                'WithBtob',
                'WithIms',
                'LineNoEntry',
                'AcctItmSubcon',
                'WithAccpac',
                'AccpacIgrp',
                'SaleAnlysInt',
                'PurcAnlysInt',
                'ProdAnlysInt',
                'MvmtAnlysInt',
                'AnlysCat1',
                'AnlysCat2',
                'AnlysCat3',
                'AnlysCat4',
                'AnlysInt',
                'ItmNoGridLen',
                'BomNoGridLen',
                'EnableLot',
                'EnableSerial',
                'LotNoLength',
                'SerialNoLength',
                'NextLotNo',
                'NextSerialNo',
                'MaxLotSize',
                'LotNoPrefix',
                'SerialNoPrefix',
                'WithLot',
                'ItmNoLen',
                'RecordLock',
                'UserLog',
                'ScalePrice',
                'NegStock',
                'WithSqlAttm',
                'WithResetLot',
                'WithResetSerial',
                'PrevResetLotDate',
                'PrevResetSerialDate',
                'AnlysCat5',
                'AnlysCat6',
                'AnlysCat7',
                'AnlysCat8',
                'AnlysCat9',
                'AnlysCat10',
                'CostSheetTabDescription1',
                'CostSheetTabDescription2',
                'CostSheetTabDescription3',
                'CostSheetTabDescription4',
                'CostSheetTabDescription5',
                'CostSheetTabDescription6',
                'CostSheetTabDescription7',
                'AcctArTemp',
                'AcctApTemp',
                'PlanOrdDefLastPoPrice',
                'PortalUrl',
                'KayueNextPoNo',
                'LotNoUdfLabel01',
                'LotNoUdfLabel02',
                'LotNoUdfLabel03',
                'LotNoUdfLabel04',
                'LotNoUdfLabel05',
                'BscPoOverBudgetPassword',
                'AcctArDeposit',
                'AcctApDeposit',
                'WithServerAttm',
                'FtpHost',
                'FtpUserId',
                'FtpPassword',
                'FtpNamePattern',
                'ImplementUomUppercase',
                'IntegratedEmailWithMsssageBox',
                'Cfg'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CompanyParameterRow = Basic.CompanyParameterRow || (Basic.CompanyParameterRow = {}));
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanyParameterService;
        (function (CompanyParameterService) {
            CompanyParameterService.baseUrl = 'BasicInformation/CompanyParameter';
            var Methods;
            (function (Methods) {
            })(Methods = CompanyParameterService.Methods || (CompanyParameterService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CompanyParameterService[x] = function (r, s, o) {
                    return Q.serviceRequest(CompanyParameterService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CompanyParameterService.baseUrl + '/' + x;
            });
        })(CompanyParameterService = Basic.CompanyParameterService || (Basic.CompanyParameterService = {}));
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanySettingForm = /** @class */ (function (_super) {
            __extends(CompanySettingForm, _super);
            function CompanySettingForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CompanySettingForm.formKey = 'BasicInformation.CompanySetting';
            return CompanySettingForm;
        }(Serenity.PrefixedContext));
        Basic.CompanySettingForm = CompanySettingForm;
        [['SlInit', function () { return Serenity.StringEditor; }],
            ['SlsoMultiship', function () { return Serenity.StringEditor; }],
            ['SlsoResv', function () { return Serenity.StringEditor; }],
            ['SlsoAssortment', function () { return Serenity.StringEditor; }],
            ['SlsoDeposits', function () { return Serenity.StringEditor; }],
            ['SlsoMeasures', function () { return Serenity.StringEditor; }],
            ['SlsoPtax', function () { return Serenity.StringEditor; }],
            ['SlsoAtax', function () { return Serenity.StringEditor; }],
            ['SlsoGtax', function () { return Serenity.StringEditor; }],
            ['SlsoLineDisc', function () { return Serenity.StringEditor; }],
            ['SlsoAutoPo', function () { return Serenity.StringEditor; }],
            ['SlsoAutoJob', function () { return Serenity.StringEditor; }],
            ['SlsoExtInst', function () { return Serenity.StringEditor; }],
            ['SlsoExtDesc', function () { return Serenity.StringEditor; }],
            ['SlsoFixedUom', function () { return Serenity.StringEditor; }],
            ['SlsoReqSman', function () { return Serenity.StringEditor; }],
            ['SlsoSman', function () { return Serenity.StringEditor; }],
            ['SlsoText1', function () { return Serenity.StringEditor; }],
            ['SlsoText2', function () { return Serenity.StringEditor; }],
            ['SlsoText3', function () { return Serenity.StringEditor; }],
            ['SlsoText4', function () { return Serenity.StringEditor; }],
            ['SlsoDueLead', function () { return Serenity.DecimalEditor; }],
            ['SlsoSchLead', function () { return Serenity.DecimalEditor; }],
            ['SlsoAddrCode', function () { return Serenity.StringEditor; }],
            ['SlsoAddrType', function () { return Serenity.StringEditor; }],
            ['SlsoQuoteDays', function () { return Serenity.DecimalEditor; }],
            ['SlshCutDays', function () { return Serenity.DecimalEditor; }],
            ['SlsoShipVia', function () { return Serenity.StringEditor; }],
            ['SlsoShipTerms', function () { return Serenity.StringEditor; }],
            ['SlRevisedDate', function () { return Serenity.DateEditor; }],
            ['SlRevisedBy', function () { return Serenity.StringEditor; }],
            ['PuInit', function () { return Serenity.StringEditor; }],
            ['PupoMultiship', function () { return Serenity.StringEditor; }],
            ['PupoDeposits', function () { return Serenity.StringEditor; }],
            ['PupoMeasures', function () { return Serenity.StringEditor; }],
            ['PupoPtax', function () { return Serenity.StringEditor; }],
            ['PupoAtax', function () { return Serenity.StringEditor; }],
            ['PupoGtax', function () { return Serenity.StringEditor; }],
            ['PupoLineDisc', function () { return Serenity.StringEditor; }],
            ['PupoExtInst', function () { return Serenity.StringEditor; }],
            ['PupoExtDesc', function () { return Serenity.StringEditor; }],
            ['PupoFixedUom', function () { return Serenity.StringEditor; }],
            ['PupoText1', function () { return Serenity.StringEditor; }],
            ['PupoText2', function () { return Serenity.StringEditor; }],
            ['PupoText3', function () { return Serenity.StringEditor; }],
            ['PupoText4', function () { return Serenity.StringEditor; }],
            ['PupoCutDays', function () { return Serenity.DecimalEditor; }],
            ['PupoReorder', function () { return Serenity.StringEditor; }],
            ['PupoReqBuyer', function () { return Serenity.StringEditor; }],
            ['PupoBuyer', function () { return Serenity.StringEditor; }],
            ['PupoShipVia', function () { return Serenity.StringEditor; }],
            ['PupoShipTerms', function () { return Serenity.StringEditor; }],
            ['PuRevisedDate', function () { return Serenity.DateEditor; }],
            ['PuRevisedBy', function () { return Serenity.StringEditor; }],
            ['ProdInit', function () { return Serenity.StringEditor; }],
            ['ProdEcnReq', function () { return Serenity.StringEditor; }],
            ['ProdByprod', function () { return Serenity.StringEditor; }],
            ['ProdScrapRate', function () { return Serenity.DecimalEditor; }],
            ['ProdPictDesc1', function () { return Serenity.StringEditor; }],
            ['ProdPictDesc2', function () { return Serenity.StringEditor; }],
            ['ProdPictDesc3', function () { return Serenity.StringEditor; }],
            ['ProdPictDesc4', function () { return Serenity.StringEditor; }],
            ['ProdWeightUom', function () { return Serenity.StringEditor; }],
            ['ProdDimenUom', function () { return Serenity.StringEditor; }],
            ['ProdFixedWtum', function () { return Serenity.StringEditor; }],
            ['ProdFixedDmum', function () { return Serenity.StringEditor; }],
            ['ProdStdLsize', function () { return Serenity.DecimalEditor; }],
            ['ProdMinLsize', function () { return Serenity.DecimalEditor; }],
            ['ProdMaxLsize', function () { return Serenity.DecimalEditor; }],
            ['ProdStdOutput', function () { return Serenity.DecimalEditor; }],
            ['PrRevisedDate', function () { return Serenity.DateEditor; }],
            ['PrRevisedBy', function () { return Serenity.StringEditor; }],
            ['ShopReqJcat', function () { return Serenity.StringEditor; }],
            ['ShopWksCover', function () { return Serenity.DecimalEditor; }],
            ['ShopPlanner', function () { return Serenity.StringEditor; }],
            ['ShopDefPlnr', function () { return Serenity.StringEditor; }],
            ['ShopMpsHorz', function () { return Serenity.DecimalEditor; }],
            ['ShopPurLtime', function () { return Serenity.DecimalEditor; }],
            ['ShopPurLunit', function () { return Serenity.StringEditor; }],
            ['ShopJobCat', function () { return Serenity.StringEditor; }],
            ['ShopMrpHorz', function () { return Serenity.DecimalEditor; }],
            ['ShRevisedDate', function () { return Serenity.DateEditor; }],
            ['ShRevisedBy', function () { return Serenity.StringEditor; }],
            ['MrpCount', function () { return Serenity.DecimalEditor; }],
            ['MrpRefNo', function () { return Serenity.StringEditor; }],
            ['MrpRunDate', function () { return Serenity.DateEditor; }],
            ['MrpHorzDate', function () { return Serenity.DateEditor; }],
            ['IcInit', function () { return Serenity.StringEditor; }],
            ['IcReceipts', function () { return Serenity.StringEditor; }],
            ['IcIssuance', function () { return Serenity.StringEditor; }],
            ['IcTransfer', function () { return Serenity.StringEditor; }],
            ['IcAdjustment', function () { return Serenity.StringEditor; }],
            ['IcRevisedDate', function () { return Serenity.DateEditor; }],
            ['IcRevisedBy', function () { return Serenity.StringEditor; }],
            ['PrJobSched', function () { return Serenity.StringEditor; }],
            ['PrByProd', function () { return Serenity.StringEditor; }],
            ['PrJobBatches', function () { return Serenity.StringEditor; }],
            ['LastResvNo', function () { return Serenity.DecimalEditor; }],
            ['NoMrpFence', function () { return Serenity.StringEditor; }],
            ['MvtRmIssue', function () { return Serenity.StringEditor; }],
            ['MvtSpIssue', function () { return Serenity.StringEditor; }],
            ['MvtFgReturn', function () { return Serenity.StringEditor; }],
            ['MvtRmReturn', function () { return Serenity.StringEditor; }],
            ['MvtSlShipment', function () { return Serenity.StringEditor; }],
            ['MvtSlReturn', function () { return Serenity.StringEditor; }],
            ['MvtPuReceipt', function () { return Serenity.StringEditor; }],
            ['MvtPuInspect', function () { return Serenity.StringEditor; }],
            ['MvtPuReturn', function () { return Serenity.StringEditor; }],
            ['GlInit', function () { return Serenity.StringEditor; }],
            ['GlHdrTxt', function () { return Serenity.StringEditor; }],
            ['GlDtlTxt', function () { return Serenity.StringEditor; }],
            ['GlRefEntry', function () { return Serenity.StringEditor; }],
            ['GlRefLabel', function () { return Serenity.StringEditor; }],
            ['GlLrefEntry', function () { return Serenity.StringEditor; }],
            ['GlLrefLabel', function () { return Serenity.StringEditor; }],
            ['GlExchComp', function () { return Serenity.StringEditor; }],
            ['GlRevisedBy', function () { return Serenity.StringEditor; }],
            ['GlRevisedDate', function () { return Serenity.DateEditor; }],
            ['VochArInvo', function () { return Serenity.StringEditor; }],
            ['VochArMemo', function () { return Serenity.StringEditor; }],
            ['VochArAdj', function () { return Serenity.StringEditor; }],
            ['VochArPay', function () { return Serenity.StringEditor; }],
            ['VochArAlloc', function () { return Serenity.StringEditor; }],
            ['VochArInvocan', function () { return Serenity.StringEditor; }],
            ['VochArPaycan', function () { return Serenity.StringEditor; }],
            ['VochApInvo', function () { return Serenity.StringEditor; }],
            ['VochApMemo', function () { return Serenity.StringEditor; }],
            ['VochApAdj', function () { return Serenity.StringEditor; }],
            ['VochApPay', function () { return Serenity.StringEditor; }],
            ['VochApAlloc', function () { return Serenity.StringEditor; }],
            ['VochApInvocan', function () { return Serenity.StringEditor; }],
            ['VochApPaycan', function () { return Serenity.StringEditor; }],
            ['VochIcIssue', function () { return Serenity.StringEditor; }],
            ['VochIcRcpt', function () { return Serenity.StringEditor; }],
            ['VochIcAdj', function () { return Serenity.StringEditor; }],
            ['VochPrIssue', function () { return Serenity.StringEditor; }],
            ['VochPrReturn', function () { return Serenity.StringEditor; }],
            ['VochPrProd', function () { return Serenity.StringEditor; }],
            ['VochPrSubcon', function () { return Serenity.StringEditor; }],
            ['VochPayroll', function () { return Serenity.StringEditor; }],
            ['VochCommission', function () { return Serenity.StringEditor; }],
            ['VochFaAcquire', function () { return Serenity.StringEditor; }],
            ['VochFaDeprec', function () { return Serenity.StringEditor; }],
            ['VochFaMaint', function () { return Serenity.StringEditor; }],
            ['VochFaDispo', function () { return Serenity.StringEditor; }],
            ['ArBcountInvo', function () { return Serenity.DecimalEditor; }],
            ['ArBcountMemo', function () { return Serenity.DecimalEditor; }],
            ['ArBcountAdj', function () { return Serenity.DecimalEditor; }],
            ['ArBcountPay', function () { return Serenity.DecimalEditor; }],
            ['ArBcountAlloc', function () { return Serenity.DecimalEditor; }],
            ['ApBcountInvo', function () { return Serenity.DecimalEditor; }],
            ['ApBcountMemo', function () { return Serenity.DecimalEditor; }],
            ['ApBcountAdj', function () { return Serenity.DecimalEditor; }],
            ['ApBcountPay', function () { return Serenity.DecimalEditor; }],
            ['ApBcountAlloc', function () { return Serenity.DecimalEditor; }],
            ['CostInit', function () { return Serenity.StringEditor; }],
            ['CostBasis', function () { return Serenity.StringEditor; }],
            ['CostRmPrMul', function () { return Serenity.DecimalEditor; }],
            ['CostLbPrMul', function () { return Serenity.DecimalEditor; }],
            ['CostOvPrMul', function () { return Serenity.DecimalEditor; }],
            ['CostRmSlMul', function () { return Serenity.DecimalEditor; }],
            ['CostLbSlMul', function () { return Serenity.DecimalEditor; }],
            ['CostOvSlMul', function () { return Serenity.DecimalEditor; }],
            ['CostRevisedBy', function () { return Serenity.StringEditor; }],
            ['CostRevDate', function () { return Serenity.DateEditor; }],
            ['PrCostVerify', function () { return Serenity.StringEditor; }],
            ['PrCostEdit', function () { return Serenity.StringEditor; }],
            ['CommisType', function () { return Serenity.StringEditor; }],
            ['SlsoCustItem', function () { return Serenity.StringEditor; }],
            ['SlsoPkgType', function () { return Serenity.StringEditor; }],
            ['IcAutoShip', function () { return Serenity.StringEditor; }],
            ['IcAutoSlret', function () { return Serenity.StringEditor; }],
            ['IcAutoGrn', function () { return Serenity.StringEditor; }],
            ['IcAutoQc', function () { return Serenity.StringEditor; }],
            ['IcAutoPuret', function () { return Serenity.StringEditor; }],
            ['IcAutoWorkc', function () { return Serenity.StringEditor; }],
            ['ApOvrideRate', function () { return Serenity.StringEditor; }],
            ['SlsoSchEntry', function () { return Serenity.StringEditor; }],
            ['PupoSchEntry', function () { return Serenity.StringEditor; }],
            ['SlsoContact', function () { return Serenity.StringEditor; }],
            ['SlsoOrdrPack', function () { return Serenity.StringEditor; }],
            ['MaxUsers', function () { return Serenity.DecimalEditor; }],
            ['MmuKey', function () { return Serenity.StringEditor; }],
            ['AcctAnlys1', function () { return Serenity.StringEditor; }],
            ['AcctAnlys2', function () { return Serenity.StringEditor; }],
            ['AcctAnlys3', function () { return Serenity.StringEditor; }],
            ['AcctAnlys4', function () { return Serenity.StringEditor; }],
            ['VochAnlys1', function () { return Serenity.StringEditor; }],
            ['VochAnlys2', function () { return Serenity.StringEditor; }],
            ['VochAnlys3', function () { return Serenity.StringEditor; }],
            ['VochAnlys4', function () { return Serenity.StringEditor; }],
            ['VochAnlys5', function () { return Serenity.StringEditor; }],
            ['VochAnlys6', function () { return Serenity.StringEditor; }],
            ['ItemAnlys1', function () { return Serenity.StringEditor; }],
            ['ItemAnlys2', function () { return Serenity.StringEditor; }],
            ['ItemAnlys3', function () { return Serenity.StringEditor; }],
            ['ItemAnlys4', function () { return Serenity.StringEditor; }],
            ['CustAnlys1', function () { return Serenity.StringEditor; }],
            ['CustAnlys2', function () { return Serenity.StringEditor; }],
            ['CustAnlys3', function () { return Serenity.StringEditor; }],
            ['CustAnlys4', function () { return Serenity.StringEditor; }],
            ['VendAnlys1', function () { return Serenity.StringEditor; }],
            ['VendAnlys2', function () { return Serenity.StringEditor; }],
            ['VendAnlys3', function () { return Serenity.StringEditor; }],
            ['VendAnlys4', function () { return Serenity.StringEditor; }],
            ['SaleAnlys1', function () { return Serenity.StringEditor; }],
            ['SaleAnlys2', function () { return Serenity.StringEditor; }],
            ['SaleAnlys3', function () { return Serenity.StringEditor; }],
            ['SaleAnlys4', function () { return Serenity.StringEditor; }],
            ['SaleAnlys5', function () { return Serenity.StringEditor; }],
            ['SaleAnlys6', function () { return Serenity.StringEditor; }],
            ['PurcAnlys1', function () { return Serenity.StringEditor; }],
            ['PurcAnlys2', function () { return Serenity.StringEditor; }],
            ['PurcAnlys3', function () { return Serenity.StringEditor; }],
            ['PurcAnlys4', function () { return Serenity.StringEditor; }],
            ['PurcAnlys5', function () { return Serenity.StringEditor; }],
            ['PurcAnlys6', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys1', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys2', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys3', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys4', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys5', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys6', function () { return Serenity.StringEditor; }],
            ['NrevisedDate', function () { return Serenity.DateEditor; }],
            ['NrevisedBy', function () { return Serenity.StringEditor; }],
            ['ShipWtUom', function () { return Serenity.StringEditor; }],
            ['ShipDimUom', function () { return Serenity.StringEditor; }],
            ['ItemPacking', function () { return Serenity.StringEditor; }],
            ['NoOvhdAcctg', function () { return Serenity.StringEditor; }],
            ['NoVariaAcctg', function () { return Serenity.StringEditor; }],
            ['NoFgAcctg', function () { return Serenity.StringEditor; }],
            ['FgCostLimit', function () { return Serenity.StringEditor; }],
            ['AllowDescChg', function () { return Serenity.StringEditor; }],
            ['NoLaborAcctg', function () { return Serenity.StringEditor; }],
            ['NoSubconAcctg', function () { return Serenity.StringEditor; }],
            ['ReorderIsNew', function () { return Serenity.StringEditor; }],
            ['DefInspStd', function () { return Serenity.StringEditor; }],
            ['DefInspLvl', function () { return Serenity.StringEditor; }],
            ['DefAqlLvlMaj', function () { return Serenity.StringEditor; }],
            ['DefAqlLvlMin', function () { return Serenity.StringEditor; }],
            ['ReturnEmail', function () { return Serenity.StringEditor; }],
            ['SmtpServer', function () { return Serenity.StringEditor; }],
            ['WebSetting1', function () { return Serenity.StringEditor; }],
            ['WebSetting2', function () { return Serenity.StringEditor; }],
            ['WebSetting3', function () { return Serenity.StringEditor; }],
            ['WebSetting4', function () { return Serenity.StringEditor; }],
            ['PupoPriceCtrl', function () { return Serenity.StringEditor; }],
            ['JordAnlys1', function () { return Serenity.StringEditor; }],
            ['JordAnlys2', function () { return Serenity.StringEditor; }],
            ['JordAnlys3', function () { return Serenity.StringEditor; }],
            ['JordAnlys4', function () { return Serenity.StringEditor; }],
            ['JordAnlys5', function () { return Serenity.StringEditor; }],
            ['JordAnlys6', function () { return Serenity.StringEditor; }],
            ['ProdPosEntry', function () { return Serenity.StringEditor; }],
            ['GlarText1', function () { return Serenity.StringEditor; }],
            ['GlarText2', function () { return Serenity.StringEditor; }],
            ['GlarText3', function () { return Serenity.StringEditor; }],
            ['GlarText4', function () { return Serenity.StringEditor; }],
            ['PrJobClose', function () { return Serenity.StringEditor; }],
            ['SlsoUnfullPackResponse', function () { return Serenity.StringEditor; }],
            ['SlsoDefMultiShip', function () { return Serenity.StringEditor; }],
            ['SlsoDefAutoPo', function () { return Serenity.StringEditor; }],
            ['SlsoDefAutoJo', function () { return Serenity.StringEditor; }],
            ['SlpaExtDesc', function () { return Serenity.StringEditor; }],
            ['PupoDueLead', function () { return Serenity.DecimalEditor; }],
            ['PupoSchLead', function () { return Serenity.DecimalEditor; }],
            ['PrMultiIssue', function () { return Serenity.StringEditor; }],
            ['ProdSepRoute', function () { return Serenity.StringEditor; }],
            ['ProdHideWcSubcon', function () { return Serenity.StringEditor; }],
            ['CopyTextFromSo', function () { return Serenity.StringEditor; }],
            ['PrpmText1', function () { return Serenity.StringEditor; }],
            ['PrpmText2', function () { return Serenity.StringEditor; }],
            ['PrpmText3', function () { return Serenity.StringEditor; }],
            ['PrpmText4', function () { return Serenity.StringEditor; }],
            ['PrpmExtInst', function () { return Serenity.StringEditor; }],
            ['BomVerLen', function () { return Serenity.IntegerEditor; }],
            ['ProdPoPrice', function () { return Serenity.StringEditor; }],
            ['SaleAnlys7', function () { return Serenity.StringEditor; }],
            ['SaleAnlys8', function () { return Serenity.StringEditor; }],
            ['PurcAnlys7', function () { return Serenity.StringEditor; }],
            ['PurcAnlys8', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys7', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys8', function () { return Serenity.StringEditor; }],
            ['VochAnlys7', function () { return Serenity.StringEditor; }],
            ['VochAnlys8', function () { return Serenity.StringEditor; }],
            ['JordAnlys7', function () { return Serenity.StringEditor; }],
            ['JordAnlys8', function () { return Serenity.StringEditor; }],
            ['ArAnlys1', function () { return Serenity.StringEditor; }],
            ['ArAnlys2', function () { return Serenity.StringEditor; }],
            ['ArAnlys3', function () { return Serenity.StringEditor; }],
            ['ArAnlys4', function () { return Serenity.StringEditor; }],
            ['ArAnlys5', function () { return Serenity.StringEditor; }],
            ['ArAnlys6', function () { return Serenity.StringEditor; }],
            ['ArAnlys7', function () { return Serenity.StringEditor; }],
            ['ArAnlys8', function () { return Serenity.StringEditor; }],
            ['ApAnlys1', function () { return Serenity.StringEditor; }],
            ['ApAnlys2', function () { return Serenity.StringEditor; }],
            ['ApAnlys3', function () { return Serenity.StringEditor; }],
            ['ApAnlys4', function () { return Serenity.StringEditor; }],
            ['ApAnlys5', function () { return Serenity.StringEditor; }],
            ['ApAnlys6', function () { return Serenity.StringEditor; }],
            ['ApAnlys7', function () { return Serenity.StringEditor; }],
            ['ApAnlys8', function () { return Serenity.StringEditor; }],
            ['SlAddInfo', function () { return Serenity.StringEditor; }],
            ['PuAddInfo', function () { return Serenity.StringEditor; }],
            ['PrAddInfo', function () { return Serenity.StringEditor; }],
            ['IcAddInfo', function () { return Serenity.StringEditor; }],
            ['ChkMatIss', function () { return Serenity.StringEditor; }],
            ['IcDefStdCost', function () { return Serenity.StringEditor; }],
            ['CheckCustpo', function () { return Serenity.StringEditor; }],
            ['CtlFgRtn', function () { return Serenity.StringEditor; }],
            ['VochArRefund', function () { return Serenity.StringEditor; }],
            ['VochApRefund', function () { return Serenity.StringEditor; }],
            ['SlsoDn', function () { return Serenity.StringEditor; }],
            ['AutoIncBy', function () { return Serenity.DecimalEditor; }],
            ['QuoGenMultiSo', function () { return Serenity.StringEditor; }],
            ['PuReceiveAll', function () { return Serenity.StringEditor; }],
            ['PrpmItemMasterScrap', function () { return Serenity.StringEditor; }],
            ['IcDisableCommit', function () { return Serenity.StringEditor; }],
            ['ProdDefMatRemarks', function () { return Serenity.StringEditor; }],
            ['SlsoUpdateQtyFromSch', function () { return Serenity.StringEditor; }],
            ['PupoUpdateQtyFromSch', function () { return Serenity.StringEditor; }],
            ['SlsoDefaultBasePrice', function () { return Serenity.StringEditor; }],
            ['SlsoDiscountByCustomer', function () { return Serenity.StringEditor; }],
            ['PrpmMaxQtyInStorage', function () { return Serenity.StringEditor; }],
            ['IcDefCostType', function () { return Serenity.StringEditor; }],
            ['ProdBomCreateItem', function () { return Serenity.StringEditor; }],
            ['PupoRtvLoc', function () { return Serenity.StringEditor; }],
            ['PrpmUseAllMatLastWc', function () { return Serenity.StringEditor; }],
            ['IcNoDefCharge', function () { return Serenity.StringEditor; }],
            ['ProdDefPhantomBom', function () { return Serenity.StringEditor; }],
            ['SlsoNeedCmApproval', function () { return Serenity.StringEditor; }],
            ['PupoNeedVmApproval', function () { return Serenity.StringEditor; }],
            ['ProdNeedBomApproval', function () { return Serenity.StringEditor; }],
            ['ProdNeedImApproval', function () { return Serenity.StringEditor; }],
            ['PrpmNeedScrapReason', function () { return Serenity.StringEditor; }],
            ['PrpmMustBackflush', function () { return Serenity.StringEditor; }],
            ['PupoAutoOrderLink', function () { return Serenity.StringEditor; }],
            ['PrpmAutoOrderLink', function () { return Serenity.StringEditor; }],
            ['PrpeAllowChgJob', function () { return Serenity.StringEditor; }],
            ['VochPrInspect', function () { return Serenity.StringEditor; }],
            ['VochPrRework', function () { return Serenity.StringEditor; }],
            ['ProdNeedPlanRlseApproval', function () { return Serenity.StringEditor; }],
            ['PrpmIncludeScrapInMmi', function () { return Serenity.StringEditor; }],
            ['ProdScrapLoc', function () { return Serenity.StringEditor; }],
            ['MvtPrScrap', function () { return Serenity.StringEditor; }],
            ['SlNeedClApproval', function () { return Serenity.StringEditor; }],
            ['WarnOnMatConsum', function () { return Serenity.StringEditor; }],
            ['IcimAutogenLot', function () { return Serenity.StringEditor; }],
            ['IcimAutogenSerial', function () { return Serenity.StringEditor; }],
            ['ItemAnlys5', function () { return Serenity.StringEditor; }],
            ['ItemAnlys6', function () { return Serenity.StringEditor; }],
            ['ItemAnlys7', function () { return Serenity.StringEditor; }],
            ['ItemAnlys8', function () { return Serenity.StringEditor; }],
            ['ItemAnlys9', function () { return Serenity.StringEditor; }],
            ['ItemAnlys10', function () { return Serenity.StringEditor; }],
            ['CustAnlys5', function () { return Serenity.StringEditor; }],
            ['CustAnlys6', function () { return Serenity.StringEditor; }],
            ['CustAnlys7', function () { return Serenity.StringEditor; }],
            ['CustAnlys8', function () { return Serenity.StringEditor; }],
            ['CustAnlys9', function () { return Serenity.StringEditor; }],
            ['CustAnlys10', function () { return Serenity.StringEditor; }],
            ['VendAnlys5', function () { return Serenity.StringEditor; }],
            ['VendAnlys6', function () { return Serenity.StringEditor; }],
            ['VendAnlys7', function () { return Serenity.StringEditor; }],
            ['VendAnlys8', function () { return Serenity.StringEditor; }],
            ['VendAnlys9', function () { return Serenity.StringEditor; }],
            ['VendAnlys10', function () { return Serenity.StringEditor; }],
            ['AcctAnlys5', function () { return Serenity.StringEditor; }],
            ['AcctAnlys6', function () { return Serenity.StringEditor; }],
            ['AcctAnlys7', function () { return Serenity.StringEditor; }],
            ['AcctAnlys8', function () { return Serenity.StringEditor; }],
            ['AcctAnlys9', function () { return Serenity.StringEditor; }],
            ['AcctAnlys10', function () { return Serenity.StringEditor; }],
            ['SaleAnlys9', function () { return Serenity.StringEditor; }],
            ['SaleAnlys10', function () { return Serenity.StringEditor; }],
            ['SaleAnlys11', function () { return Serenity.StringEditor; }],
            ['SaleAnlys12', function () { return Serenity.StringEditor; }],
            ['SaleAnlys13', function () { return Serenity.StringEditor; }],
            ['SaleAnlys14', function () { return Serenity.StringEditor; }],
            ['SaleAnlys15', function () { return Serenity.StringEditor; }],
            ['SaleAnlys16', function () { return Serenity.StringEditor; }],
            ['SaleAnlys17', function () { return Serenity.StringEditor; }],
            ['SaleAnlys18', function () { return Serenity.StringEditor; }],
            ['SaleAnlys19', function () { return Serenity.StringEditor; }],
            ['SaleAnlys20', function () { return Serenity.StringEditor; }],
            ['PurcAnlys9', function () { return Serenity.StringEditor; }],
            ['PurcAnlys10', function () { return Serenity.StringEditor; }],
            ['PurcAnlys11', function () { return Serenity.StringEditor; }],
            ['PurcAnlys12', function () { return Serenity.StringEditor; }],
            ['PurcAnlys13', function () { return Serenity.StringEditor; }],
            ['PurcAnlys14', function () { return Serenity.StringEditor; }],
            ['PurcAnlys15', function () { return Serenity.StringEditor; }],
            ['PurcAnlys16', function () { return Serenity.StringEditor; }],
            ['PurcAnlys17', function () { return Serenity.StringEditor; }],
            ['PurcAnlys18', function () { return Serenity.StringEditor; }],
            ['PurcAnlys19', function () { return Serenity.StringEditor; }],
            ['PurcAnlys20', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys9', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys10', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys11', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys12', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys13', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys14', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys15', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys16', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys17', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys18', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys19', function () { return Serenity.StringEditor; }],
            ['MvmtAnlys20', function () { return Serenity.StringEditor; }],
            ['VochAnlys9', function () { return Serenity.StringEditor; }],
            ['VochAnlys10', function () { return Serenity.StringEditor; }],
            ['VochAnlys11', function () { return Serenity.StringEditor; }],
            ['VochAnlys12', function () { return Serenity.StringEditor; }],
            ['VochAnlys13', function () { return Serenity.StringEditor; }],
            ['VochAnlys14', function () { return Serenity.StringEditor; }],
            ['VochAnlys15', function () { return Serenity.StringEditor; }],
            ['VochAnlys16', function () { return Serenity.StringEditor; }],
            ['VochAnlys17', function () { return Serenity.StringEditor; }],
            ['VochAnlys18', function () { return Serenity.StringEditor; }],
            ['VochAnlys19', function () { return Serenity.StringEditor; }],
            ['VochAnlys20', function () { return Serenity.StringEditor; }],
            ['JordAnlys9', function () { return Serenity.StringEditor; }],
            ['JordAnlys10', function () { return Serenity.StringEditor; }],
            ['JordAnlys11', function () { return Serenity.StringEditor; }],
            ['JordAnlys12', function () { return Serenity.StringEditor; }],
            ['JordAnlys13', function () { return Serenity.StringEditor; }],
            ['JordAnlys14', function () { return Serenity.StringEditor; }],
            ['JordAnlys15', function () { return Serenity.StringEditor; }],
            ['JordAnlys16', function () { return Serenity.StringEditor; }],
            ['JordAnlys17', function () { return Serenity.StringEditor; }],
            ['JordAnlys18', function () { return Serenity.StringEditor; }],
            ['JordAnlys19', function () { return Serenity.StringEditor; }],
            ['JordAnlys20', function () { return Serenity.StringEditor; }],
            ['ArAnlys9', function () { return Serenity.StringEditor; }],
            ['ArAnlys10', function () { return Serenity.StringEditor; }],
            ['ArAnlys11', function () { return Serenity.StringEditor; }],
            ['ArAnlys12', function () { return Serenity.StringEditor; }],
            ['ArAnlys13', function () { return Serenity.StringEditor; }],
            ['ArAnlys14', function () { return Serenity.StringEditor; }],
            ['ArAnlys15', function () { return Serenity.StringEditor; }],
            ['ArAnlys16', function () { return Serenity.StringEditor; }],
            ['ArAnlys17', function () { return Serenity.StringEditor; }],
            ['ArAnlys18', function () { return Serenity.StringEditor; }],
            ['ArAnlys19', function () { return Serenity.StringEditor; }],
            ['ArAnlys20', function () { return Serenity.StringEditor; }],
            ['ApAnlys9', function () { return Serenity.StringEditor; }],
            ['ApAnlys10', function () { return Serenity.StringEditor; }],
            ['ApAnlys11', function () { return Serenity.StringEditor; }],
            ['ApAnlys12', function () { return Serenity.StringEditor; }],
            ['ApAnlys13', function () { return Serenity.StringEditor; }],
            ['ApAnlys14', function () { return Serenity.StringEditor; }],
            ['ApAnlys15', function () { return Serenity.StringEditor; }],
            ['ApAnlys16', function () { return Serenity.StringEditor; }],
            ['ApAnlys17', function () { return Serenity.StringEditor; }],
            ['ApAnlys18', function () { return Serenity.StringEditor; }],
            ['ApAnlys19', function () { return Serenity.StringEditor; }],
            ['ApAnlys20', function () { return Serenity.StringEditor; }],
            ['PrpeMoldAuditTrail', function () { return Serenity.BooleanEditor; }],
            ['IcimIssueByAvailableQty', function () { return Serenity.BooleanEditor; }],
            ['PrpmJamendIssueControl', function () { return Serenity.BooleanEditor; }],
            ['PrAutoMultiSpareIssue', function () { return Serenity.BooleanEditor; }],
            ['SlShipmentPriceControl', function () { return Serenity.BooleanEditor; }],
            ['ArMultiSettle', function () { return Serenity.BooleanEditor; }],
            ['PupoDefMultiship', function () { return Serenity.BooleanEditor; }],
            ['PupoDefReorder', function () { return Serenity.BooleanEditor; }],
            ['SlsoDefReorder', function () { return Serenity.BooleanEditor; }],
            ['VochByVdate', function () { return Serenity.BooleanEditor; }],
            ['PupoTaxTerms', function () { return Serenity.BooleanEditor; }],
            ['SampleAcct', function () { return Serenity.StringEditor; }],
            ['CtlFgRtnTotQty', function () { return Serenity.BooleanEditor; }],
            ['AllowMultiWc', function () { return Serenity.BooleanEditor; }],
            ['PoaIgnoreMinQty', function () { return Serenity.BooleanEditor; }],
            ['GrnMatCost', function () { return Serenity.BooleanEditor; }],
            ['GrnLotNoImport', function () { return Serenity.BooleanEditor; }],
            ['IssueMaterialsByRouting', function () { return Serenity.BooleanEditor; }],
            ['ConsumeMatInLastRouting', function () { return Serenity.BooleanEditor; }],
            ['DefAqlLvlCritical', function () { return Serenity.StringEditor; }],
            ['DefInspLvlSp', function () { return Serenity.StringEditor; }],
            ['DefAqlLvlCriticalSp', function () { return Serenity.StringEditor; }],
            ['DefAqlLvlMajSp', function () { return Serenity.StringEditor; }],
            ['DefAqlLvlMinSp', function () { return Serenity.StringEditor; }],
            ['WcAutoMatReturn', function () { return Serenity.BooleanEditor; }],
            ['ArInvMultiPayTerms', function () { return Serenity.BooleanEditor; }],
            ['IcAdjCodeAPcent', function () { return Serenity.DecimalEditor; }],
            ['IcAdjCodeBPcent', function () { return Serenity.DecimalEditor; }],
            ['IcAdjCodeCPcent', function () { return Serenity.DecimalEditor; }],
            ['TailorIncludeJob', function () { return Serenity.BooleanEditor; }],
            ['JoMultiSource', function () { return Serenity.BooleanEditor; }],
            ['ShowShipmentInfoInPacking', function () { return Serenity.BooleanEditor; }],
            ['MrpWithReorderPt', function () { return Serenity.BooleanEditor; }],
            ['AllowFollowListWithoutMi', function () { return Serenity.BooleanEditor; }],
            ['PrMultiFollowList', function () { return Serenity.BooleanEditor; }],
            ['SqietkMatBalSubtractCommit', function () { return Serenity.BooleanEditor; }],
            ['SoLineAutoIncBy', function () { return Serenity.DecimalEditor; }],
            ['PoLineAutoIncBy', function () { return Serenity.DecimalEditor; }],
            ['PuOverRcptByLine', function () { return Serenity.BooleanEditor; }],
            ['PuLmeCost', function () { return Serenity.BooleanEditor; }],
            ['SoaUpdatePendingShipment', function () { return Serenity.BooleanEditor; }],
            ['PrMatIssueOnAvailPercent', function () { return Serenity.DecimalEditor; }],
            ['JobHourlyRate', function () { return Serenity.DecimalEditor; }],
            ['ItemCustomProdCodeRequired', function () { return Serenity.BooleanEditor; }],
            ['IcimAutogenLotIssue', function () { return Serenity.BooleanEditor; }],
            ['IcimAutogenSerialIssue', function () { return Serenity.BooleanEditor; }],
            ['ShipmentInfoFromFirstOrder', function () { return Serenity.BooleanEditor; }],
            ['MrpExcludeLeadtime', function () { return Serenity.BooleanEditor; }],
            ['ItemPrelotSopo', function () { return Serenity.BooleanEditor; }],
            ['SlsoCtrlBtmCeil', function () { return Serenity.BooleanEditor; }],
            ['WcOverAcceptedLot', function () { return Serenity.BooleanEditor; }],
            ['SlsoAutoResv', function () { return Serenity.BooleanEditor; }],
            ['PercentA', function () { return Serenity.DecimalEditor; }],
            ['PercentB', function () { return Serenity.DecimalEditor; }],
            ['PercentC', function () { return Serenity.DecimalEditor; }],
            ['EntryPostedRequirdBeforePrint', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CompanySettingForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanySettingRow;
        (function (CompanySettingRow) {
            CompanySettingRow.idProperty = 'Recnum';
            CompanySettingRow.nameProperty = 'SlInit';
            CompanySettingRow.localTextPrefix = 'BasicInformation.CompanySetting';
            var Fields;
            (function (Fields) {
            })(Fields = CompanySettingRow.Fields || (CompanySettingRow.Fields = {}));
            [
                'Recnum',
                'SlInit',
                'SlsoMultiship',
                'SlsoResv',
                'SlsoAssortment',
                'SlsoDeposits',
                'SlsoMeasures',
                'SlsoPtax',
                'SlsoAtax',
                'SlsoGtax',
                'SlsoLineDisc',
                'SlsoAutoPo',
                'SlsoAutoJob',
                'SlsoExtInst',
                'SlsoExtDesc',
                'SlsoFixedUom',
                'SlsoReqSman',
                'SlsoSman',
                'SlsoText1',
                'SlsoText2',
                'SlsoText3',
                'SlsoText4',
                'SlsoDueLead',
                'SlsoSchLead',
                'SlsoAddrCode',
                'SlsoAddrType',
                'SlsoQuoteDays',
                'SlshCutDays',
                'SlsoShipVia',
                'SlsoShipTerms',
                'SlRevisedDate',
                'SlRevisedBy',
                'PuInit',
                'PupoMultiship',
                'PupoDeposits',
                'PupoMeasures',
                'PupoPtax',
                'PupoAtax',
                'PupoGtax',
                'PupoLineDisc',
                'PupoExtInst',
                'PupoExtDesc',
                'PupoFixedUom',
                'PupoText1',
                'PupoText2',
                'PupoText3',
                'PupoText4',
                'PupoCutDays',
                'PupoReorder',
                'PupoReqBuyer',
                'PupoBuyer',
                'PupoShipVia',
                'PupoShipTerms',
                'PuRevisedDate',
                'PuRevisedBy',
                'ProdInit',
                'ProdEcnReq',
                'ProdByprod',
                'ProdScrapRate',
                'ProdPictDesc1',
                'ProdPictDesc2',
                'ProdPictDesc3',
                'ProdPictDesc4',
                'ProdWeightUom',
                'ProdDimenUom',
                'ProdFixedWtum',
                'ProdFixedDmum',
                'ProdStdLsize',
                'ProdMinLsize',
                'ProdMaxLsize',
                'ProdStdOutput',
                'PrRevisedDate',
                'PrRevisedBy',
                'ShopReqJcat',
                'ShopWksCover',
                'ShopPlanner',
                'ShopDefPlnr',
                'ShopMpsHorz',
                'ShopPurLtime',
                'ShopPurLunit',
                'ShopJobCat',
                'ShopMrpHorz',
                'ShRevisedDate',
                'ShRevisedBy',
                'MrpCount',
                'MrpRefNo',
                'MrpRunDate',
                'MrpHorzDate',
                'IcInit',
                'IcReceipts',
                'IcIssuance',
                'IcTransfer',
                'IcAdjustment',
                'IcRevisedDate',
                'IcRevisedBy',
                'PrJobSched',
                'PrByProd',
                'PrJobBatches',
                'LastResvNo',
                'NoMrpFence',
                'MvtRmIssue',
                'MvtSpIssue',
                'MvtFgReturn',
                'MvtRmReturn',
                'MvtSlShipment',
                'MvtSlReturn',
                'MvtPuReceipt',
                'MvtPuInspect',
                'MvtPuReturn',
                'GlInit',
                'GlHdrTxt',
                'GlDtlTxt',
                'GlRefEntry',
                'GlRefLabel',
                'GlLrefEntry',
                'GlLrefLabel',
                'GlExchComp',
                'GlRevisedBy',
                'GlRevisedDate',
                'VochArInvo',
                'VochArMemo',
                'VochArAdj',
                'VochArPay',
                'VochArAlloc',
                'VochArInvocan',
                'VochArPaycan',
                'VochApInvo',
                'VochApMemo',
                'VochApAdj',
                'VochApPay',
                'VochApAlloc',
                'VochApInvocan',
                'VochApPaycan',
                'VochIcIssue',
                'VochIcRcpt',
                'VochIcAdj',
                'VochPrIssue',
                'VochPrReturn',
                'VochPrProd',
                'VochPrSubcon',
                'VochPayroll',
                'VochCommission',
                'VochFaAcquire',
                'VochFaDeprec',
                'VochFaMaint',
                'VochFaDispo',
                'ArBcountInvo',
                'ArBcountMemo',
                'ArBcountAdj',
                'ArBcountPay',
                'ArBcountAlloc',
                'ApBcountInvo',
                'ApBcountMemo',
                'ApBcountAdj',
                'ApBcountPay',
                'ApBcountAlloc',
                'CostInit',
                'CostBasis',
                'CostRmPrMul',
                'CostLbPrMul',
                'CostOvPrMul',
                'CostRmSlMul',
                'CostLbSlMul',
                'CostOvSlMul',
                'CostRevisedBy',
                'CostRevDate',
                'PrCostVerify',
                'PrCostEdit',
                'CommisType',
                'SlsoCustItem',
                'SlsoPkgType',
                'IcAutoShip',
                'IcAutoSlret',
                'IcAutoGrn',
                'IcAutoQc',
                'IcAutoPuret',
                'IcAutoWorkc',
                'ApOvrideRate',
                'SlsoSchEntry',
                'PupoSchEntry',
                'SlsoContact',
                'SlsoOrdrPack',
                'MaxUsers',
                'MmuKey',
                'AcctAnlys1',
                'AcctAnlys2',
                'AcctAnlys3',
                'AcctAnlys4',
                'VochAnlys1',
                'VochAnlys2',
                'VochAnlys3',
                'VochAnlys4',
                'VochAnlys5',
                'VochAnlys6',
                'ItemAnlys1',
                'ItemAnlys2',
                'ItemAnlys3',
                'ItemAnlys4',
                'CustAnlys1',
                'CustAnlys2',
                'CustAnlys3',
                'CustAnlys4',
                'VendAnlys1',
                'VendAnlys2',
                'VendAnlys3',
                'VendAnlys4',
                'SaleAnlys1',
                'SaleAnlys2',
                'SaleAnlys3',
                'SaleAnlys4',
                'SaleAnlys5',
                'SaleAnlys6',
                'PurcAnlys1',
                'PurcAnlys2',
                'PurcAnlys3',
                'PurcAnlys4',
                'PurcAnlys5',
                'PurcAnlys6',
                'MvmtAnlys1',
                'MvmtAnlys2',
                'MvmtAnlys3',
                'MvmtAnlys4',
                'MvmtAnlys5',
                'MvmtAnlys6',
                'NrevisedDate',
                'NrevisedBy',
                'ShipWtUom',
                'ShipDimUom',
                'ItemPacking',
                'NoOvhdAcctg',
                'NoVariaAcctg',
                'NoFgAcctg',
                'FgCostLimit',
                'AllowDescChg',
                'NoLaborAcctg',
                'NoSubconAcctg',
                'ReorderIsNew',
                'DefInspStd',
                'DefInspLvl',
                'DefAqlLvlMaj',
                'DefAqlLvlMin',
                'ReturnEmail',
                'SmtpServer',
                'WebSetting1',
                'WebSetting2',
                'WebSetting3',
                'WebSetting4',
                'PupoPriceCtrl',
                'JordAnlys1',
                'JordAnlys2',
                'JordAnlys3',
                'JordAnlys4',
                'JordAnlys5',
                'JordAnlys6',
                'ProdPosEntry',
                'GlarText1',
                'GlarText2',
                'GlarText3',
                'GlarText4',
                'PrJobClose',
                'SlsoUnfullPackResponse',
                'SlsoDefMultiShip',
                'SlsoDefAutoPo',
                'SlsoDefAutoJo',
                'SlpaExtDesc',
                'PupoDueLead',
                'PupoSchLead',
                'PrMultiIssue',
                'ProdSepRoute',
                'ProdHideWcSubcon',
                'CopyTextFromSo',
                'PrpmText1',
                'PrpmText2',
                'PrpmText3',
                'PrpmText4',
                'PrpmExtInst',
                'BomVerLen',
                'ProdPoPrice',
                'SaleAnlys7',
                'SaleAnlys8',
                'PurcAnlys7',
                'PurcAnlys8',
                'MvmtAnlys7',
                'MvmtAnlys8',
                'VochAnlys7',
                'VochAnlys8',
                'JordAnlys7',
                'JordAnlys8',
                'ArAnlys1',
                'ArAnlys2',
                'ArAnlys3',
                'ArAnlys4',
                'ArAnlys5',
                'ArAnlys6',
                'ArAnlys7',
                'ArAnlys8',
                'ApAnlys1',
                'ApAnlys2',
                'ApAnlys3',
                'ApAnlys4',
                'ApAnlys5',
                'ApAnlys6',
                'ApAnlys7',
                'ApAnlys8',
                'SlAddInfo',
                'PuAddInfo',
                'PrAddInfo',
                'IcAddInfo',
                'ChkMatIss',
                'IcDefStdCost',
                'CheckCustpo',
                'CtlFgRtn',
                'VochArRefund',
                'VochApRefund',
                'SlsoDn',
                'AutoIncBy',
                'QuoGenMultiSo',
                'PuReceiveAll',
                'PrpmItemMasterScrap',
                'IcDisableCommit',
                'ProdDefMatRemarks',
                'SlsoUpdateQtyFromSch',
                'PupoUpdateQtyFromSch',
                'SlsoDefaultBasePrice',
                'SlsoDiscountByCustomer',
                'PrpmMaxQtyInStorage',
                'IcDefCostType',
                'ProdBomCreateItem',
                'PupoRtvLoc',
                'PrpmUseAllMatLastWc',
                'IcNoDefCharge',
                'ProdDefPhantomBom',
                'SlsoNeedCmApproval',
                'PupoNeedVmApproval',
                'ProdNeedBomApproval',
                'ProdNeedImApproval',
                'PrpmNeedScrapReason',
                'PrpmMustBackflush',
                'PupoAutoOrderLink',
                'PrpmAutoOrderLink',
                'PrpeAllowChgJob',
                'VochPrInspect',
                'VochPrRework',
                'ProdNeedPlanRlseApproval',
                'PrpmIncludeScrapInMmi',
                'ProdScrapLoc',
                'MvtPrScrap',
                'SlNeedClApproval',
                'WarnOnMatConsum',
                'IcimAutogenLot',
                'IcimAutogenSerial',
                'ItemAnlys5',
                'ItemAnlys6',
                'ItemAnlys7',
                'ItemAnlys8',
                'ItemAnlys9',
                'ItemAnlys10',
                'CustAnlys5',
                'CustAnlys6',
                'CustAnlys7',
                'CustAnlys8',
                'CustAnlys9',
                'CustAnlys10',
                'VendAnlys5',
                'VendAnlys6',
                'VendAnlys7',
                'VendAnlys8',
                'VendAnlys9',
                'VendAnlys10',
                'AcctAnlys5',
                'AcctAnlys6',
                'AcctAnlys7',
                'AcctAnlys8',
                'AcctAnlys9',
                'AcctAnlys10',
                'SaleAnlys9',
                'SaleAnlys10',
                'SaleAnlys11',
                'SaleAnlys12',
                'SaleAnlys13',
                'SaleAnlys14',
                'SaleAnlys15',
                'SaleAnlys16',
                'SaleAnlys17',
                'SaleAnlys18',
                'SaleAnlys19',
                'SaleAnlys20',
                'PurcAnlys9',
                'PurcAnlys10',
                'PurcAnlys11',
                'PurcAnlys12',
                'PurcAnlys13',
                'PurcAnlys14',
                'PurcAnlys15',
                'PurcAnlys16',
                'PurcAnlys17',
                'PurcAnlys18',
                'PurcAnlys19',
                'PurcAnlys20',
                'MvmtAnlys9',
                'MvmtAnlys10',
                'MvmtAnlys11',
                'MvmtAnlys12',
                'MvmtAnlys13',
                'MvmtAnlys14',
                'MvmtAnlys15',
                'MvmtAnlys16',
                'MvmtAnlys17',
                'MvmtAnlys18',
                'MvmtAnlys19',
                'MvmtAnlys20',
                'VochAnlys9',
                'VochAnlys10',
                'VochAnlys11',
                'VochAnlys12',
                'VochAnlys13',
                'VochAnlys14',
                'VochAnlys15',
                'VochAnlys16',
                'VochAnlys17',
                'VochAnlys18',
                'VochAnlys19',
                'VochAnlys20',
                'JordAnlys9',
                'JordAnlys10',
                'JordAnlys11',
                'JordAnlys12',
                'JordAnlys13',
                'JordAnlys14',
                'JordAnlys15',
                'JordAnlys16',
                'JordAnlys17',
                'JordAnlys18',
                'JordAnlys19',
                'JordAnlys20',
                'ArAnlys9',
                'ArAnlys10',
                'ArAnlys11',
                'ArAnlys12',
                'ArAnlys13',
                'ArAnlys14',
                'ArAnlys15',
                'ArAnlys16',
                'ArAnlys17',
                'ArAnlys18',
                'ArAnlys19',
                'ArAnlys20',
                'ApAnlys9',
                'ApAnlys10',
                'ApAnlys11',
                'ApAnlys12',
                'ApAnlys13',
                'ApAnlys14',
                'ApAnlys15',
                'ApAnlys16',
                'ApAnlys17',
                'ApAnlys18',
                'ApAnlys19',
                'ApAnlys20',
                'PrpeMoldAuditTrail',
                'IcimIssueByAvailableQty',
                'PrpmJamendIssueControl',
                'PrAutoMultiSpareIssue',
                'SlShipmentPriceControl',
                'ArMultiSettle',
                'PupoDefMultiship',
                'PupoDefReorder',
                'SlsoDefReorder',
                'VochByVdate',
                'PupoTaxTerms',
                'SampleAcct',
                'CtlFgRtnTotQty',
                'AllowMultiWc',
                'PoaIgnoreMinQty',
                'GrnMatCost',
                'GrnLotNoImport',
                'IssueMaterialsByRouting',
                'ConsumeMatInLastRouting',
                'DefAqlLvlCritical',
                'DefInspLvlSp',
                'DefAqlLvlCriticalSp',
                'DefAqlLvlMajSp',
                'DefAqlLvlMinSp',
                'WcAutoMatReturn',
                'ArInvMultiPayTerms',
                'IcAdjCodeAPcent',
                'IcAdjCodeBPcent',
                'IcAdjCodeCPcent',
                'TailorIncludeJob',
                'JoMultiSource',
                'ShowShipmentInfoInPacking',
                'MrpWithReorderPt',
                'AllowFollowListWithoutMi',
                'PrMultiFollowList',
                'SqietkMatBalSubtractCommit',
                'SoLineAutoIncBy',
                'PoLineAutoIncBy',
                'PuOverRcptByLine',
                'PuLmeCost',
                'SoaUpdatePendingShipment',
                'PrMatIssueOnAvailPercent',
                'JobHourlyRate',
                'ItemCustomProdCodeRequired',
                'IcimAutogenLotIssue',
                'IcimAutogenSerialIssue',
                'ShipmentInfoFromFirstOrder',
                'MrpExcludeLeadtime',
                'ItemPrelotSopo',
                'SlsoCtrlBtmCeil',
                'WcOverAcceptedLot',
                'SlsoAutoResv',
                'PercentA',
                'PercentB',
                'PercentC',
                'EntryPostedRequirdBeforePrint'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CompanySettingRow = Basic.CompanySettingRow || (Basic.CompanySettingRow = {}));
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanySettingService;
        (function (CompanySettingService) {
            CompanySettingService.baseUrl = 'BasicInformation/CompanySetting';
            var Methods;
            (function (Methods) {
            })(Methods = CompanySettingService.Methods || (CompanySettingService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CompanySettingService[x] = function (r, s, o) {
                    return Q.serviceRequest(CompanySettingService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CompanySettingService.baseUrl + '/' + x;
            });
        })(CompanySettingService = Basic.CompanySettingService || (Basic.CompanySettingService = {}));
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var UserPreferenceRow;
        (function (UserPreferenceRow) {
            UserPreferenceRow.idProperty = 'UserPreferenceId';
            UserPreferenceRow.nameProperty = 'Name';
            UserPreferenceRow.localTextPrefix = 'Common.UserPreference';
            var Fields;
            (function (Fields) {
            })(Fields = UserPreferenceRow.Fields || (UserPreferenceRow.Fields = {}));
            [
                'UserPreferenceId',
                'UserId',
                'PreferenceType',
                'Name',
                'Value'
            ].forEach(function (x) { return Fields[x] = x; });
        })(UserPreferenceRow = Common.UserPreferenceRow || (Common.UserPreferenceRow = {}));
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var UserPreferenceService;
        (function (UserPreferenceService) {
            UserPreferenceService.baseUrl = 'Common/UserPreference';
            var Methods;
            (function (Methods) {
            })(Methods = UserPreferenceService.Methods || (UserPreferenceService.Methods = {}));
            [
                'Update',
                'Retrieve'
            ].forEach(function (x) {
                UserPreferenceService[x] = function (r, s, o) {
                    return Q.serviceRequest(UserPreferenceService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = UserPreferenceService.baseUrl + '/' + x;
            });
        })(UserPreferenceService = Common.UserPreferenceService || (Common.UserPreferenceService = {}));
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Document;
    (function (Document) {
        var AttachmentForm = /** @class */ (function (_super) {
            __extends(AttachmentForm, _super);
            function AttachmentForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AttachmentForm.formKey = 'Document.Attachment';
            return AttachmentForm;
        }(Serenity.PrefixedContext));
        Document.AttachmentForm = AttachmentForm;
        [['MasterTable', function () { return Serenity.StringEditor; }],
            ['MasterKey', function () { return Serenity.DecimalEditor; }],
            ['FileType', function () { return Serenity.StringEditor; }],
            ['FilePath', function () { return Serenity.StringEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['KeySegment1', function () { return Serenity.StringEditor; }],
            ['KeySegment2', function () { return Serenity.StringEditor; }],
            ['KeySegment3', function () { return Serenity.StringEditor; }],
            ['KeySegment4', function () { return Serenity.StringEditor; }],
            ['KeySegment5', function () { return Serenity.StringEditor; }],
            ['AttmSize', function () { return Serenity.DecimalEditor; }],
            ['AttmFile', function () { return Serenity.StringEditor; }],
            ['UploadedBy', function () { return Serenity.StringEditor; }],
            ['UploadedDate', function () { return Serenity.DateEditor; }],
            ['Md5Hash', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AttachmentForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Document = Matrix.Document || (Matrix.Document = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Document;
    (function (Document) {
        var AttachmentRow;
        (function (AttachmentRow) {
            AttachmentRow.idProperty = 'Recnum';
            AttachmentRow.nameProperty = 'MasterTable';
            AttachmentRow.localTextPrefix = 'Document.Attachment';
            var Fields;
            (function (Fields) {
            })(Fields = AttachmentRow.Fields || (AttachmentRow.Fields = {}));
            [
                'Recnum',
                'MasterTable',
                'MasterKey',
                'FileType',
                'FilePath',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'Description',
                'KeySegment1',
                'KeySegment2',
                'KeySegment3',
                'KeySegment4',
                'KeySegment5',
                'AttmSize',
                'AttmFile',
                'UploadedBy',
                'UploadedDate',
                'Md5Hash'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AttachmentRow = Document.AttachmentRow || (Document.AttachmentRow = {}));
    })(Document = Matrix.Document || (Matrix.Document = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Document;
    (function (Document) {
        var AttachmentService;
        (function (AttachmentService) {
            AttachmentService.baseUrl = 'Document/Attachment';
            var Methods;
            (function (Methods) {
            })(Methods = AttachmentService.Methods || (AttachmentService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AttachmentService[x] = function (r, s, o) {
                    return Q.serviceRequest(AttachmentService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AttachmentService.baseUrl + '/' + x;
            });
        })(AttachmentService = Document.AttachmentService || (Document.AttachmentService = {}));
    })(Document = Matrix.Document || (Matrix.Document = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CurrencyForm = /** @class */ (function (_super) {
            __extends(CurrencyForm, _super);
            function CurrencyForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CurrencyForm.formKey = 'Enterprise.Currency';
            return CurrencyForm;
        }(Serenity.PrefixedContext));
        Enterprise.CurrencyForm = CurrencyForm;
        [['Ccy', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['DefaultRate', function () { return Serenity.DecimalEditor; }],
            ['DetailList', function () { return Matrix.MasterData.ExchangeRateDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CurrencyForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CurrencyRow;
        (function (CurrencyRow) {
            CurrencyRow.idProperty = 'Ccy';
            CurrencyRow.nameProperty = 'Description';
            CurrencyRow.localTextPrefix = 'Enterprise.Currency';
            var Fields;
            (function (Fields) {
            })(Fields = CurrencyRow.Fields || (CurrencyRow.Fields = {}));
            [
                'Recnum',
                'Ccy',
                'Description',
                'Suspended',
                'DefaultRate',
                'AcctArForex',
                'AcctApForex',
                'LastEntryNo',
                'RateUseCount',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ArevisedDate',
                'ArevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'ApInvoBal',
                'ApOpenBal',
                'ApNetBal',
                'ApLinvoBal',
                'ApLopenBal',
                'ApLnetBal',
                'ArInvoBal',
                'ArOpenBal',
                'ArNetBal',
                'ArLinvoBal',
                'ArLopenBal',
                'ArLnetBal',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CurrencyRow = Enterprise.CurrencyRow || (Enterprise.CurrencyRow = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CurrencyService;
        (function (CurrencyService) {
            CurrencyService.baseUrl = 'Enterprise/Currency';
            var Methods;
            (function (Methods) {
            })(Methods = CurrencyService.Methods || (CurrencyService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CurrencyService[x] = function (r, s, o) {
                    return Q.serviceRequest(CurrencyService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CurrencyService.baseUrl + '/' + x;
            });
        })(CurrencyService = Enterprise.CurrencyService || (Enterprise.CurrencyService = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CustomerGroupForm = /** @class */ (function (_super) {
            __extends(CustomerGroupForm, _super);
            function CustomerGroupForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerGroupForm.formKey = 'Enterprise.CustomerGroup';
            return CustomerGroupForm;
        }(Serenity.PrefixedContext));
        Enterprise.CustomerGroupForm = CustomerGroupForm;
        [['CustomerGroup', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['UseAltNames', function () { return Serenity.BooleanEditor; }],
            ['WithCrLimit', function () { return Serenity.BooleanEditor; }],
            ['PaymentCcy', function () { return Serenity.StringEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['PriceCode', function () { return Serenity.StringEditor; }],
            ['CreditLimit', function () { return Serenity.DecimalEditor; }],
            ['TradeDiscount', function () { return Serenity.DecimalEditor; }],
            ['CustomerCount', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CustomerGroupForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CustomerGroupRow;
        (function (CustomerGroupRow) {
            CustomerGroupRow.idProperty = 'CustomerGroup';
            CustomerGroupRow.nameProperty = 'CustomerGroup';
            CustomerGroupRow.localTextPrefix = 'Enterprise.CustomerGroup';
            var Fields;
            (function (Fields) {
            })(Fields = CustomerGroupRow.Fields || (CustomerGroupRow.Fields = {}));
            [
                'Recnum',
                'CustomerGroup',
                'Description',
                'Suspended',
                'AcctArCust',
                'AcctArDisc',
                'AcctArAdj',
                'AcctSlsTrdisc',
                'GtaxCode',
                'LtaxCode',
                'PaymentCcy',
                'PayTerms',
                'PriceCode',
                'UseAltNames',
                'WithCrLimit',
                'CreditLimit',
                'TradeDiscount',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'CustomerCount',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ArevisedDate',
                'ArevisedBy',
                'TrevisedDate',
                'TrevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'AcctCustSltax',
                'SltaxPcent',
                'Anlys5',
                'Anlys6',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'AcctTemp',
                'ClientCompanyName',
                'ClientAddress1',
                'ClientAddress2',
                'ClientAddress3',
                'ClientAddress4',
                'ClientAddress5',
                'ClientTelNo',
                'ClientFaxNo',
                'ClientEmailAddress',
                'ClientContactPerson',
                'ClientContactTitle',
                'ClientRemarks',
                'AcctArDeposit'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CustomerGroupRow = Enterprise.CustomerGroupRow || (Enterprise.CustomerGroupRow = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CustomerGroupService;
        (function (CustomerGroupService) {
            CustomerGroupService.baseUrl = 'Enterprise/CustomerGroup';
            var Methods;
            (function (Methods) {
            })(Methods = CustomerGroupService.Methods || (CustomerGroupService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CustomerGroupService[x] = function (r, s, o) {
                    return Q.serviceRequest(CustomerGroupService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CustomerGroupService.baseUrl + '/' + x;
            });
        })(CustomerGroupService = Enterprise.CustomerGroupService || (Enterprise.CustomerGroupService = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var DepartmentForm = /** @class */ (function (_super) {
            __extends(DepartmentForm, _super);
            function DepartmentForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            DepartmentForm.formKey = 'Enterprise.Department';
            return DepartmentForm;
        }(Serenity.PrefixedContext));
        Enterprise.DepartmentForm = DepartmentForm;
        [['Dept', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(DepartmentForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var DepartmentRow;
        (function (DepartmentRow) {
            DepartmentRow.idProperty = 'Dept';
            DepartmentRow.nameProperty = 'Description';
            DepartmentRow.localTextPrefix = 'Enterprise.Department';
            var Fields;
            (function (Fields) {
            })(Fields = DepartmentRow.Fields || (DepartmentRow.Fields = {}));
            [
                'Recnum',
                'Dept',
                'Description',
                'Suspended',
                'AcctMvtIssue',
                'AcctMvtRcpt',
                'AcctPurMisc',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ArevisedDate',
                'ArevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(DepartmentRow = Enterprise.DepartmentRow || (Enterprise.DepartmentRow = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var DepartmentService;
        (function (DepartmentService) {
            DepartmentService.baseUrl = 'Enterprise/Department';
            var Methods;
            (function (Methods) {
            })(Methods = DepartmentService.Methods || (DepartmentService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                DepartmentService[x] = function (r, s, o) {
                    return Q.serviceRequest(DepartmentService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = DepartmentService.baseUrl + '/' + x;
            });
        })(DepartmentService = Enterprise.DepartmentService || (Enterprise.DepartmentService = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var ItemGroupForm = /** @class */ (function (_super) {
            __extends(ItemGroupForm, _super);
            function ItemGroupForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ItemGroupForm.formKey = 'Enterprise.ItemGroup';
            return ItemGroupForm;
        }(Serenity.PrefixedContext));
        Enterprise.ItemGroupForm = ItemGroupForm;
        [['ItemGroup', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Product', function () { return Serenity.BooleanEditor; }],
            ['Material', function () { return Serenity.BooleanEditor; }],
            ['Inspected', function () { return Serenity.BooleanEditor; }],
            ['AllocMethod', function () { return Serenity.EnumEditor; }],
            ['MakeOrBuy', function () { return Serenity.BooleanEditor; }],
            ['ScrapRate', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ItemGroupForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var ItemGroupRow;
        (function (ItemGroupRow) {
            ItemGroupRow.idProperty = 'ItemGroup';
            ItemGroupRow.nameProperty = 'Description';
            ItemGroupRow.localTextPrefix = 'Enterprise.ItemGroup';
            ItemGroupRow.lookupKey = 'Enterprise.ItemGroupLookup';
            function getLookup() {
                return Q.getLookup('Enterprise.ItemGroupLookup');
            }
            ItemGroupRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = ItemGroupRow.Fields || (ItemGroupRow.Fields = {}));
            [
                'ItemGroup',
                'Description',
                'Suspended',
                'Product',
                'Material',
                'Inspected',
                'ItemType',
                'AllocMethod',
                'MakeOrBuy',
                'ScrapRate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ItemGroupRow = Enterprise.ItemGroupRow || (Enterprise.ItemGroupRow = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var ItemGroupService;
        (function (ItemGroupService) {
            ItemGroupService.baseUrl = 'Enterprise/ItemGroup';
            var Methods;
            (function (Methods) {
            })(Methods = ItemGroupService.Methods || (ItemGroupService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ItemGroupService[x] = function (r, s, o) {
                    return Q.serviceRequest(ItemGroupService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ItemGroupService.baseUrl + '/' + x;
            });
        })(ItemGroupService = Enterprise.ItemGroupService || (Enterprise.ItemGroupService = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var JobCategoryForm = /** @class */ (function (_super) {
            __extends(JobCategoryForm, _super);
            function JobCategoryForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            JobCategoryForm.formKey = 'Enterprise.JobCategory';
            return JobCategoryForm;
        }(Serenity.PrefixedContext));
        Enterprise.JobCategoryForm = JobCategoryForm;
        [['Category', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Priority', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(JobCategoryForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var JobCategoryRow;
        (function (JobCategoryRow) {
            JobCategoryRow.idProperty = 'Category';
            JobCategoryRow.nameProperty = 'Description';
            JobCategoryRow.localTextPrefix = 'Enterprise.JobCategory';
            var Fields;
            (function (Fields) {
            })(Fields = JobCategoryRow.Fields || (JobCategoryRow.Fields = {}));
            [
                'Recnum',
                'Category',
                'Description',
                'Suspended',
                'Priority',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(JobCategoryRow = Enterprise.JobCategoryRow || (Enterprise.JobCategoryRow = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var JobCategoryService;
        (function (JobCategoryService) {
            JobCategoryService.baseUrl = 'Enterprise/JobCategory';
            var Methods;
            (function (Methods) {
            })(Methods = JobCategoryService.Methods || (JobCategoryService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                JobCategoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(JobCategoryService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = JobCategoryService.baseUrl + '/' + x;
            });
        })(JobCategoryService = Enterprise.JobCategoryService || (Enterprise.JobCategoryService = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorForm = /** @class */ (function (_super) {
            __extends(VendorForm, _super);
            function VendorForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VendorForm.formKey = 'Enterprise.Vendor';
            return VendorForm;
        }(Serenity.PrefixedContext));
        Enterprise.VendorForm = VendorForm;
        [['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['VendorGroup', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['PostCode', function () { return Serenity.StringEditor; }],
            ['TelNo', function () { return Serenity.StringEditor; }],
            ['FaxNo', function () { return Serenity.StringEditor; }],
            ['Email', function () { return Serenity.StringEditor; }],
            ['ContactPerson', function () { return Serenity.StringEditor; }],
            ['ContactTitle', function () { return Serenity.StringEditor; }],
            ['AltVendorName', function () { return Serenity.StringEditor; }],
            ['AltAddress', function () { return Serenity.StringEditor; }],
            ['AltAddress2', function () { return Serenity.StringEditor; }],
            ['AltAddress3', function () { return Serenity.StringEditor; }],
            ['AltAddress4', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['UseAltNames', function () { return Serenity.StringEditor; }],
            ['UseAltDesc', function () { return Serenity.StringEditor; }],
            ['OrderCcy', function () { return Serenity.StringEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['BuyerCode', function () { return Serenity.StringEditor; }],
            ['LeadTime', function () { return Serenity.DecimalEditor; }],
            ['PutaxPcent', function () { return Serenity.DecimalEditor; }],
            ['TaxationLv', function () { return Serenity.StringEditor; }],
            ['BankName', function () { return Serenity.StringEditor; }],
            ['BankAcctNo', function () { return Serenity.StringEditor; }],
            ['RefCompanyCode', function () { return Serenity.StringEditor; }],
            ['RefCustomerNo', function () { return Serenity.StringEditor; }],
            ['RefIntegrateComments', function () { return Serenity.BooleanEditor; }],
            ['RefIntegrateAnlys', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VendorForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorGroupForm = /** @class */ (function (_super) {
            __extends(VendorGroupForm, _super);
            function VendorGroupForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VendorGroupForm.formKey = 'Enterprise.VendorGroup';
            return VendorGroupForm;
        }(Serenity.PrefixedContext));
        Enterprise.VendorGroupForm = VendorGroupForm;
        [['VendorGroup', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['UseAltNames', function () { return Serenity.BooleanEditor; }],
            ['OrderCcy', function () { return Serenity.StringEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['TradeDiscount', function () { return Serenity.DecimalEditor; }],
            ['VendorCount', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VendorGroupForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorGroupRow;
        (function (VendorGroupRow) {
            VendorGroupRow.idProperty = 'VendorGroup';
            VendorGroupRow.nameProperty = 'Description';
            VendorGroupRow.localTextPrefix = 'Enterprise.VendorGroup';
            var Fields;
            (function (Fields) {
            })(Fields = VendorGroupRow.Fields || (VendorGroupRow.Fields = {}));
            [
                'Recnum',
                'VendorGroup',
                'Description',
                'Suspended',
                'AcctApVend',
                'AcctApDisc',
                'AcctApAdj',
                'AcctPurTrdisc',
                'GtaxCode',
                'LtaxCode',
                'OrderCcy',
                'PayTerms',
                'UseAltNames',
                'WithCrLimit',
                'CreditLimit',
                'TradeDiscount',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'VendorCount',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ArevisedDate',
                'ArevisedBy',
                'TrevisedDate',
                'TrevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'PutaxPcent',
                'AcctVendPutax',
                'Anlys5',
                'Anlys6',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'AcctTemp',
                'AcctApDeposit'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VendorGroupRow = Enterprise.VendorGroupRow || (Enterprise.VendorGroupRow = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorGroupService;
        (function (VendorGroupService) {
            VendorGroupService.baseUrl = 'Enterprise/VendorGroup';
            var Methods;
            (function (Methods) {
            })(Methods = VendorGroupService.Methods || (VendorGroupService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorGroupService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorGroupService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VendorGroupService.baseUrl + '/' + x;
            });
        })(VendorGroupService = Enterprise.VendorGroupService || (Enterprise.VendorGroupService = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorRow;
        (function (VendorRow) {
            VendorRow.idProperty = 'VendorNo';
            VendorRow.nameProperty = 'VendorName';
            VendorRow.localTextPrefix = 'Enterprise.Vendor';
            VendorRow.lookupKey = 'Enterprise.VendorLookup';
            function getLookup() {
                return Q.getLookup('Enterprise.VendorLookup');
            }
            VendorRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = VendorRow.Fields || (VendorRow.Fields = {}));
            [
                'Recnum',
                'VendorNo',
                'VendorName',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'PostCode',
                'TelNo',
                'FaxNo',
                'Email',
                'Suspended',
                'VendorGroup',
                'OrderCcy',
                'PayTerms',
                'GtaxCode',
                'LtaxCode',
                'AcctApVend',
                'AcctApDisc',
                'AcctApAdj',
                'AcctPurTrdisc',
                'UseAltNames',
                'WithCrLimit',
                'CreditLimit',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'ContactPerson',
                'ContactTitle',
                'TradeDiscount',
                'LeadTime',
                'BankName',
                'BankAcctNo',
                'AltVendorName',
                'AltAddress',
                'AltAddress2',
                'AltAddress3',
                'AltAddress4',
                'WithBacklog',
                'WithBalance',
                'OnOrderCount',
                'InvoAmtBal',
                'OpenAmtBal',
                'NetAmtBal',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ArevisedDate',
                'ArevisedBy',
                'TrevisedDate',
                'TrevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'UseAltDesc',
                'PurPriceCtrl',
                'PurMaxDev',
                'PendAmtOrd',
                'PendAmtInv',
                'BuyerCode',
                'TaxationLv',
                'PutaxPcent',
                'AcctVendPutax',
                'IsApproved',
                'ApprovedBy',
                'Preapprove',
                'ApprovedDate',
                'Anlys5',
                'Anlys6',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'AcctTemp',
                'RefCompanyCode',
                'RefCustomerNo',
                'RefIntegrateComments',
                'RefIntegrateAnlys',
                'TaxTerms',
                'CustomTerms',
                'OverReceiptPcent',
                'AcctApDeposit',
                'VendorGroupRecnum',
                'VendorGroupDescription',
                'VendorGroupSuspended',
                'VendorGroupAcctApVend',
                'VendorGroupAcctApDisc',
                'VendorGroupAcctApAdj',
                'VendorGroupAcctPurTrdisc',
                'VendorGroupGtaxCode',
                'VendorGroupLtaxCode',
                'VendorGroupOrderCcy',
                'VendorGroupPayTerms',
                'VendorGroupUseAltNames',
                'VendorGroupWithCrLimit',
                'VendorGroupCreditLimit',
                'VendorGroupTradeDiscount',
                'VendorGroupAnlys1',
                'VendorGroupAnlys2',
                'VendorGroupAnlys3',
                'VendorGroupAnlys4',
                'VendorGroupVendorCount',
                'VendorGroupCreatedDate',
                'VendorGroupCreatedBy',
                'VendorGroupRevisedDate',
                'VendorGroupRevisedBy',
                'VendorGroupArevisedDate',
                'VendorGroupArevisedBy',
                'VendorGroupTrevisedDate',
                'VendorGroupTrevisedBy',
                'VendorGroupOwnerBranch',
                'VendorGroupSourceBranch',
                'VendorGroupPutaxPcent',
                'VendorGroupAcctVendPutax',
                'VendorGroupAnlys5',
                'VendorGroupAnlys6',
                'VendorGroupAnlys7',
                'VendorGroupAnlys8',
                'VendorGroupAnlys9',
                'VendorGroupAnlys10',
                'VendorGroupAcctTemp',
                'VendorGroupAcctApDeposit'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VendorRow = Enterprise.VendorRow || (Enterprise.VendorRow = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorService;
        (function (VendorService) {
            VendorService.baseUrl = 'Enterprise/Vendor';
            var Methods;
            (function (Methods) {
            })(Methods = VendorService.Methods || (VendorService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VendorService.baseUrl + '/' + x;
            });
        })(VendorService = Enterprise.VendorService || (Enterprise.VendorService = {}));
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var MenuItemRow;
        (function (MenuItemRow) {
            MenuItemRow.idProperty = 'Recnum';
            MenuItemRow.nameProperty = 'UserGroup';
            MenuItemRow.localTextPrefix = 'EnterpriseSys.MenuItem';
            var Fields;
            (function (Fields) {
            })(Fields = MenuItemRow.Fields || (MenuItemRow.Fields = {}));
            [
                'Recnum',
                'UserGroup',
                'ProcessCode',
                'FunctionCode',
                'Description',
                'MenuType',
                'MenuCode',
                'UlRow',
                'UlCol',
                'LrRow',
                'LrCol',
                'ResponseType',
                'PolicyCode',
                'Suspended'
            ].forEach(function (x) { return Fields[x] = x; });
        })(MenuItemRow = EnterpriseSys.MenuItemRow || (EnterpriseSys.MenuItemRow = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var MenuRow;
        (function (MenuRow) {
            MenuRow.idProperty = 'Recnum';
            MenuRow.nameProperty = 'UserGroup';
            MenuRow.localTextPrefix = 'EnterpriseSys.Menu';
            var Fields;
            (function (Fields) {
            })(Fields = MenuRow.Fields || (MenuRow.Fields = {}));
            [
                'Recnum',
                'UserGroup',
                'ProcessCode',
                'Description',
                'Node',
                'MenuCode',
                'MenuLevel',
                'ImageFile',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'CloseIcon',
                'OpenIcon',
                'UserGroupRecnum',
                'UserGroupDescription',
                'UserGroupSuspended',
                'UserGroupCreatedDate',
                'UserGroupCreatedBy',
                'UserGroupRevisedDate',
                'UserGroupRevisedBy',
                'UserGroupOwnerBranch',
                'UserGroupSourceBranch',
                'UserGroupLastModuleNo',
                'UserGroupEmail',
                'UserGroupViewOnly'
            ].forEach(function (x) { return Fields[x] = x; });
        })(MenuRow = EnterpriseSys.MenuRow || (EnterpriseSys.MenuRow = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var MenuTypeRow;
        (function (MenuTypeRow) {
            MenuTypeRow.idProperty = 'Recnum';
            MenuTypeRow.nameProperty = 'UserGroup';
            MenuTypeRow.localTextPrefix = 'EnterpriseSys.MenuType';
            var Fields;
            (function (Fields) {
            })(Fields = MenuTypeRow.Fields || (MenuTypeRow.Fields = {}));
            [
                'Recnum',
                'UserGroup',
                'ProcessCode',
                'MenuType',
                'Description',
                'MenuCode',
                'Suspended',
                'CloseIcon',
                'OpenIcon'
            ].forEach(function (x) { return Fields[x] = x; });
        })(MenuTypeRow = EnterpriseSys.MenuTypeRow || (EnterpriseSys.MenuTypeRow = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogForm = /** @class */ (function (_super) {
            __extends(ReportDialogForm, _super);
            function ReportDialogForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReportDialogForm.formKey = 'EnterpriseSys.ReportDialog';
            return ReportDialogForm;
        }(Serenity.PrefixedContext));
        EnterpriseSys.ReportDialogForm = ReportDialogForm;
        [['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['FilterBySalesmanCode', function () { return Serenity.BooleanEditor; }],
            ['FilterByBuyerCode', function () { return Serenity.BooleanEditor; }],
            ['ReportType', function () { return Serenity.IntegerEditor; }],
            ['DataSource', function () { return Serenity.IntegerEditor; }],
            ['ItemDetailList', function () { return EnterpriseSys.ReportDialogOptionEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ReportDialogForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionForm = /** @class */ (function (_super) {
            __extends(ReportDialogOptionForm, _super);
            function ReportDialogOptionForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReportDialogOptionForm.formKey = 'EnterpriseSys.ReportDialogOption';
            return ReportDialogOptionForm;
        }(Serenity.PrefixedContext));
        EnterpriseSys.ReportDialogOptionForm = ReportDialogOptionForm;
        [['OptionNo', function () { return Serenity.IntegerEditor; }],
            ['SeqNo', function () { return Serenity.IntegerEditor; }],
            ['Caption', function () { return Serenity.StringEditor; }],
            ['FieldName', function () { return Serenity.StringEditor; }],
            ['FieldType', function () { return Serenity.IntegerEditor; }],
            ['Style', function () { return Serenity.IntegerEditor; }],
            ['DataType', function () { return Serenity.IntegerEditor; }],
            ['CapsLock', function () { return Serenity.BooleanEditor; }],
            ['LookupName', function () { return Serenity.StringEditor; }],
            ['LookupFilterName', function () { return Serenity.StringEditor; }],
            ['Required', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ReportDialogOptionForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionItemForm = /** @class */ (function (_super) {
            __extends(ReportDialogOptionItemForm, _super);
            function ReportDialogOptionItemForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReportDialogOptionItemForm.formKey = 'EnterpriseSys.ReportDialogOptionItem';
            return ReportDialogOptionItemForm;
        }(Serenity.PrefixedContext));
        EnterpriseSys.ReportDialogOptionItemForm = ReportDialogOptionItemForm;
        [['OptionNo', function () { return Serenity.IntegerEditor; }],
            ['EntryNo', function () { return Serenity.IntegerEditor; }],
            ['Caption', function () { return Serenity.StringEditor; }],
            ['Value', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ReportDialogOptionItemForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionItemRow;
        (function (ReportDialogOptionItemRow) {
            ReportDialogOptionItemRow.idProperty = 'ReportId';
            ReportDialogOptionItemRow.nameProperty = 'ReportId';
            ReportDialogOptionItemRow.localTextPrefix = 'EnterpriseSys.ReportDialogOptionItem';
            var Fields;
            (function (Fields) {
            })(Fields = ReportDialogOptionItemRow.Fields || (ReportDialogOptionItemRow.Fields = {}));
            [
                'ReportId',
                'OptionNo',
                'EntryNo',
                'Caption',
                'Value'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ReportDialogOptionItemRow = EnterpriseSys.ReportDialogOptionItemRow || (EnterpriseSys.ReportDialogOptionItemRow = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionItemService;
        (function (ReportDialogOptionItemService) {
            ReportDialogOptionItemService.baseUrl = 'EnterpriseSys/ReportDialogOptionItem';
            var Methods;
            (function (Methods) {
            })(Methods = ReportDialogOptionItemService.Methods || (ReportDialogOptionItemService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ReportDialogOptionItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(ReportDialogOptionItemService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ReportDialogOptionItemService.baseUrl + '/' + x;
            });
        })(ReportDialogOptionItemService = EnterpriseSys.ReportDialogOptionItemService || (EnterpriseSys.ReportDialogOptionItemService = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionRow;
        (function (ReportDialogOptionRow) {
            ReportDialogOptionRow.idProperty = 'OptionNo';
            ReportDialogOptionRow.nameProperty = 'Caption';
            ReportDialogOptionRow.localTextPrefix = 'EnterpriseSys.ReportDialogOption';
            var Fields;
            (function (Fields) {
            })(Fields = ReportDialogOptionRow.Fields || (ReportDialogOptionRow.Fields = {}));
            [
                'ReportId',
                'OptionNo',
                'SeqNo',
                'Caption',
                'FieldName',
                'FieldType',
                'Style',
                'DataType',
                'CapsLock',
                'LookupName',
                'LookupFilterName',
                'Required'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ReportDialogOptionRow = EnterpriseSys.ReportDialogOptionRow || (EnterpriseSys.ReportDialogOptionRow = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionService;
        (function (ReportDialogOptionService) {
            ReportDialogOptionService.baseUrl = 'EnterpriseSys/ReportDialogOption';
            var Methods;
            (function (Methods) {
            })(Methods = ReportDialogOptionService.Methods || (ReportDialogOptionService.Methods = {}));
            [
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ReportDialogOptionService[x] = function (r, s, o) {
                    return Q.serviceRequest(ReportDialogOptionService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ReportDialogOptionService.baseUrl + '/' + x;
            });
        })(ReportDialogOptionService = EnterpriseSys.ReportDialogOptionService || (EnterpriseSys.ReportDialogOptionService = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogRow;
        (function (ReportDialogRow) {
            ReportDialogRow.idProperty = 'ReportId';
            ReportDialogRow.nameProperty = 'Description';
            ReportDialogRow.localTextPrefix = 'EnterpriseSys.ReportDialog';
            var Fields;
            (function (Fields) {
            })(Fields = ReportDialogRow.Fields || (ReportDialogRow.Fields = {}));
            [
                'ReportId',
                'Description',
                'Suspended',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'FilterBySalesmanCode',
                'FilterByBuyerCode',
                'ReportType',
                'DataSource',
                'ItemDetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ReportDialogRow = EnterpriseSys.ReportDialogRow || (EnterpriseSys.ReportDialogRow = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogService;
        (function (ReportDialogService) {
            ReportDialogService.baseUrl = 'EnterpriseSys/ReportDialog';
            var Methods;
            (function (Methods) {
            })(Methods = ReportDialogService.Methods || (ReportDialogService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List',
                'ReportDetail',
                'ReportPreview'
            ].forEach(function (x) {
                ReportDialogService[x] = function (r, s, o) {
                    return Q.serviceRequest(ReportDialogService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ReportDialogService.baseUrl + '/' + x;
            });
        })(ReportDialogService = EnterpriseSys.ReportDialogService || (EnterpriseSys.ReportDialogService = {}));
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprisesys;
    (function (Enterprisesys) {
        var SystemFunctionRow;
        (function (SystemFunctionRow) {
            SystemFunctionRow.idProperty = 'FunctionCode';
            SystemFunctionRow.nameProperty = 'Description';
            SystemFunctionRow.localTextPrefix = 'Enterprisesys.SystemFunction';
            var Fields;
            (function (Fields) {
            })(Fields = SystemFunctionRow.Fields || (SystemFunctionRow.Fields = {}));
            [
                'Recnum',
                'ModuleCode',
                'FunctionNo',
                'FunctionCode',
                'Description',
                'Suspended',
                'SeriesOption',
                'SeriesCode',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Icon',
                'File',
                'Page',
                'Attachment',
                'Extension',
                'ModuleCodeRecnum',
                'ModuleCodeDescription',
                'ModuleCodeDesktopBmp',
                'ModuleCodeInstalled',
                'ModuleCodeLastLineNo',
                'ModuleCodeCreatedDate',
                'ModuleCodeCreatedBy',
                'ModuleCodeRevisedDate',
                'ModuleCodeRevisedBy',
                'ModuleCodeOwnerBranch',
                'ModuleCodeSourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(SystemFunctionRow = Enterprisesys.SystemFunctionRow || (Enterprisesys.SystemFunctionRow = {}));
    })(Enterprisesys = Matrix.Enterprisesys || (Matrix.Enterprisesys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationAdjustmentForm = /** @class */ (function (_super) {
            __extends(AccountReconciliationAdjustmentForm, _super);
            function AccountReconciliationAdjustmentForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountReconciliationAdjustmentForm.formKey = 'Finance.AccountReconciliationAdjustment';
            return AccountReconciliationAdjustmentForm;
        }(Serenity.PrefixedContext));
        Finance.AccountReconciliationAdjustmentForm = AccountReconciliationAdjustmentForm;
        [['AdjAcctNo', function () { return Serenity.StringEditor; }],
            ['RefNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['AcctNo', function () { return Serenity.StringEditor; }],
            ['CostCentre', function () { return Serenity.StringEditor; }],
            ['Dept', function () { return Serenity.StringEditor; }],
            ['LineRef', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['Debit', function () { return Serenity.DecimalEditor; }],
            ['Credit', function () { return Serenity.DecimalEditor; }],
            ['CompLdgDebit', function () { return Serenity.DecimalEditor; }],
            ['CompLdgCredit', function () { return Serenity.DecimalEditor; }],
            ['LedgerDebit', function () { return Serenity.DecimalEditor; }],
            ['LedgerCredit', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountReconciliationAdjustmentForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationAdjustmentRow;
        (function (AccountReconciliationAdjustmentRow) {
            AccountReconciliationAdjustmentRow.idProperty = 'Recnum';
            AccountReconciliationAdjustmentRow.nameProperty = 'AdjAcctNo';
            AccountReconciliationAdjustmentRow.localTextPrefix = 'Finance.AccountReconciliationAdjustment';
            var Fields;
            (function (Fields) {
            })(Fields = AccountReconciliationAdjustmentRow.Fields || (AccountReconciliationAdjustmentRow.Fields = {}));
            [
                'Recnum',
                'AdjAcctNo',
                'RefNo',
                'LineNo',
                'AcctNo',
                'CostCentre',
                'Dept',
                'LineRef',
                'Ccy',
                'ExchRate',
                'Debit',
                'Credit',
                'CompLdgDebit',
                'CompLdgCredit',
                'LedgerDebit',
                'LedgerCredit',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'OwnerBranch',
                'SourceBranch',
                'Particulars'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountReconciliationAdjustmentRow = Finance.AccountReconciliationAdjustmentRow || (Finance.AccountReconciliationAdjustmentRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationAdjustmentService;
        (function (AccountReconciliationAdjustmentService) {
            AccountReconciliationAdjustmentService.baseUrl = 'Finance/AccountReconciliationAdjustment';
            var Methods;
            (function (Methods) {
            })(Methods = AccountReconciliationAdjustmentService.Methods || (AccountReconciliationAdjustmentService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountReconciliationAdjustmentService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountReconciliationAdjustmentService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountReconciliationAdjustmentService.baseUrl + '/' + x;
            });
        })(AccountReconciliationAdjustmentService = Finance.AccountReconciliationAdjustmentService || (Finance.AccountReconciliationAdjustmentService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationDetailForm = /** @class */ (function (_super) {
            __extends(AccountReconciliationDetailForm, _super);
            function AccountReconciliationDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountReconciliationDetailForm.formKey = 'Finance.AccountReconciliationDetail';
            return AccountReconciliationDetailForm;
        }(Serenity.PrefixedContext));
        Finance.AccountReconciliationDetailForm = AccountReconciliationDetailForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['RefNo', function () { return Serenity.StringEditor; }],
            ['VoucherDate', function () { return Serenity.DateEditor; }],
            ['JournalNo', function () { return Serenity.DecimalEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['VoucherType', function () { return Serenity.StringEditor; }],
            ['VoucherNo', function () { return Serenity.StringEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['LineRef', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Debit', function () { return Serenity.DecimalEditor; }],
            ['Credit', function () { return Serenity.DecimalEditor; }],
            ['LedgerAmt', function () { return Serenity.DecimalEditor; }],
            ['Sign', function () { return Serenity.StringEditor; }],
            ['IncludeThis', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountReconciliationDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationDetailRow;
        (function (AccountReconciliationDetailRow) {
            AccountReconciliationDetailRow.idProperty = 'Recnum';
            AccountReconciliationDetailRow.nameProperty = 'AcctNo';
            AccountReconciliationDetailRow.localTextPrefix = 'Finance.AccountReconciliationDetail';
            var Fields;
            (function (Fields) {
            })(Fields = AccountReconciliationDetailRow.Fields || (AccountReconciliationDetailRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'RefNo',
                'VoucherDate',
                'JournalNo',
                'LineNo',
                'VoucherType',
                'VoucherNo',
                'Reference',
                'LineRef',
                'Ccy',
                'Debit',
                'Credit',
                'LedgerAmt',
                'Sign',
                'IncludeThis',
                'OwnerBranch',
                'SourceBranch',
                'Particulars'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountReconciliationDetailRow = Finance.AccountReconciliationDetailRow || (Finance.AccountReconciliationDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationDetailService;
        (function (AccountReconciliationDetailService) {
            AccountReconciliationDetailService.baseUrl = 'Finance/AccountReconciliationDetail';
            var Methods;
            (function (Methods) {
            })(Methods = AccountReconciliationDetailService.Methods || (AccountReconciliationDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountReconciliationDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountReconciliationDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountReconciliationDetailService.baseUrl + '/' + x;
            });
        })(AccountReconciliationDetailService = Finance.AccountReconciliationDetailService || (Finance.AccountReconciliationDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationForm = /** @class */ (function (_super) {
            __extends(AccountReconciliationForm, _super);
            function AccountReconciliationForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountReconciliationForm.formKey = 'Finance.AccountReconciliation';
            return AccountReconciliationForm;
        }(Serenity.PrefixedContext));
        Finance.AccountReconciliationForm = AccountReconciliationForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['RefNo', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['AcctName', function () { return Serenity.StringEditor; }],
            ['TranDate', function () { return Serenity.DateEditor; }],
            ['BeginAmt', function () { return Serenity.DecimalEditor; }],
            ['BeginSign', function () { return Serenity.StringEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['AllocDebit', function () { return Serenity.DecimalEditor; }],
            ['AllocCredit', function () { return Serenity.DecimalEditor; }],
            ['AdjustDebit', function () { return Serenity.DecimalEditor; }],
            ['AdjustCredit', function () { return Serenity.DecimalEditor; }],
            ['EndAmt', function () { return Serenity.DecimalEditor; }],
            ['EndSign', function () { return Serenity.StringEditor; }],
            ['EndAllocAmt', function () { return Serenity.DecimalEditor; }],
            ['EndAllocSign', function () { return Serenity.StringEditor; }],
            ['DetailCount', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['CutoffDate', function () { return Serenity.DateEditor; }],
            ['PostedDate', function () { return Serenity.DateEditor; }],
            ['PostedBy', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountReconciliationForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationRow;
        (function (AccountReconciliationRow) {
            AccountReconciliationRow.idProperty = 'Recnum';
            AccountReconciliationRow.nameProperty = 'AcctNo';
            AccountReconciliationRow.localTextPrefix = 'Finance.AccountReconciliation';
            var Fields;
            (function (Fields) {
            })(Fields = AccountReconciliationRow.Fields || (AccountReconciliationRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'RefNo',
                'Posted',
                'AcctName',
                'TranDate',
                'BeginAmt',
                'BeginSign',
                'TotalDebit',
                'TotalCredit',
                'AllocDebit',
                'AllocCredit',
                'AdjustDebit',
                'AdjustCredit',
                'EndAmt',
                'EndSign',
                'EndAllocAmt',
                'EndAllocSign',
                'DetailCount',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'CutoffDate',
                'PostedDate',
                'PostedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountReconciliationRow = Finance.AccountReconciliationRow || (Finance.AccountReconciliationRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationService;
        (function (AccountReconciliationService) {
            AccountReconciliationService.baseUrl = 'Finance/AccountReconciliation';
            var Methods;
            (function (Methods) {
            })(Methods = AccountReconciliationService.Methods || (AccountReconciliationService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountReconciliationService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountReconciliationService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountReconciliationService.baseUrl + '/' + x;
            });
        })(AccountReconciliationService = Finance.AccountReconciliationService || (Finance.AccountReconciliationService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceDetailForm = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceDetailForm, _super);
            function AccountsPayableInvoiceDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayableInvoiceDetailForm.formKey = 'Finance.AccountsPayableInvoiceDetail';
            return AccountsPayableInvoiceDetailForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayableInvoiceDetailForm = AccountsPayableInvoiceDetailForm;
        [['ControlNo', function () { return Serenity.StringEditor; }],
            ['GrnNo', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['Returned', function () { return Serenity.StringEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['Ptax', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['PtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['GrnItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LgrnItemAmt', function () { return Serenity.DecimalEditor; }],
            ['VariaAmt', function () { return Serenity.DecimalEditor; }],
            ['LocVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctPurchase', function () { return Serenity.StringEditor; }],
            ['AcctLdisc', function () { return Serenity.StringEditor; }],
            ['AcctPtax', function () { return Serenity.StringEditor; }],
            ['AcctAtax', function () { return Serenity.StringEditor; }],
            ['AcctVariance', function () { return Serenity.StringEditor; }],
            ['ReturnQty', function () { return Serenity.DecimalEditor; }],
            ['ReturnAmt', function () { return Serenity.DecimalEditor; }],
            ['LreturnAmt', function () { return Serenity.DecimalEditor; }],
            ['PutaxPcent', function () { return Serenity.DecimalEditor; }],
            ['PutaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPutaxAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctPutax', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayableInvoiceDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceDetailRow;
        (function (AccountsPayableInvoiceDetailRow) {
            AccountsPayableInvoiceDetailRow.idProperty = 'Recnum';
            AccountsPayableInvoiceDetailRow.nameProperty = 'ControlNo';
            AccountsPayableInvoiceDetailRow.localTextPrefix = 'Finance.AccountsPayableInvoiceDetail';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayableInvoiceDetailRow.Fields || (AccountsPayableInvoiceDetailRow.Fields = {}));
            [
                'Recnum',
                'ControlNo',
                'GrnNo',
                'EntryNo',
                'Posted',
                'Returned',
                'OrderNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'Qty',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'PriceAmt',
                'PtaxAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'GrnItemAmt',
                'LgrnItemAmt',
                'VariaAmt',
                'LocVariaAmt',
                'AcctPurchase',
                'AcctLdisc',
                'AcctPtax',
                'AcctAtax',
                'AcctVariance',
                'ReturnQty',
                'ReturnAmt',
                'LreturnAmt',
                'PutaxPcent',
                'PutaxAmt',
                'LocPutaxAmt',
                'AcctPutax',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'ControlNoRecnum',
                'ControlNoMiscellaneous',
                'ControlNoPosted',
                'ControlNoClosed',
                'ControlNoReturned',
                'ControlNoVendorNo',
                'ControlNoVendorName',
                'ControlNoInvoiceNo',
                'ControlNoInvoiceDate',
                'ControlNoReceivedDate',
                'ControlNoPeriod',
                'ControlNoFiscalYear',
                'ControlNoPeriodNo',
                'ControlNoPayTerms',
                'ControlNoDiscPercent',
                'ControlNoDiscDays',
                'ControlNoNetDays',
                'ControlNoDiscountDate',
                'ControlNoDueDate',
                'ControlNoPlannedDate',
                'ControlNoPaymentBranch',
                'ControlNoCcy',
                'ControlNoExchRate',
                'ControlNoTotPriceAmt',
                'ControlNoTotPtaxAmt',
                'ControlNoTotExtPrice',
                'ControlNoTotLdiscAmt',
                'ControlNoTotAtaxAmt',
                'ControlNoTotItemAmt',
                'ControlNoTotTdiscAmt',
                'ControlNoNetTradeAmt',
                'ControlNoTotChgsAmt',
                'ControlNoNetOrdrAmt',
                'ControlNoTotGtaxAmt',
                'ControlNoNetInvoAmt',
                'ControlNoDpsApplied',
                'ControlNoNetBalAmt',
                'ControlNoLocPriceAmt',
                'ControlNoLocPtaxAmt',
                'ControlNoLocExtPrice',
                'ControlNoLocLdiscAmt',
                'ControlNoLocAtaxAmt',
                'ControlNoLocItemAmt',
                'ControlNoLocTdiscAmt',
                'ControlNoLocChgsAmt',
                'ControlNoLocGtaxAmt',
                'ControlNoLocInvoAmt',
                'ControlNoLocDpsApplied',
                'ControlNoGrnNetAmt',
                'ControlNoLgrnNetAmt',
                'ControlNoVariaAmt',
                'ControlNoLvariaAmt',
                'ControlNoItemVariaAmt',
                'ControlNoLitemVariaAmt',
                'ControlNoChgsVariaAmt',
                'ControlNoLchgsVariaAmt',
                'ControlNoLastLineNo',
                'ControlNoCreatedDate',
                'ControlNoCreatedBy',
                'ControlNoRevisedDate',
                'ControlNoRevisedBy',
                'ControlNoPostedDate',
                'ControlNoPostedBy',
                'ControlNoHold',
                'ControlNoHoldUntil',
                'ControlNoHoldDate',
                'ControlNoHoldBy',
                'ControlNoAcctVendor',
                'ControlNoAcctTdisc',
                'ControlNoAcctGtax',
                'ControlNoAcctVariance',
                'ControlNoSettledAmt',
                'ControlNoLsettledAmt',
                'ControlNoTermDiscAmt',
                'ControlNoLtermDiscAmt',
                'ControlNoReturnAmt',
                'ControlNoLreturnAmt',
                'ControlNoBalAmt',
                'ControlNoBalAmtLocal',
                'ControlNoOverAllocAmt',
                'ControlNoLoverAllocAmt',
                'ControlNoBatchSelect',
                'ControlNoGlLink',
                'ControlNoGlLinkType',
                'ControlNoGlLinkNo',
                'ControlNoLastLogNo',
                'ControlNoLockType',
                'ControlNoLockRefNo',
                'ControlNoHoldReason',
                'ControlNoOwnerBranch',
                'ControlNoSourceBranch',
                'ControlNoParticulars',
                'ControlNoCheckCrlimit',
                'ControlNoCheckCrbal',
                'ControlNoAcctPutax',
                'ControlNoPutaxType',
                'ControlNoGputaxPcent',
                'ControlNoTotGputaxAmt',
                'ControlNoTotLputaxAmt',
                'ControlNoLocGputaxAmt',
                'ControlNoLocLputaxAmt',
                'ControlNoGrnPutaxType',
                'ControlNoGrnGputaxPcent',
                'ControlNoGrnCount',
                'ControlNoAiLink',
                'ControlNoAiLinkType',
                'ControlNoAiLinkNo',
                'ControlNoAnlys9',
                'ControlNoAnlys10',
                'ControlNoAnlys11',
                'ControlNoAnlys12',
                'ControlNoAnlys13',
                'ControlNoAnlys14',
                'ControlNoAnlys15',
                'ControlNoAnlys16',
                'ControlNoAnlys17',
                'ControlNoAnlys18',
                'ControlNoPoNo',
                'ControlNoOriginCountry'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayableInvoiceDetailRow = Finance.AccountsPayableInvoiceDetailRow || (Finance.AccountsPayableInvoiceDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceDetailService;
        (function (AccountsPayableInvoiceDetailService) {
            AccountsPayableInvoiceDetailService.baseUrl = 'Finance/AccountsPayableInvoiceDetail';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayableInvoiceDetailService.Methods || (AccountsPayableInvoiceDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayableInvoiceDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayableInvoiceDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayableInvoiceDetailService.baseUrl + '/' + x;
            });
        })(AccountsPayableInvoiceDetailService = Finance.AccountsPayableInvoiceDetailService || (Finance.AccountsPayableInvoiceDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceForm = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceForm, _super);
            function AccountsPayableInvoiceForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayableInvoiceForm.formKey = 'Finance.AccountsPayableInvoice';
            return AccountsPayableInvoiceForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayableInvoiceForm = AccountsPayableInvoiceForm;
        [['ControlNo', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['InvoiceDate', function () { return Serenity.DateEditor; }],
            ['ReceivedDate', function () { return Serenity.DateEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['DiscPercent', function () { return Serenity.DecimalEditor; }],
            ['DiscDays', function () { return Serenity.DecimalEditor; }],
            ['NetDays', function () { return Serenity.DecimalEditor; }],
            ['DiscountDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['PlannedDate', function () { return Serenity.DateEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['DetailList', function () { return Finance.AccountsPayableInvoiceOrderEditor; }],
            ['ItemDetailList', function () { return Finance.AccountsPayableInvoiceDetailEditor; }],
            ['Particulars', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayableInvoiceForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceOrderForm = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceOrderForm, _super);
            function AccountsPayableInvoiceOrderForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayableInvoiceOrderForm.formKey = 'Finance.AccountsPayableInvoiceOrder';
            return AccountsPayableInvoiceOrderForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayableInvoiceOrderForm = AccountsPayableInvoiceOrderForm;
        [['ControlNo', function () { return Serenity.StringEditor; }],
            ['GrnNo', function () { return Serenity.StringEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['TotPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotExtPrice', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TotAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetOrdrAmt', function () { return Serenity.DecimalEditor; }],
            ['TotGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetInvoAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsCover', function () { return Serenity.DecimalEditor; }],
            ['DpsPcent', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['LocDpsApplied', function () { return Serenity.DecimalEditor; }],
            ['PutaxType', function () { return Serenity.StringEditor; }],
            ['GputaxPcent', function () { return Serenity.DecimalEditor; }],
            ['TotGputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotLputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['Anlys13', function () { return Serenity.StringEditor; }],
            ['Anlys14', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayableInvoiceOrderForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceOrderRow;
        (function (AccountsPayableInvoiceOrderRow) {
            AccountsPayableInvoiceOrderRow.idProperty = 'Recnum';
            AccountsPayableInvoiceOrderRow.nameProperty = 'ControlNo';
            AccountsPayableInvoiceOrderRow.localTextPrefix = 'Finance.AccountsPayableInvoiceOrder';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayableInvoiceOrderRow.Fields || (AccountsPayableInvoiceOrderRow.Fields = {}));
            [
                'Recnum',
                'ControlNo',
                'GrnNo',
                'OrderNo',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetInvoAmt',
                'DpsCover',
                'DpsPcent',
                'DpsApplied',
                'NetBalAmt',
                'LocDpsApplied',
                'PutaxType',
                'GputaxPcent',
                'TotGputaxAmt',
                'TotLputaxAmt',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'ControlNoRecnum',
                'ControlNoMiscellaneous',
                'ControlNoPosted',
                'ControlNoClosed',
                'ControlNoReturned',
                'ControlNoVendorNo',
                'ControlNoVendorName',
                'ControlNoInvoiceNo',
                'ControlNoInvoiceDate',
                'ControlNoReceivedDate',
                'ControlNoPeriod',
                'ControlNoFiscalYear',
                'ControlNoPeriodNo',
                'ControlNoPayTerms',
                'ControlNoDiscPercent',
                'ControlNoDiscDays',
                'ControlNoNetDays',
                'ControlNoDiscountDate',
                'ControlNoDueDate',
                'ControlNoPlannedDate',
                'ControlNoPaymentBranch',
                'ControlNoCcy',
                'ControlNoExchRate',
                'ControlNoTotPriceAmt',
                'ControlNoTotPtaxAmt',
                'ControlNoTotExtPrice',
                'ControlNoTotLdiscAmt',
                'ControlNoTotAtaxAmt',
                'ControlNoTotItemAmt',
                'ControlNoTotTdiscAmt',
                'ControlNoNetTradeAmt',
                'ControlNoTotChgsAmt',
                'ControlNoNetOrdrAmt',
                'ControlNoTotGtaxAmt',
                'ControlNoNetInvoAmt',
                'ControlNoDpsApplied',
                'ControlNoNetBalAmt',
                'ControlNoLocPriceAmt',
                'ControlNoLocPtaxAmt',
                'ControlNoLocExtPrice',
                'ControlNoLocLdiscAmt',
                'ControlNoLocAtaxAmt',
                'ControlNoLocItemAmt',
                'ControlNoLocTdiscAmt',
                'ControlNoLocChgsAmt',
                'ControlNoLocGtaxAmt',
                'ControlNoLocInvoAmt',
                'ControlNoLocDpsApplied',
                'ControlNoGrnNetAmt',
                'ControlNoLgrnNetAmt',
                'ControlNoVariaAmt',
                'ControlNoLvariaAmt',
                'ControlNoItemVariaAmt',
                'ControlNoLitemVariaAmt',
                'ControlNoChgsVariaAmt',
                'ControlNoLchgsVariaAmt',
                'ControlNoLastLineNo',
                'ControlNoCreatedDate',
                'ControlNoCreatedBy',
                'ControlNoRevisedDate',
                'ControlNoRevisedBy',
                'ControlNoPostedDate',
                'ControlNoPostedBy',
                'ControlNoHold',
                'ControlNoHoldUntil',
                'ControlNoHoldDate',
                'ControlNoHoldBy',
                'ControlNoAcctVendor',
                'ControlNoAcctTdisc',
                'ControlNoAcctGtax',
                'ControlNoAcctVariance',
                'ControlNoSettledAmt',
                'ControlNoLsettledAmt',
                'ControlNoTermDiscAmt',
                'ControlNoLtermDiscAmt',
                'ControlNoReturnAmt',
                'ControlNoLreturnAmt',
                'ControlNoBalAmt',
                'ControlNoBalAmtLocal',
                'ControlNoOverAllocAmt',
                'ControlNoLoverAllocAmt',
                'ControlNoBatchSelect',
                'ControlNoGlLink',
                'ControlNoGlLinkType',
                'ControlNoGlLinkNo',
                'ControlNoLastLogNo',
                'ControlNoLockType',
                'ControlNoLockRefNo',
                'ControlNoHoldReason',
                'ControlNoOwnerBranch',
                'ControlNoSourceBranch',
                'ControlNoParticulars',
                'ControlNoCheckCrlimit',
                'ControlNoCheckCrbal',
                'ControlNoAcctPutax',
                'ControlNoPutaxType',
                'ControlNoGputaxPcent',
                'ControlNoTotGputaxAmt',
                'ControlNoTotLputaxAmt',
                'ControlNoLocGputaxAmt',
                'ControlNoLocLputaxAmt',
                'ControlNoGrnPutaxType',
                'ControlNoGrnGputaxPcent',
                'ControlNoGrnCount',
                'ControlNoAiLink',
                'ControlNoAiLinkType',
                'ControlNoAiLinkNo',
                'ControlNoAnlys9',
                'ControlNoAnlys10',
                'ControlNoAnlys11',
                'ControlNoAnlys12',
                'ControlNoAnlys13',
                'ControlNoAnlys14',
                'ControlNoAnlys15',
                'ControlNoAnlys16',
                'ControlNoAnlys17',
                'ControlNoAnlys18',
                'ControlNoPoNo',
                'ControlNoOriginCountry'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayableInvoiceOrderRow = Finance.AccountsPayableInvoiceOrderRow || (Finance.AccountsPayableInvoiceOrderRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceOrderService;
        (function (AccountsPayableInvoiceOrderService) {
            AccountsPayableInvoiceOrderService.baseUrl = 'Finance/AccountsPayableInvoiceOrder';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayableInvoiceOrderService.Methods || (AccountsPayableInvoiceOrderService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayableInvoiceOrderService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayableInvoiceOrderService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayableInvoiceOrderService.baseUrl + '/' + x;
            });
        })(AccountsPayableInvoiceOrderService = Finance.AccountsPayableInvoiceOrderService || (Finance.AccountsPayableInvoiceOrderService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceRow;
        (function (AccountsPayableInvoiceRow) {
            AccountsPayableInvoiceRow.idProperty = 'ControlNo';
            AccountsPayableInvoiceRow.nameProperty = 'ControlNo';
            AccountsPayableInvoiceRow.localTextPrefix = 'Finance.AccountsPayableInvoice';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayableInvoiceRow.Fields || (AccountsPayableInvoiceRow.Fields = {}));
            [
                'DetailList',
                'ItemDetailList',
                'Recnum',
                'ControlNo',
                'Miscellaneous',
                'Posted',
                'Closed',
                'Returned',
                'VendorNo',
                'VendorName',
                'InvoiceNo',
                'InvoiceDate',
                'ReceivedDate',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'PayTerms',
                'DiscPercent',
                'DiscDays',
                'NetDays',
                'DiscountDate',
                'DueDate',
                'PlannedDate',
                'PaymentBranch',
                'Ccy',
                'ExchRate',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetInvoAmt',
                'DpsApplied',
                'NetBalAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocTdiscAmt',
                'LocChgsAmt',
                'LocGtaxAmt',
                'LocInvoAmt',
                'LocDpsApplied',
                'GrnNetAmt',
                'LgrnNetAmt',
                'VariaAmt',
                'LvariaAmt',
                'ItemVariaAmt',
                'LitemVariaAmt',
                'ChgsVariaAmt',
                'LchgsVariaAmt',
                'LastLineNo',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'Hold',
                'HoldUntil',
                'HoldDate',
                'HoldBy',
                'AcctVendor',
                'AcctTdisc',
                'AcctGtax',
                'AcctVariance',
                'SettledAmt',
                'LsettledAmt',
                'TermDiscAmt',
                'LtermDiscAmt',
                'ReturnAmt',
                'LreturnAmt',
                'BalAmt',
                'BalAmtLocal',
                'OverAllocAmt',
                'LoverAllocAmt',
                'BatchSelect',
                'GlLink',
                'GlLinkType',
                'GlLinkNo',
                'LastLogNo',
                'LockType',
                'LockRefNo',
                'HoldReason',
                'OwnerBranch',
                'SourceBranch',
                'Particulars',
                'CheckCrlimit',
                'CheckCrbal',
                'AcctPutax',
                'PutaxType',
                'GputaxPcent',
                'TotGputaxAmt',
                'TotLputaxAmt',
                'LocGputaxAmt',
                'LocLputaxAmt',
                'GrnPutaxType',
                'GrnGputaxPcent',
                'GrnCount',
                'AiLink',
                'AiLinkType',
                'AiLinkNo',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'PoNo',
                'OriginCountry'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayableInvoiceRow = Finance.AccountsPayableInvoiceRow || (Finance.AccountsPayableInvoiceRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceService;
        (function (AccountsPayableInvoiceService) {
            AccountsPayableInvoiceService.baseUrl = 'Finance/AccountsPayableInvoice';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayableInvoiceService.Methods || (AccountsPayableInvoiceService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayableInvoiceService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayableInvoiceService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayableInvoiceService.baseUrl + '/' + x;
            });
        })(AccountsPayableInvoiceService = Finance.AccountsPayableInvoiceService || (Finance.AccountsPayableInvoiceService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceSummaryForm = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceSummaryForm, _super);
            function AccountsPayableInvoiceSummaryForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayableInvoiceSummaryForm.formKey = 'Finance.AccountsPayableInvoiceSummary';
            return AccountsPayableInvoiceSummaryForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayableInvoiceSummaryForm = AccountsPayableInvoiceSummaryForm;
        [['ControlNo', function () { return Serenity.StringEditor; }],
            ['GrnNo', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['Returned', function () { return Serenity.StringEditor; }],
            ['DoNo', function () { return Serenity.StringEditor; }],
            ['ReceivedDate', function () { return Serenity.DateEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['Inspected', function () { return Serenity.StringEditor; }],
            ['TotPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotExtPrice', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TotAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetOrdrAmt', function () { return Serenity.DecimalEditor; }],
            ['TotGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetInvoAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LocTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['LocGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocInvoAmt', function () { return Serenity.DecimalEditor; }],
            ['LocDpsApplied', function () { return Serenity.DecimalEditor; }],
            ['GrnNetAmt', function () { return Serenity.DecimalEditor; }],
            ['LgrnNetAmt', function () { return Serenity.DecimalEditor; }],
            ['VariaAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['ItemVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['LitemVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['ChgsVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['LchgsVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['PutaxType', function () { return Serenity.StringEditor; }],
            ['GputaxPcent', function () { return Serenity.DecimalEditor; }],
            ['TotGputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotLputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocGputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocLputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['PoPutaxType', function () { return Serenity.StringEditor; }],
            ['PoGputaxPcent', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayableInvoiceSummaryForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceSummaryRow;
        (function (AccountsPayableInvoiceSummaryRow) {
            AccountsPayableInvoiceSummaryRow.idProperty = 'Recnum';
            AccountsPayableInvoiceSummaryRow.nameProperty = 'ControlNo';
            AccountsPayableInvoiceSummaryRow.localTextPrefix = 'Finance.AccountsPayableInvoiceSummary';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayableInvoiceSummaryRow.Fields || (AccountsPayableInvoiceSummaryRow.Fields = {}));
            [
                'Recnum',
                'ControlNo',
                'GrnNo',
                'Posted',
                'Returned',
                'DoNo',
                'ReceivedDate',
                'Loc',
                'Inspected',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetInvoAmt',
                'DpsApplied',
                'NetBalAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocTdiscAmt',
                'LocChgsAmt',
                'LocGtaxAmt',
                'LocInvoAmt',
                'LocDpsApplied',
                'GrnNetAmt',
                'LgrnNetAmt',
                'VariaAmt',
                'LocalVariaAmt',
                'ItemVariaAmt',
                'LitemVariaAmt',
                'ChgsVariaAmt',
                'LchgsVariaAmt',
                'PutaxType',
                'GputaxPcent',
                'TotGputaxAmt',
                'TotLputaxAmt',
                'LocGputaxAmt',
                'LocLputaxAmt',
                'PoPutaxType',
                'PoGputaxPcent',
                'ControlNoRecnum',
                'ControlNoMiscellaneous',
                'ControlNoPosted',
                'ControlNoClosed',
                'ControlNoReturned',
                'ControlNoVendorNo',
                'ControlNoVendorName',
                'ControlNoInvoiceNo',
                'ControlNoInvoiceDate',
                'ControlNoReceivedDate',
                'ControlNoPeriod',
                'ControlNoFiscalYear',
                'ControlNoPeriodNo',
                'ControlNoPayTerms',
                'ControlNoDiscPercent',
                'ControlNoDiscDays',
                'ControlNoNetDays',
                'ControlNoDiscountDate',
                'ControlNoDueDate',
                'ControlNoPlannedDate',
                'ControlNoPaymentBranch',
                'ControlNoCcy',
                'ControlNoExchRate',
                'ControlNoTotPriceAmt',
                'ControlNoTotPtaxAmt',
                'ControlNoTotExtPrice',
                'ControlNoTotLdiscAmt',
                'ControlNoTotAtaxAmt',
                'ControlNoTotItemAmt',
                'ControlNoTotTdiscAmt',
                'ControlNoNetTradeAmt',
                'ControlNoTotChgsAmt',
                'ControlNoNetOrdrAmt',
                'ControlNoTotGtaxAmt',
                'ControlNoNetInvoAmt',
                'ControlNoDpsApplied',
                'ControlNoNetBalAmt',
                'ControlNoLocPriceAmt',
                'ControlNoLocPtaxAmt',
                'ControlNoLocExtPrice',
                'ControlNoLocLdiscAmt',
                'ControlNoLocAtaxAmt',
                'ControlNoLocItemAmt',
                'ControlNoLocTdiscAmt',
                'ControlNoLocChgsAmt',
                'ControlNoLocGtaxAmt',
                'ControlNoLocInvoAmt',
                'ControlNoLocDpsApplied',
                'ControlNoGrnNetAmt',
                'ControlNoLgrnNetAmt',
                'ControlNoVariaAmt',
                'ControlNoLvariaAmt',
                'ControlNoItemVariaAmt',
                'ControlNoLitemVariaAmt',
                'ControlNoChgsVariaAmt',
                'ControlNoLchgsVariaAmt',
                'ControlNoLastLineNo',
                'ControlNoCreatedDate',
                'ControlNoCreatedBy',
                'ControlNoRevisedDate',
                'ControlNoRevisedBy',
                'ControlNoPostedDate',
                'ControlNoPostedBy',
                'ControlNoHold',
                'ControlNoHoldUntil',
                'ControlNoHoldDate',
                'ControlNoHoldBy',
                'ControlNoAcctVendor',
                'ControlNoAcctTdisc',
                'ControlNoAcctGtax',
                'ControlNoAcctVariance',
                'ControlNoSettledAmt',
                'ControlNoLsettledAmt',
                'ControlNoTermDiscAmt',
                'ControlNoLtermDiscAmt',
                'ControlNoReturnAmt',
                'ControlNoLreturnAmt',
                'ControlNoBalAmt',
                'ControlNoBalAmtLocal',
                'ControlNoOverAllocAmt',
                'ControlNoLoverAllocAmt',
                'ControlNoBatchSelect',
                'ControlNoGlLink',
                'ControlNoGlLinkType',
                'ControlNoGlLinkNo',
                'ControlNoLastLogNo',
                'ControlNoLockType',
                'ControlNoLockRefNo',
                'ControlNoHoldReason',
                'ControlNoOwnerBranch',
                'ControlNoSourceBranch',
                'ControlNoParticulars',
                'ControlNoCheckCrlimit',
                'ControlNoCheckCrbal',
                'ControlNoAcctPutax',
                'ControlNoPutaxType',
                'ControlNoGputaxPcent',
                'ControlNoTotGputaxAmt',
                'ControlNoTotLputaxAmt',
                'ControlNoLocGputaxAmt',
                'ControlNoLocLputaxAmt',
                'ControlNoGrnPutaxType',
                'ControlNoGrnGputaxPcent',
                'ControlNoGrnCount',
                'ControlNoAiLink',
                'ControlNoAiLinkType',
                'ControlNoAiLinkNo',
                'ControlNoAnlys9',
                'ControlNoAnlys10',
                'ControlNoAnlys11',
                'ControlNoAnlys12',
                'ControlNoAnlys13',
                'ControlNoAnlys14',
                'ControlNoAnlys15',
                'ControlNoAnlys16',
                'ControlNoAnlys17',
                'ControlNoAnlys18',
                'ControlNoPoNo',
                'ControlNoOriginCountry'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayableInvoiceSummaryRow = Finance.AccountsPayableInvoiceSummaryRow || (Finance.AccountsPayableInvoiceSummaryRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceSummaryService;
        (function (AccountsPayableInvoiceSummaryService) {
            AccountsPayableInvoiceSummaryService.baseUrl = 'Finance/AccountsPayableInvoiceSummary';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayableInvoiceSummaryService.Methods || (AccountsPayableInvoiceSummaryService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayableInvoiceSummaryService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayableInvoiceSummaryService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayableInvoiceSummaryService.baseUrl + '/' + x;
            });
        })(AccountsPayableInvoiceSummaryService = Finance.AccountsPayableInvoiceSummaryService || (Finance.AccountsPayableInvoiceSummaryService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableJournalForm = /** @class */ (function (_super) {
            __extends(AccountsPayableJournalForm, _super);
            function AccountsPayableJournalForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayableJournalForm.formKey = 'Finance.AccountsPayableJournal';
            return AccountsPayableJournalForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayableJournalForm = AccountsPayableJournalForm;
        [['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['TranDate', function () { return Serenity.DateEditor; }],
            ['TranType', function () { return Serenity.StringEditor; }],
            ['RefNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['TotalAmt', function () { return Serenity.DecimalEditor; }],
            ['Credit', function () { return Serenity.DecimalEditor; }],
            ['Debit', function () { return Serenity.DecimalEditor; }],
            ['LocalCredit', function () { return Serenity.DecimalEditor; }],
            ['LocalDebit', function () { return Serenity.DecimalEditor; }],
            ['LocalBalance', function () { return Serenity.DecimalEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayableJournalForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableJournalRow;
        (function (AccountsPayableJournalRow) {
            AccountsPayableJournalRow.idProperty = 'Recnum';
            AccountsPayableJournalRow.nameProperty = 'VendorNo';
            AccountsPayableJournalRow.localTextPrefix = 'Finance.AccountsPayableJournal';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayableJournalRow.Fields || (AccountsPayableJournalRow.Fields = {}));
            [
                'Recnum',
                'EntryNo',
                'VendorNo',
                'Period',
                'TranDate',
                'TranType',
                'RefNo',
                'Ccy',
                'ExchRate',
                'TotalAmt',
                'Credit',
                'Debit',
                'LocalCredit',
                'LocalDebit',
                'LocalBalance',
                'Particulars'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayableJournalRow = Finance.AccountsPayableJournalRow || (Finance.AccountsPayableJournalRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableJournalService;
        (function (AccountsPayableJournalService) {
            AccountsPayableJournalService.baseUrl = 'Finance/AccountsPayableJournal';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayableJournalService.Methods || (AccountsPayableJournalService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayableJournalService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayableJournalService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayableJournalService.baseUrl + '/' + x;
            });
        })(AccountsPayableJournalService = Finance.AccountsPayableJournalService || (Finance.AccountsPayableJournalService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableLedgerForm = /** @class */ (function (_super) {
            __extends(AccountsPayableLedgerForm, _super);
            function AccountsPayableLedgerForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayableLedgerForm.formKey = 'Finance.AccountsPayableLedger';
            return AccountsPayableLedgerForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayableLedgerForm = AccountsPayableLedgerForm;
        [['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['Summary', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['VendorNo2', function () { return Serenity.StringEditor; }],
            ['Ccy2', function () { return Serenity.StringEditor; }],
            ['FiscalYear', function () { return Serenity.DecimalEditor; }],
            ['PeriodNo', function () { return Serenity.DecimalEditor; }],
            ['InvoAmt', function () { return Serenity.DecimalEditor; }],
            ['MemoAmt', function () { return Serenity.DecimalEditor; }],
            ['AdjAmt', function () { return Serenity.DecimalEditor; }],
            ['PayAmt', function () { return Serenity.DecimalEditor; }],
            ['DiscAmt', function () { return Serenity.DecimalEditor; }],
            ['DiffAmt', function () { return Serenity.DecimalEditor; }],
            ['BalBeg', function () { return Serenity.DecimalEditor; }],
            ['Credit', function () { return Serenity.DecimalEditor; }],
            ['Debit', function () { return Serenity.DecimalEditor; }],
            ['BalEnd', function () { return Serenity.DecimalEditor; }],
            ['LocalInvoAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalMemoAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalAdjAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalPayAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalDiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalDiffAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalBalBeg', function () { return Serenity.DecimalEditor; }],
            ['LocalCredit', function () { return Serenity.DecimalEditor; }],
            ['LocalDebit', function () { return Serenity.DecimalEditor; }],
            ['LocalBalEnd', function () { return Serenity.DecimalEditor; }],
            ['RfdAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalRfdAmt', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayableLedgerForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableLedgerRow;
        (function (AccountsPayableLedgerRow) {
            AccountsPayableLedgerRow.idProperty = 'Recnum';
            AccountsPayableLedgerRow.nameProperty = 'VendorNo';
            AccountsPayableLedgerRow.localTextPrefix = 'Finance.AccountsPayableLedger';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayableLedgerRow.Fields || (AccountsPayableLedgerRow.Fields = {}));
            [
                'Recnum',
                'VendorNo',
                'VendorName',
                'Summary',
                'Ccy',
                'Period',
                'VendorNo2',
                'Ccy2',
                'FiscalYear',
                'PeriodNo',
                'InvoAmt',
                'MemoAmt',
                'AdjAmt',
                'PayAmt',
                'DiscAmt',
                'DiffAmt',
                'BalBeg',
                'Credit',
                'Debit',
                'BalEnd',
                'LocalInvoAmt',
                'LocalMemoAmt',
                'LocalAdjAmt',
                'LocalPayAmt',
                'LocalDiscAmt',
                'LocalDiffAmt',
                'LocalBalBeg',
                'LocalCredit',
                'LocalDebit',
                'LocalBalEnd',
                'RfdAmt',
                'LocalRfdAmt'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayableLedgerRow = Finance.AccountsPayableLedgerRow || (Finance.AccountsPayableLedgerRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableLedgerService;
        (function (AccountsPayableLedgerService) {
            AccountsPayableLedgerService.baseUrl = 'Finance/AccountsPayableLedger';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayableLedgerService.Methods || (AccountsPayableLedgerService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayableLedgerService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayableLedgerService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayableLedgerService.baseUrl + '/' + x;
            });
        })(AccountsPayableLedgerService = Finance.AccountsPayableLedgerService || (Finance.AccountsPayableLedgerService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentCurrencyForm = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentCurrencyForm, _super);
            function AccountsPayablePaymentCurrencyForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayablePaymentCurrencyForm.formKey = 'Finance.AccountsPayablePaymentCurrency';
            return AccountsPayablePaymentCurrencyForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayablePaymentCurrencyForm = AccountsPayablePaymentCurrencyForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayablePaymentCurrencyForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentCurrencyRow;
        (function (AccountsPayablePaymentCurrencyRow) {
            AccountsPayablePaymentCurrencyRow.idProperty = 'Recnum';
            AccountsPayablePaymentCurrencyRow.nameProperty = 'RefNo';
            AccountsPayablePaymentCurrencyRow.localTextPrefix = 'Finance.AccountsPayablePaymentCurrency';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayablePaymentCurrencyRow.Fields || (AccountsPayablePaymentCurrencyRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'Ccy',
                'Description',
                'ExchRate',
                'BalAmt',
                'RevisedDate',
                'RevisedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayablePaymentCurrencyRow = Finance.AccountsPayablePaymentCurrencyRow || (Finance.AccountsPayablePaymentCurrencyRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentCurrencyService;
        (function (AccountsPayablePaymentCurrencyService) {
            AccountsPayablePaymentCurrencyService.baseUrl = 'Finance/AccountsPayablePaymentCurrency';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayablePaymentCurrencyService.Methods || (AccountsPayablePaymentCurrencyService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayablePaymentCurrencyService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayablePaymentCurrencyService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayablePaymentCurrencyService.baseUrl + '/' + x;
            });
        })(AccountsPayablePaymentCurrencyService = Finance.AccountsPayablePaymentCurrencyService || (Finance.AccountsPayablePaymentCurrencyService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentDetailForm = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentDetailForm, _super);
            function AccountsPayablePaymentDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayablePaymentDetailForm.formKey = 'Finance.AccountsPayablePaymentDetail';
            return AccountsPayablePaymentDetailForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayablePaymentDetailForm = AccountsPayablePaymentDetailForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['InvoCtrlNo', function () { return Serenity.StringEditor; }],
            ['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['InvoiceDate', function () { return Serenity.DateEditor; }],
            ['DiscountDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['DiscPercent', function () { return Serenity.DecimalEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['InvoExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayExchRate', function () { return Serenity.DecimalEditor; }],
            ['Settle', function () { return Serenity.StringEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['BalAmtInvo', function () { return Serenity.DecimalEditor; }],
            ['DiscAmt', function () { return Serenity.DecimalEditor; }],
            ['DiscAmtInvo', function () { return Serenity.DecimalEditor; }],
            ['DueAmt', function () { return Serenity.DecimalEditor; }],
            ['DueAmtInvo', function () { return Serenity.DecimalEditor; }],
            ['DueAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['AppliedAmt', function () { return Serenity.DecimalEditor; }],
            ['AppliedAmtLoc', function () { return Serenity.DecimalEditor; }],
            ['SettledAmt', function () { return Serenity.DecimalEditor; }],
            ['ForexGainAmt', function () { return Serenity.DecimalEditor; }],
            ['EndAmt', function () { return Serenity.DecimalEditor; }],
            ['EndAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['LastLogNo', function () { return Serenity.DecimalEditor; }],
            ['PaidDate', function () { return Serenity.DateEditor; }],
            ['AppliedAmtInv', function () { return Serenity.DecimalEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['InvRoundDiff', function () { return Serenity.DecimalEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayablePaymentDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentDetailRow;
        (function (AccountsPayablePaymentDetailRow) {
            AccountsPayablePaymentDetailRow.idProperty = 'Recnum';
            AccountsPayablePaymentDetailRow.nameProperty = 'RefNo';
            AccountsPayablePaymentDetailRow.localTextPrefix = 'Finance.AccountsPayablePaymentDetail';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayablePaymentDetailRow.Fields || (AccountsPayablePaymentDetailRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'InvoCtrlNo',
                'InvoiceNo',
                'InvoiceDate',
                'DiscountDate',
                'DueDate',
                'DiscPercent',
                'Ccy',
                'InvoExchRate',
                'PayExchRate',
                'Settle',
                'BalAmt',
                'BalAmtInvo',
                'DiscAmt',
                'DiscAmtInvo',
                'DueAmt',
                'DueAmtInvo',
                'DueAmtLocal',
                'AppliedAmt',
                'AppliedAmtLoc',
                'SettledAmt',
                'ForexGainAmt',
                'EndAmt',
                'EndAmtLocal',
                'Posted',
                'LogNo',
                'LastLogNo',
                'PaidDate',
                'AppliedAmtInv',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'InvRoundDiff',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'RefNoRecnum',
                'RefNoDeposit',
                'RefNoPosted',
                'RefNoVendorNo',
                'RefNoVendorName',
                'RefNoOrderNo',
                'RefNoPaidDate',
                'RefNoPeriod',
                'RefNoFiscalYear',
                'RefNoPeriodNo',
                'RefNoFundCode',
                'RefNoPayee',
                'RefNoChequeNo',
                'RefNoCcy',
                'RefNoExchRate',
                'RefNoSameCurrency',
                'RefNoPaidAmt',
                'RefNoPaidAmtLocal',
                'RefNoBalAmt',
                'RefNoDiscAmt',
                'RefNoDueAmt',
                'RefNoDueAmtLocal',
                'RefNoAppliedAmt',
                'RefNoAppliedAmtLoc',
                'RefNoSettledAmt',
                'RefNoForexGainAmt',
                'RefNoEndAmt',
                'RefNoEndAmtLocal',
                'RefNoUnusedAmt',
                'RefNoUnusedAmtLoc',
                'RefNoAppliedLocCpd',
                'RefNoRoundDiff',
                'RefNoCreatedDate',
                'RefNoCreatedBy',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoPostedDate',
                'RefNoPostedBy',
                'RefNoAcctVendor',
                'RefNoAcctCash',
                'RefNoAcctForexDiff',
                'RefNoAcctTermDisc',
                'RefNoAcctRoundDiff',
                'RefNoBatchSelect',
                'RefNoGlLink',
                'RefNoGlLinkType',
                'RefNoGlLinkNo',
                'RefNoFixedCcy',
                'RefNoDefaultCcy',
                'RefNoPaidLocalCpd',
                'RefNoOwnerBranch',
                'RefNoSourceBranch',
                'RefNoCanEdit',
                'RefNoDiscAmtInvo',
                'RefNoTotalDebit',
                'RefNoTotalCredit',
                'RefNoLastAdjCount',
                'RefNoCcyInv',
                'RefNoExchRateInv',
                'RefNoAppliedAmtInv',
                'RefNoBankAmt',
                'RefNoAnlys1',
                'RefNoAnlys2',
                'RefNoAnlys7',
                'RefNoAnlys8',
                'RefNoRemarks',
                'RefNoToOpen',
                'RefNoToRound',
                'RefNoGbvendInvoAmtDiff',
                'RefNoGbvendOpenAmtDiff',
                'RefNoApledgTotalDebit',
                'RefNoApledgTotalCredit',
                'RefNoAllowCancel',
                'RefNoChargeAmt',
                'RefNoChargeAmtLocal',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14',
                'RefNoAcctDeposit',
                'InvoCtrlNoRecnum',
                'InvoCtrlNoMiscellaneous',
                'InvoCtrlNoPosted',
                'InvoCtrlNoClosed',
                'InvoCtrlNoReturned',
                'InvoCtrlNoVendorNo',
                'InvoCtrlNoVendorName',
                'InvoCtrlNoInvoiceNo',
                'InvoCtrlNoInvoiceDate',
                'InvoCtrlNoReceivedDate',
                'InvoCtrlNoPeriod',
                'InvoCtrlNoFiscalYear',
                'InvoCtrlNoPeriodNo',
                'InvoCtrlNoPayTerms',
                'InvoCtrlNoDiscPercent',
                'InvoCtrlNoDiscDays',
                'InvoCtrlNoNetDays',
                'InvoCtrlNoDiscountDate',
                'InvoCtrlNoDueDate',
                'InvoCtrlNoPlannedDate',
                'InvoCtrlNoPaymentBranch',
                'InvoCtrlNoCcy',
                'InvoCtrlNoExchRate',
                'InvoCtrlNoTotPriceAmt',
                'InvoCtrlNoTotPtaxAmt',
                'InvoCtrlNoTotExtPrice',
                'InvoCtrlNoTotLdiscAmt',
                'InvoCtrlNoTotAtaxAmt',
                'InvoCtrlNoTotItemAmt',
                'InvoCtrlNoTotTdiscAmt',
                'InvoCtrlNoNetTradeAmt',
                'InvoCtrlNoTotChgsAmt',
                'InvoCtrlNoNetOrdrAmt',
                'InvoCtrlNoTotGtaxAmt',
                'InvoCtrlNoNetInvoAmt',
                'InvoCtrlNoDpsApplied',
                'InvoCtrlNoNetBalAmt',
                'InvoCtrlNoLocPriceAmt',
                'InvoCtrlNoLocPtaxAmt',
                'InvoCtrlNoLocExtPrice',
                'InvoCtrlNoLocLdiscAmt',
                'InvoCtrlNoLocAtaxAmt',
                'InvoCtrlNoLocItemAmt',
                'InvoCtrlNoLocTdiscAmt',
                'InvoCtrlNoLocChgsAmt',
                'InvoCtrlNoLocGtaxAmt',
                'InvoCtrlNoLocInvoAmt',
                'InvoCtrlNoLocDpsApplied',
                'InvoCtrlNoGrnNetAmt',
                'InvoCtrlNoLgrnNetAmt',
                'InvoCtrlNoVariaAmt',
                'InvoCtrlNoLvariaAmt',
                'InvoCtrlNoItemVariaAmt',
                'InvoCtrlNoLitemVariaAmt',
                'InvoCtrlNoChgsVariaAmt',
                'InvoCtrlNoLchgsVariaAmt',
                'InvoCtrlNoLastLineNo',
                'InvoCtrlNoCreatedDate',
                'InvoCtrlNoCreatedBy',
                'InvoCtrlNoRevisedDate',
                'InvoCtrlNoRevisedBy',
                'InvoCtrlNoPostedDate',
                'InvoCtrlNoPostedBy',
                'InvoCtrlNoHold',
                'InvoCtrlNoHoldUntil',
                'InvoCtrlNoHoldDate',
                'InvoCtrlNoHoldBy',
                'InvoCtrlNoAcctVendor',
                'InvoCtrlNoAcctTdisc',
                'InvoCtrlNoAcctGtax',
                'InvoCtrlNoAcctVariance',
                'InvoCtrlNoSettledAmt',
                'InvoCtrlNoLsettledAmt',
                'InvoCtrlNoTermDiscAmt',
                'InvoCtrlNoLtermDiscAmt',
                'InvoCtrlNoReturnAmt',
                'InvoCtrlNoLreturnAmt',
                'InvoCtrlNoBalAmt',
                'InvoCtrlNoBalAmtLocal',
                'InvoCtrlNoOverAllocAmt',
                'InvoCtrlNoLoverAllocAmt',
                'InvoCtrlNoBatchSelect',
                'InvoCtrlNoGlLink',
                'InvoCtrlNoGlLinkType',
                'InvoCtrlNoGlLinkNo',
                'InvoCtrlNoLastLogNo',
                'InvoCtrlNoLockType',
                'InvoCtrlNoLockRefNo',
                'InvoCtrlNoHoldReason',
                'InvoCtrlNoOwnerBranch',
                'InvoCtrlNoSourceBranch',
                'InvoCtrlNoParticulars',
                'InvoCtrlNoCheckCrlimit',
                'InvoCtrlNoCheckCrbal',
                'InvoCtrlNoAcctPutax',
                'InvoCtrlNoPutaxType',
                'InvoCtrlNoGputaxPcent',
                'InvoCtrlNoTotGputaxAmt',
                'InvoCtrlNoTotLputaxAmt',
                'InvoCtrlNoLocGputaxAmt',
                'InvoCtrlNoLocLputaxAmt',
                'InvoCtrlNoGrnPutaxType',
                'InvoCtrlNoGrnGputaxPcent',
                'InvoCtrlNoGrnCount',
                'InvoCtrlNoAiLink',
                'InvoCtrlNoAiLinkType',
                'InvoCtrlNoAiLinkNo',
                'InvoCtrlNoAnlys9',
                'InvoCtrlNoAnlys10',
                'InvoCtrlNoAnlys11',
                'InvoCtrlNoAnlys12',
                'InvoCtrlNoAnlys13',
                'InvoCtrlNoAnlys14',
                'InvoCtrlNoAnlys15',
                'InvoCtrlNoAnlys16',
                'InvoCtrlNoAnlys17',
                'InvoCtrlNoAnlys18',
                'InvoCtrlNoPoNo',
                'InvoCtrlNoOriginCountry'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayablePaymentDetailRow = Finance.AccountsPayablePaymentDetailRow || (Finance.AccountsPayablePaymentDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentDetailService;
        (function (AccountsPayablePaymentDetailService) {
            AccountsPayablePaymentDetailService.baseUrl = 'Finance/AccountsPayablePaymentDetail';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayablePaymentDetailService.Methods || (AccountsPayablePaymentDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayablePaymentDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayablePaymentDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayablePaymentDetailService.baseUrl + '/' + x;
            });
        })(AccountsPayablePaymentDetailService = Finance.AccountsPayablePaymentDetailService || (Finance.AccountsPayablePaymentDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentForm = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentForm, _super);
            function AccountsPayablePaymentForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsPayablePaymentForm.formKey = 'Finance.AccountsPayablePayment';
            return AccountsPayablePaymentForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsPayablePaymentForm = AccountsPayablePaymentForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['FundCode', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PaidAmt', function () { return Serenity.DecimalEditor; }],
            ['DetailList', function () { return Finance.AccountsPayablePaymentDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsPayablePaymentForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentRow;
        (function (AccountsPayablePaymentRow) {
            AccountsPayablePaymentRow.idProperty = 'RefNo';
            AccountsPayablePaymentRow.nameProperty = 'RefNo';
            AccountsPayablePaymentRow.localTextPrefix = 'Finance.AccountsPayablePayment';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsPayablePaymentRow.Fields || (AccountsPayablePaymentRow.Fields = {}));
            [
                'DetailList',
                'Recnum',
                'RefNo',
                'Deposit',
                'Posted',
                'VendorNo',
                'VendorName',
                'OrderNo',
                'PaidDate',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'FundCode',
                'Payee',
                'ChequeNo',
                'Ccy',
                'ExchRate',
                'SameCurrency',
                'PaidAmt',
                'PaidAmtLocal',
                'BalAmt',
                'DiscAmt',
                'DueAmt',
                'DueAmtLocal',
                'AppliedAmt',
                'AppliedAmtLoc',
                'SettledAmt',
                'ForexGainAmt',
                'EndAmt',
                'EndAmtLocal',
                'UnusedAmt',
                'UnusedAmtLoc',
                'AppliedLocCpd',
                'RoundDiff',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'AcctVendor',
                'AcctCash',
                'AcctForexDiff',
                'AcctTermDisc',
                'AcctRoundDiff',
                'BatchSelect',
                'GlLink',
                'GlLinkType',
                'GlLinkNo',
                'FixedCcy',
                'DefaultCcy',
                'PaidLocalCpd',
                'OwnerBranch',
                'SourceBranch',
                'CanEdit',
                'DiscAmtInvo',
                'TotalDebit',
                'TotalCredit',
                'LastAdjCount',
                'CcyInv',
                'ExchRateInv',
                'AppliedAmtInv',
                'BankAmt',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'Remarks',
                'ToOpen',
                'ToRound',
                'GbvendInvoAmtDiff',
                'GbvendOpenAmtDiff',
                'ApledgTotalDebit',
                'ApledgTotalCredit',
                'AllowCancel',
                'ChargeAmt',
                'ChargeAmtLocal',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'AcctDeposit'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsPayablePaymentRow = Finance.AccountsPayablePaymentRow || (Finance.AccountsPayablePaymentRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentService;
        (function (AccountsPayablePaymentService) {
            AccountsPayablePaymentService.baseUrl = 'Finance/AccountsPayablePayment';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsPayablePaymentService.Methods || (AccountsPayablePaymentService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsPayablePaymentService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsPayablePaymentService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsPayablePaymentService.baseUrl + '/' + x;
            });
        })(AccountsPayablePaymentService = Finance.AccountsPayablePaymentService || (Finance.AccountsPayablePaymentService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableCommissionForm = /** @class */ (function (_super) {
            __extends(AccountsReceivableCommissionForm, _super);
            function AccountsReceivableCommissionForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivableCommissionForm.formKey = 'Finance.AccountsReceivableCommission';
            return AccountsReceivableCommissionForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivableCommissionForm = AccountsReceivableCommissionForm;
        [['Salesman', function () { return Serenity.StringEditor; }],
            ['SalesmanName', function () { return Serenity.StringEditor; }],
            ['Rate', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivableCommissionForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableCommissionRow;
        (function (AccountsReceivableCommissionRow) {
            AccountsReceivableCommissionRow.idProperty = 'InvoiceNo';
            AccountsReceivableCommissionRow.nameProperty = 'InvoiceNo';
            AccountsReceivableCommissionRow.localTextPrefix = 'Finance.AccountsReceivableCommission';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivableCommissionRow.Fields || (AccountsReceivableCommissionRow.Fields = {}));
            [
                'InvoiceNo',
                'Salesman',
                'SalesmanName',
                'Rate',
                'InvoiceNoRecnum',
                'InvoiceNoDirectEntry',
                'InvoiceNoPosted',
                'InvoiceNoClosed',
                'InvoiceNoReturned',
                'InvoiceNoDebitNote',
                'InvoiceNoCustomerNo',
                'InvoiceNoCustomerName',
                'InvoiceNoAddress',
                'InvoiceNoAddress2',
                'InvoiceNoAddress3',
                'InvoiceNoAddress4',
                'InvoiceNoAttention',
                'InvoiceNoInvoiceDate',
                'InvoiceNoPeriod',
                'InvoiceNoFiscalYear',
                'InvoiceNoPeriodNo',
                'InvoiceNoSalesman',
                'InvoiceNoCcy',
                'InvoiceNoExchRate',
                'InvoiceNoPayTerms',
                'InvoiceNoDiscDays',
                'InvoiceNoDiscPcent',
                'InvoiceNoDueDays',
                'InvoiceNoDiscountDate',
                'InvoiceNoDueDate',
                'InvoiceNoExpectedDate',
                'InvoiceNoAnlys1',
                'InvoiceNoAnlys2',
                'InvoiceNoTotPriceAmt',
                'InvoiceNoLocPriceAmt',
                'InvoiceNoTotPtaxAmt',
                'InvoiceNoLocPtaxAmt',
                'InvoiceNoTotExtPrice',
                'InvoiceNoLocExtPrice',
                'InvoiceNoTotLdiscAmt',
                'InvoiceNoLocLdiscAmt',
                'InvoiceNoTotAtaxAmt',
                'InvoiceNoLocAtaxAmt',
                'InvoiceNoTotItemAmt',
                'InvoiceNoLocItemAmt',
                'InvoiceNoTdiscPcent',
                'InvoiceNoTdiscAmt',
                'InvoiceNoLocalTdiscAmt',
                'InvoiceNoChgsAmt',
                'InvoiceNoLocChgsAmt',
                'InvoiceNoGtaxAmt',
                'InvoiceNoLocalGtaxAmt',
                'InvoiceNoNetAmt',
                'InvoiceNoLocalNetAmt',
                'InvoiceNoTdiscAmtCpd',
                'InvoiceNoLastLineNo',
                'InvoiceNoCreatedDate',
                'InvoiceNoCreatedBy',
                'InvoiceNoRevisedDate',
                'InvoiceNoRevisedBy',
                'InvoiceNoPostedDate',
                'InvoiceNoPostedBy',
                'InvoiceNoLastLogNo',
                'InvoiceNoSettledAmt',
                'InvoiceNoLsettledAmt',
                'InvoiceNoTermDiscAmt',
                'InvoiceNoLtermDiscAmt',
                'InvoiceNoReturnAmt',
                'InvoiceNoLreturnAmt',
                'InvoiceNoBalAmt',
                'InvoiceNoBalAmtLocal',
                'InvoiceNoOverAllocAmt',
                'InvoiceNoLoverAllocAmt',
                'InvoiceNoAcctCustomer',
                'InvoiceNoAcctTdisc',
                'InvoiceNoAcctGtax',
                'InvoiceNoLockType',
                'InvoiceNoLockRefNo',
                'InvoiceNoBatchSelect',
                'InvoiceNoGlLink',
                'InvoiceNoGlLinkType',
                'InvoiceNoGlLinkNo',
                'InvoiceNoOwnerBranch',
                'InvoiceNoSourceBranch',
                'InvoiceNoCheckCrlimit',
                'InvoiceNoCheckCrbal',
                'InvoiceNoComments1',
                'InvoiceNoComments2',
                'InvoiceNoComments3',
                'InvoiceNoComments4',
                'InvoiceNoLastTextNo',
                'InvoiceNoShipTo',
                'InvoiceNoTelNo',
                'InvoiceNoFaxNo',
                'InvoiceNoSltaxType',
                'InvoiceNoGsltaxPcent',
                'InvoiceNoTotGsltaxAmt',
                'InvoiceNoTotLsltaxAmt',
                'InvoiceNoLocGsltaxAmt',
                'InvoiceNoLocLsltaxAmt',
                'InvoiceNoAcctSltax',
                'InvoiceNoCustomerPo',
                'InvoiceNoAiLink',
                'InvoiceNoAiLinkType',
                'InvoiceNoAiLinkNo',
                'InvoiceNoAnlys7',
                'InvoiceNoAnlys8',
                'InvoiceNoNetTradeAmt',
                'InvoiceNoNetOrdrAmt',
                'InvoiceNoShipAmt',
                'InvoiceNoLshipAmt',
                'InvoiceNoVariaAmt',
                'InvoiceNoLvariaAmt',
                'InvoiceNoItemVariaAmt',
                'InvoiceNoLitemVariaAmt',
                'InvoiceNoChgsVariaAmt',
                'InvoiceNoLchgsVariaAmt',
                'InvoiceNoDpsApplied',
                'InvoiceNoLocDpsApplied',
                'InvoiceNoShipSltaxType',
                'InvoiceNoShipGsltaxPcent',
                'InvoiceNoShipCount',
                'InvoiceNoSourceType',
                'InvoiceNoLastChgsNo',
                'InvoiceNoDocType',
                'InvoiceNoDocId',
                'InvoiceNoAnlys9',
                'InvoiceNoAnlys10',
                'InvoiceNoAnlys11',
                'InvoiceNoAnlys12',
                'InvoiceNoAnlys13',
                'InvoiceNoAnlys14',
                'InvoiceNoBreakDebitNote',
                'InvoiceNoFreezed',
                'InvoiceNoRelatedDebitNote',
                'InvoiceNoCloned',
                'InvoiceNoClonedCompanyCode',
                'InvoiceNoUseSampleAcct',
                'InvoiceNoReferenceDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivableCommissionRow = Finance.AccountsReceivableCommissionRow || (Finance.AccountsReceivableCommissionRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableCommissionService;
        (function (AccountsReceivableCommissionService) {
            AccountsReceivableCommissionService.baseUrl = 'Finance/AccountsReceivableCommission';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivableCommissionService.Methods || (AccountsReceivableCommissionService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivableCommissionService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivableCommissionService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivableCommissionService.baseUrl + '/' + x;
            });
        })(AccountsReceivableCommissionService = Finance.AccountsReceivableCommissionService || (Finance.AccountsReceivableCommissionService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceDetailForm = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceDetailForm, _super);
            function AccountsReceivableInvoiceDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivableInvoiceDetailForm.formKey = 'Finance.AccountsReceivableInvoiceDetail';
            return AccountsReceivableInvoiceDetailForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivableInvoiceDetailForm = AccountsReceivableInvoiceDetailForm;
        [['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['Returned', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['PriceCpd', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['ReturnQty', function () { return Serenity.DecimalEditor; }],
            ['ReturnAmt', function () { return Serenity.DecimalEditor; }],
            ['LreturnAmt', function () { return Serenity.DecimalEditor; }],
            ['InvoiceDate', function () { return Serenity.DateEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['AcctSales', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['ExtDescription', function () { return Serenity.StringEditor; }],
            ['SltaxPcent', function () { return Serenity.DecimalEditor; }],
            ['SltaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocSltaxAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctSltax', function () { return Serenity.StringEditor; }],
            ['ShipmentRef', function () { return Serenity.StringEditor; }],
            ['ShipmentEntryNo', function () { return Serenity.DecimalEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['OrderLineNo', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['AcctLdisc', function () { return Serenity.StringEditor; }],
            ['ShipItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LshipItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctVariance', function () { return Serenity.StringEditor; }],
            ['VariaAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivableInvoiceDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceDetailRow;
        (function (AccountsReceivableInvoiceDetailRow) {
            AccountsReceivableInvoiceDetailRow.idProperty = 'Recnum';
            AccountsReceivableInvoiceDetailRow.nameProperty = 'InvoiceNo';
            AccountsReceivableInvoiceDetailRow.localTextPrefix = 'Finance.AccountsReceivableInvoiceDetail';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivableInvoiceDetailRow.Fields || (AccountsReceivableInvoiceDetailRow.Fields = {}));
            [
                'Recnum',
                'InvoiceNo',
                'LineNo',
                'ItemNo',
                'Posted',
                'Returned',
                'Description',
                'Uom',
                'Qty',
                'LotSize',
                'Price',
                'ExtPrice',
                'LocExtPrice',
                'PriceCpd',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'ReturnQty',
                'ReturnAmt',
                'LreturnAmt',
                'InvoiceDate',
                'CustomerNo',
                'AcctSales',
                'OwnerBranch',
                'SourceBranch',
                'ExtDescription',
                'SltaxPcent',
                'SltaxAmt',
                'LocSltaxAmt',
                'AcctSltax',
                'ShipmentRef',
                'ShipmentEntryNo',
                'OrderNo',
                'LdiscPcent',
                'LdiscAmt',
                'NetItemAmt',
                'OrderLineNo',
                'PriceAmt',
                'NetPrice',
                'AcctLdisc',
                'ShipItemAmt',
                'LshipItemAmt',
                'LocItemAmt',
                'LocPriceAmt',
                'LocLdiscAmt',
                'AcctVariance',
                'VariaAmt',
                'LocalVariaAmt',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'InvoiceNoRecnum',
                'InvoiceNoDirectEntry',
                'InvoiceNoPosted',
                'InvoiceNoClosed',
                'InvoiceNoReturned',
                'InvoiceNoDebitNote',
                'InvoiceNoCustomerNo',
                'InvoiceNoCustomerName',
                'InvoiceNoAddress',
                'InvoiceNoAddress2',
                'InvoiceNoAddress3',
                'InvoiceNoAddress4',
                'InvoiceNoAttention',
                'InvoiceNoInvoiceDate',
                'InvoiceNoPeriod',
                'InvoiceNoFiscalYear',
                'InvoiceNoPeriodNo',
                'InvoiceNoSalesman',
                'InvoiceNoCcy',
                'InvoiceNoExchRate',
                'InvoiceNoPayTerms',
                'InvoiceNoDiscDays',
                'InvoiceNoDiscPcent',
                'InvoiceNoDueDays',
                'InvoiceNoDiscountDate',
                'InvoiceNoDueDate',
                'InvoiceNoExpectedDate',
                'InvoiceNoAnlys1',
                'InvoiceNoAnlys2',
                'InvoiceNoTotPriceAmt',
                'InvoiceNoLocPriceAmt',
                'InvoiceNoTotPtaxAmt',
                'InvoiceNoLocPtaxAmt',
                'InvoiceNoTotExtPrice',
                'InvoiceNoLocExtPrice',
                'InvoiceNoTotLdiscAmt',
                'InvoiceNoLocLdiscAmt',
                'InvoiceNoTotAtaxAmt',
                'InvoiceNoLocAtaxAmt',
                'InvoiceNoTotItemAmt',
                'InvoiceNoLocItemAmt',
                'InvoiceNoTdiscPcent',
                'InvoiceNoTdiscAmt',
                'InvoiceNoLocalTdiscAmt',
                'InvoiceNoChgsAmt',
                'InvoiceNoLocChgsAmt',
                'InvoiceNoGtaxAmt',
                'InvoiceNoLocalGtaxAmt',
                'InvoiceNoNetAmt',
                'InvoiceNoLocalNetAmt',
                'InvoiceNoTdiscAmtCpd',
                'InvoiceNoLastLineNo',
                'InvoiceNoCreatedDate',
                'InvoiceNoCreatedBy',
                'InvoiceNoRevisedDate',
                'InvoiceNoRevisedBy',
                'InvoiceNoPostedDate',
                'InvoiceNoPostedBy',
                'InvoiceNoLastLogNo',
                'InvoiceNoSettledAmt',
                'InvoiceNoLsettledAmt',
                'InvoiceNoTermDiscAmt',
                'InvoiceNoLtermDiscAmt',
                'InvoiceNoReturnAmt',
                'InvoiceNoLreturnAmt',
                'InvoiceNoBalAmt',
                'InvoiceNoBalAmtLocal',
                'InvoiceNoOverAllocAmt',
                'InvoiceNoLoverAllocAmt',
                'InvoiceNoAcctCustomer',
                'InvoiceNoAcctTdisc',
                'InvoiceNoAcctGtax',
                'InvoiceNoLockType',
                'InvoiceNoLockRefNo',
                'InvoiceNoBatchSelect',
                'InvoiceNoGlLink',
                'InvoiceNoGlLinkType',
                'InvoiceNoGlLinkNo',
                'InvoiceNoOwnerBranch',
                'InvoiceNoSourceBranch',
                'InvoiceNoCheckCrlimit',
                'InvoiceNoCheckCrbal',
                'InvoiceNoComments1',
                'InvoiceNoComments2',
                'InvoiceNoComments3',
                'InvoiceNoComments4',
                'InvoiceNoLastTextNo',
                'InvoiceNoShipTo',
                'InvoiceNoTelNo',
                'InvoiceNoFaxNo',
                'InvoiceNoSltaxType',
                'InvoiceNoGsltaxPcent',
                'InvoiceNoTotGsltaxAmt',
                'InvoiceNoTotLsltaxAmt',
                'InvoiceNoLocGsltaxAmt',
                'InvoiceNoLocLsltaxAmt',
                'InvoiceNoAcctSltax',
                'InvoiceNoCustomerPo',
                'InvoiceNoAiLink',
                'InvoiceNoAiLinkType',
                'InvoiceNoAiLinkNo',
                'InvoiceNoAnlys7',
                'InvoiceNoAnlys8',
                'InvoiceNoNetTradeAmt',
                'InvoiceNoNetOrdrAmt',
                'InvoiceNoShipAmt',
                'InvoiceNoLshipAmt',
                'InvoiceNoVariaAmt',
                'InvoiceNoLvariaAmt',
                'InvoiceNoItemVariaAmt',
                'InvoiceNoLitemVariaAmt',
                'InvoiceNoChgsVariaAmt',
                'InvoiceNoLchgsVariaAmt',
                'InvoiceNoDpsApplied',
                'InvoiceNoLocDpsApplied',
                'InvoiceNoShipSltaxType',
                'InvoiceNoShipGsltaxPcent',
                'InvoiceNoShipCount',
                'InvoiceNoSourceType',
                'InvoiceNoLastChgsNo',
                'InvoiceNoDocType',
                'InvoiceNoDocId',
                'InvoiceNoAnlys9',
                'InvoiceNoAnlys10',
                'InvoiceNoAnlys11',
                'InvoiceNoAnlys12',
                'InvoiceNoAnlys13',
                'InvoiceNoAnlys14',
                'InvoiceNoBreakDebitNote',
                'InvoiceNoFreezed',
                'InvoiceNoRelatedDebitNote',
                'InvoiceNoCloned',
                'InvoiceNoClonedCompanyCode',
                'InvoiceNoUseSampleAcct',
                'InvoiceNoReferenceDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivableInvoiceDetailRow = Finance.AccountsReceivableInvoiceDetailRow || (Finance.AccountsReceivableInvoiceDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceDetailService;
        (function (AccountsReceivableInvoiceDetailService) {
            AccountsReceivableInvoiceDetailService.baseUrl = 'Finance/AccountsReceivableInvoiceDetail';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivableInvoiceDetailService.Methods || (AccountsReceivableInvoiceDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivableInvoiceDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivableInvoiceDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivableInvoiceDetailService.baseUrl + '/' + x;
            });
        })(AccountsReceivableInvoiceDetailService = Finance.AccountsReceivableInvoiceDetailService || (Finance.AccountsReceivableInvoiceDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceForm = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceForm, _super);
            function AccountsReceivableInvoiceForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivableInvoiceForm.formKey = 'Finance.AccountsReceivableInvoice';
            return AccountsReceivableInvoiceForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivableInvoiceForm = AccountsReceivableInvoiceForm;
        [['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['InvoiceDate', function () { return Serenity.DateEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Attention', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['TelNo', function () { return Serenity.StringEditor; }],
            ['FaxNo', function () { return Serenity.StringEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['DiscDays', function () { return Serenity.DecimalEditor; }],
            ['DiscPcent', function () { return Serenity.DecimalEditor; }],
            ['DiscountDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['ExpectedDate', function () { return Serenity.DateEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['ChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetOrdrAmt', function () { return Serenity.DecimalEditor; }],
            ['NetAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['OrderList', function () { return Finance.AccountsReceivableInvoiceOrderEditor; }],
            ['DetailList', function () { return Finance.AccountsReceivableInvoiceDetailEditor; }],
            ['CommissionList', function () { return Finance.AccountsReceivableCommissionEditor; }],
            ['Comments1', function () { return Serenity.TextAreaEditor; }],
            ['Comments2', function () { return Serenity.TextAreaEditor; }],
            ['Comments3', function () { return Serenity.TextAreaEditor; }],
            ['Comments4', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivableInvoiceForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceOrderForm = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceOrderForm, _super);
            function AccountsReceivableInvoiceOrderForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivableInvoiceOrderForm.formKey = 'Finance.AccountsReceivableInvoiceOrder';
            return AccountsReceivableInvoiceOrderForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivableInvoiceOrderForm = AccountsReceivableInvoiceOrderForm;
        [['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['ShipmentRef', function () { return Serenity.StringEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['TotPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['TotExtPrice', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetOrdrAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsCover', function () { return Serenity.DecimalEditor; }],
            ['DpsPcent', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['LocDpsApplied', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['SltaxType', function () { return Serenity.StringEditor; }],
            ['GsltaxPcent', function () { return Serenity.DecimalEditor; }],
            ['TotGsltaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotLsltaxAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['CustomerPo', function () { return Serenity.StringEditor; }],
            ['Anlys21', function () { return Serenity.StringEditor; }],
            ['Anlys22', function () { return Serenity.StringEditor; }],
            ['Anlys23', function () { return Serenity.StringEditor; }],
            ['Anlys24', function () { return Serenity.StringEditor; }],
            ['Anlys25', function () { return Serenity.StringEditor; }],
            ['Anlys26', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivableInvoiceOrderForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceOrderRow;
        (function (AccountsReceivableInvoiceOrderRow) {
            AccountsReceivableInvoiceOrderRow.idProperty = 'Recnum';
            AccountsReceivableInvoiceOrderRow.nameProperty = 'InvoiceNo';
            AccountsReceivableInvoiceOrderRow.localTextPrefix = 'Finance.AccountsReceivableInvoiceOrder';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivableInvoiceOrderRow.Fields || (AccountsReceivableInvoiceOrderRow.Fields = {}));
            [
                'Recnum',
                'InvoiceNo',
                'ShipmentRef',
                'OrderNo',
                'TotPriceAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'NetPayAmt',
                'DpsCover',
                'DpsPcent',
                'DpsApplied',
                'LocDpsApplied',
                'NetBalAmt',
                'SltaxType',
                'GsltaxPcent',
                'TotGsltaxAmt',
                'TotLsltaxAmt',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'CustomerPo',
                'Anlys21',
                'Anlys22',
                'Anlys23',
                'Anlys24',
                'Anlys25',
                'Anlys26',
                'InvoiceNoRecnum',
                'InvoiceNoDirectEntry',
                'InvoiceNoPosted',
                'InvoiceNoClosed',
                'InvoiceNoReturned',
                'InvoiceNoDebitNote',
                'InvoiceNoCustomerNo',
                'InvoiceNoCustomerName',
                'InvoiceNoAddress',
                'InvoiceNoAddress2',
                'InvoiceNoAddress3',
                'InvoiceNoAddress4',
                'InvoiceNoAttention',
                'InvoiceNoInvoiceDate',
                'InvoiceNoPeriod',
                'InvoiceNoFiscalYear',
                'InvoiceNoPeriodNo',
                'InvoiceNoSalesman',
                'InvoiceNoCcy',
                'InvoiceNoExchRate',
                'InvoiceNoPayTerms',
                'InvoiceNoDiscDays',
                'InvoiceNoDiscPcent',
                'InvoiceNoDueDays',
                'InvoiceNoDiscountDate',
                'InvoiceNoDueDate',
                'InvoiceNoExpectedDate',
                'InvoiceNoAnlys1',
                'InvoiceNoAnlys2',
                'InvoiceNoTotPriceAmt',
                'InvoiceNoLocPriceAmt',
                'InvoiceNoTotPtaxAmt',
                'InvoiceNoLocPtaxAmt',
                'InvoiceNoTotExtPrice',
                'InvoiceNoLocExtPrice',
                'InvoiceNoTotLdiscAmt',
                'InvoiceNoLocLdiscAmt',
                'InvoiceNoTotAtaxAmt',
                'InvoiceNoLocAtaxAmt',
                'InvoiceNoTotItemAmt',
                'InvoiceNoLocItemAmt',
                'InvoiceNoTdiscPcent',
                'InvoiceNoTdiscAmt',
                'InvoiceNoLocalTdiscAmt',
                'InvoiceNoChgsAmt',
                'InvoiceNoLocChgsAmt',
                'InvoiceNoGtaxAmt',
                'InvoiceNoLocalGtaxAmt',
                'InvoiceNoNetAmt',
                'InvoiceNoLocalNetAmt',
                'InvoiceNoTdiscAmtCpd',
                'InvoiceNoLastLineNo',
                'InvoiceNoCreatedDate',
                'InvoiceNoCreatedBy',
                'InvoiceNoRevisedDate',
                'InvoiceNoRevisedBy',
                'InvoiceNoPostedDate',
                'InvoiceNoPostedBy',
                'InvoiceNoLastLogNo',
                'InvoiceNoSettledAmt',
                'InvoiceNoLsettledAmt',
                'InvoiceNoTermDiscAmt',
                'InvoiceNoLtermDiscAmt',
                'InvoiceNoReturnAmt',
                'InvoiceNoLreturnAmt',
                'InvoiceNoBalAmt',
                'InvoiceNoBalAmtLocal',
                'InvoiceNoOverAllocAmt',
                'InvoiceNoLoverAllocAmt',
                'InvoiceNoAcctCustomer',
                'InvoiceNoAcctTdisc',
                'InvoiceNoAcctGtax',
                'InvoiceNoLockType',
                'InvoiceNoLockRefNo',
                'InvoiceNoBatchSelect',
                'InvoiceNoGlLink',
                'InvoiceNoGlLinkType',
                'InvoiceNoGlLinkNo',
                'InvoiceNoOwnerBranch',
                'InvoiceNoSourceBranch',
                'InvoiceNoCheckCrlimit',
                'InvoiceNoCheckCrbal',
                'InvoiceNoComments1',
                'InvoiceNoComments2',
                'InvoiceNoComments3',
                'InvoiceNoComments4',
                'InvoiceNoLastTextNo',
                'InvoiceNoShipTo',
                'InvoiceNoTelNo',
                'InvoiceNoFaxNo',
                'InvoiceNoSltaxType',
                'InvoiceNoGsltaxPcent',
                'InvoiceNoTotGsltaxAmt',
                'InvoiceNoTotLsltaxAmt',
                'InvoiceNoLocGsltaxAmt',
                'InvoiceNoLocLsltaxAmt',
                'InvoiceNoAcctSltax',
                'InvoiceNoCustomerPo',
                'InvoiceNoAiLink',
                'InvoiceNoAiLinkType',
                'InvoiceNoAiLinkNo',
                'InvoiceNoAnlys7',
                'InvoiceNoAnlys8',
                'InvoiceNoNetTradeAmt',
                'InvoiceNoNetOrdrAmt',
                'InvoiceNoShipAmt',
                'InvoiceNoLshipAmt',
                'InvoiceNoVariaAmt',
                'InvoiceNoLvariaAmt',
                'InvoiceNoItemVariaAmt',
                'InvoiceNoLitemVariaAmt',
                'InvoiceNoChgsVariaAmt',
                'InvoiceNoLchgsVariaAmt',
                'InvoiceNoDpsApplied',
                'InvoiceNoLocDpsApplied',
                'InvoiceNoShipSltaxType',
                'InvoiceNoShipGsltaxPcent',
                'InvoiceNoShipCount',
                'InvoiceNoSourceType',
                'InvoiceNoLastChgsNo',
                'InvoiceNoDocType',
                'InvoiceNoDocId',
                'InvoiceNoAnlys9',
                'InvoiceNoAnlys10',
                'InvoiceNoAnlys11',
                'InvoiceNoAnlys12',
                'InvoiceNoAnlys13',
                'InvoiceNoAnlys14',
                'InvoiceNoBreakDebitNote',
                'InvoiceNoFreezed',
                'InvoiceNoRelatedDebitNote',
                'InvoiceNoCloned',
                'InvoiceNoClonedCompanyCode',
                'InvoiceNoUseSampleAcct',
                'InvoiceNoReferenceDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivableInvoiceOrderRow = Finance.AccountsReceivableInvoiceOrderRow || (Finance.AccountsReceivableInvoiceOrderRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceOrderService;
        (function (AccountsReceivableInvoiceOrderService) {
            AccountsReceivableInvoiceOrderService.baseUrl = 'Finance/AccountsReceivableInvoiceOrder';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivableInvoiceOrderService.Methods || (AccountsReceivableInvoiceOrderService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivableInvoiceOrderService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivableInvoiceOrderService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivableInvoiceOrderService.baseUrl + '/' + x;
            });
        })(AccountsReceivableInvoiceOrderService = Finance.AccountsReceivableInvoiceOrderService || (Finance.AccountsReceivableInvoiceOrderService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceRow;
        (function (AccountsReceivableInvoiceRow) {
            AccountsReceivableInvoiceRow.idProperty = 'InvoiceNo';
            AccountsReceivableInvoiceRow.nameProperty = 'InvoiceNo';
            AccountsReceivableInvoiceRow.localTextPrefix = 'Finance.AccountsReceivableInvoice';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivableInvoiceRow.Fields || (AccountsReceivableInvoiceRow.Fields = {}));
            [
                'OrderList',
                'DetailList',
                'CommissionList',
                'Recnum',
                'InvoiceNo',
                'DirectEntry',
                'Posted',
                'Closed',
                'Returned',
                'DebitNote',
                'CustomerNo',
                'CustomerName',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'Attention',
                'InvoiceDate',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'Salesman',
                'Ccy',
                'ExchRate',
                'PayTerms',
                'DiscDays',
                'DiscPcent',
                'DueDays',
                'DiscountDate',
                'DueDate',
                'ExpectedDate',
                'Anlys1',
                'Anlys2',
                'TotPriceAmt',
                'LocPriceAmt',
                'TotPtaxAmt',
                'LocPtaxAmt',
                'TotExtPrice',
                'LocExtPrice',
                'TotLdiscAmt',
                'LocLdiscAmt',
                'TotAtaxAmt',
                'LocAtaxAmt',
                'TotItemAmt',
                'LocItemAmt',
                'TdiscPcent',
                'TdiscAmt',
                'LocalTdiscAmt',
                'ChgsAmt',
                'LocChgsAmt',
                'GtaxAmt',
                'LocalGtaxAmt',
                'NetAmt',
                'LocalNetAmt',
                'TdiscAmtCpd',
                'LastLineNo',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LastLogNo',
                'SettledAmt',
                'LsettledAmt',
                'TermDiscAmt',
                'LtermDiscAmt',
                'ReturnAmt',
                'LreturnAmt',
                'BalAmt',
                'BalAmtLocal',
                'OverAllocAmt',
                'LoverAllocAmt',
                'AcctCustomer',
                'AcctTdisc',
                'AcctGtax',
                'LockType',
                'LockRefNo',
                'BatchSelect',
                'GlLink',
                'GlLinkType',
                'GlLinkNo',
                'OwnerBranch',
                'SourceBranch',
                'CheckCrlimit',
                'CheckCrbal',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'LastTextNo',
                'ShipTo',
                'TelNo',
                'FaxNo',
                'SltaxType',
                'GsltaxPcent',
                'TotGsltaxAmt',
                'TotLsltaxAmt',
                'LocGsltaxAmt',
                'LocLsltaxAmt',
                'AcctSltax',
                'CustomerPo',
                'AiLink',
                'AiLinkType',
                'AiLinkNo',
                'Anlys7',
                'Anlys8',
                'NetTradeAmt',
                'NetOrdrAmt',
                'ShipAmt',
                'LshipAmt',
                'VariaAmt',
                'LvariaAmt',
                'ItemVariaAmt',
                'LitemVariaAmt',
                'ChgsVariaAmt',
                'LchgsVariaAmt',
                'DpsApplied',
                'LocDpsApplied',
                'ShipSltaxType',
                'ShipGsltaxPcent',
                'ShipCount',
                'SourceType',
                'LastChgsNo',
                'DocType',
                'DocId',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'BreakDebitNote',
                'Freezed',
                'RelatedDebitNote',
                'Cloned',
                'ClonedCompanyCode',
                'UseSampleAcct',
                'ReferenceDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivableInvoiceRow = Finance.AccountsReceivableInvoiceRow || (Finance.AccountsReceivableInvoiceRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceService;
        (function (AccountsReceivableInvoiceService) {
            AccountsReceivableInvoiceService.baseUrl = 'Finance/AccountsReceivableInvoice';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivableInvoiceService.Methods || (AccountsReceivableInvoiceService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivableInvoiceService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivableInvoiceService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivableInvoiceService.baseUrl + '/' + x;
            });
        })(AccountsReceivableInvoiceService = Finance.AccountsReceivableInvoiceService || (Finance.AccountsReceivableInvoiceService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableJournalForm = /** @class */ (function (_super) {
            __extends(AccountsReceivableJournalForm, _super);
            function AccountsReceivableJournalForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivableJournalForm.formKey = 'Finance.AccountsReceivableJournal';
            return AccountsReceivableJournalForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivableJournalForm = AccountsReceivableJournalForm;
        [['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['TranDate', function () { return Serenity.DateEditor; }],
            ['TranType', function () { return Serenity.StringEditor; }],
            ['RefNo', function () { return Serenity.StringEditor; }],
            ['Debit', function () { return Serenity.DecimalEditor; }],
            ['Credit', function () { return Serenity.DecimalEditor; }],
            ['TotalAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalDebit', function () { return Serenity.DecimalEditor; }],
            ['LocalCredit', function () { return Serenity.DecimalEditor; }],
            ['LocalBalance', function () { return Serenity.DecimalEditor; }],
            ['Particulars', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivableJournalForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableJournalRow;
        (function (AccountsReceivableJournalRow) {
            AccountsReceivableJournalRow.idProperty = 'Recnum';
            AccountsReceivableJournalRow.nameProperty = 'CustomerNo';
            AccountsReceivableJournalRow.localTextPrefix = 'Finance.AccountsReceivableJournal';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivableJournalRow.Fields || (AccountsReceivableJournalRow.Fields = {}));
            [
                'Recnum',
                'EntryNo',
                'CustomerNo',
                'Period',
                'TranDate',
                'TranType',
                'RefNo',
                'Ccy',
                'ExchRate',
                'TotalAmt',
                'Debit',
                'Credit',
                'LocalDebit',
                'LocalCredit',
                'LocalBalance',
                'OwnerBranch',
                'SourceBranch',
                'Particulars'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivableJournalRow = Finance.AccountsReceivableJournalRow || (Finance.AccountsReceivableJournalRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableJournalService;
        (function (AccountsReceivableJournalService) {
            AccountsReceivableJournalService.baseUrl = 'Finance/AccountsReceivableJournal';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivableJournalService.Methods || (AccountsReceivableJournalService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivableJournalService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivableJournalService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivableJournalService.baseUrl + '/' + x;
            });
        })(AccountsReceivableJournalService = Finance.AccountsReceivableJournalService || (Finance.AccountsReceivableJournalService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableLedgerForm = /** @class */ (function (_super) {
            __extends(AccountsReceivableLedgerForm, _super);
            function AccountsReceivableLedgerForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivableLedgerForm.formKey = 'Finance.AccountsReceivableLedger';
            return AccountsReceivableLedgerForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivableLedgerForm = AccountsReceivableLedgerForm;
        [['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['Summary', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['InvoAmt', function () { return Serenity.DecimalEditor; }],
            ['MemoAmt', function () { return Serenity.DecimalEditor; }],
            ['AdjAmt', function () { return Serenity.DecimalEditor; }],
            ['PayAmt', function () { return Serenity.DecimalEditor; }],
            ['DiscAmt', function () { return Serenity.DecimalEditor; }],
            ['DiffAmt', function () { return Serenity.DecimalEditor; }],
            ['BalBeg', function () { return Serenity.DecimalEditor; }],
            ['Debit', function () { return Serenity.DecimalEditor; }],
            ['Credit', function () { return Serenity.DecimalEditor; }],
            ['BalEnd', function () { return Serenity.DecimalEditor; }],
            ['RfdAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalInvoAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalMemoAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalAdjAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalPayAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalDiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalDiffAmt', function () { return Serenity.DecimalEditor; }],
            ['LocalBalBeg', function () { return Serenity.DecimalEditor; }],
            ['LocalDebit', function () { return Serenity.DecimalEditor; }],
            ['LocalCredit', function () { return Serenity.DecimalEditor; }],
            ['LocalBalEnd', function () { return Serenity.DecimalEditor; }],
            ['LocalRfdAmt', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivableLedgerForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableLedgerRow;
        (function (AccountsReceivableLedgerRow) {
            AccountsReceivableLedgerRow.idProperty = 'Recnum';
            AccountsReceivableLedgerRow.nameProperty = 'CustomerNo';
            AccountsReceivableLedgerRow.localTextPrefix = 'Finance.AccountsReceivableLedger';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivableLedgerRow.Fields || (AccountsReceivableLedgerRow.Fields = {}));
            [
                'Recnum',
                'CustomerNo',
                'CustomerName',
                'Summary',
                'Ccy',
                'Period',
                'CustomerNo2',
                'Ccy2',
                'FiscalYear',
                'PeriodNo',
                'InvoAmt',
                'MemoAmt',
                'AdjAmt',
                'PayAmt',
                'DiscAmt',
                'DiffAmt',
                'BalBeg',
                'Debit',
                'Credit',
                'BalEnd',
                'LocalInvoAmt',
                'LocalMemoAmt',
                'LocalAdjAmt',
                'LocalPayAmt',
                'LocalDiscAmt',
                'LocalDiffAmt',
                'LocalBalBeg',
                'LocalDebit',
                'LocalCredit',
                'LocalBalEnd',
                'OwnerBranch',
                'SourceBranch',
                'RfdAmt',
                'LocalRfdAmt'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivableLedgerRow = Finance.AccountsReceivableLedgerRow || (Finance.AccountsReceivableLedgerRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableLedgerService;
        (function (AccountsReceivableLedgerService) {
            AccountsReceivableLedgerService.baseUrl = 'Finance/AccountsReceivableLedger';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivableLedgerService.Methods || (AccountsReceivableLedgerService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivableLedgerService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivableLedgerService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivableLedgerService.baseUrl + '/' + x;
            });
        })(AccountsReceivableLedgerService = Finance.AccountsReceivableLedgerService || (Finance.AccountsReceivableLedgerService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentCurrencyForm = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentCurrencyForm, _super);
            function AccountsReceivablePaymentCurrencyForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivablePaymentCurrencyForm.formKey = 'Finance.AccountsReceivablePaymentCurrency';
            return AccountsReceivablePaymentCurrencyForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivablePaymentCurrencyForm = AccountsReceivablePaymentCurrencyForm;
        [['ReceiptNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivablePaymentCurrencyForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentCurrencyRow;
        (function (AccountsReceivablePaymentCurrencyRow) {
            AccountsReceivablePaymentCurrencyRow.idProperty = 'Recnum';
            AccountsReceivablePaymentCurrencyRow.nameProperty = 'ReceiptNo';
            AccountsReceivablePaymentCurrencyRow.localTextPrefix = 'Finance.AccountsReceivablePaymentCurrency';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivablePaymentCurrencyRow.Fields || (AccountsReceivablePaymentCurrencyRow.Fields = {}));
            [
                'Recnum',
                'ReceiptNo',
                'Ccy',
                'Description',
                'ExchRate',
                'BalAmt',
                'RevisedDate',
                'RevisedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivablePaymentCurrencyRow = Finance.AccountsReceivablePaymentCurrencyRow || (Finance.AccountsReceivablePaymentCurrencyRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentCurrencyService;
        (function (AccountsReceivablePaymentCurrencyService) {
            AccountsReceivablePaymentCurrencyService.baseUrl = 'Finance/AccountsReceivablePaymentCurrency';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivablePaymentCurrencyService.Methods || (AccountsReceivablePaymentCurrencyService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivablePaymentCurrencyService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivablePaymentCurrencyService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivablePaymentCurrencyService.baseUrl + '/' + x;
            });
        })(AccountsReceivablePaymentCurrencyService = Finance.AccountsReceivablePaymentCurrencyService || (Finance.AccountsReceivablePaymentCurrencyService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDepositForm = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDepositForm, _super);
            function AccountsReceivablePaymentDepositForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivablePaymentDepositForm.formKey = 'Finance.AccountsReceivablePaymentDeposit';
            return AccountsReceivablePaymentDepositForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivablePaymentDepositForm = AccountsReceivablePaymentDepositForm;
        [['ReceiptNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.IntegerEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['DepositReceiptNo', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.BooleanEditor; }],
            ['ReceiptDate', function () { return Serenity.DateEditor; }],
            ['DepositAmt', function () { return Serenity.DecimalEditor; }],
            ['DepositAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['BalAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['PaidAmt', function () { return Serenity.DecimalEditor; }],
            ['PaidAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['Settle', function () { return Serenity.BooleanEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['Anlys13', function () { return Serenity.StringEditor; }],
            ['Anlys14', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivablePaymentDepositForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDepositRow;
        (function (AccountsReceivablePaymentDepositRow) {
            AccountsReceivablePaymentDepositRow.idProperty = 'Recnum';
            AccountsReceivablePaymentDepositRow.nameProperty = 'ReceiptNo';
            AccountsReceivablePaymentDepositRow.localTextPrefix = 'Finance.AccountsReceivablePaymentDeposit';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivablePaymentDepositRow.Fields || (AccountsReceivablePaymentDepositRow.Fields = {}));
            [
                'Recnum',
                'ReceiptNo',
                'LineNo',
                'OrderNo',
                'DepositReceiptNo',
                'Posted',
                'ReceiptDate',
                'DepositAmt',
                'DepositAmtLocal',
                'BalAmt',
                'BalAmtLocal',
                'PaidAmt',
                'PaidAmtLocal',
                'Settle',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivablePaymentDepositRow = Finance.AccountsReceivablePaymentDepositRow || (Finance.AccountsReceivablePaymentDepositRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDepositService;
        (function (AccountsReceivablePaymentDepositService) {
            AccountsReceivablePaymentDepositService.baseUrl = 'Finance/AccountsReceivablePaymentDeposit';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivablePaymentDepositService.Methods || (AccountsReceivablePaymentDepositService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivablePaymentDepositService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivablePaymentDepositService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivablePaymentDepositService.baseUrl + '/' + x;
            });
        })(AccountsReceivablePaymentDepositService = Finance.AccountsReceivablePaymentDepositService || (Finance.AccountsReceivablePaymentDepositService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDetailForm = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDetailForm, _super);
            function AccountsReceivablePaymentDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivablePaymentDetailForm.formKey = 'Finance.AccountsReceivablePaymentDetail';
            return AccountsReceivablePaymentDetailForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivablePaymentDetailForm = AccountsReceivablePaymentDetailForm;
        [['ReceiptNo', function () { return Serenity.StringEditor; }],
            ['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['InvoiceDate', function () { return Serenity.DateEditor; }],
            ['DiscountDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['DiscPercent', function () { return Serenity.DecimalEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['InvoExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayExchRate', function () { return Serenity.DecimalEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['BalAmtInvo', function () { return Serenity.DecimalEditor; }],
            ['DiscAmt', function () { return Serenity.DecimalEditor; }],
            ['DiscAmtInvo', function () { return Serenity.DecimalEditor; }],
            ['DueAmt', function () { return Serenity.DecimalEditor; }],
            ['DueAmtInvo', function () { return Serenity.DecimalEditor; }],
            ['DueAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['AppliedAmt', function () { return Serenity.DecimalEditor; }],
            ['AppliedAmtLoc', function () { return Serenity.DecimalEditor; }],
            ['SettledAmt', function () { return Serenity.DecimalEditor; }],
            ['ForexGainAmt', function () { return Serenity.DecimalEditor; }],
            ['EndAmt', function () { return Serenity.DecimalEditor; }],
            ['EndAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['LastLogNo', function () { return Serenity.DecimalEditor; }],
            ['ReceiptDate', function () { return Serenity.DateEditor; }],
            ['Settle', function () { return Serenity.StringEditor; }],
            ['AppliedAmtInv', function () { return Serenity.DecimalEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['InvRoundDiff', function () { return Serenity.DecimalEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivablePaymentDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDetailRow;
        (function (AccountsReceivablePaymentDetailRow) {
            AccountsReceivablePaymentDetailRow.idProperty = 'Recnum';
            AccountsReceivablePaymentDetailRow.nameProperty = 'ReceiptNo';
            AccountsReceivablePaymentDetailRow.localTextPrefix = 'Finance.AccountsReceivablePaymentDetail';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivablePaymentDetailRow.Fields || (AccountsReceivablePaymentDetailRow.Fields = {}));
            [
                'Recnum',
                'ReceiptNo',
                'InvoiceNo',
                'InvoiceDate',
                'DiscountDate',
                'DueDate',
                'DiscPercent',
                'Ccy',
                'InvoExchRate',
                'PayExchRate',
                'BalAmt',
                'BalAmtInvo',
                'DiscAmt',
                'DiscAmtInvo',
                'DueAmt',
                'DueAmtInvo',
                'DueAmtLocal',
                'AppliedAmt',
                'AppliedAmtLoc',
                'SettledAmt',
                'ForexGainAmt',
                'EndAmt',
                'EndAmtLocal',
                'Posted',
                'LogNo',
                'LastLogNo',
                'ReceiptDate',
                'Settle',
                'AppliedAmtInv',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'InvRoundDiff',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'ReceiptNoRecnum',
                'ReceiptNoDeposit',
                'ReceiptNoPosted',
                'ReceiptNoCustomerNo',
                'ReceiptNoCustomerName',
                'ReceiptNoOrderNo',
                'ReceiptNoReceiptDate',
                'ReceiptNoPeriod',
                'ReceiptNoFiscalYear',
                'ReceiptNoPeriodNo',
                'ReceiptNoFundCode',
                'ReceiptNoReference',
                'ReceiptNoCcy',
                'ReceiptNoExchRate',
                'ReceiptNoSameCurrency',
                'ReceiptNoPaidAmt',
                'ReceiptNoPaidAmtLocal',
                'ReceiptNoBalAmt',
                'ReceiptNoDiscAmt',
                'ReceiptNoDueAmt',
                'ReceiptNoDueAmtLocal',
                'ReceiptNoAppliedAmt',
                'ReceiptNoAppliedAmtLoc',
                'ReceiptNoSettledAmt',
                'ReceiptNoForexGainAmt',
                'ReceiptNoEndAmt',
                'ReceiptNoEndAmtLocal',
                'ReceiptNoUnusedAmt',
                'ReceiptNoUnusedAmtLoc',
                'ReceiptNoAppliedLocCpd',
                'ReceiptNoRoundDiff',
                'ReceiptNoCreatedDate',
                'ReceiptNoCreatedBy',
                'ReceiptNoRevisedDate',
                'ReceiptNoRevisedBy',
                'ReceiptNoPostedDate',
                'ReceiptNoPostedBy',
                'ReceiptNoAcctCustomer',
                'ReceiptNoAcctCash',
                'ReceiptNoAcctForexDiff',
                'ReceiptNoAcctTermDisc',
                'ReceiptNoAcctRoundDiff',
                'ReceiptNoBatchSelect',
                'ReceiptNoGlLink',
                'ReceiptNoGlLinkType',
                'ReceiptNoGlLinkNo',
                'ReceiptNoFixedCcy',
                'ReceiptNoDefaultCcy',
                'ReceiptNoOwnerBranch',
                'ReceiptNoSourceBranch',
                'ReceiptNoCanEdit',
                'ReceiptNoDiscAmtInvo',
                'ReceiptNoTotalDebit',
                'ReceiptNoTotalCredit',
                'ReceiptNoLastAdjCount',
                'ReceiptNoCcyInv',
                'ReceiptNoExchRateInv',
                'ReceiptNoAppliedAmtInv',
                'ReceiptNoBankAmt',
                'ReceiptNoAnlys1',
                'ReceiptNoAnlys2',
                'ReceiptNoAnlys7',
                'ReceiptNoAnlys8',
                'ReceiptNoToOpen',
                'ReceiptNoToRound',
                'ReceiptNoGbcustInvoAmtDiff',
                'ReceiptNoGbcustOpenAmtDiff',
                'ReceiptNoArledgTotalDebit',
                'ReceiptNoArledgTotalCredit',
                'ReceiptNoAllowCancel',
                'ReceiptNoPayer',
                'ReceiptNoChargeAmt',
                'ReceiptNoChargeAmtLocal',
                'ReceiptNoAnlys9',
                'ReceiptNoAnlys10',
                'ReceiptNoAnlys11',
                'ReceiptNoAnlys12',
                'ReceiptNoAnlys13',
                'ReceiptNoAnlys14',
                'ReceiptNoAcctDeposit',
                'ReceiptNoBalAmtLocal',
                'InvoiceNoRecnum',
                'InvoiceNoDirectEntry',
                'InvoiceNoPosted',
                'InvoiceNoClosed',
                'InvoiceNoReturned',
                'InvoiceNoDebitNote',
                'InvoiceNoCustomerNo',
                'InvoiceNoCustomerName',
                'InvoiceNoAddress',
                'InvoiceNoAddress2',
                'InvoiceNoAddress3',
                'InvoiceNoAddress4',
                'InvoiceNoAttention',
                'InvoiceNoInvoiceDate',
                'InvoiceNoPeriod',
                'InvoiceNoFiscalYear',
                'InvoiceNoPeriodNo',
                'InvoiceNoSalesman',
                'InvoiceNoCcy',
                'InvoiceNoExchRate',
                'InvoiceNoPayTerms',
                'InvoiceNoDiscDays',
                'InvoiceNoDiscPcent',
                'InvoiceNoDueDays',
                'InvoiceNoDiscountDate',
                'InvoiceNoDueDate',
                'InvoiceNoExpectedDate',
                'InvoiceNoAnlys1',
                'InvoiceNoAnlys2',
                'InvoiceNoTotPriceAmt',
                'InvoiceNoLocPriceAmt',
                'InvoiceNoTotPtaxAmt',
                'InvoiceNoLocPtaxAmt',
                'InvoiceNoTotExtPrice',
                'InvoiceNoLocExtPrice',
                'InvoiceNoTotLdiscAmt',
                'InvoiceNoLocLdiscAmt',
                'InvoiceNoTotAtaxAmt',
                'InvoiceNoLocAtaxAmt',
                'InvoiceNoTotItemAmt',
                'InvoiceNoLocItemAmt',
                'InvoiceNoTdiscPcent',
                'InvoiceNoTdiscAmt',
                'InvoiceNoLocalTdiscAmt',
                'InvoiceNoChgsAmt',
                'InvoiceNoLocChgsAmt',
                'InvoiceNoGtaxAmt',
                'InvoiceNoLocalGtaxAmt',
                'InvoiceNoNetAmt',
                'InvoiceNoLocalNetAmt',
                'InvoiceNoTdiscAmtCpd',
                'InvoiceNoLastLineNo',
                'InvoiceNoCreatedDate',
                'InvoiceNoCreatedBy',
                'InvoiceNoRevisedDate',
                'InvoiceNoRevisedBy',
                'InvoiceNoPostedDate',
                'InvoiceNoPostedBy',
                'InvoiceNoLastLogNo',
                'InvoiceNoSettledAmt',
                'InvoiceNoLsettledAmt',
                'InvoiceNoTermDiscAmt',
                'InvoiceNoLtermDiscAmt',
                'InvoiceNoReturnAmt',
                'InvoiceNoLreturnAmt',
                'InvoiceNoBalAmt',
                'InvoiceNoBalAmtLocal',
                'InvoiceNoOverAllocAmt',
                'InvoiceNoLoverAllocAmt',
                'InvoiceNoAcctCustomer',
                'InvoiceNoAcctTdisc',
                'InvoiceNoAcctGtax',
                'InvoiceNoLockType',
                'InvoiceNoLockRefNo',
                'InvoiceNoBatchSelect',
                'InvoiceNoGlLink',
                'InvoiceNoGlLinkType',
                'InvoiceNoGlLinkNo',
                'InvoiceNoOwnerBranch',
                'InvoiceNoSourceBranch',
                'InvoiceNoCheckCrlimit',
                'InvoiceNoCheckCrbal',
                'InvoiceNoComments1',
                'InvoiceNoComments2',
                'InvoiceNoComments3',
                'InvoiceNoComments4',
                'InvoiceNoLastTextNo',
                'InvoiceNoShipTo',
                'InvoiceNoTelNo',
                'InvoiceNoFaxNo',
                'InvoiceNoSltaxType',
                'InvoiceNoGsltaxPcent',
                'InvoiceNoTotGsltaxAmt',
                'InvoiceNoTotLsltaxAmt',
                'InvoiceNoLocGsltaxAmt',
                'InvoiceNoLocLsltaxAmt',
                'InvoiceNoAcctSltax',
                'InvoiceNoCustomerPo',
                'InvoiceNoAiLink',
                'InvoiceNoAiLinkType',
                'InvoiceNoAiLinkNo',
                'InvoiceNoAnlys7',
                'InvoiceNoAnlys8',
                'InvoiceNoNetTradeAmt',
                'InvoiceNoNetOrdrAmt',
                'InvoiceNoShipAmt',
                'InvoiceNoLshipAmt',
                'InvoiceNoVariaAmt',
                'InvoiceNoLvariaAmt',
                'InvoiceNoItemVariaAmt',
                'InvoiceNoLitemVariaAmt',
                'InvoiceNoChgsVariaAmt',
                'InvoiceNoLchgsVariaAmt',
                'InvoiceNoDpsApplied',
                'InvoiceNoLocDpsApplied',
                'InvoiceNoShipSltaxType',
                'InvoiceNoShipGsltaxPcent',
                'InvoiceNoShipCount',
                'InvoiceNoSourceType',
                'InvoiceNoLastChgsNo',
                'InvoiceNoDocType',
                'InvoiceNoDocId',
                'InvoiceNoAnlys9',
                'InvoiceNoAnlys10',
                'InvoiceNoAnlys11',
                'InvoiceNoAnlys12',
                'InvoiceNoAnlys13',
                'InvoiceNoAnlys14',
                'InvoiceNoBreakDebitNote',
                'InvoiceNoFreezed',
                'InvoiceNoRelatedDebitNote',
                'InvoiceNoCloned',
                'InvoiceNoClonedCompanyCode',
                'InvoiceNoUseSampleAcct',
                'InvoiceNoReferenceDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivablePaymentDetailRow = Finance.AccountsReceivablePaymentDetailRow || (Finance.AccountsReceivablePaymentDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDetailService;
        (function (AccountsReceivablePaymentDetailService) {
            AccountsReceivablePaymentDetailService.baseUrl = 'Finance/AccountsReceivablePaymentDetail';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivablePaymentDetailService.Methods || (AccountsReceivablePaymentDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivablePaymentDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivablePaymentDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivablePaymentDetailService.baseUrl + '/' + x;
            });
        })(AccountsReceivablePaymentDetailService = Finance.AccountsReceivablePaymentDetailService || (Finance.AccountsReceivablePaymentDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentForm = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentForm, _super);
            function AccountsReceivablePaymentForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountsReceivablePaymentForm.formKey = 'Finance.AccountsReceivablePayment';
            return AccountsReceivablePaymentForm;
        }(Serenity.PrefixedContext));
        Finance.AccountsReceivablePaymentForm = AccountsReceivablePaymentForm;
        [['ReceiptNo', function () { return Serenity.StringEditor; }],
            ['Deposit', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['ReceiptDate', function () { return Serenity.DateEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['FiscalYear', function () { return Serenity.DecimalEditor; }],
            ['PeriodNo', function () { return Serenity.DecimalEditor; }],
            ['FundCode', function () { return Serenity.StringEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['SameCurrency', function () { return Serenity.StringEditor; }],
            ['PaidAmt', function () { return Serenity.DecimalEditor; }],
            ['PaidAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['DiscAmt', function () { return Serenity.DecimalEditor; }],
            ['DueAmt', function () { return Serenity.DecimalEditor; }],
            ['DueAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['AppliedAmt', function () { return Serenity.DecimalEditor; }],
            ['AppliedAmtLoc', function () { return Serenity.DecimalEditor; }],
            ['SettledAmt', function () { return Serenity.DecimalEditor; }],
            ['ForexGainAmt', function () { return Serenity.DecimalEditor; }],
            ['EndAmt', function () { return Serenity.DecimalEditor; }],
            ['EndAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['UnusedAmt', function () { return Serenity.DecimalEditor; }],
            ['UnusedAmtLoc', function () { return Serenity.DecimalEditor; }],
            ['AppliedLocCpd', function () { return Serenity.DecimalEditor; }],
            ['RoundDiff', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['PostedDate', function () { return Serenity.DateEditor; }],
            ['PostedBy', function () { return Serenity.StringEditor; }],
            ['AcctCustomer', function () { return Serenity.StringEditor; }],
            ['AcctCash', function () { return Serenity.StringEditor; }],
            ['AcctForexDiff', function () { return Serenity.StringEditor; }],
            ['AcctTermDisc', function () { return Serenity.StringEditor; }],
            ['AcctRoundDiff', function () { return Serenity.StringEditor; }],
            ['BatchSelect', function () { return Serenity.StringEditor; }],
            ['GlLink', function () { return Serenity.StringEditor; }],
            ['GlLinkType', function () { return Serenity.StringEditor; }],
            ['GlLinkNo', function () { return Serenity.StringEditor; }],
            ['FixedCcy', function () { return Serenity.StringEditor; }],
            ['DefaultCcy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['CanEdit', function () { return Serenity.StringEditor; }],
            ['DiscAmtInvo', function () { return Serenity.DecimalEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['LastAdjCount', function () { return Serenity.DecimalEditor; }],
            ['CcyInv', function () { return Serenity.StringEditor; }],
            ['ExchRateInv', function () { return Serenity.DecimalEditor; }],
            ['AppliedAmtInv', function () { return Serenity.DecimalEditor; }],
            ['BankAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['ToOpen', function () { return Serenity.StringEditor; }],
            ['ToRound', function () { return Serenity.StringEditor; }],
            ['GbcustInvoAmtDiff', function () { return Serenity.DecimalEditor; }],
            ['GbcustOpenAmtDiff', function () { return Serenity.DecimalEditor; }],
            ['ArledgTotalDebit', function () { return Serenity.DecimalEditor; }],
            ['ArledgTotalCredit', function () { return Serenity.DecimalEditor; }],
            ['AllowCancel', function () { return Serenity.StringEditor; }],
            ['Payer', function () { return Serenity.StringEditor; }],
            ['ChargeAmt', function () { return Serenity.DecimalEditor; }],
            ['ChargeAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['Anlys13', function () { return Serenity.StringEditor; }],
            ['Anlys14', function () { return Serenity.StringEditor; }],
            ['AcctDeposit', function () { return Serenity.StringEditor; }],
            ['BalAmtLocal', function () { return Serenity.DecimalEditor; }],
            ['DetailList', function () { return Finance.AccountsReceivablePaymentDetailDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountsReceivablePaymentForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentRow;
        (function (AccountsReceivablePaymentRow) {
            AccountsReceivablePaymentRow.idProperty = 'ReceiptNo';
            AccountsReceivablePaymentRow.nameProperty = 'ReceiptNo';
            AccountsReceivablePaymentRow.localTextPrefix = 'Finance.AccountsReceivablePayment';
            var Fields;
            (function (Fields) {
            })(Fields = AccountsReceivablePaymentRow.Fields || (AccountsReceivablePaymentRow.Fields = {}));
            [
                'DetailList',
                'DepositList',
                'CurrencyList',
                'Recnum',
                'ReceiptNo',
                'Deposit',
                'Posted',
                'CustomerNo',
                'CustomerName',
                'OrderNo',
                'ReceiptDate',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'FundCode',
                'Reference',
                'Ccy',
                'ExchRate',
                'SameCurrency',
                'PaidAmt',
                'PaidAmtLocal',
                'BalAmt',
                'DiscAmt',
                'DueAmt',
                'DueAmtLocal',
                'AppliedAmt',
                'AppliedAmtLoc',
                'SettledAmt',
                'ForexGainAmt',
                'EndAmt',
                'EndAmtLocal',
                'UnusedAmt',
                'UnusedAmtLoc',
                'AppliedLocCpd',
                'RoundDiff',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'AcctCustomer',
                'AcctCash',
                'AcctForexDiff',
                'AcctTermDisc',
                'AcctRoundDiff',
                'BatchSelect',
                'GlLink',
                'GlLinkType',
                'GlLinkNo',
                'FixedCcy',
                'DefaultCcy',
                'OwnerBranch',
                'SourceBranch',
                'CanEdit',
                'DiscAmtInvo',
                'TotalDebit',
                'TotalCredit',
                'LastAdjCount',
                'CcyInv',
                'ExchRateInv',
                'AppliedAmtInv',
                'BankAmt',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'ToOpen',
                'ToRound',
                'GbcustInvoAmtDiff',
                'GbcustOpenAmtDiff',
                'ArledgTotalDebit',
                'ArledgTotalCredit',
                'AllowCancel',
                'Payer',
                'ChargeAmt',
                'ChargeAmtLocal',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'AcctDeposit',
                'BalAmtLocal'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountsReceivablePaymentRow = Finance.AccountsReceivablePaymentRow || (Finance.AccountsReceivablePaymentRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentService;
        (function (AccountsReceivablePaymentService) {
            AccountsReceivablePaymentService.baseUrl = 'Finance/AccountsReceivablePayment';
            var Methods;
            (function (Methods) {
            })(Methods = AccountsReceivablePaymentService.Methods || (AccountsReceivablePaymentService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountsReceivablePaymentService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountsReceivablePaymentService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountsReceivablePaymentService.baseUrl + '/' + x;
            });
        })(AccountsReceivablePaymentService = Finance.AccountsReceivablePaymentService || (Finance.AccountsReceivablePaymentService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CostCenterBudgetForm = /** @class */ (function (_super) {
            __extends(CostCenterBudgetForm, _super);
            function CostCenterBudgetForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CostCenterBudgetForm.formKey = 'Finance.CostCenterBudget';
            return CostCenterBudgetForm;
        }(Serenity.PrefixedContext));
        Finance.CostCenterBudgetForm = CostCenterBudgetForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['CostCentre', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['BudgetDebit', function () { return Serenity.DecimalEditor; }],
            ['BudgetCredit', function () { return Serenity.DecimalEditor; }],
            ['BudgetDate', function () { return Serenity.DateEditor; }],
            ['BudgetBy', function () { return Serenity.StringEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['ControlDebit', function () { return Serenity.BooleanEditor; }],
            ['ControlCredit', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CostCenterBudgetForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CostCenterBudgetRow;
        (function (CostCenterBudgetRow) {
            CostCenterBudgetRow.idProperty = 'Recnum';
            CostCenterBudgetRow.nameProperty = 'AcctNo';
            CostCenterBudgetRow.localTextPrefix = 'Finance.CostCenterBudget';
            var Fields;
            (function (Fields) {
            })(Fields = CostCenterBudgetRow.Fields || (CostCenterBudgetRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'CostCentre',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'TotalDebit',
                'TotalCredit',
                'ControlDebit',
                'ControlCredit',
                'BudgetDebit',
                'BudgetCredit',
                'BudgetDate',
                'BudgetBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CostCenterBudgetRow = Finance.CostCenterBudgetRow || (Finance.CostCenterBudgetRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CostCenterBudgetService;
        (function (CostCenterBudgetService) {
            CostCenterBudgetService.baseUrl = 'Finance/CostCenterBudget';
            var Methods;
            (function (Methods) {
            })(Methods = CostCenterBudgetService.Methods || (CostCenterBudgetService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CostCenterBudgetService[x] = function (r, s, o) {
                    return Q.serviceRequest(CostCenterBudgetService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CostCenterBudgetService.baseUrl + '/' + x;
            });
        })(CostCenterBudgetService = Finance.CostCenterBudgetService || (Finance.CostCenterBudgetService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyBalanceForm = /** @class */ (function (_super) {
            __extends(CurrencyBalanceForm, _super);
            function CurrencyBalanceForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CurrencyBalanceForm.formKey = 'Finance.CurrencyBalance';
            return CurrencyBalanceForm;
        }(Serenity.PrefixedContext));
        Finance.CurrencyBalanceForm = CurrencyBalanceForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['AcctName', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['ForexBalance', function () { return Serenity.DecimalEditor; }],
            ['ForexSign', function () { return Serenity.StringEditor; }],
            ['LocalBalance', function () { return Serenity.DecimalEditor; }],
            ['LocalSign', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CurrencyBalanceForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyBalanceRow;
        (function (CurrencyBalanceRow) {
            CurrencyBalanceRow.idProperty = 'Recnum';
            CurrencyBalanceRow.nameProperty = 'AcctNo';
            CurrencyBalanceRow.localTextPrefix = 'Finance.CurrencyBalance';
            var Fields;
            (function (Fields) {
            })(Fields = CurrencyBalanceRow.Fields || (CurrencyBalanceRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'Ccy',
                'AcctName',
                'Description',
                'ForexBalance',
                'ForexSign',
                'LocalBalance',
                'LocalSign',
                'AcctNoRecnum',
                'AcctNoAcctName',
                'AcctNoAltAcctNo',
                'AcctNoNormalSign',
                'AcctNoTypeBs',
                'AcctNoTypePl',
                'AcctNoTypeDebtor',
                'AcctNoTypeCreditor',
                'AcctNoTypeMemo',
                'AcctNoDefaultCcy',
                'AcctNoAnlys1',
                'AcctNoAnlys2',
                'AcctNoAnlys3',
                'AcctNoAnlys4',
                'AcctNoSuspended',
                'AcctNoFixedCurrency',
                'AcctNoAutoDist',
                'AcctNoBudgetControl',
                'AcctNoSupprAnlys3',
                'AcctNoSupprAnlys4',
                'AcctNoSupprAnlys5',
                'AcctNoSupprAnlys6',
                'AcctNoSupprReval',
                'AcctNoNoCostCentre',
                'AcctNoNoDept',
                'AcctNoOper1',
                'AcctNoOper2',
                'AcctNoOper3',
                'AcctNoOper4',
                'AcctNoOper5',
                'AcctNoLinesBefPrint',
                'AcctNoTranAcct',
                'AcctNoSummaryPos',
                'AcctNoCreatedDate',
                'AcctNoCreatedBy',
                'AcctNoRevisedDate',
                'AcctNoRevisedBy',
                'AcctNoReconLastDate',
                'AcctNoReconLastJrn',
                'AcctNoReconBal',
                'AcctNoReconBalSign',
                'AcctNoLastTranDate',
                'AcctNoLastJrnNo',
                'AcctNoDistTotalPct',
                'AcctNoDistLastLine',
                'AcctNoReconCount',
                'AcctNoBalanceEnd',
                'AcctNoBalanceSign',
                'AcctNoOwnerBranch',
                'AcctNoSourceBranch',
                'AcctNoAllowEdit',
                'AcctNoAnlys5',
                'AcctNoAnlys6',
                'AcctNoAnlys7',
                'AcctNoAnlys8',
                'AcctNoAnlys9',
                'AcctNoAnlys10',
                'CcyRecnum',
                'CcyDescription',
                'CcySuspended',
                'CcyDefaultRate',
                'CcyAcctArForex',
                'CcyAcctApForex',
                'CcyLastEntryNo',
                'CcyRateUseCount',
                'CcyCreatedDate',
                'CcyCreatedBy',
                'CcyRevisedDate',
                'CcyRevisedBy',
                'CcyArevisedDate',
                'CcyArevisedBy',
                'CcyOwnerBranch',
                'CcySourceBranch',
                'CcyApInvoBal',
                'CcyApOpenBal',
                'CcyApNetBal',
                'CcyApLinvoBal',
                'CcyApLopenBal',
                'CcyApLnetBal',
                'CcyArInvoBal',
                'CcyArOpenBal',
                'CcyArNetBal',
                'CcyArLinvoBal',
                'CcyArLopenBal',
                'CcyArLnetBal'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CurrencyBalanceRow = Finance.CurrencyBalanceRow || (Finance.CurrencyBalanceRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyBalanceService;
        (function (CurrencyBalanceService) {
            CurrencyBalanceService.baseUrl = 'Finance/CurrencyBalance';
            var Methods;
            (function (Methods) {
            })(Methods = CurrencyBalanceService.Methods || (CurrencyBalanceService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CurrencyBalanceService[x] = function (r, s, o) {
                    return Q.serviceRequest(CurrencyBalanceService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CurrencyBalanceService.baseUrl + '/' + x;
            });
        })(CurrencyBalanceService = Finance.CurrencyBalanceService || (Finance.CurrencyBalanceService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerForm = /** @class */ (function (_super) {
            __extends(CurrencyLedgerForm, _super);
            function CurrencyLedgerForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CurrencyLedgerForm.formKey = 'Finance.CurrencyLedger';
            return CurrencyLedgerForm;
        }(Serenity.PrefixedContext));
        Finance.CurrencyLedgerForm = CurrencyLedgerForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['ForexBeg', function () { return Serenity.DecimalEditor; }],
            ['ForexBegSign', function () { return Serenity.StringEditor; }],
            ['ForexDebit', function () { return Serenity.DecimalEditor; }],
            ['ForexCredit', function () { return Serenity.DecimalEditor; }],
            ['ForexEnd', function () { return Serenity.DecimalEditor; }],
            ['ForexEndSign', function () { return Serenity.StringEditor; }],
            ['LocalBeg', function () { return Serenity.DecimalEditor; }],
            ['LocalBegSign', function () { return Serenity.StringEditor; }],
            ['LocalDebit', function () { return Serenity.DecimalEditor; }],
            ['LocalCredit', function () { return Serenity.DecimalEditor; }],
            ['LocalEnd', function () { return Serenity.DecimalEditor; }],
            ['LocalEndSign', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CurrencyLedgerForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerRow;
        (function (CurrencyLedgerRow) {
            CurrencyLedgerRow.idProperty = 'Recnum';
            CurrencyLedgerRow.nameProperty = 'AcctNo';
            CurrencyLedgerRow.localTextPrefix = 'Finance.CurrencyLedger';
            var Fields;
            (function (Fields) {
            })(Fields = CurrencyLedgerRow.Fields || (CurrencyLedgerRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'Ccy',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'ForexBeg',
                'ForexBegSign',
                'ForexDebit',
                'ForexCredit',
                'ForexEnd',
                'ForexEndSign',
                'LocalBeg',
                'LocalBegSign',
                'LocalDebit',
                'LocalCredit',
                'LocalEnd',
                'LocalEndSign',
                'OwnerBranch',
                'SourceBranch',
                'AcctNoRecnum',
                'AcctNoAcctName',
                'AcctNoAltAcctNo',
                'AcctNoNormalSign',
                'AcctNoTypeBs',
                'AcctNoTypePl',
                'AcctNoTypeDebtor',
                'AcctNoTypeCreditor',
                'AcctNoTypeMemo',
                'AcctNoDefaultCcy',
                'AcctNoAnlys1',
                'AcctNoAnlys2',
                'AcctNoAnlys3',
                'AcctNoAnlys4',
                'AcctNoSuspended',
                'AcctNoFixedCurrency',
                'AcctNoAutoDist',
                'AcctNoBudgetControl',
                'AcctNoSupprAnlys3',
                'AcctNoSupprAnlys4',
                'AcctNoSupprAnlys5',
                'AcctNoSupprAnlys6',
                'AcctNoSupprReval',
                'AcctNoNoCostCentre',
                'AcctNoNoDept',
                'AcctNoOper1',
                'AcctNoOper2',
                'AcctNoOper3',
                'AcctNoOper4',
                'AcctNoOper5',
                'AcctNoLinesBefPrint',
                'AcctNoTranAcct',
                'AcctNoSummaryPos',
                'AcctNoCreatedDate',
                'AcctNoCreatedBy',
                'AcctNoRevisedDate',
                'AcctNoRevisedBy',
                'AcctNoReconLastDate',
                'AcctNoReconLastJrn',
                'AcctNoReconBal',
                'AcctNoReconBalSign',
                'AcctNoLastTranDate',
                'AcctNoLastJrnNo',
                'AcctNoDistTotalPct',
                'AcctNoDistLastLine',
                'AcctNoReconCount',
                'AcctNoBalanceEnd',
                'AcctNoBalanceSign',
                'AcctNoOwnerBranch',
                'AcctNoSourceBranch',
                'AcctNoAllowEdit',
                'AcctNoAnlys5',
                'AcctNoAnlys6',
                'AcctNoAnlys7',
                'AcctNoAnlys8',
                'AcctNoAnlys9',
                'AcctNoAnlys10',
                'CcyRecnum',
                'CcyDescription',
                'CcySuspended',
                'CcyDefaultRate',
                'CcyAcctArForex',
                'CcyAcctApForex',
                'CcyLastEntryNo',
                'CcyRateUseCount',
                'CcyCreatedDate',
                'CcyCreatedBy',
                'CcyRevisedDate',
                'CcyRevisedBy',
                'CcyArevisedDate',
                'CcyArevisedBy',
                'CcyOwnerBranch',
                'CcySourceBranch',
                'CcyApInvoBal',
                'CcyApOpenBal',
                'CcyApNetBal',
                'CcyApLinvoBal',
                'CcyApLopenBal',
                'CcyApLnetBal',
                'CcyArInvoBal',
                'CcyArOpenBal',
                'CcyArNetBal',
                'CcyArLinvoBal',
                'CcyArLopenBal',
                'CcyArLnetBal'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CurrencyLedgerRow = Finance.CurrencyLedgerRow || (Finance.CurrencyLedgerRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerService;
        (function (CurrencyLedgerService) {
            CurrencyLedgerService.baseUrl = 'Finance/CurrencyLedger';
            var Methods;
            (function (Methods) {
            })(Methods = CurrencyLedgerService.Methods || (CurrencyLedgerService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CurrencyLedgerService[x] = function (r, s, o) {
                    return Q.serviceRequest(CurrencyLedgerService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CurrencyLedgerService.baseUrl + '/' + x;
            });
        })(CurrencyLedgerService = Finance.CurrencyLedgerService || (Finance.CurrencyLedgerService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerSummaryForm = /** @class */ (function (_super) {
            __extends(CurrencyLedgerSummaryForm, _super);
            function CurrencyLedgerSummaryForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CurrencyLedgerSummaryForm.formKey = 'Finance.CurrencyLedgerSummary';
            return CurrencyLedgerSummaryForm;
        }(Serenity.PrefixedContext));
        Finance.CurrencyLedgerSummaryForm = CurrencyLedgerSummaryForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['BalBeg', function () { return Serenity.DecimalEditor; }],
            ['BalBegSign', function () { return Serenity.StringEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['BalEnd', function () { return Serenity.DecimalEditor; }],
            ['BalEndSign', function () { return Serenity.StringEditor; }],
            ['LtotalDebit', function () { return Serenity.DecimalEditor; }],
            ['LtotalCredit', function () { return Serenity.DecimalEditor; }],
            ['LbalBeg', function () { return Serenity.DecimalEditor; }],
            ['LbalBegSign', function () { return Serenity.StringEditor; }],
            ['LbalEnd', function () { return Serenity.DecimalEditor; }],
            ['LbalEndSign', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CurrencyLedgerSummaryForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerSummaryRow;
        (function (CurrencyLedgerSummaryRow) {
            CurrencyLedgerSummaryRow.idProperty = 'Recnum';
            CurrencyLedgerSummaryRow.nameProperty = 'AcctNo';
            CurrencyLedgerSummaryRow.localTextPrefix = 'Finance.CurrencyLedgerSummary';
            var Fields;
            (function (Fields) {
            })(Fields = CurrencyLedgerSummaryRow.Fields || (CurrencyLedgerSummaryRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'Ccy',
                'TotalDebit',
                'TotalCredit',
                'BalBeg',
                'BalBegSign',
                'BalEnd',
                'BalEndSign',
                'LtotalDebit',
                'LtotalCredit',
                'LbalBeg',
                'LbalBegSign',
                'LbalEnd',
                'LbalEndSign',
                'OwnerBranch',
                'SourceBranch',
                'AcctNoRecnum',
                'AcctNoAcctName',
                'AcctNoAltAcctNo',
                'AcctNoNormalSign',
                'AcctNoTypeBs',
                'AcctNoTypePl',
                'AcctNoTypeDebtor',
                'AcctNoTypeCreditor',
                'AcctNoTypeMemo',
                'AcctNoDefaultCcy',
                'AcctNoAnlys1',
                'AcctNoAnlys2',
                'AcctNoAnlys3',
                'AcctNoAnlys4',
                'AcctNoSuspended',
                'AcctNoFixedCurrency',
                'AcctNoAutoDist',
                'AcctNoBudgetControl',
                'AcctNoSupprAnlys3',
                'AcctNoSupprAnlys4',
                'AcctNoSupprAnlys5',
                'AcctNoSupprAnlys6',
                'AcctNoSupprReval',
                'AcctNoNoCostCentre',
                'AcctNoNoDept',
                'AcctNoOper1',
                'AcctNoOper2',
                'AcctNoOper3',
                'AcctNoOper4',
                'AcctNoOper5',
                'AcctNoLinesBefPrint',
                'AcctNoTranAcct',
                'AcctNoSummaryPos',
                'AcctNoCreatedDate',
                'AcctNoCreatedBy',
                'AcctNoRevisedDate',
                'AcctNoRevisedBy',
                'AcctNoReconLastDate',
                'AcctNoReconLastJrn',
                'AcctNoReconBal',
                'AcctNoReconBalSign',
                'AcctNoLastTranDate',
                'AcctNoLastJrnNo',
                'AcctNoDistTotalPct',
                'AcctNoDistLastLine',
                'AcctNoReconCount',
                'AcctNoBalanceEnd',
                'AcctNoBalanceSign',
                'AcctNoOwnerBranch',
                'AcctNoSourceBranch',
                'AcctNoAllowEdit',
                'AcctNoAnlys5',
                'AcctNoAnlys6',
                'AcctNoAnlys7',
                'AcctNoAnlys8',
                'AcctNoAnlys9',
                'AcctNoAnlys10',
                'CcyRecnum',
                'CcyDescription',
                'CcySuspended',
                'CcyDefaultRate',
                'CcyAcctArForex',
                'CcyAcctApForex',
                'CcyLastEntryNo',
                'CcyRateUseCount',
                'CcyCreatedDate',
                'CcyCreatedBy',
                'CcyRevisedDate',
                'CcyRevisedBy',
                'CcyArevisedDate',
                'CcyArevisedBy',
                'CcyOwnerBranch',
                'CcySourceBranch',
                'CcyApInvoBal',
                'CcyApOpenBal',
                'CcyApNetBal',
                'CcyApLinvoBal',
                'CcyApLopenBal',
                'CcyApLnetBal',
                'CcyArInvoBal',
                'CcyArOpenBal',
                'CcyArNetBal',
                'CcyArLinvoBal',
                'CcyArLopenBal',
                'CcyArLnetBal'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CurrencyLedgerSummaryRow = Finance.CurrencyLedgerSummaryRow || (Finance.CurrencyLedgerSummaryRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerSummaryService;
        (function (CurrencyLedgerSummaryService) {
            CurrencyLedgerSummaryService.baseUrl = 'Finance/CurrencyLedgerSummary';
            var Methods;
            (function (Methods) {
            })(Methods = CurrencyLedgerSummaryService.Methods || (CurrencyLedgerSummaryService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CurrencyLedgerSummaryService[x] = function (r, s, o) {
                    return Q.serviceRequest(CurrencyLedgerSummaryService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CurrencyLedgerSummaryService.baseUrl + '/' + x;
            });
        })(CurrencyLedgerSummaryService = Finance.CurrencyLedgerSummaryService || (Finance.CurrencyLedgerSummaryService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var LedgerSummaryForm = /** @class */ (function (_super) {
            __extends(LedgerSummaryForm, _super);
            function LedgerSummaryForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LedgerSummaryForm.formKey = 'Finance.LedgerSummary';
            return LedgerSummaryForm;
        }(Serenity.PrefixedContext));
        Finance.LedgerSummaryForm = LedgerSummaryForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['BalBeg', function () { return Serenity.DecimalEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['BalEnd', function () { return Serenity.DecimalEditor; }],
            ['BalBegSign', function () { return Serenity.StringEditor; }],
            ['BalEndSign', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(LedgerSummaryForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var LedgerSummaryRow;
        (function (LedgerSummaryRow) {
            LedgerSummaryRow.idProperty = 'Recnum';
            LedgerSummaryRow.nameProperty = 'AcctNo';
            LedgerSummaryRow.localTextPrefix = 'Finance.LedgerSummary';
            var Fields;
            (function (Fields) {
            })(Fields = LedgerSummaryRow.Fields || (LedgerSummaryRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'TotalDebit',
                'TotalCredit',
                'BalBeg',
                'BalBegSign',
                'BalEnd',
                'BalEndSign',
                'OwnerBranch',
                'SourceBranch',
                'AcctNoRecnum',
                'AcctNoAcctName',
                'AcctNoAltAcctNo',
                'AcctNoNormalSign',
                'AcctNoTypeBs',
                'AcctNoTypePl',
                'AcctNoTypeDebtor',
                'AcctNoTypeCreditor',
                'AcctNoTypeMemo',
                'AcctNoDefaultCcy',
                'AcctNoAnlys1',
                'AcctNoAnlys2',
                'AcctNoAnlys3',
                'AcctNoAnlys4',
                'AcctNoSuspended',
                'AcctNoFixedCurrency',
                'AcctNoAutoDist',
                'AcctNoBudgetControl',
                'AcctNoSupprAnlys3',
                'AcctNoSupprAnlys4',
                'AcctNoSupprAnlys5',
                'AcctNoSupprAnlys6',
                'AcctNoSupprReval',
                'AcctNoNoCostCentre',
                'AcctNoNoDept',
                'AcctNoOper1',
                'AcctNoOper2',
                'AcctNoOper3',
                'AcctNoOper4',
                'AcctNoOper5',
                'AcctNoLinesBefPrint',
                'AcctNoTranAcct',
                'AcctNoSummaryPos',
                'AcctNoCreatedDate',
                'AcctNoCreatedBy',
                'AcctNoRevisedDate',
                'AcctNoRevisedBy',
                'AcctNoReconLastDate',
                'AcctNoReconLastJrn',
                'AcctNoReconBal',
                'AcctNoReconBalSign',
                'AcctNoLastTranDate',
                'AcctNoLastJrnNo',
                'AcctNoDistTotalPct',
                'AcctNoDistLastLine',
                'AcctNoReconCount',
                'AcctNoBalanceEnd',
                'AcctNoBalanceSign',
                'AcctNoOwnerBranch',
                'AcctNoSourceBranch',
                'AcctNoAllowEdit',
                'AcctNoAnlys5',
                'AcctNoAnlys6',
                'AcctNoAnlys7',
                'AcctNoAnlys8',
                'AcctNoAnlys9',
                'AcctNoAnlys10'
            ].forEach(function (x) { return Fields[x] = x; });
        })(LedgerSummaryRow = Finance.LedgerSummaryRow || (Finance.LedgerSummaryRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var LedgerSummaryService;
        (function (LedgerSummaryService) {
            LedgerSummaryService.baseUrl = 'Finance/LedgerSummary';
            var Methods;
            (function (Methods) {
            })(Methods = LedgerSummaryService.Methods || (LedgerSummaryService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LedgerSummaryService[x] = function (r, s, o) {
                    return Q.serviceRequest(LedgerSummaryService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = LedgerSummaryService.baseUrl + '/' + x;
            });
        })(LedgerSummaryService = Finance.LedgerSummaryService || (Finance.LedgerSummaryService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherDetailForm = /** @class */ (function (_super) {
            __extends(PeriodicVoucherDetailForm, _super);
            function PeriodicVoucherDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PeriodicVoucherDetailForm.formKey = 'Finance.PeriodicVoucherDetail';
            return PeriodicVoucherDetailForm;
        }(Serenity.PrefixedContext));
        Finance.PeriodicVoucherDetailForm = PeriodicVoucherDetailForm;
        [['EntryKey', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['AcctNo', function () { return Serenity.StringEditor; }],
            ['AcctName', function () { return Serenity.StringEditor; }],
            ['BranchNo', function () { return Serenity.StringEditor; }],
            ['CostCentre', function () { return Serenity.StringEditor; }],
            ['Dept', function () { return Serenity.StringEditor; }],
            ['LineRef', function () { return Serenity.StringEditor; }],
            ['DebitAmt', function () { return Serenity.DecimalEditor; }],
            ['CreditAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PeriodicVoucherDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherDetailRow;
        (function (PeriodicVoucherDetailRow) {
            PeriodicVoucherDetailRow.idProperty = 'Recnum';
            PeriodicVoucherDetailRow.nameProperty = 'EntryKey';
            PeriodicVoucherDetailRow.localTextPrefix = 'Finance.PeriodicVoucherDetail';
            var Fields;
            (function (Fields) {
            })(Fields = PeriodicVoucherDetailRow.Fields || (PeriodicVoucherDetailRow.Fields = {}));
            [
                'Recnum',
                'EntryKey',
                'LineNo',
                'AcctNo',
                'AcctName',
                'BranchNo',
                'CostCentre',
                'Dept',
                'LineRef',
                'DebitAmt',
                'CreditAmt',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'Particulars',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'EntryKeyRecnum',
                'EntryKeyDescription',
                'EntryKeyVoucherType',
                'EntryKeySeriesCode',
                'EntryKeyCcy',
                'EntryKeySuspended',
                'EntryKeyEffectiveFrom',
                'EntryKeyEffectiveTo',
                'EntryKeyLastLineNo',
                'EntryKeyCreatedDate',
                'EntryKeyCreatedBy',
                'EntryKeyRevisedDate',
                'EntryKeyRevisedBy',
                'EntryKeyOwnerBranch',
                'EntryKeySourceBranch',
                'EntryKeyAnlys1',
                'EntryKeyAnlys2',
                'EntryKeyReference',
                'EntryKeyTotalDebit',
                'EntryKeyTotalCredit',
                'EntryKeyParticulars',
                'EntryKeyAnlys7',
                'EntryKeyAnlys8',
                'EntryKeyAnlys9',
                'EntryKeyAnlys10',
                'EntryKeyAnlys11',
                'EntryKeyAnlys12',
                'EntryKeyAnlys13',
                'EntryKeyAnlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PeriodicVoucherDetailRow = Finance.PeriodicVoucherDetailRow || (Finance.PeriodicVoucherDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherDetailService;
        (function (PeriodicVoucherDetailService) {
            PeriodicVoucherDetailService.baseUrl = 'Finance/PeriodicVoucherDetail';
            var Methods;
            (function (Methods) {
            })(Methods = PeriodicVoucherDetailService.Methods || (PeriodicVoucherDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PeriodicVoucherDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(PeriodicVoucherDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PeriodicVoucherDetailService.baseUrl + '/' + x;
            });
        })(PeriodicVoucherDetailService = Finance.PeriodicVoucherDetailService || (Finance.PeriodicVoucherDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherForm = /** @class */ (function (_super) {
            __extends(PeriodicVoucherForm, _super);
            function PeriodicVoucherForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PeriodicVoucherForm.formKey = 'Finance.PeriodicVoucher';
            return PeriodicVoucherForm;
        }(Serenity.PrefixedContext));
        Finance.PeriodicVoucherForm = PeriodicVoucherForm;
        [['EntryKey', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['VoucherType', function () { return Serenity.StringEditor; }],
            ['SeriesCode', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['EffectiveFrom', function () { return Serenity.DateEditor; }],
            ['EffectiveTo', function () { return Serenity.DateEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['Reference', function () { return Serenity.TextAreaEditor; }],
            ['Particulars', function () { return Serenity.TextAreaEditor; }],
            ['DetailList', function () { return Finance.PeriodicVoucherDetailEditor; }],
            ['ScheduleList', function () { return Finance.PeriodicVoucherScheduleDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PeriodicVoucherForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherRow;
        (function (PeriodicVoucherRow) {
            PeriodicVoucherRow.idProperty = 'EntryKey';
            PeriodicVoucherRow.nameProperty = 'Description';
            PeriodicVoucherRow.localTextPrefix = 'Finance.PeriodicVoucher';
            var Fields;
            (function (Fields) {
            })(Fields = PeriodicVoucherRow.Fields || (PeriodicVoucherRow.Fields = {}));
            [
                'ScheduleList',
                'DetailList',
                'Recnum',
                'EntryKey',
                'Description',
                'VoucherType',
                'SeriesCode',
                'Ccy',
                'Suspended',
                'EffectiveFrom',
                'EffectiveTo',
                'LastLineNo',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Anlys1',
                'Anlys2',
                'Reference',
                'TotalDebit',
                'TotalCredit',
                'Particulars',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PeriodicVoucherRow = Finance.PeriodicVoucherRow || (Finance.PeriodicVoucherRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherScheduleForm = /** @class */ (function (_super) {
            __extends(PeriodicVoucherScheduleForm, _super);
            function PeriodicVoucherScheduleForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PeriodicVoucherScheduleForm.formKey = 'Finance.PeriodicVoucherSchedule';
            return PeriodicVoucherScheduleForm;
        }(Serenity.PrefixedContext));
        Finance.PeriodicVoucherScheduleForm = PeriodicVoucherScheduleForm;
        [['EntryKey', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['VoucherNo', function () { return Serenity.StringEditor; }],
            ['VoucherDate', function () { return Serenity.DateEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['DebitTotal', function () { return Serenity.DecimalEditor; }],
            ['CreditTotal', function () { return Serenity.DecimalEditor; }],
            ['SourceDate', function () { return Serenity.DateEditor; }],
            ['SourceBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PeriodicVoucherScheduleForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherScheduleRow;
        (function (PeriodicVoucherScheduleRow) {
            PeriodicVoucherScheduleRow.idProperty = 'Recnum';
            PeriodicVoucherScheduleRow.nameProperty = 'EntryKey';
            PeriodicVoucherScheduleRow.localTextPrefix = 'Finance.PeriodicVoucherSchedule';
            var Fields;
            (function (Fields) {
            })(Fields = PeriodicVoucherScheduleRow.Fields || (PeriodicVoucherScheduleRow.Fields = {}));
            [
                'Recnum',
                'EntryKey',
                'Period',
                'Suspended',
                'VoucherNo',
                'VoucherDate',
                'ExchRate',
                'DebitTotal',
                'CreditTotal',
                'SourceDate',
                'SourceBy',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'EntryKeyRecnum',
                'EntryKeyDescription',
                'EntryKeyVoucherType',
                'EntryKeySeriesCode',
                'EntryKeyCcy',
                'EntryKeySuspended',
                'EntryKeyEffectiveFrom',
                'EntryKeyEffectiveTo',
                'EntryKeyLastLineNo',
                'EntryKeyCreatedDate',
                'EntryKeyCreatedBy',
                'EntryKeyRevisedDate',
                'EntryKeyRevisedBy',
                'EntryKeyOwnerBranch',
                'EntryKeySourceBranch',
                'EntryKeyAnlys1',
                'EntryKeyAnlys2',
                'EntryKeyReference',
                'EntryKeyTotalDebit',
                'EntryKeyTotalCredit',
                'EntryKeyParticulars',
                'EntryKeyAnlys7',
                'EntryKeyAnlys8',
                'EntryKeyAnlys9',
                'EntryKeyAnlys10',
                'EntryKeyAnlys11',
                'EntryKeyAnlys12',
                'EntryKeyAnlys13',
                'EntryKeyAnlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PeriodicVoucherScheduleRow = Finance.PeriodicVoucherScheduleRow || (Finance.PeriodicVoucherScheduleRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherScheduleService;
        (function (PeriodicVoucherScheduleService) {
            PeriodicVoucherScheduleService.baseUrl = 'Finance/PeriodicVoucherSchedule';
            var Methods;
            (function (Methods) {
            })(Methods = PeriodicVoucherScheduleService.Methods || (PeriodicVoucherScheduleService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PeriodicVoucherScheduleService[x] = function (r, s, o) {
                    return Q.serviceRequest(PeriodicVoucherScheduleService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PeriodicVoucherScheduleService.baseUrl + '/' + x;
            });
        })(PeriodicVoucherScheduleService = Finance.PeriodicVoucherScheduleService || (Finance.PeriodicVoucherScheduleService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherService;
        (function (PeriodicVoucherService) {
            PeriodicVoucherService.baseUrl = 'Finance/PeriodicVoucher';
            var Methods;
            (function (Methods) {
            })(Methods = PeriodicVoucherService.Methods || (PeriodicVoucherService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PeriodicVoucherService[x] = function (r, s, o) {
                    return Q.serviceRequest(PeriodicVoucherService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PeriodicVoucherService.baseUrl + '/' + x;
            });
        })(PeriodicVoucherService = Finance.PeriodicVoucherService || (Finance.PeriodicVoucherService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCancellationForm = /** @class */ (function (_super) {
            __extends(VoucherCancellationForm, _super);
            function VoucherCancellationForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoucherCancellationForm.formKey = 'Finance.VoucherCancellation';
            return VoucherCancellationForm;
        }(Serenity.PrefixedContext));
        Finance.VoucherCancellationForm = VoucherCancellationForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['PostedDate', function () { return Serenity.DateEditor; }],
            ['PostedBy', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['VoucherType', function () { return Serenity.StringEditor; }],
            ['VoucherNo', function () { return Serenity.StringEditor; }],
            ['TranDate', function () { return Serenity.DateEditor; }],
            ['Particulars', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VoucherCancellationForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCancellationRow;
        (function (VoucherCancellationRow) {
            VoucherCancellationRow.idProperty = 'Recnum';
            VoucherCancellationRow.nameProperty = 'RefNo';
            VoucherCancellationRow.localTextPrefix = 'Finance.VoucherCancellation';
            var Fields;
            (function (Fields) {
            })(Fields = VoucherCancellationRow.Fields || (VoucherCancellationRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'PostedDate',
                'PostedBy',
                'Posted',
                'VoucherType',
                'VoucherNo',
                'TranDate',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'OwnerBranch',
                'SourceBranch',
                'Particulars'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VoucherCancellationRow = Finance.VoucherCancellationRow || (Finance.VoucherCancellationRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCancellationService;
        (function (VoucherCancellationService) {
            VoucherCancellationService.baseUrl = 'Finance/VoucherCancellation';
            var Methods;
            (function (Methods) {
            })(Methods = VoucherCancellationService.Methods || (VoucherCancellationService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VoucherCancellationService[x] = function (r, s, o) {
                    return Q.serviceRequest(VoucherCancellationService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VoucherCancellationService.baseUrl + '/' + x;
            });
        })(VoucherCancellationService = Finance.VoucherCancellationService || (Finance.VoucherCancellationService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCurrencyDetailForm = /** @class */ (function (_super) {
            __extends(VoucherCurrencyDetailForm, _super);
            function VoucherCurrencyDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoucherCurrencyDetailForm.formKey = 'Finance.VoucherCurrencyDetail';
            return VoucherCurrencyDetailForm;
        }(Serenity.PrefixedContext));
        Finance.VoucherCurrencyDetailForm = VoucherCurrencyDetailForm;
        [['VoucherType', function () { return Serenity.StringEditor; }],
            ['VoucherNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['LastExchRate', function () { return Serenity.DecimalEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VoucherCurrencyDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCurrencyDetailRow;
        (function (VoucherCurrencyDetailRow) {
            VoucherCurrencyDetailRow.idProperty = 'Recnum';
            VoucherCurrencyDetailRow.nameProperty = 'VoucherType';
            VoucherCurrencyDetailRow.localTextPrefix = 'Finance.VoucherCurrencyDetail';
            var Fields;
            (function (Fields) {
            })(Fields = VoucherCurrencyDetailRow.Fields || (VoucherCurrencyDetailRow.Fields = {}));
            [
                'Recnum',
                'VoucherType',
                'VoucherNo',
                'Ccy',
                'LastExchRate',
                'TotalDebit',
                'TotalCredit',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VoucherCurrencyDetailRow = Finance.VoucherCurrencyDetailRow || (Finance.VoucherCurrencyDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCurrencyDetailService;
        (function (VoucherCurrencyDetailService) {
            VoucherCurrencyDetailService.baseUrl = 'Finance/VoucherCurrencyDetail';
            var Methods;
            (function (Methods) {
            })(Methods = VoucherCurrencyDetailService.Methods || (VoucherCurrencyDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VoucherCurrencyDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(VoucherCurrencyDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VoucherCurrencyDetailService.baseUrl + '/' + x;
            });
        })(VoucherCurrencyDetailService = Finance.VoucherCurrencyDetailService || (Finance.VoucherCurrencyDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherDetailForm = /** @class */ (function (_super) {
            __extends(VoucherDetailForm, _super);
            function VoucherDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoucherDetailForm.formKey = 'Finance.VoucherDetail';
            return VoucherDetailForm;
        }(Serenity.PrefixedContext));
        Finance.VoucherDetailForm = VoucherDetailForm;
        [['VoucherType', function () { return Serenity.StringEditor; }],
            ['VoucherNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['AcctNo', function () { return Serenity.StringEditor; }],
            ['AcctName', function () { return Serenity.StringEditor; }],
            ['BranchNo', function () { return Serenity.StringEditor; }],
            ['CostCentre', function () { return Serenity.StringEditor; }],
            ['Dept', function () { return Serenity.StringEditor; }],
            ['LineRef', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['Debit', function () { return Serenity.DecimalEditor; }],
            ['Credit', function () { return Serenity.DecimalEditor; }],
            ['ForexAmt', function () { return Serenity.DecimalEditor; }],
            ['LedgerAmt', function () { return Serenity.DecimalEditor; }],
            ['Sign', function () { return Serenity.StringEditor; }],
            ['LedgerDebit', function () { return Serenity.DecimalEditor; }],
            ['LedgerCredit', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['Reconciled', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['FiscalYear', function () { return Serenity.DecimalEditor; }],
            ['PeriodNo', function () { return Serenity.DecimalEditor; }],
            ['JournalNo', function () { return Serenity.DecimalEditor; }],
            ['VoucherDate', function () { return Serenity.DateEditor; }],
            ['LedgerAmtCpd', function () { return Serenity.DecimalEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['PostedDate', function () { return Serenity.DateEditor; }],
            ['RunningBalance', function () { return Serenity.DecimalEditor; }],
            ['BalanceSign', function () { return Serenity.StringEditor; }],
            ['ExchDiff', function () { return Serenity.StringEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }],
            ['ItemGroup', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }],
            ['InvoiceNo', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VoucherDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherDetailRow;
        (function (VoucherDetailRow) {
            VoucherDetailRow.idProperty = 'Recnum';
            VoucherDetailRow.nameProperty = 'VoucherType';
            VoucherDetailRow.localTextPrefix = 'Finance.VoucherDetail';
            var Fields;
            (function (Fields) {
            })(Fields = VoucherDetailRow.Fields || (VoucherDetailRow.Fields = {}));
            [
                'Recnum',
                'VoucherType',
                'VoucherNo',
                'LineNo',
                'AcctNo',
                'AcctName',
                'BranchNo',
                'CostCentre',
                'Dept',
                'LineRef',
                'Ccy',
                'ExchRate',
                'Debit',
                'Credit',
                'ForexAmt',
                'LedgerAmt',
                'Sign',
                'LedgerDebit',
                'LedgerCredit',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'Posted',
                'Reconciled',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'JournalNo',
                'VoucherDate',
                'LedgerAmtCpd',
                'Reference',
                'PostedDate',
                'RunningBalance',
                'BalanceSign',
                'ExchDiff',
                'Particulars',
                'ItemGroup',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'InvoiceNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VoucherDetailRow = Finance.VoucherDetailRow || (Finance.VoucherDetailRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherDetailService;
        (function (VoucherDetailService) {
            VoucherDetailService.baseUrl = 'Finance/VoucherDetail';
            var Methods;
            (function (Methods) {
            })(Methods = VoucherDetailService.Methods || (VoucherDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VoucherDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(VoucherDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VoucherDetailService.baseUrl + '/' + x;
            });
        })(VoucherDetailService = Finance.VoucherDetailService || (Finance.VoucherDetailService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherForm = /** @class */ (function (_super) {
            __extends(VoucherForm, _super);
            function VoucherForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoucherForm.formKey = 'Finance.Voucher';
            return VoucherForm;
        }(Serenity.PrefixedContext));
        Finance.VoucherForm = VoucherForm;
        [['VoucherType', function () { return Serenity.StringEditor; }],
            ['VoucherNo', function () { return Serenity.StringEditor; }],
            ['VoucherDate', function () { return Serenity.DateEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['DetailList', function () { return Finance.VoucherDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VoucherForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherPresetForm = /** @class */ (function (_super) {
            __extends(VoucherPresetForm, _super);
            function VoucherPresetForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoucherPresetForm.formKey = 'Finance.VoucherPreset';
            return VoucherPresetForm;
        }(Serenity.PrefixedContext));
        Finance.VoucherPresetForm = VoucherPresetForm;
        [['VoucherType', function () { return Serenity.StringEditor; }],
            ['SeqNo', function () { return Serenity.DecimalEditor; }],
            ['AcctNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['DebitAmt', function () { return Serenity.DecimalEditor; }],
            ['CreditAmt', function () { return Serenity.DecimalEditor; }],
            ['BaseLineNo', function () { return Serenity.DecimalEditor; }],
            ['BaseEntry', function () { return Serenity.StringEditor; }],
            ['ResultPercent', function () { return Serenity.DecimalEditor; }],
            ['ResultSign', function () { return Serenity.StringEditor; }],
            ['CostCentre', function () { return Serenity.StringEditor; }],
            ['Dept', function () { return Serenity.StringEditor; }],
            ['Particulars', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VoucherPresetForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherPresetRow;
        (function (VoucherPresetRow) {
            VoucherPresetRow.idProperty = 'Recnum';
            VoucherPresetRow.nameProperty = 'VoucherType';
            VoucherPresetRow.localTextPrefix = 'Finance.VoucherPreset';
            var Fields;
            (function (Fields) {
            })(Fields = VoucherPresetRow.Fields || (VoucherPresetRow.Fields = {}));
            [
                'Recnum',
                'VoucherType',
                'SeqNo',
                'AcctNo',
                'Ccy',
                'ExchRate',
                'DebitAmt',
                'CreditAmt',
                'BaseLineNo',
                'BaseEntry',
                'ResultPercent',
                'ResultSign',
                'CostCentre',
                'Dept',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Particulars',
                'VoucherTypeRecnum',
                'VoucherTypeDescription',
                'VoucherTypeSuspended',
                'VoucherTypeDirectEntry',
                'VoucherTypeAllowEdit',
                'VoucherTypeMultiCurrency',
                'VoucherTypeBatchedPosting',
                'VoucherTypeCostCtrOpt',
                'VoucherTypeDeptOpt',
                'VoucherTypeAnlys1Opt',
                'VoucherTypeAnlys2Opt',
                'VoucherTypeAnlys3DrOpt',
                'VoucherTypeAnlys4DrOpt',
                'VoucherTypeAnlys5DrOpt',
                'VoucherTypeAnlys6DrOpt',
                'VoucherTypeAnlys3CrOpt',
                'VoucherTypeAnlys4CrOpt',
                'VoucherTypeAnlys5CrOpt',
                'VoucherTypeAnlys6CrOpt',
                'VoucherTypeSeriesCode',
                'VoucherTypeCreatedDate',
                'VoucherTypeCreatedBy',
                'VoucherTypeRevisedDate',
                'VoucherTypeRevisedBy',
                'VoucherTypeBatchCount',
                'VoucherTypeOwnerBranch',
                'VoucherTypeSourceBranch',
                'VoucherTypeRemarks',
                'VoucherTypeAnlys7Opt',
                'VoucherTypeAnlys8Opt',
                'VoucherTypeAnlys9Opt',
                'VoucherTypeAnlys10Opt',
                'VoucherTypeAnlys11Opt',
                'VoucherTypeAnlys12Opt',
                'VoucherTypeAnlys13Opt',
                'VoucherTypeAnlys14Opt',
                'VoucherTypeAnlys15DrOpt',
                'VoucherTypeAnlys16DrOpt',
                'VoucherTypeAnlys17DrOpt',
                'VoucherTypeAnlys18DrOpt',
                'VoucherTypeAnlys19DrOpt',
                'VoucherTypeAnlys20DrOpt',
                'VoucherTypeAnlys15CrOpt',
                'VoucherTypeAnlys16CrOpt',
                'VoucherTypeAnlys17CrOpt',
                'VoucherTypeAnlys18CrOpt',
                'VoucherTypeAnlys19CrOpt',
                'VoucherTypeAnlys20CrOpt'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VoucherPresetRow = Finance.VoucherPresetRow || (Finance.VoucherPresetRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherPresetService;
        (function (VoucherPresetService) {
            VoucherPresetService.baseUrl = 'Finance/VoucherPreset';
            var Methods;
            (function (Methods) {
            })(Methods = VoucherPresetService.Methods || (VoucherPresetService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VoucherPresetService[x] = function (r, s, o) {
                    return Q.serviceRequest(VoucherPresetService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VoucherPresetService.baseUrl + '/' + x;
            });
        })(VoucherPresetService = Finance.VoucherPresetService || (Finance.VoucherPresetService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherRow;
        (function (VoucherRow) {
            VoucherRow.idProperty = 'VoucherNo';
            VoucherRow.nameProperty = 'VoucherType';
            VoucherRow.localTextPrefix = 'Finance.Voucher';
            var Fields;
            (function (Fields) {
            })(Fields = VoucherRow.Fields || (VoucherRow.Fields = {}));
            [
                'DetailList',
                'Recnum',
                'VoucherType',
                'VoucherNo',
                'Posted',
                'Hold',
                'VoucherDate',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'Reference',
                'LastLineNo',
                'LineCount',
                'TotalDebit',
                'TotalCredit',
                'Balance',
                'BalanceSign',
                'JournalNo',
                'SourceType',
                'SourceRef',
                'Anlys1',
                'Anlys2',
                'BatchSelect',
                'LocalCcyOnly',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedBy',
                'PostedDate',
                'OwnerBranch',
                'SourceBranch',
                'Particulars',
                'AiLink',
                'AiLinkType',
                'AiLinkNo',
                'Anlys7',
                'Anlys8',
                'ExportedDate',
                'Fserialno',
                'Fnum',
                'RoundNo',
                'NewVoucherNo',
                'Fgroup',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'ManualEdited',
                'Remark'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VoucherRow = Finance.VoucherRow || (Finance.VoucherRow = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherService;
        (function (VoucherService) {
            VoucherService.baseUrl = 'Finance/Voucher';
            var Methods;
            (function (Methods) {
            })(Methods = VoucherService.Methods || (VoucherService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VoucherService[x] = function (r, s, o) {
                    return Q.serviceRequest(VoucherService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VoucherService.baseUrl + '/' + x;
            });
        })(VoucherService = Finance.VoucherService || (Finance.VoucherService = {}));
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var FifoControlForm = /** @class */ (function (_super) {
            __extends(FifoControlForm, _super);
            function FifoControlForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            FifoControlForm.formKey = 'Inventory.FifoControl';
            return FifoControlForm;
        }(Serenity.PrefixedContext));
        Inventory.FifoControlForm = FifoControlForm;
        [['Loc', function () { return Serenity.StringEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Allocated', function () { return Serenity.StringEditor; }],
            ['ValueDate', function () { return Serenity.DateEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['LogNoOut', function () { return Serenity.DecimalEditor; }],
            ['LineNoOut', function () { return Serenity.DecimalEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['Cost', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(FifoControlForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var FifoControlRow;
        (function (FifoControlRow) {
            FifoControlRow.idProperty = 'Recnum';
            FifoControlRow.nameProperty = 'Loc';
            FifoControlRow.localTextPrefix = 'Inventory.FifoControl';
            var Fields;
            (function (Fields) {
            })(Fields = FifoControlRow.Fields || (FifoControlRow.Fields = {}));
            [
                'Recnum',
                'Loc',
                'ItemNo',
                'Allocated',
                'ValueDate',
                'LogNo',
                'LineNo',
                'LogNoOut',
                'LineNoOut',
                'Qty',
                'Cost'
            ].forEach(function (x) { return Fields[x] = x; });
        })(FifoControlRow = Inventory.FifoControlRow || (Inventory.FifoControlRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var FifoControlService;
        (function (FifoControlService) {
            FifoControlService.baseUrl = 'Inventory/FifoControl';
            var Methods;
            (function (Methods) {
            })(Methods = FifoControlService.Methods || (FifoControlService.Methods = {}));
            [
                'Retrieve',
                'List'
            ].forEach(function (x) {
                FifoControlService[x] = function (r, s, o) {
                    return Q.serviceRequest(FifoControlService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = FifoControlService.baseUrl + '/' + x;
            });
        })(FifoControlService = Inventory.FifoControlService || (Inventory.FifoControlService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryBalanceForm = /** @class */ (function (_super) {
            __extends(InventoryBalanceForm, _super);
            function InventoryBalanceForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InventoryBalanceForm.formKey = 'Inventory.InventoryBalance';
            return InventoryBalanceForm;
        }(Serenity.PrefixedContext));
        Inventory.InventoryBalanceForm = InventoryBalanceForm;
        [['Loc', function () { return Serenity.StringEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Loc2', function () { return Serenity.StringEditor; }],
            ['ItemNo2', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LastDateIn', function () { return Serenity.DateEditor; }],
            ['LastDateOut', function () { return Serenity.DateEditor; }],
            ['WithBalance', function () { return Serenity.StringEditor; }],
            ['QtyOnHand', function () { return Serenity.DecimalEditor; }],
            ['QtyWaitlisted', function () { return Serenity.DecimalEditor; }],
            ['QtyReserved', function () { return Serenity.DecimalEditor; }],
            ['QtyCommitted', function () { return Serenity.DecimalEditor; }],
            ['QtyAvailable', function () { return Serenity.DecimalEditor; }],
            ['QtyUnallocated', function () { return Serenity.DecimalEditor; }],
            ['InvtCostAvail', function () { return Serenity.DecimalEditor; }],
            ['InvtCostLdg', function () { return Serenity.DecimalEditor; }],
            ['AverageCost', function () { return Serenity.StringEditor; }],
            ['LatestCost', function () { return Serenity.DecimalEditor; }],
            ['LastCountDate', function () { return Serenity.DateEditor; }],
            ['DefaultBinNo', function () { return Serenity.StringEditor; }],
            ['QtyOnInspect', function () { return Serenity.DecimalEditor; }],
            ['QtyOnTransfer', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(InventoryBalanceForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryBalanceRow;
        (function (InventoryBalanceRow) {
            InventoryBalanceRow.idProperty = 'Recnum';
            InventoryBalanceRow.nameProperty = 'Loc';
            InventoryBalanceRow.localTextPrefix = 'Inventory.InventoryBalance';
            var Fields;
            (function (Fields) {
            })(Fields = InventoryBalanceRow.Fields || (InventoryBalanceRow.Fields = {}));
            [
                'Recnum',
                'Loc',
                'ItemNo',
                'Loc2',
                'ItemNo2',
                'Description',
                'Uom',
                'LastDateIn',
                'LastDateOut',
                'WithBalance',
                'QtyOnHand',
                'QtyWaitlisted',
                'QtyReserved',
                'QtyCommitted',
                'QtyAvailable',
                'QtyUnallocated',
                'InvtCostAvail',
                'InvtCostLdg',
                'AverageCost',
                'LatestCost',
                'LastCountDate',
                'DefaultBinNo',
                'QtyOnInspect',
                'QtyOnTransfer',
                'LocRecnum',
                'LocDescription',
                'LocSuspended',
                'LocAddress',
                'LocAddress2',
                'LocAddress3',
                'LocAddress4',
                'LocBranchNo',
                'LocNoReservation',
                'LocNoWaitlist',
                'LocNoAvailable',
                'LocNoPlanning',
                'LocNoIssuance',
                'LocNoReceipts',
                'LocNoMatIssue',
                'LocNoFgReturn',
                'LocNoShipment',
                'LocNoGrn',
                'LocWithBacklog',
                'LocOnSorderCount',
                'LocOnPorderCount',
                'LocOnJorderCount',
                'LocInvtCostAvail',
                'LocInvtCostLdg',
                'LocCreatedDate',
                'LocCreatedBy',
                'LocRevisedDate',
                'LocRevisedBy',
                'LocOwnerBranch',
                'LocSourceBranch',
                'LocWithBinCtrl',
                'LocWithPackingBox',
                'ItemNoRecnum',
                'ItemNoDescription',
                'ItemNoSuspended',
                'ItemNoItemGroup',
                'ItemNoCharges',
                'ItemNoProduct',
                'ItemNoMaterial',
                'ItemNoInspected',
                'ItemNoItemType',
                'ItemNoStockUom',
                'ItemNoMainLoc',
                'ItemNoMakeBuy',
                'ItemNoAllocMethod',
                'ItemNoStdCostOk',
                'ItemNoCostCentre',
                'ItemNoCycleCode',
                'ItemNoAnlys1',
                'ItemNoAnlys2',
                'ItemNoAnlys3',
                'ItemNoAnlys4',
                'ItemNoDefSpecNo',
                'ItemNoDefSpecCount',
                'ItemNoCreatedDate',
                'ItemNoCreatedBy',
                'ItemNoRevisedDate',
                'ItemNoRevisedBy',
                'ItemNoWithBacklog',
                'ItemNoWithBalance',
                'ItemNoQtyOnHand',
                'ItemNoQtyOnSorder',
                'ItemNoQtyOnPorder',
                'ItemNoQtyOnJorder',
                'ItemNoQtyOnInspect',
                'ItemNoQtyWaitlisted',
                'ItemNoQtyReserved',
                'ItemNoQtyCommitted',
                'ItemNoQtyAvailable',
                'ItemNoQtyUnallocated',
                'ItemNoInvtCostAvail',
                'ItemNoInvtCostLdg',
                'ItemNoAverageCost',
                'ItemNoLatestCost',
                'ItemNoStdCost',
                'ItemNoLastCountDate',
                'ItemNoLastDateIn',
                'ItemNoLastDateOut',
                'ItemNoSalesUom',
                'ItemNoSalesLotSize',
                'ItemNoPriceCcy',
                'ItemNoBasePrice',
                'ItemNoPricea',
                'ItemNoPriceb',
                'ItemNoPricec',
                'ItemNoMinPrice',
                'ItemNoMaxPrice',
                'ItemNoMinOrderQty',
                'ItemNoMaxOrderQty',
                'ItemNoMinOrderDays',
                'ItemNoInnerPkgType',
                'ItemNoInnerQty',
                'ItemNoOuterPkgType',
                'ItemNoOuterQty',
                'ItemNoArticleCode',
                'ItemNoQuotaCategory',
                'ItemNoWeightUom',
                'ItemNoGrossWt',
                'ItemNoNetWt',
                'ItemNoDimensionUom',
                'ItemNoFlength',
                'ItemNoWidth',
                'ItemNoHeight',
                'ItemNoComputedVol',
                'ItemNoDeclaredVol',
                'ItemNoSrevisedDate',
                'ItemNoSrevisedBy',
                'ItemNoMpsItem',
                'ItemNoOrderPolicy',
                'ItemNoMinPlanordQty',
                'ItemNoMaxPlanordQty',
                'ItemNoStdPlanordQty',
                'ItemNoMinPlanordPrd',
                'ItemNoMaxPlanordPrd',
                'ItemNoStdPlanordPrd',
                'ItemNoReorderPt',
                'ItemNoReorderQty',
                'ItemNoMinMthlyProd',
                'ItemNoMaxMthlyProd',
                'ItemNoMinMthlyPur',
                'ItemNoMaxMthlyPur',
                'ItemNoFollowMinProd',
                'ItemNoFollowMaxProd',
                'ItemNoFollowMinPur',
                'ItemNoFollowMaxPur',
                'ItemNoAllowMixMode',
                'ItemNoPrefVendOnly',
                'ItemNoPrefVend1',
                'ItemNoPrefVend2',
                'ItemNoProdLeadTime',
                'ItemNoProdLeadUnit',
                'ItemNoPurLeadTime',
                'ItemNoPurLeadUnit',
                'ItemNoPlanner',
                'ItemNoMrpParmDate',
                'ItemNoMrpParmBy',
                'ItemNoAltDescription',
                'ItemNoPictureFile',
                'ItemNoAcctItmAsset',
                'ItemNoAcctItmWip',
                'ItemNoAcctItmConsum',
                'ItemNoAcctItmScrap',
                'ItemNoAcctItmPvar',
                'ItemNoAcctItmReval',
                'ItemNoAcctItmVaria',
                'ItemNoAcctItmSales',
                'ItemNoAcctItmSlret',
                'ItemNoAcctItmSldisc',
                'ItemNoAcctItmCogs',
                'ItemNoAcctItmPurch',
                'ItemNoAcctItmPuret',
                'ItemNoAcctItmPudisc',
                'ItemNoAcctItmPutax',
                'ItemNoAcctMachine',
                'ItemNoAcctEnergy',
                'ItemNoAcctWater',
                'ItemNoAcctRental',
                'ItemNoAcctLabor',
                'ItemNoAcctInlab',
                'ItemNoAcctInmat',
                'ItemNoAcctMisc',
                'ItemNoArevisedDate',
                'ItemNoArevisedBy',
                'ItemNoBrevisedDate',
                'ItemNoBrevisedBy',
                'ItemNoSalesLtaxCode',
                'ItemNoPurchLtaxCode',
                'ItemNoTrevisedDate',
                'ItemNoTrevisedBy',
                'ItemNoSpecsCount',
                'ItemNoDefBomNo',
                'ItemNoLastSnapNo',
                'ItemNoCommisType',
                'ItemNoProdBranch',
                'ItemNoOwnerBranch',
                'ItemNoSourceBranch',
                'ItemNoScrapRate',
                'ItemNoAltExtDesc',
                'ItemNoExtendedDesc',
                'ItemNoPurPriceCtrl',
                'ItemNoPurMaxDev',
                'ItemNoWebItem',
                'ItemNoAcctItmSubcon',
                'ItemNoWithBinCtrl',
                'ItemNoConsign',
                'ItemNoProdDevt01',
                'ItemNoProdDevt02',
                'ItemNoProdDevt03',
                'ItemNoProdDevt04',
                'ItemNoProdDevt05',
                'ItemNoProdDevt06',
                'ItemNoProdDevt07',
                'ItemNoProdDevt08',
                'ItemNoProdDevt09',
                'ItemNoProdDevt10',
                'ItemNoProdDevt11',
                'ItemNoProdDevt12',
                'ItemNoProdDevt13',
                'ItemNoProdDevt14',
                'ItemNoProdDevt15',
                'ItemNoProdDevt16',
                'ItemNoProdDevt17',
                'ItemNoProdDevt18',
                'ItemNoProdDevt19',
                'ItemNoProdDevt20',
                'ItemNoProdCheck01',
                'ItemNoProdCheck02',
                'ItemNoProdCheck03',
                'ItemNoProdCheck04',
                'ItemNoProdCheck05',
                'ItemNoProdCheck06',
                'ItemNoProdCheck07',
                'ItemNoProdCheck08',
                'ItemNoProdCheck09',
                'ItemNoProdCheck10',
                'ItemNoProdCheck11',
                'ItemNoProdCheck12',
                'ItemNoProdCheck13',
                'ItemNoProdCheck14',
                'ItemNoProdCheck15',
                'ItemNoProdCheck16',
                'ItemNoProdCheck17',
                'ItemNoProdCheck18',
                'ItemNoProdCheck19',
                'ItemNoProdCheck20',
                'ItemNoLastPackLineNo',
                'ItemNoPutaxPcent',
                'ItemNoAcctItmSltax',
                'ItemNoSltaxPcent',
                'ItemNoPurUom',
                'ItemNoPurLotSize',
                'ItemNoPurCcy',
                'ItemNoPurBasePrice',
                'ItemNoQtyNetAvailable',
                'ItemNoUseStdProdLeadTime',
                'ItemNoDailyProdQty',
                'ItemNoIssueLotSize',
                'ItemNoMrpExclude',
                'ItemNoEnableLot',
                'ItemNoEnableSerial',
                'ItemNoLotNoLength',
                'ItemNoSerialNoLength',
                'ItemNoNextLotNo',
                'ItemNoNextSerialNo',
                'ItemNoMaxLotSize',
                'ItemNoLotNoPrefix',
                'ItemNoSerialNoPrefix',
                'ItemNoSafeStockLvl',
                'ItemNoMainBin',
                'ItemNoCustomProdCode',
                'ItemNoCustomLotSize',
                'ItemNoCustomGrUom',
                'ItemNoCustomGrWt',
                'ItemNoCustomNtWt',
                'ItemNoCustomOrigin',
                'ItemNoIsApproved',
                'ItemNoApprovedBy',
                'ItemNoPreapprove',
                'ItemNoApprovedDate',
                'ItemNoQtyOnTransfer',
                'ItemNoWithResetLot',
                'ItemNoWithResetSerial',
                'ItemNoPrevResetLotDate',
                'ItemNoPrevResetSerialDate',
                'ItemNoAutogenLot',
                'ItemNoAutogenSerial',
                'ItemNoFabItem',
                'ItemNoAnlys5',
                'ItemNoAnlys6',
                'ItemNoAnlys7',
                'ItemNoAnlys8',
                'ItemNoAnlys9',
                'ItemNoAnlys10',
                'ItemNoUserDefinedField1',
                'ItemNoUserDefinedField2',
                'ItemNoUserDefinedField3',
                'ItemNoUserDefinedField4',
                'ItemNoUserDefinedField5',
                'ItemNoUserDefinedField6',
                'ItemNoUserDefinedField7',
                'ItemNoUserDefinedField8',
                'ItemNoUserDefinedField9',
                'ItemNoUserDefinedField10',
                'ItemNoUserDefinedField11',
                'ItemNoUserDefinedField12',
                'ItemNoUserDefinedField13',
                'ItemNoUserDefinedField14',
                'ItemNoUserDefinedField15',
                'ItemNoUserDefinedField16',
                'ItemNoUserDefinedField17',
                'ItemNoUserDefinedField18',
                'ItemNoUserDefinedField19',
                'ItemNoUserDefinedField20',
                'ItemNoRohsCompliance',
                'ItemNoDefMoldBomNo',
                'ItemNoDefFormulaCode',
                'ItemNoBoxType',
                'ItemNoBoxLength',
                'ItemNoBoxWidth',
                'ItemNoBoxHeight',
                'ItemNoBoxDUom',
                'ItemNoWd',
                'ItemNoWdUom',
                'ItemNoCsLength',
                'ItemNoCsWidth',
                'ItemNoUserDefinedField21',
                'ItemNoCostWmove',
                'ItemNoCostWcase',
                'ItemNoCostWband',
                'ItemNoCostBatt',
                'ItemNoDescWmove',
                'ItemNoDescWcase',
                'ItemNoDescWband',
                'ItemNoDescBatt',
                'ItemNoPoBal',
                'ItemNoPoMaxBal',
                'ItemNoIncludeJob',
                'ItemNoCsThickness',
                'ItemNoCsThicknessUom',
                'ItemNoCsProportion',
                'ItemNoCsProportionUom',
                'ItemNoDieCutter',
                'ItemNoMatInspectLeadTime',
                'ItemNoMatPrepareLeadTime',
                'ItemNoMatInspectLeadUnit',
                'ItemNoMatPrepareLeadUnit',
                'ItemNoColorCode',
                'ItemNoCollectionCode',
                'ItemNoStyleCode',
                'ItemNoX',
                'ItemNoY',
                'ItemNoTempDescription',
                'ItemNoSpecification',
                'ItemNoXUom',
                'ItemNoYUom',
                'ItemNoProductionUomConversionRate',
                'ItemNoPurchaseUomConversionRate',
                'ItemNoAutogenLotIssue',
                'ItemNoAutogenSerialIssue',
                'ItemNoWcCostCcy',
                'ItemNoWcCost',
                'ItemNoWcCostDisc',
                'ItemNoWcCostExch',
                'ItemNoWcFreight',
                'ItemNoWcMargin',
                'ItemNoCeilingPrice',
                'ItemNoBottomRatio',
                'ItemNoBottomPrice',
                'ItemNoDrawingNo',
                'ItemNoMaterialType'
            ].forEach(function (x) { return Fields[x] = x; });
        })(InventoryBalanceRow = Inventory.InventoryBalanceRow || (Inventory.InventoryBalanceRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryBalanceService;
        (function (InventoryBalanceService) {
            InventoryBalanceService.baseUrl = 'Inventory/InventoryBalance';
            var Methods;
            (function (Methods) {
            })(Methods = InventoryBalanceService.Methods || (InventoryBalanceService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                InventoryBalanceService[x] = function (r, s, o) {
                    return Q.serviceRequest(InventoryBalanceService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = InventoryBalanceService.baseUrl + '/' + x;
            });
        })(InventoryBalanceService = Inventory.InventoryBalanceService || (Inventory.InventoryBalanceService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementDetailForm = /** @class */ (function (_super) {
            __extends(InventoryMovementDetailForm, _super);
            function InventoryMovementDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InventoryMovementDetailForm.formKey = 'Inventory.InventoryMovementDetail';
            return InventoryMovementDetailForm;
        }(Serenity.PrefixedContext));
        Inventory.InventoryMovementDetailForm = InventoryMovementDetailForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['LineRef', function () { return Serenity.StringEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['UnitCost', function () { return Serenity.DecimalEditor; }],
            ['TotalCost', function () { return Serenity.DecimalEditor; }],
            ['QtyPerRec', function () { return Serenity.DecimalEditor; }],
            ['QtyPerCount', function () { return Serenity.DecimalEditor; }],
            ['BinQtyIn', function () { return Serenity.DecimalEditor; }],
            ['BinQtyOut', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['BaseQty', function () { return Serenity.DecimalEditor; }],
            ['BaseUnitCost', function () { return Serenity.DecimalEditor; }],
            ['QtyCommitted', function () { return Serenity.DecimalEditor; }],
            ['QtyRequired', function () { return Serenity.DecimalEditor; }],
            ['QtyIssued', function () { return Serenity.DecimalEditor; }],
            ['QtyBalance', function () { return Serenity.DecimalEditor; }],
            ['QtyPer', function () { return Serenity.DecimalEditor; }],
            ['Final', function () { return Serenity.StringEditor; }],
            ['DebitAcct', function () { return Serenity.StringEditor; }],
            ['CreditAcct', function () { return Serenity.StringEditor; }],
            ['AllocMethod', function () { return Serenity.StringEditor; }],
            ['SourceType', function () { return Serenity.StringEditor; }],
            ['SourceRefNo', function () { return Serenity.StringEditor; }],
            ['SourceEntryNo', function () { return Serenity.DecimalEditor; }],
            ['SourcePartNo', function () { return Serenity.DecimalEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }],
            ['RevisedCost', function () { return Serenity.DecimalEditor; }],
            ['CostDiff', function () { return Serenity.DecimalEditor; }],
            ['FlowType', function () { return Serenity.StringEditor; }],
            ['LocFrom', function () { return Serenity.StringEditor; }],
            ['LocTo', function () { return Serenity.StringEditor; }],
            ['TempStubNo', function () { return Serenity.StringEditor; }],
            ['TempLoc', function () { return Serenity.StringEditor; }],
            ['TempReserved', function () { return Serenity.DecimalEditor; }],
            ['TempDateNeeded', function () { return Serenity.DateEditor; }],
            ['TempRemarks', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }],
            ['AllocatedQty', function () { return Serenity.DecimalEditor; }],
            ['AllocatedCost', function () { return Serenity.DecimalEditor; }],
            ['QtyPick', function () { return Serenity.DecimalEditor; }],
            ['Weight', function () { return Serenity.DecimalEditor; }],
            ['TotalWeight', function () { return Serenity.DecimalEditor; }],
            ['QtyFollowList', function () { return Serenity.DecimalEditor; }],
            ['QuotationScrapQty', function () { return Serenity.DecimalEditor; }],
            ['QuotationScrapRate', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(InventoryMovementDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementDetailRow;
        (function (InventoryMovementDetailRow) {
            InventoryMovementDetailRow.idProperty = 'Recnum';
            InventoryMovementDetailRow.nameProperty = 'RefNo';
            InventoryMovementDetailRow.localTextPrefix = 'Inventory.InventoryMovementDetail';
            var Fields;
            (function (Fields) {
            })(Fields = InventoryMovementDetailRow.Fields || (InventoryMovementDetailRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'LineRef',
                'Qty',
                'UnitCost',
                'TotalCost',
                'QtyPerRec',
                'QtyPerCount',
                'BinQtyIn',
                'BinQtyOut',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'BaseQty',
                'BaseUnitCost',
                'QtyCommitted',
                'QtyRequired',
                'QtyIssued',
                'QtyBalance',
                'QtyPer',
                'Final',
                'DebitAcct',
                'CreditAcct',
                'AllocMethod',
                'SourceType',
                'SourceRefNo',
                'SourceEntryNo',
                'SourcePartNo',
                'Particulars',
                'RevisedCost',
                'CostDiff',
                'FlowType',
                'LocFrom',
                'LocTo',
                'TempStubNo',
                'TempLoc',
                'TempReserved',
                'TempDateNeeded',
                'TempRemarks',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'AllocatedQty',
                'AllocatedCost',
                'QtyPick',
                'Weight',
                'TotalWeight',
                'QtyFollowList',
                'QuotationScrapQty',
                'QuotationScrapRate',
                'RefNoRecnum',
                'RefNoTranType',
                'RefNoMoveDate',
                'RefNoValueDate',
                'RefNoPosted',
                'RefNoPostedStep1',
                'RefNoFlowType',
                'RefNoMoveType',
                'RefNoLocFrom',
                'RefNoLocTo',
                'RefNoReference',
                'RefNoReceivedFrom',
                'RefNoIssuedTo',
                'RefNoDept',
                'RefNoTotalCost',
                'RefNoLastLineNo',
                'RefNoCreatedBy',
                'RefNoCreatedDate',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoPostedDate',
                'RefNoPostedBy',
                'RefNoLogNo',
                'RefNoSourceType',
                'RefNoSourceRef',
                'RefNoAnlys1',
                'RefNoAnlys2',
                'RefNoPeriod',
                'RefNoFiscalYear',
                'RefNoPeriodNo',
                'RefNoJobNo',
                'RefNoBatchNo',
                'RefNoStartDate',
                'RefNoBranchNo',
                'RefNoFinal',
                'RefNoLotsPending',
                'RefNoLotsIssued',
                'RefNoQtyIssued',
                'RefNoStdOutput',
                'RefNoBatchSelect',
                'RefNoGlLink',
                'RefNoGlLinkType',
                'RefNoGlLinkNo',
                'RefNoOwnerBranch',
                'RefNoSourceBranch',
                'RefNoParticulars',
                'RefNoRevisedCost',
                'RefNoCostDiff',
                'RefNoDiffAcct',
                'RefNoItemNo',
                'RefNoBomNo',
                'RefNoUom',
                'RefNoQty',
                'RefNoFollowList',
                'RefNoAnlys7',
                'RefNoAnlys8',
                'RefNoFlag',
                'RefNoHoldBy',
                'RefNoFrozen',
                'RefNoExcludeScrap',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14',
                'RefNoLotsReturned',
                'RefNoStepNo',
                'RefNoConsIssue',
                'RefNoConsIssueRefNo',
                'RefNoConsIssueLineNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(InventoryMovementDetailRow = Inventory.InventoryMovementDetailRow || (Inventory.InventoryMovementDetailRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementDetailService;
        (function (InventoryMovementDetailService) {
            InventoryMovementDetailService.baseUrl = 'Inventory/InventoryMovementDetail';
            var Methods;
            (function (Methods) {
            })(Methods = InventoryMovementDetailService.Methods || (InventoryMovementDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                InventoryMovementDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(InventoryMovementDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = InventoryMovementDetailService.baseUrl + '/' + x;
            });
        })(InventoryMovementDetailService = Inventory.InventoryMovementDetailService || (Inventory.InventoryMovementDetailService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementIssueForm = /** @class */ (function (_super) {
            __extends(InventoryMovementIssueForm, _super);
            function InventoryMovementIssueForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InventoryMovementIssueForm.formKey = 'Inventory.InventoryMovementIssue';
            return InventoryMovementIssueForm;
        }(Serenity.PrefixedContext));
        Inventory.InventoryMovementIssueForm = InventoryMovementIssueForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['MoveType', function () { return Serenity.StringEditor; }],
            ['MoveDate', function () { return Serenity.DateEditor; }],
            ['LocFrom', function () { return Serenity.StringEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['SourceType', function () { return Serenity.StringEditor; }],
            ['SourceRef', function () { return Serenity.StringEditor; }],
            ['DetailList', function () { return Inventory.InventoryMovementDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(InventoryMovementIssueForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementReceiptForm = /** @class */ (function (_super) {
            __extends(InventoryMovementReceiptForm, _super);
            function InventoryMovementReceiptForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InventoryMovementReceiptForm.formKey = 'Inventory.InventoryMovementReceipt';
            return InventoryMovementReceiptForm;
        }(Serenity.PrefixedContext));
        Inventory.InventoryMovementReceiptForm = InventoryMovementReceiptForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['MoveType', function () { return Serenity.StringEditor; }],
            ['MoveDate', function () { return Serenity.DateEditor; }],
            ['LocTo', function () { return Serenity.StringEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['SourceType', function () { return Serenity.StringEditor; }],
            ['SourceRef', function () { return Serenity.StringEditor; }],
            ['DetailList', function () { return Inventory.InventoryMovementDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(InventoryMovementReceiptForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementRow;
        (function (InventoryMovementRow) {
            InventoryMovementRow.idProperty = 'RefNo';
            InventoryMovementRow.nameProperty = 'RefNo';
            InventoryMovementRow.localTextPrefix = 'Inventory.InventoryMovement';
            var Fields;
            (function (Fields) {
            })(Fields = InventoryMovementRow.Fields || (InventoryMovementRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'TranType',
                'MoveDate',
                'ValueDate',
                'Posted',
                'PostedStep1',
                'FlowType',
                'MoveType',
                'LocFrom',
                'LocTo',
                'Reference',
                'ReceivedFrom',
                'IssuedTo',
                'Dept',
                'TotalCost',
                'LastLineNo',
                'CreatedBy',
                'CreatedDate',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LogNo',
                'SourceType',
                'SourceRef',
                'Anlys1',
                'Anlys2',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'JobNo',
                'BatchNo',
                'StartDate',
                'BranchNo',
                'Final',
                'LotsPending',
                'LotsIssued',
                'QtyIssued',
                'StdOutput',
                'BatchSelect',
                'GlLink',
                'GlLinkType',
                'GlLinkNo',
                'OwnerBranch',
                'SourceBranch',
                'Particulars',
                'RevisedCost',
                'CostDiff',
                'DiffAcct',
                'ItemNo',
                'BomNo',
                'Uom',
                'Qty',
                'FollowList',
                'Anlys7',
                'Anlys8',
                'Flag',
                'HoldBy',
                'Frozen',
                'ExcludeScrap',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'LotsReturned',
                'StepNo',
                'ConsIssue',
                'ConsIssueRefNo',
                'ConsIssueLineNo',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(InventoryMovementRow = Inventory.InventoryMovementRow || (Inventory.InventoryMovementRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementService;
        (function (InventoryMovementService) {
            InventoryMovementService.baseUrl = 'Inventory/InventoryMovement';
            var Methods;
            (function (Methods) {
            })(Methods = InventoryMovementService.Methods || (InventoryMovementService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                InventoryMovementService[x] = function (r, s, o) {
                    return Q.serviceRequest(InventoryMovementService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = InventoryMovementService.baseUrl + '/' + x;
            });
        })(InventoryMovementService = Inventory.InventoryMovementService || (Inventory.InventoryMovementService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementTransferForm = /** @class */ (function (_super) {
            __extends(InventoryMovementTransferForm, _super);
            function InventoryMovementTransferForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            InventoryMovementTransferForm.formKey = 'Inventory.InventoryMovementTransfer';
            return InventoryMovementTransferForm;
        }(Serenity.PrefixedContext));
        Inventory.InventoryMovementTransferForm = InventoryMovementTransferForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['MoveType', function () { return Serenity.StringEditor; }],
            ['MoveDate', function () { return Serenity.DateEditor; }],
            ['LocFrom', function () { return Serenity.StringEditor; }],
            ['LocTo', function () { return Serenity.StringEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['SourceType', function () { return Serenity.StringEditor; }],
            ['SourceRef', function () { return Serenity.StringEditor; }],
            ['DetailList', function () { return Inventory.InventoryMovementDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(InventoryMovementTransferForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotForm = /** @class */ (function (_super) {
            __extends(ItemLotForm, _super);
            function ItemLotForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ItemLotForm.formKey = 'Inventory.ItemLot';
            return ItemLotForm;
        }(Serenity.PrefixedContext));
        Inventory.ItemLotForm = ItemLotForm;
        [['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['BinNo', function () { return Serenity.StringEditor; }],
            ['LotNo', function () { return Serenity.StringEditor; }],
            ['Closed', function () { return Serenity.StringEditor; }],
            ['LocSummary', function () { return Serenity.StringEditor; }],
            ['QtyShipped', function () { return Serenity.DecimalEditor; }],
            ['QtyReceived', function () { return Serenity.DecimalEditor; }],
            ['QtyIssued', function () { return Serenity.DecimalEditor; }],
            ['QtyFinished', function () { return Serenity.DecimalEditor; }],
            ['QtyBalance', function () { return Serenity.DecimalEditor; }],
            ['ExpiryDate', function () { return Serenity.DateEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['UnitCost', function () { return Serenity.DecimalEditor; }],
            ['UserDefinedField01', function () { return Serenity.StringEditor; }],
            ['UserDefinedField02', function () { return Serenity.StringEditor; }],
            ['UserDefinedField03', function () { return Serenity.StringEditor; }],
            ['UserDefinedField04', function () { return Serenity.StringEditor; }],
            ['UserDefinedField05', function () { return Serenity.StringEditor; }],
            ['FifoLogNo', function () { return Serenity.DecimalEditor; }],
            ['FifoLineNo', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ItemLotForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotRow;
        (function (ItemLotRow) {
            ItemLotRow.idProperty = 'Recnum';
            ItemLotRow.nameProperty = 'ItemNo';
            ItemLotRow.localTextPrefix = 'Inventory.ItemLot';
            ItemLotRow.lookupKey = 'Inventory.ItemLotItemLookup';
            function getLookup() {
                return Q.getLookup('Inventory.ItemLotItemLookup');
            }
            ItemLotRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = ItemLotRow.Fields || (ItemLotRow.Fields = {}));
            [
                'Recnum',
                'ItemNo',
                'Description',
                'Loc',
                'BinNo',
                'LotNo',
                'Closed',
                'LocSummary',
                'QtyShipped',
                'QtyReceived',
                'QtyIssued',
                'QtyFinished',
                'QtyBalance',
                'ExpiryDate',
                'Uom',
                'Remarks',
                'UnitCost',
                'UserDefinedField01',
                'UserDefinedField02',
                'UserDefinedField03',
                'UserDefinedField04',
                'UserDefinedField05',
                'FifoLogNo',
                'FifoLineNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ItemLotRow = Inventory.ItemLotRow || (Inventory.ItemLotRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotSerialForm = /** @class */ (function (_super) {
            __extends(ItemLotSerialForm, _super);
            function ItemLotSerialForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ItemLotSerialForm.formKey = 'Inventory.ItemLotSerial';
            return ItemLotSerialForm;
        }(Serenity.PrefixedContext));
        Inventory.ItemLotSerialForm = ItemLotSerialForm;
        [['ItemNo', function () { return Serenity.StringEditor; }],
            ['SerialNo', function () { return Serenity.StringEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['BinNo', function () { return Serenity.StringEditor; }],
            ['LotNo', function () { return Serenity.StringEditor; }],
            ['Closed', function () { return Serenity.StringEditor; }],
            ['ExpiryDate', function () { return Serenity.DateEditor; }],
            ['SourceType', function () { return Serenity.StringEditor; }],
            ['SourceRef', function () { return Serenity.StringEditor; }],
            ['SourceEntryNo', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ItemLotSerialForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotSerialRow;
        (function (ItemLotSerialRow) {
            ItemLotSerialRow.idProperty = 'Recnum';
            ItemLotSerialRow.nameProperty = 'ItemNo';
            ItemLotSerialRow.localTextPrefix = 'Inventory.ItemLotSerial';
            ItemLotSerialRow.lookupKey = 'Inventory.ItemLotSerialItemLookup';
            function getLookup() {
                return Q.getLookup('Inventory.ItemLotSerialItemLookup');
            }
            ItemLotSerialRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = ItemLotSerialRow.Fields || (ItemLotSerialRow.Fields = {}));
            [
                'Recnum',
                'ItemNo',
                'SerialNo',
                'Loc',
                'BinNo',
                'LotNo',
                'Closed',
                'ExpiryDate',
                'SourceType',
                'SourceRef',
                'SourceEntryNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ItemLotSerialRow = Inventory.ItemLotSerialRow || (Inventory.ItemLotSerialRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotSerialService;
        (function (ItemLotSerialService) {
            ItemLotSerialService.baseUrl = 'Inventory/ItemLotSerial';
            var Methods;
            (function (Methods) {
            })(Methods = ItemLotSerialService.Methods || (ItemLotSerialService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ItemLotSerialService[x] = function (r, s, o) {
                    return Q.serviceRequest(ItemLotSerialService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ItemLotSerialService.baseUrl + '/' + x;
            });
        })(ItemLotSerialService = Inventory.ItemLotSerialService || (Inventory.ItemLotSerialService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotService;
        (function (ItemLotService) {
            ItemLotService.baseUrl = 'Inventory/ItemLot';
            var Methods;
            (function (Methods) {
            })(Methods = ItemLotService.Methods || (ItemLotService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ItemLotService[x] = function (r, s, o) {
                    return Q.serviceRequest(ItemLotService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ItemLotService.baseUrl + '/' + x;
            });
        })(ItemLotService = Inventory.ItemLotService || (Inventory.ItemLotService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockJournalForm = /** @class */ (function (_super) {
            __extends(StockJournalForm, _super);
            function StockJournalForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            StockJournalForm.formKey = 'Inventory.StockJournal';
            return StockJournalForm;
        }(Serenity.PrefixedContext));
        Inventory.StockJournalForm = StockJournalForm;
        [['Loc', function () { return Serenity.StringEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['ValueDate', function () { return Serenity.DateEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['MoveIn', function () { return Serenity.StringEditor; }],
            ['RefNo', function () { return Serenity.StringEditor; }],
            ['QtyIn', function () { return Serenity.DecimalEditor; }],
            ['QtyOut', function () { return Serenity.DecimalEditor; }],
            ['CostIn', function () { return Serenity.DecimalEditor; }],
            ['CostOut', function () { return Serenity.DecimalEditor; }],
            ['MoveDate', function () { return Serenity.DateEditor; }],
            ['LineRef', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['MoveType', function () { return Serenity.StringEditor; }],
            ['Reference', function () { return Serenity.StringEditor; }],
            ['Transfer', function () { return Serenity.StringEditor; }],
            ['FromTo', function () { return Serenity.StringEditor; }],
            ['BalQty', function () { return Serenity.DecimalEditor; }],
            ['BalCost', function () { return Serenity.DecimalEditor; }],
            ['BalQtyItem', function () { return Serenity.DecimalEditor; }],
            ['BalCostItem', function () { return Serenity.DecimalEditor; }],
            ['UnitCost', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(StockJournalForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockJournalRow;
        (function (StockJournalRow) {
            StockJournalRow.idProperty = 'Recnum';
            StockJournalRow.nameProperty = 'Loc';
            StockJournalRow.localTextPrefix = 'Inventory.StockJournal';
            var Fields;
            (function (Fields) {
            })(Fields = StockJournalRow.Fields || (StockJournalRow.Fields = {}));
            [
                'Recnum',
                'Loc',
                'ItemNo',
                'Period',
                'ValueDate',
                'LogNo',
                'LineNo',
                'MoveIn',
                'RefNo',
                'QtyIn',
                'QtyOut',
                'CostIn',
                'CostOut',
                'MoveDate',
                'LineRef',
                'Description',
                'MoveType',
                'Reference',
                'Transfer',
                'FromTo',
                'BalQty',
                'BalCost',
                'BalQtyItem',
                'BalCostItem',
                'UnitCost',
                'Quantity',
                'Cost'
            ].forEach(function (x) { return Fields[x] = x; });
        })(StockJournalRow = Inventory.StockJournalRow || (Inventory.StockJournalRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockJournalService;
        (function (StockJournalService) {
            StockJournalService.baseUrl = 'Inventory/StockJournal';
            var Methods;
            (function (Methods) {
            })(Methods = StockJournalService.Methods || (StockJournalService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                StockJournalService[x] = function (r, s, o) {
                    return Q.serviceRequest(StockJournalService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = StockJournalService.baseUrl + '/' + x;
            });
        })(StockJournalService = Inventory.StockJournalService || (Inventory.StockJournalService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockLedgerForm = /** @class */ (function (_super) {
            __extends(StockLedgerForm, _super);
            function StockLedgerForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            StockLedgerForm.formKey = 'Inventory.StockLedger';
            return StockLedgerForm;
        }(Serenity.PrefixedContext));
        Inventory.StockLedgerForm = StockLedgerForm;
        [['Loc', function () { return Serenity.StringEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['QtyBeg', function () { return Serenity.DecimalEditor; }],
            ['QtyIn', function () { return Serenity.DecimalEditor; }],
            ['QtyOut', function () { return Serenity.DecimalEditor; }],
            ['QtyEnd', function () { return Serenity.DecimalEditor; }],
            ['QtyInTrf', function () { return Serenity.DecimalEditor; }],
            ['QtyOutTrf', function () { return Serenity.DecimalEditor; }],
            ['CostInTrf', function () { return Serenity.DecimalEditor; }],
            ['CostOutTrf', function () { return Serenity.DecimalEditor; }],
            ['ValueBeg', function () { return Serenity.DecimalEditor; }],
            ['CostIn', function () { return Serenity.DecimalEditor; }],
            ['CostOut', function () { return Serenity.DecimalEditor; }],
            ['ValueEnd', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(StockLedgerForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockLedgerRow;
        (function (StockLedgerRow) {
            StockLedgerRow.idProperty = 'Recnum';
            StockLedgerRow.nameProperty = 'Fullname';
            StockLedgerRow.localTextPrefix = 'Inventory.StockLedger';
            var Fields;
            (function (Fields) {
            })(Fields = StockLedgerRow.Fields || (StockLedgerRow.Fields = {}));
            [
                'Fullname',
                'Recnum',
                'Loc',
                'ItemNo',
                'Period',
                'Loc2',
                'ItemNo2',
                'Period2',
                'FiscalYear',
                'PeriodNo',
                'QtyIn',
                'QtyOut',
                'QtyOutAlloc',
                'CostIn',
                'CostOut',
                'QtyInTrf',
                'QtyOutTrf',
                'CostInTrf',
                'CostOutTrf',
                'QtyBeg',
                'QtyEnd',
                'ValueBeg',
                'ValueEnd'
            ].forEach(function (x) { return Fields[x] = x; });
        })(StockLedgerRow = Inventory.StockLedgerRow || (Inventory.StockLedgerRow = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockLedgerService;
        (function (StockLedgerService) {
            StockLedgerService.baseUrl = 'Inventory/StockLedger';
            var Methods;
            (function (Methods) {
            })(Methods = StockLedgerService.Methods || (StockLedgerService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                StockLedgerService[x] = function (r, s, o) {
                    return Q.serviceRequest(StockLedgerService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = StockLedgerService.baseUrl + '/' + x;
            });
        })(StockLedgerService = Inventory.StockLedgerService || (Inventory.StockLedgerService = {}));
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountBudgetForm = /** @class */ (function (_super) {
            __extends(AccountBudgetForm, _super);
            function AccountBudgetForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountBudgetForm.formKey = 'Finance.AccountBudget';
            return AccountBudgetForm;
        }(Serenity.PrefixedContext));
        MasterData.AccountBudgetForm = AccountBudgetForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['FiscalYear', function () { return Serenity.DecimalEditor; }],
            ['PeriodNo', function () { return Serenity.DecimalEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['ControlDebit', function () { return Serenity.StringEditor; }],
            ['ControlCredit', function () { return Serenity.StringEditor; }],
            ['BudgetDebit', function () { return Serenity.DecimalEditor; }],
            ['BudgetCredit', function () { return Serenity.DecimalEditor; }],
            ['BudgetDate', function () { return Serenity.DateEditor; }],
            ['BudgetBy', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountBudgetForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountBudgetRow;
        (function (AccountBudgetRow) {
            AccountBudgetRow.idProperty = 'Recnum';
            AccountBudgetRow.nameProperty = 'AcctNo';
            AccountBudgetRow.localTextPrefix = 'Finance.AccountBudget';
            var Fields;
            (function (Fields) {
            })(Fields = AccountBudgetRow.Fields || (AccountBudgetRow.Fields = {}));
            [
                'Recnum',
                'AcctNo',
                'Period',
                'FiscalYear',
                'PeriodNo',
                'TotalDebit',
                'TotalCredit',
                'ControlDebit',
                'ControlCredit',
                'BudgetDebit',
                'BudgetCredit',
                'BudgetDate',
                'BudgetBy',
                'AcctNoRecnum',
                'AcctNoAcctName',
                'AcctNoAltAcctNo',
                'AcctNoNormalSign',
                'AcctNoTypeBs',
                'AcctNoTypePl',
                'AcctNoTypeDebtor',
                'AcctNoTypeCreditor',
                'AcctNoTypeMemo',
                'AcctNoDefaultCcy',
                'AcctNoAnlys1',
                'AcctNoAnlys2',
                'AcctNoAnlys3',
                'AcctNoAnlys4',
                'AcctNoSuspended',
                'AcctNoFixedCurrency',
                'AcctNoAutoDist',
                'AcctNoBudgetControl',
                'AcctNoSupprAnlys3',
                'AcctNoSupprAnlys4',
                'AcctNoSupprAnlys5',
                'AcctNoSupprAnlys6',
                'AcctNoSupprReval',
                'AcctNoNoCostCentre',
                'AcctNoNoDept',
                'AcctNoOper1',
                'AcctNoOper2',
                'AcctNoOper3',
                'AcctNoOper4',
                'AcctNoOper5',
                'AcctNoLinesBefPrint',
                'AcctNoTranAcct',
                'AcctNoSummaryPos',
                'AcctNoCreatedDate',
                'AcctNoCreatedBy',
                'AcctNoRevisedDate',
                'AcctNoRevisedBy',
                'AcctNoReconLastDate',
                'AcctNoReconLastJrn',
                'AcctNoReconBal',
                'AcctNoReconBalSign',
                'AcctNoLastTranDate',
                'AcctNoLastJrnNo',
                'AcctNoDistTotalPct',
                'AcctNoDistLastLine',
                'AcctNoReconCount',
                'AcctNoBalanceEnd',
                'AcctNoBalanceSign',
                'AcctNoOwnerBranch',
                'AcctNoSourceBranch',
                'AcctNoAllowEdit',
                'AcctNoAnlys5',
                'AcctNoAnlys6',
                'AcctNoAnlys7',
                'AcctNoAnlys8',
                'AcctNoAnlys9',
                'AcctNoAnlys10'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountBudgetRow = MasterData.AccountBudgetRow || (MasterData.AccountBudgetRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountBudgetService;
        (function (AccountBudgetService) {
            AccountBudgetService.baseUrl = 'Finance/AccountBudget';
            var Methods;
            (function (Methods) {
            })(Methods = AccountBudgetService.Methods || (AccountBudgetService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountBudgetService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountBudgetService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountBudgetService.baseUrl + '/' + x;
            });
        })(AccountBudgetService = MasterData.AccountBudgetService || (MasterData.AccountBudgetService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountForm = /** @class */ (function (_super) {
            __extends(AccountForm, _super);
            function AccountForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AccountForm.formKey = 'MasterData.Account';
            return AccountForm;
        }(Serenity.PrefixedContext));
        MasterData.AccountForm = AccountForm;
        [['AcctNo', function () { return Serenity.StringEditor; }],
            ['AcctName', function () { return Serenity.StringEditor; }],
            ['DefaultCcy', function () { return Serenity.StringEditor; }],
            ['TypeBs', function () { return Serenity.BooleanEditor; }],
            ['TypePl', function () { return Serenity.BooleanEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['FixedCurrency', function () { return Serenity.StringEditor; }],
            ['BudgetControl', function () { return Serenity.StringEditor; }],
            ['SupprReval', function () { return Serenity.StringEditor; }],
            ['AllowEdit', function () { return Serenity.StringEditor; }],
            ['DetailList', function () { return MasterData.AccountBudgetDetailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AccountForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountRow;
        (function (AccountRow) {
            AccountRow.idProperty = 'AcctNo';
            AccountRow.nameProperty = 'AcctName';
            AccountRow.localTextPrefix = 'MasterData.Account';
            var Fields;
            (function (Fields) {
            })(Fields = AccountRow.Fields || (AccountRow.Fields = {}));
            [
                'DetailList',
                'Recnum',
                'AcctNo',
                'AcctName',
                'AltAcctNo',
                'NormalSign',
                'TypeBs',
                'TypePl',
                'TypeDebtor',
                'TypeCreditor',
                'TypeMemo',
                'DefaultCcy',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Suspended',
                'FixedCurrency',
                'AutoDist',
                'BudgetControl',
                'SupprAnlys3',
                'SupprAnlys4',
                'SupprAnlys5',
                'SupprAnlys6',
                'SupprReval',
                'NoCostCentre',
                'NoDept',
                'Oper1',
                'Oper2',
                'Oper3',
                'Oper4',
                'Oper5',
                'LinesBefPrint',
                'TranAcct',
                'SummaryPos',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ReconLastDate',
                'ReconLastJrn',
                'ReconBal',
                'ReconBalSign',
                'LastTranDate',
                'LastJrnNo',
                'DistTotalPct',
                'DistLastLine',
                'ReconCount',
                'BalanceEnd',
                'BalanceSign',
                'OwnerBranch',
                'SourceBranch',
                'AllowEdit',
                'Anlys5',
                'Anlys6',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AccountRow = MasterData.AccountRow || (MasterData.AccountRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountService;
        (function (AccountService) {
            AccountService.baseUrl = 'MasterData/Account';
            var Methods;
            (function (Methods) {
            })(Methods = AccountService.Methods || (AccountService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AccountService[x] = function (r, s, o) {
                    return Q.serviceRequest(AccountService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AccountService.baseUrl + '/' + x;
            });
        })(AccountService = MasterData.AccountService || (MasterData.AccountService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AddressTypeForm = /** @class */ (function (_super) {
            __extends(AddressTypeForm, _super);
            function AddressTypeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AddressTypeForm.formKey = 'MasterData.AddressType';
            return AddressTypeForm;
        }(Serenity.PrefixedContext));
        MasterData.AddressTypeForm = AddressTypeForm;
        [['AddressType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AddressTypeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AddressTypeRow;
        (function (AddressTypeRow) {
            AddressTypeRow.idProperty = 'AddressType';
            AddressTypeRow.nameProperty = 'Description';
            AddressTypeRow.localTextPrefix = 'MasterData.AddressType';
            var Fields;
            (function (Fields) {
            })(Fields = AddressTypeRow.Fields || (AddressTypeRow.Fields = {}));
            [
                'Recnum',
                'AddressType',
                'Description',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AddressTypeRow = MasterData.AddressTypeRow || (MasterData.AddressTypeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AddressTypeService;
        (function (AddressTypeService) {
            AddressTypeService.baseUrl = 'MasterData/AddressType';
            var Methods;
            (function (Methods) {
            })(Methods = AddressTypeService.Methods || (AddressTypeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AddressTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(AddressTypeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AddressTypeService.baseUrl + '/' + x;
            });
        })(AddressTypeService = MasterData.AddressTypeService || (MasterData.AddressTypeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCategoryForm = /** @class */ (function (_super) {
            __extends(AnalysisCategoryForm, _super);
            function AnalysisCategoryForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AnalysisCategoryForm.formKey = 'MasterData.AnalysisCategory';
            return AnalysisCategoryForm;
        }(Serenity.PrefixedContext));
        MasterData.AnalysisCategoryForm = AnalysisCategoryForm;
        [['Category', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Caption', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AnalysisCategoryForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCategoryRow;
        (function (AnalysisCategoryRow) {
            AnalysisCategoryRow.idProperty = 'Category';
            AnalysisCategoryRow.nameProperty = 'Category';
            AnalysisCategoryRow.localTextPrefix = 'MasterData.AnalysisCategory';
            var Fields;
            (function (Fields) {
            })(Fields = AnalysisCategoryRow.Fields || (AnalysisCategoryRow.Fields = {}));
            [
                'Recnum',
                'Category',
                'Description',
                'Caption',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AnalysisCategoryRow = MasterData.AnalysisCategoryRow || (MasterData.AnalysisCategoryRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCategoryService;
        (function (AnalysisCategoryService) {
            AnalysisCategoryService.baseUrl = 'MasterData/AnalysisCategory';
            var Methods;
            (function (Methods) {
            })(Methods = AnalysisCategoryService.Methods || (AnalysisCategoryService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AnalysisCategoryService[x] = function (r, s, o) {
                    return Q.serviceRequest(AnalysisCategoryService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AnalysisCategoryService.baseUrl + '/' + x;
            });
        })(AnalysisCategoryService = MasterData.AnalysisCategoryService || (MasterData.AnalysisCategoryService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCodeForm = /** @class */ (function (_super) {
            __extends(AnalysisCodeForm, _super);
            function AnalysisCodeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AnalysisCodeForm.formKey = 'MasterData.AnalysisCode';
            return AnalysisCodeForm;
        }(Serenity.PrefixedContext));
        MasterData.AnalysisCodeForm = AnalysisCodeForm;
        [['Category', function () { return Serenity.StringEditor; }],
            ['AnalysisCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AnalysisCodeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCodeRow;
        (function (AnalysisCodeRow) {
            AnalysisCodeRow.idProperty = 'Recnum';
            AnalysisCodeRow.nameProperty = 'Category';
            AnalysisCodeRow.localTextPrefix = 'MasterData.AnalysisCode';
            var Fields;
            (function (Fields) {
            })(Fields = AnalysisCodeRow.Fields || (AnalysisCodeRow.Fields = {}));
            [
                'Recnum',
                'Category',
                'AnalysisCode',
                'Description',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'CategoryRecnum',
                'CategoryDescription',
                'CategoryCaption',
                'CategoryCreatedDate',
                'CategoryCreatedBy',
                'CategoryRevisedDate',
                'CategoryRevisedBy',
                'CategoryOwnerBranch',
                'CategorySourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AnalysisCodeRow = MasterData.AnalysisCodeRow || (MasterData.AnalysisCodeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCodeService;
        (function (AnalysisCodeService) {
            AnalysisCodeService.baseUrl = 'MasterData/AnalysisCode';
            var Methods;
            (function (Methods) {
            })(Methods = AnalysisCodeService.Methods || (AnalysisCodeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AnalysisCodeService[x] = function (r, s, o) {
                    return Q.serviceRequest(AnalysisCodeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AnalysisCodeService.baseUrl + '/' + x;
            });
        })(AnalysisCodeService = MasterData.AnalysisCodeService || (MasterData.AnalysisCodeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineForm = /** @class */ (function (_super) {
            __extends(AssemblyLineForm, _super);
            function AssemblyLineForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AssemblyLineForm.formKey = 'MasterData.AssemblyLine';
            return AssemblyLineForm;
        }(Serenity.PrefixedContext));
        MasterData.AssemblyLineForm = AssemblyLineForm;
        [['AssemblyLine', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Priority', function () { return Serenity.StringEditor; }],
            ['EffcRating', function () { return Serenity.DecimalEditor; }],
            ['Restrict0', function () { return Serenity.StringEditor; }],
            ['Restrict1', function () { return Serenity.StringEditor; }],
            ['Restrict2', function () { return Serenity.StringEditor; }],
            ['Restrict3', function () { return Serenity.StringEditor; }],
            ['Restrict4', function () { return Serenity.StringEditor; }],
            ['Restrict5', function () { return Serenity.StringEditor; }],
            ['Restrict6', function () { return Serenity.StringEditor; }],
            ['Restrict7', function () { return Serenity.StringEditor; }],
            ['Restrict8', function () { return Serenity.StringEditor; }],
            ['Restrict9', function () { return Serenity.StringEditor; }],
            ['Require0', function () { return Serenity.StringEditor; }],
            ['Require1', function () { return Serenity.StringEditor; }],
            ['Require2', function () { return Serenity.StringEditor; }],
            ['Require3', function () { return Serenity.StringEditor; }],
            ['Require4', function () { return Serenity.StringEditor; }],
            ['Require5', function () { return Serenity.StringEditor; }],
            ['Require6', function () { return Serenity.StringEditor; }],
            ['Require7', function () { return Serenity.StringEditor; }],
            ['Require8', function () { return Serenity.StringEditor; }],
            ['Require9', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AssemblyLineForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineRow;
        (function (AssemblyLineRow) {
            AssemblyLineRow.idProperty = 'AssemblyLine';
            AssemblyLineRow.nameProperty = 'Description';
            AssemblyLineRow.localTextPrefix = 'MasterData.AssemblyLine';
            var Fields;
            (function (Fields) {
            })(Fields = AssemblyLineRow.Fields || (AssemblyLineRow.Fields = {}));
            [
                'DetailList',
                'Recnum',
                'AssemblyLine',
                'Description',
                'BranchNo',
                'Suspended',
                'Priority',
                'EffcRating',
                'Restrict0',
                'Restrict1',
                'Restrict2',
                'Restrict3',
                'Restrict4',
                'Restrict5',
                'Restrict6',
                'Restrict7',
                'Restrict8',
                'Restrict9',
                'Require0',
                'Require1',
                'Require2',
                'Require3',
                'Require4',
                'Require5',
                'Require6',
                'Require7',
                'Require8',
                'Require9',
                'AcctMachine',
                'AcctEnergy',
                'AcctWater',
                'AcctRental',
                'AcctLabor',
                'AcctInlab',
                'AcctInmat',
                'AcctMisc',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'BrevisedDate',
                'BrevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AssemblyLineRow = MasterData.AssemblyLineRow || (MasterData.AssemblyLineRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineService;
        (function (AssemblyLineService) {
            AssemblyLineService.baseUrl = 'MasterData/AssemblyLine';
            var Methods;
            (function (Methods) {
            })(Methods = AssemblyLineService.Methods || (AssemblyLineService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AssemblyLineService[x] = function (r, s, o) {
                    return Q.serviceRequest(AssemblyLineService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AssemblyLineService.baseUrl + '/' + x;
            });
        })(AssemblyLineService = MasterData.AssemblyLineService || (MasterData.AssemblyLineService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineWorkCentreDetailForm = /** @class */ (function (_super) {
            __extends(AssemblyLineWorkCentreDetailForm, _super);
            function AssemblyLineWorkCentreDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AssemblyLineWorkCentreDetailForm.formKey = 'MasterData.AssemblyLineWorkCentreDetail';
            return AssemblyLineWorkCentreDetailForm;
        }(Serenity.PrefixedContext));
        MasterData.AssemblyLineWorkCentreDetailForm = AssemblyLineWorkCentreDetailForm;
        [['AssemblyLine', function () { return Serenity.StringEditor; }],
            ['SeqNo', function () { return Serenity.DecimalEditor; }],
            ['WorkCentre', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Alternate', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AssemblyLineWorkCentreDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineWorkCentreDetailRow;
        (function (AssemblyLineWorkCentreDetailRow) {
            AssemblyLineWorkCentreDetailRow.idProperty = 'Recnum';
            AssemblyLineWorkCentreDetailRow.nameProperty = 'AssemblyLine';
            AssemblyLineWorkCentreDetailRow.localTextPrefix = 'MasterData.AssemblyLineWorkCentreDetail';
            var Fields;
            (function (Fields) {
            })(Fields = AssemblyLineWorkCentreDetailRow.Fields || (AssemblyLineWorkCentreDetailRow.Fields = {}));
            [
                'Recnum',
                'AssemblyLine',
                'SeqNo',
                'WorkCentre',
                'Description',
                'Alternate',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'AssemblyLineRecnum',
                'AssemblyLineDescription',
                'AssemblyLineBranchNo',
                'AssemblyLineSuspended',
                'AssemblyLinePriority',
                'AssemblyLineEffcRating',
                'AssemblyLineRestrict0',
                'AssemblyLineRestrict1',
                'AssemblyLineRestrict2',
                'AssemblyLineRestrict3',
                'AssemblyLineRestrict4',
                'AssemblyLineRestrict5',
                'AssemblyLineRestrict6',
                'AssemblyLineRestrict7',
                'AssemblyLineRestrict8',
                'AssemblyLineRestrict9',
                'AssemblyLineRequire0',
                'AssemblyLineRequire1',
                'AssemblyLineRequire2',
                'AssemblyLineRequire3',
                'AssemblyLineRequire4',
                'AssemblyLineRequire5',
                'AssemblyLineRequire6',
                'AssemblyLineRequire7',
                'AssemblyLineRequire8',
                'AssemblyLineRequire9',
                'AssemblyLineAcctMachine',
                'AssemblyLineAcctEnergy',
                'AssemblyLineAcctWater',
                'AssemblyLineAcctRental',
                'AssemblyLineAcctLabor',
                'AssemblyLineAcctInlab',
                'AssemblyLineAcctInmat',
                'AssemblyLineAcctMisc',
                'AssemblyLineCreatedDate',
                'AssemblyLineCreatedBy',
                'AssemblyLineRevisedDate',
                'AssemblyLineRevisedBy',
                'AssemblyLineBrevisedDate',
                'AssemblyLineBrevisedBy',
                'AssemblyLineOwnerBranch',
                'AssemblyLineSourceBranch',
                'WorkCentreRecnum',
                'WorkCentreDescription',
                'WorkCentreSuspended',
                'WorkCentreCritical',
                'WorkCentreBranchNo',
                'WorkCentreNoOfPersons',
                'WorkCentreNoOfShifts',
                'WorkCentreFirstSetupHr',
                'WorkCentreFirstCleanHr',
                'WorkCentreOtherSetupHr',
                'WorkCentreOtherCleanHr',
                'WorkCentreQueueHr',
                'WorkCentreMachineUnit',
                'WorkCentreMachineCost',
                'WorkCentreEnergyUnit',
                'WorkCentreEnergyCost',
                'WorkCentreWaterUnit',
                'WorkCentreWaterCost',
                'WorkCentreRentalUnit',
                'WorkCentreRentalCost',
                'WorkCentreLaborUnit',
                'WorkCentreLaborCost',
                'WorkCentreInlabUnit',
                'WorkCentreInlabCost',
                'WorkCentreInmatUnit',
                'WorkCentreInmatCost',
                'WorkCentreMiscUnit',
                'WorkCentreMiscCost',
                'WorkCentreRestrict0',
                'WorkCentreRestrict1',
                'WorkCentreRestrict2',
                'WorkCentreRestrict3',
                'WorkCentreRestrict4',
                'WorkCentreRestrict5',
                'WorkCentreRestrict6',
                'WorkCentreRestrict7',
                'WorkCentreRestrict8',
                'WorkCentreRestrict9',
                'WorkCentreRequire0',
                'WorkCentreRequire1',
                'WorkCentreRequire2',
                'WorkCentreRequire3',
                'WorkCentreRequire4',
                'WorkCentreRequire5',
                'WorkCentreRequire6',
                'WorkCentreRequire7',
                'WorkCentreRequire8',
                'WorkCentreRequire9',
                'WorkCentreAcctMachine',
                'WorkCentreAcctEnergy',
                'WorkCentreAcctWater',
                'WorkCentreAcctRental',
                'WorkCentreAcctLabor',
                'WorkCentreAcctInlab',
                'WorkCentreAcctInmat',
                'WorkCentreAcctMisc',
                'WorkCentreCreatedDate',
                'WorkCentreCreatedBy',
                'WorkCentreRevisedDate',
                'WorkCentreRevisedBy',
                'WorkCentreBrevisedDate',
                'WorkCentreBrevisedBy',
                'WorkCentreOwnerBranch',
                'WorkCentreSourceBranch',
                'WorkCentreOperHrsBasis',
                'WorkCentreNoOfMachines',
                'WorkCentreCapacityUnit'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AssemblyLineWorkCentreDetailRow = MasterData.AssemblyLineWorkCentreDetailRow || (MasterData.AssemblyLineWorkCentreDetailRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineWorkCentreDetailService;
        (function (AssemblyLineWorkCentreDetailService) {
            AssemblyLineWorkCentreDetailService.baseUrl = 'MasterData/AssemblyLineWorkCentreDetail';
            var Methods;
            (function (Methods) {
            })(Methods = AssemblyLineWorkCentreDetailService.Methods || (AssemblyLineWorkCentreDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AssemblyLineWorkCentreDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(AssemblyLineWorkCentreDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AssemblyLineWorkCentreDetailService.baseUrl + '/' + x;
            });
        })(AssemblyLineWorkCentreDetailService = MasterData.AssemblyLineWorkCentreDetailService || (MasterData.AssemblyLineWorkCentreDetailService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AttachmentFileTypeForm = /** @class */ (function (_super) {
            __extends(AttachmentFileTypeForm, _super);
            function AttachmentFileTypeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            AttachmentFileTypeForm.formKey = 'MasterData.AttachmentFileType';
            return AttachmentFileTypeForm;
        }(Serenity.PrefixedContext));
        MasterData.AttachmentFileTypeForm = AttachmentFileTypeForm;
        [['FileType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['ExePath', function () { return Serenity.StringEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(AttachmentFileTypeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AttachmentFileTypeRow;
        (function (AttachmentFileTypeRow) {
            AttachmentFileTypeRow.idProperty = 'Recnum';
            AttachmentFileTypeRow.nameProperty = 'FileType';
            AttachmentFileTypeRow.localTextPrefix = 'MasterData.AttachmentFileType';
            var Fields;
            (function (Fields) {
            })(Fields = AttachmentFileTypeRow.Fields || (AttachmentFileTypeRow.Fields = {}));
            [
                'Recnum',
                'FileType',
                'Description',
                'ExePath',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'Suspended'
            ].forEach(function (x) { return Fields[x] = x; });
        })(AttachmentFileTypeRow = MasterData.AttachmentFileTypeRow || (MasterData.AttachmentFileTypeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AttachmentFileTypeService;
        (function (AttachmentFileTypeService) {
            AttachmentFileTypeService.baseUrl = 'MasterData/AttachmentFileType';
            var Methods;
            (function (Methods) {
            })(Methods = AttachmentFileTypeService.Methods || (AttachmentFileTypeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                AttachmentFileTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(AttachmentFileTypeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = AttachmentFileTypeService.baseUrl + '/' + x;
            });
        })(AttachmentFileTypeService = MasterData.AttachmentFileTypeService || (MasterData.AttachmentFileTypeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BalanceSheetLayoutForm = /** @class */ (function (_super) {
            __extends(BalanceSheetLayoutForm, _super);
            function BalanceSheetLayoutForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BalanceSheetLayoutForm.formKey = 'MasterData.BalanceSheetLayout';
            return BalanceSheetLayoutForm;
        }(Serenity.PrefixedContext));
        MasterData.BalanceSheetLayoutForm = BalanceSheetLayoutForm;
        [['LineNo', function () { return Serenity.DecimalEditor; }],
            ['LineType', function () { return Serenity.StringEditor; }],
            ['LineSkip', function () { return Serenity.DecimalEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['AcctFrom', function () { return Serenity.StringEditor; }],
            ['AcctTo', function () { return Serenity.StringEditor; }],
            ['AcctOperator', function () { return Serenity.StringEditor; }],
            ['TotalLevel', function () { return Serenity.DecimalEditor; }],
            ['NormalSign', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(BalanceSheetLayoutForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BalanceSheetLayoutRow;
        (function (BalanceSheetLayoutRow) {
            BalanceSheetLayoutRow.idProperty = 'Recnum';
            BalanceSheetLayoutRow.nameProperty = 'LineType';
            BalanceSheetLayoutRow.localTextPrefix = 'MasterData.BalanceSheetLayout';
            var Fields;
            (function (Fields) {
            })(Fields = BalanceSheetLayoutRow.Fields || (BalanceSheetLayoutRow.Fields = {}));
            [
                'Recnum',
                'LineNo',
                'LineType',
                'LineSkip',
                'Description',
                'AcctFrom',
                'AcctTo',
                'AcctOperator',
                'TotalLevel',
                'NormalSign',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Report',
                'CellLineNo',
                'CellValueBegin',
                'CellValueEnd'
            ].forEach(function (x) { return Fields[x] = x; });
        })(BalanceSheetLayoutRow = MasterData.BalanceSheetLayoutRow || (MasterData.BalanceSheetLayoutRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BalanceSheetLayoutService;
        (function (BalanceSheetLayoutService) {
            BalanceSheetLayoutService.baseUrl = 'MasterData/BalanceSheetLayout';
            var Methods;
            (function (Methods) {
            })(Methods = BalanceSheetLayoutService.Methods || (BalanceSheetLayoutService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BalanceSheetLayoutService[x] = function (r, s, o) {
                    return Q.serviceRequest(BalanceSheetLayoutService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = BalanceSheetLayoutService.baseUrl + '/' + x;
            });
        })(BalanceSheetLayoutService = MasterData.BalanceSheetLayoutService || (MasterData.BalanceSheetLayoutService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerControlForm = /** @class */ (function (_super) {
            __extends(BuyerControlForm, _super);
            function BuyerControlForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BuyerControlForm.formKey = 'MasterData.BuyerControl';
            return BuyerControlForm;
        }(Serenity.PrefixedContext));
        MasterData.BuyerControlForm = BuyerControlForm;
        [['BuyerCode', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['TypeGroup', function () { return Serenity.StringEditor; }],
            ['TypeItem', function () { return Serenity.StringEditor; }],
            ['EntryCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['MaxQty', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(BuyerControlForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerControlRow;
        (function (BuyerControlRow) {
            BuyerControlRow.idProperty = 'Recnum';
            BuyerControlRow.nameProperty = 'BuyerCode';
            BuyerControlRow.localTextPrefix = 'MasterData.BuyerControl';
            var Fields;
            (function (Fields) {
            })(Fields = BuyerControlRow.Fields || (BuyerControlRow.Fields = {}));
            [
                'Recnum',
                'BuyerCode',
                'LineNo',
                'TypeGroup',
                'TypeItem',
                'EntryCode',
                'Description',
                'Suspended',
                'MaxQty',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'BuyerCodeRecnum',
                'BuyerCodeBuyerName',
                'BuyerCodeSuspended',
                'BuyerCodeWithBacklog',
                'BuyerCodeOnOrderCount',
                'BuyerCodeLastLineNo',
                'BuyerCodeCreatedDate',
                'BuyerCodeCreatedBy',
                'BuyerCodeRevisedDate',
                'BuyerCodeRevisedBy',
                'BuyerCodeOwnerBranch',
                'BuyerCodeSourceBranch',
                'BuyerCodeSupervisor'
            ].forEach(function (x) { return Fields[x] = x; });
        })(BuyerControlRow = MasterData.BuyerControlRow || (MasterData.BuyerControlRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerControlService;
        (function (BuyerControlService) {
            BuyerControlService.baseUrl = 'MasterData/BuyerControl';
            var Methods;
            (function (Methods) {
            })(Methods = BuyerControlService.Methods || (BuyerControlService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BuyerControlService[x] = function (r, s, o) {
                    return Q.serviceRequest(BuyerControlService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = BuyerControlService.baseUrl + '/' + x;
            });
        })(BuyerControlService = MasterData.BuyerControlService || (MasterData.BuyerControlService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerDetailForm = /** @class */ (function (_super) {
            __extends(BuyerDetailForm, _super);
            function BuyerDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BuyerDetailForm.formKey = 'MasterData.BuyerDetail';
            return BuyerDetailForm;
        }(Serenity.PrefixedContext));
        MasterData.BuyerDetailForm = BuyerDetailForm;
        [['BuyerCode', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(BuyerDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerDetailRow;
        (function (BuyerDetailRow) {
            BuyerDetailRow.idProperty = 'Recnum';
            BuyerDetailRow.nameProperty = 'BuyerCode';
            BuyerDetailRow.localTextPrefix = 'MasterData.BuyerDetail';
            var Fields;
            (function (Fields) {
            })(Fields = BuyerDetailRow.Fields || (BuyerDetailRow.Fields = {}));
            [
                'Recnum',
                'BuyerCode',
                'VendorNo',
                'VendorName',
                'BuyerCodeRecnum',
                'BuyerCodeBuyerName',
                'BuyerCodeSuspended',
                'BuyerCodeWithBacklog',
                'BuyerCodeOnOrderCount',
                'BuyerCodeLastLineNo',
                'BuyerCodeCreatedDate',
                'BuyerCodeCreatedBy',
                'BuyerCodeRevisedDate',
                'BuyerCodeRevisedBy',
                'BuyerCodeOwnerBranch',
                'BuyerCodeSourceBranch',
                'BuyerCodeSupervisor'
            ].forEach(function (x) { return Fields[x] = x; });
        })(BuyerDetailRow = MasterData.BuyerDetailRow || (MasterData.BuyerDetailRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerDetailService;
        (function (BuyerDetailService) {
            BuyerDetailService.baseUrl = 'MasterData/BuyerDetail';
            var Methods;
            (function (Methods) {
            })(Methods = BuyerDetailService.Methods || (BuyerDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BuyerDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(BuyerDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = BuyerDetailService.baseUrl + '/' + x;
            });
        })(BuyerDetailService = MasterData.BuyerDetailService || (MasterData.BuyerDetailService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerForm = /** @class */ (function (_super) {
            __extends(BuyerForm, _super);
            function BuyerForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BuyerForm.formKey = 'MasterData.Buyer';
            return BuyerForm;
        }(Serenity.PrefixedContext));
        MasterData.BuyerForm = BuyerForm;
        [['BuyerCode', function () { return Serenity.StringEditor; }],
            ['BuyerName', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Supervisor', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(BuyerForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerRow;
        (function (BuyerRow) {
            BuyerRow.idProperty = 'BuyerCode';
            BuyerRow.nameProperty = 'BuyerName';
            BuyerRow.localTextPrefix = 'MasterData.Buyer';
            var Fields;
            (function (Fields) {
            })(Fields = BuyerRow.Fields || (BuyerRow.Fields = {}));
            [
                'Recnum',
                'BuyerCode',
                'BuyerName',
                'Suspended',
                'WithBacklog',
                'OnOrderCount',
                'LastLineNo',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Supervisor'
            ].forEach(function (x) { return Fields[x] = x; });
        })(BuyerRow = MasterData.BuyerRow || (MasterData.BuyerRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerService;
        (function (BuyerService) {
            BuyerService.baseUrl = 'MasterData/Buyer';
            var Methods;
            (function (Methods) {
            })(Methods = BuyerService.Methods || (BuyerService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BuyerService[x] = function (r, s, o) {
                    return Q.serviceRequest(BuyerService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = BuyerService.baseUrl + '/' + x;
            });
        })(BuyerService = MasterData.BuyerService || (MasterData.BuyerService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarDetailForm = /** @class */ (function (_super) {
            __extends(CalendarDetailForm, _super);
            function CalendarDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CalendarDetailForm.formKey = 'MasterData.CalendarDetail';
            return CalendarDetailForm;
        }(Serenity.PrefixedContext));
        MasterData.CalendarDetailForm = CalendarDetailForm;
        [['TranMonth', function () { return Serenity.StringEditor; }],
            ['TranDate', function () { return Serenity.DateEditor; }],
            ['TranDay', function () { return Serenity.StringEditor; }],
            ['DayNum', function () { return Serenity.DecimalEditor; }],
            ['IsHoliday', function () { return Serenity.StringEditor; }],
            ['HalfDayOnly', function () { return Serenity.StringEditor; }],
            ['FirstShift', function () { return Serenity.StringEditor; }],
            ['SecondShift', function () { return Serenity.StringEditor; }],
            ['ThirdShift', function () { return Serenity.StringEditor; }],
            ['CanReceive', function () { return Serenity.StringEditor; }],
            ['CanShip', function () { return Serenity.StringEditor; }],
            ['DayName', function () { return Serenity.StringEditor; }],
            ['LastEntryNo', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CalendarDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarDetailRow;
        (function (CalendarDetailRow) {
            CalendarDetailRow.idProperty = 'Recnum';
            CalendarDetailRow.nameProperty = 'TranMonth';
            CalendarDetailRow.localTextPrefix = 'MasterData.CalendarDetail';
            var Fields;
            (function (Fields) {
            })(Fields = CalendarDetailRow.Fields || (CalendarDetailRow.Fields = {}));
            [
                'Recnum',
                'TranMonth',
                'TranDate',
                'TranDay',
                'DayNum',
                'IsHoliday',
                'HalfDayOnly',
                'FirstShift',
                'SecondShift',
                'ThirdShift',
                'CanReceive',
                'CanShip',
                'DayName',
                'LastEntryNo',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'TranMonthRecnum',
                'TranMonthTranYear',
                'TranMonthMonthNo',
                'TranMonthCreatedDate',
                'TranMonthCreatedBy',
                'TranMonthOwnerBranch',
                'TranMonthSourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CalendarDetailRow = MasterData.CalendarDetailRow || (MasterData.CalendarDetailRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarDetailService;
        (function (CalendarDetailService) {
            CalendarDetailService.baseUrl = 'MasterData/CalendarDetail';
            var Methods;
            (function (Methods) {
            })(Methods = CalendarDetailService.Methods || (CalendarDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CalendarDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(CalendarDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CalendarDetailService.baseUrl + '/' + x;
            });
        })(CalendarDetailService = MasterData.CalendarDetailService || (MasterData.CalendarDetailService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarForm = /** @class */ (function (_super) {
            __extends(CalendarForm, _super);
            function CalendarForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CalendarForm.formKey = 'MasterData.Calendar';
            return CalendarForm;
        }(Serenity.PrefixedContext));
        MasterData.CalendarForm = CalendarForm;
        [['TranMonth', function () { return Serenity.StringEditor; }],
            ['TranYear', function () { return Serenity.DecimalEditor; }],
            ['MonthNo', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CalendarForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarNoteForm = /** @class */ (function (_super) {
            __extends(CalendarNoteForm, _super);
            function CalendarNoteForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CalendarNoteForm.formKey = 'MasterData.CalendarNote';
            return CalendarNoteForm;
        }(Serenity.PrefixedContext));
        MasterData.CalendarNoteForm = CalendarNoteForm;
        [['TranDate', function () { return Serenity.DateEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['EntryBy', function () { return Serenity.StringEditor; }],
            ['EntryDate', function () { return Serenity.DateEditor; }],
            ['EntryType', function () { return Serenity.StringEditor; }],
            ['Subject', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['Notes', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CalendarNoteForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarNoteRow;
        (function (CalendarNoteRow) {
            CalendarNoteRow.idProperty = 'Recnum';
            CalendarNoteRow.nameProperty = 'EntryBy';
            CalendarNoteRow.localTextPrefix = 'MasterData.CalendarNote';
            var Fields;
            (function (Fields) {
            })(Fields = CalendarNoteRow.Fields || (CalendarNoteRow.Fields = {}));
            [
                'Recnum',
                'TranDate',
                'EntryNo',
                'EntryBy',
                'EntryDate',
                'EntryType',
                'Subject',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Notes'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CalendarNoteRow = MasterData.CalendarNoteRow || (MasterData.CalendarNoteRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarNoteService;
        (function (CalendarNoteService) {
            CalendarNoteService.baseUrl = 'MasterData/CalendarNote';
            var Methods;
            (function (Methods) {
            })(Methods = CalendarNoteService.Methods || (CalendarNoteService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CalendarNoteService[x] = function (r, s, o) {
                    return Q.serviceRequest(CalendarNoteService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CalendarNoteService.baseUrl + '/' + x;
            });
        })(CalendarNoteService = MasterData.CalendarNoteService || (MasterData.CalendarNoteService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarRow;
        (function (CalendarRow) {
            CalendarRow.idProperty = 'Recnum';
            CalendarRow.nameProperty = 'TranMonth';
            CalendarRow.localTextPrefix = 'MasterData.Calendar';
            var Fields;
            (function (Fields) {
            })(Fields = CalendarRow.Fields || (CalendarRow.Fields = {}));
            [
                'Recnum',
                'TranMonth',
                'TranYear',
                'MonthNo',
                'CreatedDate',
                'CreatedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CalendarRow = MasterData.CalendarRow || (MasterData.CalendarRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarService;
        (function (CalendarService) {
            CalendarService.baseUrl = 'MasterData/Calendar';
            var Methods;
            (function (Methods) {
            })(Methods = CalendarService.Methods || (CalendarService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CalendarService[x] = function (r, s, o) {
                    return Q.serviceRequest(CalendarService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CalendarService.baseUrl + '/' + x;
            });
        })(CalendarService = MasterData.CalendarService || (MasterData.CalendarService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ChargeTypeForm = /** @class */ (function (_super) {
            __extends(ChargeTypeForm, _super);
            function ChargeTypeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ChargeTypeForm.formKey = 'MasterData.ChargeType';
            return ChargeTypeForm;
        }(Serenity.PrefixedContext));
        MasterData.ChargeTypeForm = ChargeTypeForm;
        [['ChargeType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Deduction', function () { return Serenity.BooleanEditor; }],
            ['UseInSales', function () { return Serenity.BooleanEditor; }],
            ['UseInPurchase', function () { return Serenity.BooleanEditor; }],
            ['UseInProduction', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ChargeTypeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ChargeTypeRow;
        (function (ChargeTypeRow) {
            ChargeTypeRow.idProperty = 'ChargeType';
            ChargeTypeRow.nameProperty = 'Description';
            ChargeTypeRow.localTextPrefix = 'MasterData.ChargeType';
            var Fields;
            (function (Fields) {
            })(Fields = ChargeTypeRow.Fields || (ChargeTypeRow.Fields = {}));
            [
                'Recnum',
                'ChargeType',
                'Description',
                'Suspended',
                'Deduction',
                'UseInSales',
                'UseInPurchase',
                'SlsAcctNo',
                'PurAcctNo',
                'FixedRate',
                'FixedBasis',
                'FixedPercent',
                'FixedAmt',
                'Step01',
                'Oper01',
                'Step02',
                'Oper02',
                'Step03',
                'Oper03',
                'Step04',
                'Oper04',
                'Step05',
                'Oper05',
                'Step06',
                'Oper06',
                'Step07',
                'Oper07',
                'Step08',
                'Oper08',
                'Step09',
                'Oper09',
                'Step10',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'UseInProduction',
                'ProdAcctNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ChargeTypeRow = MasterData.ChargeTypeRow || (MasterData.ChargeTypeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ChargeTypeService;
        (function (ChargeTypeService) {
            ChargeTypeService.baseUrl = 'MasterData/ChargeType';
            var Methods;
            (function (Methods) {
            })(Methods = ChargeTypeService.Methods || (ChargeTypeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ChargeTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ChargeTypeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ChargeTypeService.baseUrl + '/' + x;
            });
        })(ChargeTypeService = MasterData.ChargeTypeService || (MasterData.ChargeTypeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CollectionForm = /** @class */ (function (_super) {
            __extends(CollectionForm, _super);
            function CollectionForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CollectionForm.formKey = 'MasterData.Collection';
            return CollectionForm;
        }(Serenity.PrefixedContext));
        MasterData.CollectionForm = CollectionForm;
        [['CollectionCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CollectionForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CollectionRow;
        (function (CollectionRow) {
            CollectionRow.idProperty = 'Recnum';
            CollectionRow.nameProperty = 'CollectionCode';
            CollectionRow.localTextPrefix = 'MasterData.Collection';
            var Fields;
            (function (Fields) {
            })(Fields = CollectionRow.Fields || (CollectionRow.Fields = {}));
            [
                'Recnum',
                'CollectionCode',
                'Description',
                'ChineseDescription',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'Remarks'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CollectionRow = MasterData.CollectionRow || (MasterData.CollectionRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CollectionService;
        (function (CollectionService) {
            CollectionService.baseUrl = 'MasterData/Collection';
            var Methods;
            (function (Methods) {
            })(Methods = CollectionService.Methods || (CollectionService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CollectionService[x] = function (r, s, o) {
                    return Q.serviceRequest(CollectionService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CollectionService.baseUrl + '/' + x;
            });
        })(CollectionService = MasterData.CollectionService || (MasterData.CollectionService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ColorForm = /** @class */ (function (_super) {
            __extends(ColorForm, _super);
            function ColorForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ColorForm.formKey = 'MasterData.Color';
            return ColorForm;
        }(Serenity.PrefixedContext));
        MasterData.ColorForm = ColorForm;
        [['ColorCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['ChineseDescription', function () { return Serenity.StringEditor; }],
            ['ColorGroup', function () { return Serenity.StringEditor; }],
            ['ItemGroup', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ColorForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ColorRow;
        (function (ColorRow) {
            ColorRow.idProperty = 'ColorCode';
            ColorRow.nameProperty = 'Description';
            ColorRow.localTextPrefix = 'MasterData.Color';
            var Fields;
            (function (Fields) {
            })(Fields = ColorRow.Fields || (ColorRow.Fields = {}));
            [
                'Recnum',
                'ColorCode',
                'Description',
                'ChineseDescription',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'ColorGroup',
                'ItemGroup'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ColorRow = MasterData.ColorRow || (MasterData.ColorRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ColorService;
        (function (ColorService) {
            ColorService.baseUrl = 'MasterData/Color';
            var Methods;
            (function (Methods) {
            })(Methods = ColorService.Methods || (ColorService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ColorService[x] = function (r, s, o) {
                    return Q.serviceRequest(ColorService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ColorService.baseUrl + '/' + x;
            });
        })(ColorService = MasterData.ColorService || (MasterData.ColorService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CommodityForm = /** @class */ (function (_super) {
            __extends(CommodityForm, _super);
            function CommodityForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CommodityForm.formKey = 'MasterData.Commodity';
            return CommodityForm;
        }(Serenity.PrefixedContext));
        MasterData.CommodityForm = CommodityForm;
        [['CustomProdCode', function () { return Serenity.StringEditor; }],
            ['CustomSerialNo', function () { return Serenity.StringEditor; }],
            ['CustomProdDesc', function () { return Serenity.StringEditor; }],
            ['CustomProdNo', function () { return Serenity.StringEditor; }],
            ['CustomEng', function () { return Serenity.StringEditor; }],
            ['CustomEngNo', function () { return Serenity.StringEditor; }],
            ['CustomMeasUom', function () { return Serenity.StringEditor; }],
            ['CustomCcy', function () { return Serenity.StringEditor; }],
            ['CustomPrice', function () { return Serenity.DecimalEditor; }],
            ['CustomExempt', function () { return Serenity.StringEditor; }],
            ['CustomFee', function () { return Serenity.DecimalEditor; }],
            ['CustomRemark', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CommodityForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CommodityRow;
        (function (CommodityRow) {
            CommodityRow.idProperty = 'Recnum';
            CommodityRow.nameProperty = 'CustomProdCode';
            CommodityRow.localTextPrefix = 'MasterData.Commodity';
            var Fields;
            (function (Fields) {
            })(Fields = CommodityRow.Fields || (CommodityRow.Fields = {}));
            [
                'Recnum',
                'CustomProdCode',
                'CustomSerialNo',
                'CustomProdDesc',
                'CustomProdNo',
                'CustomEng',
                'CustomEngNo',
                'CustomMeasUom',
                'CustomCcy',
                'CustomPrice',
                'CustomExempt',
                'CustomFee',
                'CustomRemark',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CommodityRow = MasterData.CommodityRow || (MasterData.CommodityRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CommodityService;
        (function (CommodityService) {
            CommodityService.baseUrl = 'MasterData/Commodity';
            var Methods;
            (function (Methods) {
            })(Methods = CommodityService.Methods || (CommodityService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CommodityService[x] = function (r, s, o) {
                    return Q.serviceRequest(CommodityService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CommodityService.baseUrl + '/' + x;
            });
        })(CommodityService = MasterData.CommodityService || (MasterData.CommodityService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ContactTypeForm = /** @class */ (function (_super) {
            __extends(ContactTypeForm, _super);
            function ContactTypeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ContactTypeForm.formKey = 'MasterData.ContactType';
            return ContactTypeForm;
        }(Serenity.PrefixedContext));
        MasterData.ContactTypeForm = ContactTypeForm;
        [['ContactType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ContactTypeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ContactTypeRow;
        (function (ContactTypeRow) {
            ContactTypeRow.idProperty = 'ContactType';
            ContactTypeRow.nameProperty = 'Description';
            ContactTypeRow.localTextPrefix = 'MasterData.ContactType';
            var Fields;
            (function (Fields) {
            })(Fields = ContactTypeRow.Fields || (ContactTypeRow.Fields = {}));
            [
                'Recnum',
                'ContactType',
                'Description',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ContactTypeRow = MasterData.ContactTypeRow || (MasterData.ContactTypeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ContactTypeService;
        (function (ContactTypeService) {
            ContactTypeService.baseUrl = 'MasterData/ContactType';
            var Methods;
            (function (Methods) {
            })(Methods = ContactTypeService.Methods || (ContactTypeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ContactTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ContactTypeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ContactTypeService.baseUrl + '/' + x;
            });
        })(ContactTypeService = MasterData.ContactTypeService || (MasterData.ContactTypeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerForm = /** @class */ (function (_super) {
            __extends(CustomerForm, _super);
            function CustomerForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerForm.formKey = 'MasterData.Customer';
            return CustomerForm;
        }(Serenity.PrefixedContext));
        MasterData.CustomerForm = CustomerForm;
        [['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['CustomerGroup', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['PostCode', function () { return Serenity.StringEditor; }],
            ['TelNo', function () { return Serenity.StringEditor; }],
            ['FaxNo', function () { return Serenity.StringEditor; }],
            ['Email', function () { return Serenity.StringEditor; }],
            ['ContactPerson', function () { return Serenity.StringEditor; }],
            ['ContactTitle', function () { return Serenity.StringEditor; }],
            ['AltCustName', function () { return Serenity.StringEditor; }],
            ['AltCustAddr', function () { return Serenity.StringEditor; }],
            ['AltCustAddr2', function () { return Serenity.StringEditor; }],
            ['AltCustAddr3', function () { return Serenity.StringEditor; }],
            ['AltCustAddr4', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['UseAltNames', function () { return Serenity.StringEditor; }],
            ['UseAltDesc', function () { return Serenity.StringEditor; }],
            ['WithCrLimit', function () { return Serenity.StringEditor; }],
            ['Salesman', function () { return Serenity.StringEditor; }],
            ['PaymentCcy', function () { return Serenity.StringEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['PriceCode', function () { return Serenity.StringEditor; }],
            ['CreditLimit', function () { return Serenity.DecimalEditor; }],
            ['ShipmentTerms', function () { return Serenity.StringEditor; }],
            ['TaxationLv', function () { return Serenity.StringEditor; }],
            ['SltaxPcent', function () { return Serenity.DecimalEditor; }],
            ['AcctCustSltax', function () { return Serenity.StringEditor; }],
            ['AcctArCust', function () { return Serenity.StringEditor; }],
            ['AcctArDisc', function () { return Serenity.StringEditor; }],
            ['AcctArAdj', function () { return Serenity.StringEditor; }],
            ['AcctSlsTrdisc', function () { return Serenity.StringEditor; }],
            ['AcctTemp', function () { return Serenity.StringEditor; }],
            ['AcctArDeposit', function () { return Serenity.StringEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['BreakDebitNote', function () { return Serenity.BooleanEditor; }],
            ['ContractorCode', function () { return Serenity.StringEditor; }],
            ['PayTermsAr', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CustomerForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerLinkTypeForm = /** @class */ (function (_super) {
            __extends(CustomerLinkTypeForm, _super);
            function CustomerLinkTypeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            CustomerLinkTypeForm.formKey = 'MasterData.CustomerLinkType';
            return CustomerLinkTypeForm;
        }(Serenity.PrefixedContext));
        MasterData.CustomerLinkTypeForm = CustomerLinkTypeForm;
        [['LinkType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(CustomerLinkTypeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerLinkTypeRow;
        (function (CustomerLinkTypeRow) {
            CustomerLinkTypeRow.idProperty = 'Recnum';
            CustomerLinkTypeRow.nameProperty = 'LinkType';
            CustomerLinkTypeRow.localTextPrefix = 'MasterData.CustomerLinkType';
            var Fields;
            (function (Fields) {
            })(Fields = CustomerLinkTypeRow.Fields || (CustomerLinkTypeRow.Fields = {}));
            [
                'Recnum',
                'LinkType',
                'Description',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CustomerLinkTypeRow = MasterData.CustomerLinkTypeRow || (MasterData.CustomerLinkTypeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerLinkTypeService;
        (function (CustomerLinkTypeService) {
            CustomerLinkTypeService.baseUrl = 'MasterData/CustomerLinkType';
            var Methods;
            (function (Methods) {
            })(Methods = CustomerLinkTypeService.Methods || (CustomerLinkTypeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CustomerLinkTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(CustomerLinkTypeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CustomerLinkTypeService.baseUrl + '/' + x;
            });
        })(CustomerLinkTypeService = MasterData.CustomerLinkTypeService || (MasterData.CustomerLinkTypeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerRow;
        (function (CustomerRow) {
            CustomerRow.idProperty = 'Recnum';
            CustomerRow.nameProperty = 'CustomerNo';
            CustomerRow.localTextPrefix = 'MasterData.Customer';
            var Fields;
            (function (Fields) {
            })(Fields = CustomerRow.Fields || (CustomerRow.Fields = {}));
            [
                'Recnum',
                'CustomerNo',
                'CustomerName',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'PostCode',
                'TelNo',
                'FaxNo',
                'Email',
                'Suspended',
                'CustomerGroup',
                'PaymentCcy',
                'PayTerms',
                'GtaxCode',
                'LtaxCode',
                'AcctArCust',
                'AcctArDisc',
                'AcctArAdj',
                'AcctSlsTrdisc',
                'PriceCode',
                'UseAltNames',
                'WithCrLimit',
                'CreditLimit',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'ContactPerson',
                'ContactTitle',
                'TradeDiscount',
                'AltCustName',
                'AltCustAddr',
                'AltCustAddr2',
                'AltCustAddr3',
                'AltCustAddr4',
                'WithBacklog',
                'WithBalance',
                'OnOrderCount',
                'InvoAmtBal',
                'OpenAmtBal',
                'NetAmtBal',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ArevisedDate',
                'ArevisedBy',
                'TrevisedDate',
                'TrevisedBy',
                'LastNoteNo',
                'Salesman',
                'OwnerBranch',
                'SourceBranch',
                'UseAltDesc',
                'MaskCode',
                'ShortName',
                'PendAmtOrd',
                'PendAmtInv',
                'AcctCustSltax',
                'TaxationLv',
                'SltaxPcent',
                'ShipmentTerms',
                'IsApproved',
                'ApprovedBy',
                'Preapprove',
                'ApprovedDate',
                'Anlys5',
                'Anlys6',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'UserDefinedField1',
                'UserDefinedField2',
                'UserDefinedField3',
                'UserDefinedField4',
                'UserDefinedField5',
                'UserDefinedField6',
                'UserDefinedField7',
                'UserDefinedField8',
                'UserDefinedField9',
                'UserDefinedField10',
                'UserDefinedField11',
                'UserDefinedField12',
                'UserDefinedField13',
                'UserDefinedField14',
                'UserDefinedField15',
                'UserDefinedField16',
                'UserDefinedField17',
                'UserDefinedField18',
                'UserDefinedField19',
                'UserDefinedField20',
                'AcctTemp',
                'BreakDebitNote',
                'ContractorCode',
                'PayTermsAr',
                'AcctArDeposit',
                'CustomerGroupRecnum',
                'CustomerGroupDescription',
                'CustomerGroupSuspended',
                'CustomerGroupAcctArCust',
                'CustomerGroupAcctArDisc',
                'CustomerGroupAcctArAdj',
                'CustomerGroupAcctSlsTrdisc',
                'CustomerGroupGtaxCode',
                'CustomerGroupLtaxCode',
                'CustomerGroupPaymentCcy',
                'CustomerGroupPayTerms',
                'CustomerGroupPriceCode',
                'CustomerGroupUseAltNames',
                'CustomerGroupWithCrLimit',
                'CustomerGroupCreditLimit',
                'CustomerGroupTradeDiscount',
                'CustomerGroupAnlys1',
                'CustomerGroupAnlys2',
                'CustomerGroupAnlys3',
                'CustomerGroupAnlys4',
                'CustomerGroupCustomerCount',
                'CustomerGroupCreatedDate',
                'CustomerGroupCreatedBy',
                'CustomerGroupRevisedDate',
                'CustomerGroupRevisedBy',
                'CustomerGroupArevisedDate',
                'CustomerGroupArevisedBy',
                'CustomerGroupTrevisedDate',
                'CustomerGroupTrevisedBy',
                'CustomerGroupOwnerBranch',
                'CustomerGroupSourceBranch',
                'CustomerGroupAcctCustSltax',
                'CustomerGroupSltaxPcent',
                'CustomerGroupAnlys5',
                'CustomerGroupAnlys6',
                'CustomerGroupAnlys7',
                'CustomerGroupAnlys8',
                'CustomerGroupAnlys9',
                'CustomerGroupAnlys10',
                'CustomerGroupAcctTemp',
                'CustomerGroupClientCompanyName',
                'CustomerGroupClientAddress1',
                'CustomerGroupClientAddress2',
                'CustomerGroupClientAddress3',
                'CustomerGroupClientAddress4',
                'CustomerGroupClientAddress5',
                'CustomerGroupClientTelNo',
                'CustomerGroupClientFaxNo',
                'CustomerGroupClientEmailAddress',
                'CustomerGroupClientContactPerson',
                'CustomerGroupClientContactTitle',
                'CustomerGroupClientRemarks',
                'CustomerGroupAcctArDeposit'
            ].forEach(function (x) { return Fields[x] = x; });
        })(CustomerRow = MasterData.CustomerRow || (MasterData.CustomerRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerService;
        (function (CustomerService) {
            CustomerService.baseUrl = 'MasterData/Customer';
            var Methods;
            (function (Methods) {
            })(Methods = CustomerService.Methods || (CustomerService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                CustomerService[x] = function (r, s, o) {
                    return Q.serviceRequest(CustomerService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = CustomerService.baseUrl + '/' + x;
            });
        })(CustomerService = MasterData.CustomerService || (MasterData.CustomerService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var EmployeeForm = /** @class */ (function (_super) {
            __extends(EmployeeForm, _super);
            function EmployeeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            EmployeeForm.formKey = 'MasterData.Employee';
            return EmployeeForm;
        }(Serenity.PrefixedContext));
        MasterData.EmployeeForm = EmployeeForm;
        [['EmployeeNo', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['ChineseName', function () { return Serenity.StringEditor; }],
            ['EnglishName', function () { return Serenity.StringEditor; }],
            ['PinyinName', function () { return Serenity.StringEditor; }],
            ['Id', function () { return Serenity.StringEditor; }],
            ['Birthday', function () { return Serenity.DateEditor; }],
            ['Gender', function () { return Serenity.StringEditor; }],
            ['Marital', function () { return Serenity.StringEditor; }],
            ['Nationality', function () { return Serenity.StringEditor; }],
            ['Province', function () { return Serenity.StringEditor; }],
            ['City', function () { return Serenity.StringEditor; }],
            ['Homephone', function () { return Serenity.StringEditor; }],
            ['Mobile', function () { return Serenity.StringEditor; }],
            ['Email', function () { return Serenity.StringEditor; }],
            ['BusinessPhone', function () { return Serenity.StringEditor; }],
            ['BusinessEmail', function () { return Serenity.StringEditor; }],
            ['Portrait', function () { return Serenity.StringEditor; }],
            ['HireType', function () { return Serenity.StringEditor; }],
            ['HireDate', function () { return Serenity.DateEditor; }],
            ['HireValid', function () { return Serenity.DateEditor; }],
            ['HireSociety', function () { return Serenity.DateEditor; }],
            ['HireSource', function () { return Serenity.StringEditor; }],
            ['Department', function () { return Serenity.StringEditor; }],
            ['ShiftNo', function () { return Serenity.StringEditor; }],
            ['ContractType', function () { return Serenity.StringEditor; }],
            ['ContractStartDate', function () { return Serenity.DateEditor; }],
            ['ContractEndDate', function () { return Serenity.DateEditor; }],
            ['ContractNumber', function () { return Serenity.StringEditor; }],
            ['ContractLocation', function () { return Serenity.StringEditor; }],
            ['Disablity', function () { return Serenity.StringEditor; }],
            ['DisablityDescription', function () { return Serenity.StringEditor; }],
            ['Height', function () { return Serenity.StringEditor; }],
            ['Weight', function () { return Serenity.StringEditor; }],
            ['EyeRight', function () { return Serenity.StringEditor; }],
            ['EyeLeft', function () { return Serenity.StringEditor; }],
            ['EyeColor', function () { return Serenity.StringEditor; }],
            ['ShoeSize', function () { return Serenity.StringEditor; }],
            ['ClothSize', function () { return Serenity.StringEditor; }],
            ['BloodType', function () { return Serenity.StringEditor; }],
            ['QuitDate', function () { return Serenity.DateEditor; }],
            ['QuitNoticeDate', function () { return Serenity.DateEditor; }],
            ['QuitLeaveDate', function () { return Serenity.DateEditor; }],
            ['QuitType', function () { return Serenity.StringEditor; }],
            ['QuitReason', function () { return Serenity.StringEditor; }],
            ['BadgeNo', function () { return Serenity.StringEditor; }],
            ['Formula', function () { return Serenity.StringEditor; }],
            ['WorkCentre', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(EmployeeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var EmployeeRow;
        (function (EmployeeRow) {
            EmployeeRow.idProperty = 'Recnum';
            EmployeeRow.nameProperty = 'EmployeeNo';
            EmployeeRow.localTextPrefix = 'MasterData.Employee';
            var Fields;
            (function (Fields) {
            })(Fields = EmployeeRow.Fields || (EmployeeRow.Fields = {}));
            [
                'Recnum',
                'EmployeeNo',
                'Suspended',
                'ChineseName',
                'EnglishName',
                'PinyinName',
                'Id',
                'Birthday',
                'Gender',
                'Marital',
                'Nationality',
                'Province',
                'City',
                'Homephone',
                'Mobile',
                'Email',
                'BusinessPhone',
                'BusinessEmail',
                'Portrait',
                'HireType',
                'HireDate',
                'HireValid',
                'HireSociety',
                'HireSource',
                'Department',
                'ShiftNo',
                'ContractType',
                'ContractStartDate',
                'ContractEndDate',
                'ContractNumber',
                'ContractLocation',
                'Disablity',
                'DisablityDescription',
                'Height',
                'Weight',
                'EyeRight',
                'EyeLeft',
                'EyeColor',
                'ShoeSize',
                'ClothSize',
                'BloodType',
                'QuitDate',
                'QuitNoticeDate',
                'QuitLeaveDate',
                'QuitType',
                'QuitReason',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'BadgeNo',
                'Formula',
                'WorkCentre',
                'ProdDevt01',
                'ProdDevt02',
                'ProdDevt03',
                'ProdDevt04',
                'ProdDevt05',
                'ProdDevt06',
                'ProdDevt07',
                'ProdDevt08',
                'ProdDevt09',
                'ProdDevt10',
                'ProdDevt11',
                'ProdDevt12',
                'ProdDevt13',
                'ProdDevt14',
                'ProdDevt15',
                'ProdDevt16',
                'ProdDevt17',
                'ProdDevt18',
                'ProdDevt19',
                'ProdDevt20',
                'UserDefinedField1',
                'UserDefinedField2',
                'UserDefinedField3',
                'UserDefinedField4',
                'UserDefinedField5',
                'UserDefinedField6',
                'UserDefinedField7',
                'UserDefinedField8',
                'UserDefinedField9',
                'UserDefinedField10',
                'UserDefinedField11',
                'UserDefinedField12',
                'UserDefinedField13',
                'UserDefinedField14',
                'UserDefinedField15',
                'UserDefinedField16',
                'UserDefinedField17',
                'UserDefinedField18',
                'UserDefinedField19',
                'UserDefinedField20'
            ].forEach(function (x) { return Fields[x] = x; });
        })(EmployeeRow = MasterData.EmployeeRow || (MasterData.EmployeeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var EmployeeService;
        (function (EmployeeService) {
            EmployeeService.baseUrl = 'MasterData/Employee';
            var Methods;
            (function (Methods) {
            })(Methods = EmployeeService.Methods || (EmployeeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                EmployeeService[x] = function (r, s, o) {
                    return Q.serviceRequest(EmployeeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = EmployeeService.baseUrl + '/' + x;
            });
        })(EmployeeService = MasterData.EmployeeService || (MasterData.EmployeeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ExchangeRateForm = /** @class */ (function (_super) {
            __extends(ExchangeRateForm, _super);
            function ExchangeRateForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ExchangeRateForm.formKey = 'MasterData.ExchangeRate';
            return ExchangeRateForm;
        }(Serenity.PrefixedContext));
        MasterData.ExchangeRateForm = ExchangeRateForm;
        [['Ccy', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['FromDate', function () { return Serenity.DateEditor; }],
            ['ToDate', function () { return Serenity.DateEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ExchangeRateForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ExchangeRateRow;
        (function (ExchangeRateRow) {
            ExchangeRateRow.idProperty = 'Recnum';
            ExchangeRateRow.nameProperty = 'Ccy';
            ExchangeRateRow.localTextPrefix = 'MasterData.ExchangeRate';
            var Fields;
            (function (Fields) {
            })(Fields = ExchangeRateRow.Fields || (ExchangeRateRow.Fields = {}));
            [
                'Recnum',
                'Ccy',
                'EntryNo',
                'FromDate',
                'ToDate',
                'ExchRate',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'CcyRecnum',
                'CcyDescription',
                'CcySuspended',
                'CcyDefaultRate',
                'CcyAcctArForex',
                'CcyAcctApForex',
                'CcyLastEntryNo',
                'CcyRateUseCount',
                'CcyCreatedDate',
                'CcyCreatedBy',
                'CcyRevisedDate',
                'CcyRevisedBy',
                'CcyArevisedDate',
                'CcyArevisedBy',
                'CcyOwnerBranch',
                'CcySourceBranch',
                'CcyApInvoBal',
                'CcyApOpenBal',
                'CcyApNetBal',
                'CcyApLinvoBal',
                'CcyApLopenBal',
                'CcyApLnetBal',
                'CcyArInvoBal',
                'CcyArOpenBal',
                'CcyArNetBal',
                'CcyArLinvoBal',
                'CcyArLopenBal',
                'CcyArLnetBal'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ExchangeRateRow = MasterData.ExchangeRateRow || (MasterData.ExchangeRateRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ExchangeRateService;
        (function (ExchangeRateService) {
            ExchangeRateService.baseUrl = 'MasterData/ExchangeRate';
            var Methods;
            (function (Methods) {
            })(Methods = ExchangeRateService.Methods || (ExchangeRateService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ExchangeRateService[x] = function (r, s, o) {
                    return Q.serviceRequest(ExchangeRateService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ExchangeRateService.baseUrl + '/' + x;
            });
        })(ExchangeRateService = MasterData.ExchangeRateService || (MasterData.ExchangeRateService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalPeriodForm = /** @class */ (function (_super) {
            __extends(FiscalPeriodForm, _super);
            function FiscalPeriodForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            FiscalPeriodForm.formKey = 'MasterData.FiscalPeriod';
            return FiscalPeriodForm;
        }(Serenity.PrefixedContext));
        MasterData.FiscalPeriodForm = FiscalPeriodForm;
        [['FiscalYear', function () { return Serenity.DecimalEditor; }],
            ['PeriodNo', function () { return Serenity.DecimalEditor; }],
            ['Period', function () { return Serenity.StringEditor; }],
            ['StartDate', function () { return Serenity.DateEditor; }],
            ['EndDate', function () { return Serenity.DateEditor; }],
            ['AllowEntries', function () { return Serenity.StringEditor; }],
            ['ClosedSl', function () { return Serenity.StringEditor; }],
            ['ClosedPu', function () { return Serenity.StringEditor; }],
            ['ClosedPr', function () { return Serenity.StringEditor; }],
            ['ClosedIc', function () { return Serenity.StringEditor; }],
            ['ClosedAr', function () { return Serenity.StringEditor; }],
            ['ClosedAp', function () { return Serenity.StringEditor; }],
            ['ClosedGl', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['ClosedDate', function () { return Serenity.DateEditor; }],
            ['ClosedBy', function () { return Serenity.StringEditor; }],
            ['BalBeg', function () { return Serenity.DecimalEditor; }],
            ['BalBegSign', function () { return Serenity.StringEditor; }],
            ['TotalDebit', function () { return Serenity.DecimalEditor; }],
            ['TotalCredit', function () { return Serenity.DecimalEditor; }],
            ['BalEnd', function () { return Serenity.DecimalEditor; }],
            ['BalEndSign', function () { return Serenity.StringEditor; }],
            ['ArBalBeg', function () { return Serenity.DecimalEditor; }],
            ['ArInvoAmt', function () { return Serenity.DecimalEditor; }],
            ['ArMemoAmt', function () { return Serenity.DecimalEditor; }],
            ['ArAdjAmt', function () { return Serenity.DecimalEditor; }],
            ['ArPayAmt', function () { return Serenity.DecimalEditor; }],
            ['ArBalEnd', function () { return Serenity.DecimalEditor; }],
            ['ApBalBeg', function () { return Serenity.DecimalEditor; }],
            ['ApInvoAmt', function () { return Serenity.DecimalEditor; }],
            ['ApMemoAmt', function () { return Serenity.DecimalEditor; }],
            ['ApAdjAmt', function () { return Serenity.DecimalEditor; }],
            ['ApPayAmt', function () { return Serenity.DecimalEditor; }],
            ['ApBalEnd', function () { return Serenity.DecimalEditor; }],
            ['ActiveGl', function () { return Serenity.StringEditor; }],
            ['ActiveAp', function () { return Serenity.StringEditor; }],
            ['ActiveAr', function () { return Serenity.StringEditor; }],
            ['ActiveIc', function () { return Serenity.StringEditor; }],
            ['ActivePr', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['ArDiscAmt', function () { return Serenity.DecimalEditor; }],
            ['ArDiffAmt', function () { return Serenity.DecimalEditor; }],
            ['ApDiscAmt', function () { return Serenity.DecimalEditor; }],
            ['ApDiffAmt', function () { return Serenity.DecimalEditor; }],
            ['ApRfdAmt', function () { return Serenity.DecimalEditor; }],
            ['ArRfdAmt', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(FiscalPeriodForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalPeriodRow;
        (function (FiscalPeriodRow) {
            FiscalPeriodRow.idProperty = 'Recnum';
            FiscalPeriodRow.nameProperty = 'Period';
            FiscalPeriodRow.localTextPrefix = 'MasterData.FiscalPeriod';
            var Fields;
            (function (Fields) {
            })(Fields = FiscalPeriodRow.Fields || (FiscalPeriodRow.Fields = {}));
            [
                'Recnum',
                'FiscalYear',
                'PeriodNo',
                'Period',
                'StartDate',
                'EndDate',
                'AllowEntries',
                'ClosedSl',
                'ClosedPu',
                'ClosedPr',
                'ClosedIc',
                'ClosedAr',
                'ClosedAp',
                'ClosedGl',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ClosedDate',
                'ClosedBy',
                'BalBeg',
                'BalBegSign',
                'TotalDebit',
                'TotalCredit',
                'BalEnd',
                'BalEndSign',
                'ArBalBeg',
                'ArInvoAmt',
                'ArMemoAmt',
                'ArAdjAmt',
                'ArPayAmt',
                'ArBalEnd',
                'ApBalBeg',
                'ApInvoAmt',
                'ApMemoAmt',
                'ApAdjAmt',
                'ApPayAmt',
                'ApBalEnd',
                'ActiveGl',
                'ActiveAp',
                'ActiveAr',
                'ActiveIc',
                'ActivePr',
                'OwnerBranch',
                'SourceBranch',
                'ArDiscAmt',
                'ArDiffAmt',
                'ApDiscAmt',
                'ApDiffAmt',
                'ApRfdAmt',
                'ArRfdAmt',
                'FiscalYearRecnum',
                'FiscalYearAllowEntries',
                'FiscalYearClosed',
                'FiscalYearLastPeriod',
                'FiscalYearCreatedDate',
                'FiscalYearCreatedBy',
                'FiscalYearRevisedDate',
                'FiscalYearRevisedBy',
                'FiscalYearClosedDate',
                'FiscalYearClosedBy',
                'FiscalYearYtdPlCredit',
                'FiscalYearYtdPlDebit',
                'FiscalYearYtdPlNet',
                'FiscalYearOwnerBranch',
                'FiscalYearSourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(FiscalPeriodRow = MasterData.FiscalPeriodRow || (MasterData.FiscalPeriodRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalPeriodService;
        (function (FiscalPeriodService) {
            FiscalPeriodService.baseUrl = 'MasterData/FiscalPeriod';
            var Methods;
            (function (Methods) {
            })(Methods = FiscalPeriodService.Methods || (FiscalPeriodService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                FiscalPeriodService[x] = function (r, s, o) {
                    return Q.serviceRequest(FiscalPeriodService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = FiscalPeriodService.baseUrl + '/' + x;
            });
        })(FiscalPeriodService = MasterData.FiscalPeriodService || (MasterData.FiscalPeriodService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalYearForm = /** @class */ (function (_super) {
            __extends(FiscalYearForm, _super);
            function FiscalYearForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            FiscalYearForm.formKey = 'MasterData.FiscalYear';
            return FiscalYearForm;
        }(Serenity.PrefixedContext));
        MasterData.FiscalYearForm = FiscalYearForm;
        [['FiscalYear', function () { return Serenity.DecimalEditor; }],
            ['AllowEntries', function () { return Serenity.StringEditor; }],
            ['Closed', function () { return Serenity.StringEditor; }],
            ['LastPeriod', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['ClosedDate', function () { return Serenity.DateEditor; }],
            ['ClosedBy', function () { return Serenity.StringEditor; }],
            ['YtdPlCredit', function () { return Serenity.DecimalEditor; }],
            ['YtdPlDebit', function () { return Serenity.DecimalEditor; }],
            ['YtdPlNet', function () { return Serenity.DecimalEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(FiscalYearForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalYearRow;
        (function (FiscalYearRow) {
            FiscalYearRow.idProperty = 'FiscalYear';
            FiscalYearRow.nameProperty = 'FiscalYearName';
            FiscalYearRow.localTextPrefix = 'MasterData.FiscalYear';
            FiscalYearRow.lookupKey = 'MasterData.FiscalYearRow';
            function getLookup() {
                return Q.getLookup('MasterData.FiscalYearRow');
            }
            FiscalYearRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = FiscalYearRow.Fields || (FiscalYearRow.Fields = {}));
            [
                'Recnum',
                'FiscalYear',
                'AllowEntries',
                'Closed',
                'LastPeriod',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ClosedDate',
                'ClosedBy',
                'YtdPlCredit',
                'YtdPlDebit',
                'YtdPlNet',
                'OwnerBranch',
                'SourceBranch',
                'FiscalYearName'
            ].forEach(function (x) { return Fields[x] = x; });
        })(FiscalYearRow = MasterData.FiscalYearRow || (MasterData.FiscalYearRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalYearService;
        (function (FiscalYearService) {
            FiscalYearService.baseUrl = 'MasterData/FiscalYear';
            var Methods;
            (function (Methods) {
            })(Methods = FiscalYearService.Methods || (FiscalYearService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                FiscalYearService[x] = function (r, s, o) {
                    return Q.serviceRequest(FiscalYearService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = FiscalYearService.baseUrl + '/' + x;
            });
        })(FiscalYearService = MasterData.FiscalYearService || (MasterData.FiscalYearService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FundCodeForm = /** @class */ (function (_super) {
            __extends(FundCodeForm, _super);
            function FundCodeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            FundCodeForm.formKey = 'MasterData.FundCode';
            return FundCodeForm;
        }(Serenity.PrefixedContext));
        MasterData.FundCodeForm = FundCodeForm;
        [['FundCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['DefaultCcy', function () { return Serenity.StringEditor; }],
            ['AcctCash', function () { return Serenity.StringEditor; }],
            ['RcptSuspended', function () { return Serenity.BooleanEditor; }],
            ['PmntSuspended', function () { return Serenity.BooleanEditor; }],
            ['FixedCurrency', function () { return Serenity.BooleanEditor; }],
            ['IsBankAcct', function () { return Serenity.BooleanEditor; }],
            ['IsCurrAcct', function () { return Serenity.BooleanEditor; }],
            ['BankAcctNo', function () { return Serenity.StringEditor; }],
            ['NextChequeNo', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(FundCodeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FundCodeRow;
        (function (FundCodeRow) {
            FundCodeRow.idProperty = 'Recnum';
            FundCodeRow.nameProperty = 'FundCode';
            FundCodeRow.localTextPrefix = 'MasterData.FundCode';
            var Fields;
            (function (Fields) {
            })(Fields = FundCodeRow.Fields || (FundCodeRow.Fields = {}));
            [
                'Recnum',
                'FundCode',
                'Description',
                'RcptSuspended',
                'PmntSuspended',
                'DefaultCcy',
                'FixedCurrency',
                'IsBankAcct',
                'IsCurrAcct',
                'BankAcctNo',
                'NextChequeNo',
                'AcctCash',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(FundCodeRow = MasterData.FundCodeRow || (MasterData.FundCodeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FundCodeService;
        (function (FundCodeService) {
            FundCodeService.baseUrl = 'MasterData/FundCode';
            var Methods;
            (function (Methods) {
            })(Methods = FundCodeService.Methods || (FundCodeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                FundCodeService[x] = function (r, s, o) {
                    return Q.serviceRequest(FundCodeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = FundCodeService.baseUrl + '/' + x;
            });
        })(FundCodeService = MasterData.FundCodeService || (MasterData.FundCodeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ItemForm = /** @class */ (function (_super) {
            __extends(ItemForm, _super);
            function ItemForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ItemForm.formKey = 'MasterData.Item';
            return ItemForm;
        }(Serenity.PrefixedContext));
        MasterData.ItemForm = ItemForm;
        [['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['ItemGroup', function () { return Serenity.StringEditor; }],
            ['StockUom', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Product', function () { return Serenity.BooleanEditor; }],
            ['Material', function () { return Serenity.BooleanEditor; }],
            ['MakeBuy', function () { return Serenity.BooleanEditor; }],
            ['ItemType', function () { return Serenity.StringEditor; }],
            ['AllocMethod', function () { return Serenity.StringEditor; }],
            ['MainLoc', function () { return Serenity.StringEditor; }],
            ['MainBin', function () { return Serenity.StringEditor; }],
            ['CycleCode', function () { return Serenity.StringEditor; }],
            ['DefBomNo', function () { return Serenity.StringEditor; }],
            ['DefSpecNo', function () { return Serenity.StringEditor; }],
            ['ScrapRate', function () { return Serenity.DecimalEditor; }],
            ['AverageCost', function () { return Serenity.StringEditor; }],
            ['LatestCost', function () { return Serenity.DecimalEditor; }],
            ['StdCost', function () { return Serenity.DecimalEditor; }],
            ['AltDescription', function () { return Serenity.StringEditor; }],
            ['AltExtDesc', function () { return Serenity.StringEditor; }],
            ['PrefVendOnly', function () { return Serenity.StringEditor; }],
            ['PrefVend1', function () { return Serenity.StringEditor; }],
            ['PrefVend2', function () { return Serenity.StringEditor; }],
            ['Charges', function () { return Serenity.StringEditor; }],
            ['Inspected', function () { return Serenity.StringEditor; }],
            ['SalesUom', function () { return Serenity.StringEditor; }],
            ['StdCostOk', function () { return Serenity.StringEditor; }],
            ['CostCentre', function () { return Serenity.StringEditor; }],
            ['DefSpecCount', function () { return Serenity.DecimalEditor; }],
            ['WithBacklog', function () { return Serenity.StringEditor; }],
            ['WithBalance', function () { return Serenity.StringEditor; }],
            ['QtyOnHand', function () { return Serenity.DecimalEditor; }],
            ['QtyOnSorder', function () { return Serenity.DecimalEditor; }],
            ['QtyOnPorder', function () { return Serenity.DecimalEditor; }],
            ['QtyOnJorder', function () { return Serenity.DecimalEditor; }],
            ['QtyOnInspect', function () { return Serenity.DecimalEditor; }],
            ['QtyWaitlisted', function () { return Serenity.DecimalEditor; }],
            ['QtyReserved', function () { return Serenity.DecimalEditor; }],
            ['QtyCommitted', function () { return Serenity.DecimalEditor; }],
            ['QtyAvailable', function () { return Serenity.DecimalEditor; }],
            ['QtyUnallocated', function () { return Serenity.DecimalEditor; }],
            ['InvtCostAvail', function () { return Serenity.DecimalEditor; }],
            ['InvtCostLdg', function () { return Serenity.DecimalEditor; }],
            ['PriceCcy', function () { return Serenity.StringEditor; }],
            ['BasePrice', function () { return Serenity.DecimalEditor; }],
            ['Pricea', function () { return Serenity.DecimalEditor; }],
            ['Priceb', function () { return Serenity.DecimalEditor; }],
            ['Pricec', function () { return Serenity.DecimalEditor; }],
            ['MinPrice', function () { return Serenity.DecimalEditor; }],
            ['MaxPrice', function () { return Serenity.DecimalEditor; }],
            ['LastCountDate', function () { return Serenity.DateEditor; }],
            ['LastDateIn', function () { return Serenity.DateEditor; }],
            ['LastDateOut', function () { return Serenity.DateEditor; }],
            ['SalesLotSize', function () { return Serenity.DecimalEditor; }],
            ['MinOrderQty', function () { return Serenity.DecimalEditor; }],
            ['MaxOrderQty', function () { return Serenity.DecimalEditor; }],
            ['MinOrderDays', function () { return Serenity.DecimalEditor; }],
            ['InnerPkgType', function () { return Serenity.StringEditor; }],
            ['InnerQty', function () { return Serenity.DecimalEditor; }],
            ['OuterPkgType', function () { return Serenity.StringEditor; }],
            ['OuterQty', function () { return Serenity.DecimalEditor; }],
            ['ArticleCode', function () { return Serenity.StringEditor; }],
            ['QuotaCategory', function () { return Serenity.StringEditor; }],
            ['WeightUom', function () { return Serenity.StringEditor; }],
            ['GrossWt', function () { return Serenity.DecimalEditor; }],
            ['NetWt', function () { return Serenity.DecimalEditor; }],
            ['DimensionUom', function () { return Serenity.StringEditor; }],
            ['Flength', function () { return Serenity.DecimalEditor; }],
            ['Width', function () { return Serenity.DecimalEditor; }],
            ['Height', function () { return Serenity.DecimalEditor; }],
            ['ComputedVol', function () { return Serenity.DecimalEditor; }],
            ['DeclaredVol', function () { return Serenity.DecimalEditor; }],
            ['MpsItem', function () { return Serenity.StringEditor; }],
            ['OrderPolicy', function () { return Serenity.StringEditor; }],
            ['MinPlanordQty', function () { return Serenity.DecimalEditor; }],
            ['MaxPlanordQty', function () { return Serenity.DecimalEditor; }],
            ['StdPlanordQty', function () { return Serenity.DecimalEditor; }],
            ['MinPlanordPrd', function () { return Serenity.DecimalEditor; }],
            ['MaxPlanordPrd', function () { return Serenity.DecimalEditor; }],
            ['StdPlanordPrd', function () { return Serenity.DecimalEditor; }],
            ['ReorderPt', function () { return Serenity.DecimalEditor; }],
            ['ReorderQty', function () { return Serenity.DecimalEditor; }],
            ['MinMthlyProd', function () { return Serenity.DecimalEditor; }],
            ['MaxMthlyProd', function () { return Serenity.DecimalEditor; }],
            ['MinMthlyPur', function () { return Serenity.DecimalEditor; }],
            ['MaxMthlyPur', function () { return Serenity.DecimalEditor; }],
            ['FollowMinProd', function () { return Serenity.StringEditor; }],
            ['FollowMaxProd', function () { return Serenity.StringEditor; }],
            ['FollowMinPur', function () { return Serenity.StringEditor; }],
            ['FollowMaxPur', function () { return Serenity.StringEditor; }],
            ['AllowMixMode', function () { return Serenity.StringEditor; }],
            ['ProdLeadTime', function () { return Serenity.DecimalEditor; }],
            ['ProdLeadUnit', function () { return Serenity.StringEditor; }],
            ['PurLeadTime', function () { return Serenity.DecimalEditor; }],
            ['PurLeadUnit', function () { return Serenity.StringEditor; }],
            ['Planner', function () { return Serenity.StringEditor; }],
            ['MrpParmDate', function () { return Serenity.DateEditor; }],
            ['MrpParmBy', function () { return Serenity.StringEditor; }],
            ['PictureFile', function () { return Serenity.StringEditor; }],
            ['SalesLtaxCode', function () { return Serenity.StringEditor; }],
            ['PurchLtaxCode', function () { return Serenity.StringEditor; }],
            ['TrevisedDate', function () { return Serenity.DateEditor; }],
            ['TrevisedBy', function () { return Serenity.StringEditor; }],
            ['SpecsCount', function () { return Serenity.DecimalEditor; }],
            ['LastSnapNo', function () { return Serenity.DecimalEditor; }],
            ['CommisType', function () { return Serenity.StringEditor; }],
            ['ProdBranch', function () { return Serenity.StringEditor; }],
            ['ExtendedDesc', function () { return Serenity.StringEditor; }],
            ['PurPriceCtrl', function () { return Serenity.StringEditor; }],
            ['PurMaxDev', function () { return Serenity.DecimalEditor; }],
            ['WebItem', function () { return Serenity.StringEditor; }],
            ['AcctItmSubcon', function () { return Serenity.StringEditor; }],
            ['WithBinCtrl', function () { return Serenity.StringEditor; }],
            ['Consign', function () { return Serenity.StringEditor; }],
            ['LastPackLineNo', function () { return Serenity.DecimalEditor; }],
            ['PutaxPcent', function () { return Serenity.DecimalEditor; }],
            ['AcctItmSltax', function () { return Serenity.StringEditor; }],
            ['SltaxPcent', function () { return Serenity.DecimalEditor; }],
            ['PurUom', function () { return Serenity.StringEditor; }],
            ['PurLotSize', function () { return Serenity.DecimalEditor; }],
            ['PurCcy', function () { return Serenity.StringEditor; }],
            ['PurBasePrice', function () { return Serenity.DecimalEditor; }],
            ['QtyNetAvailable', function () { return Serenity.DecimalEditor; }],
            ['UseStdProdLeadTime', function () { return Serenity.StringEditor; }],
            ['DailyProdQty', function () { return Serenity.DecimalEditor; }],
            ['IssueLotSize', function () { return Serenity.DecimalEditor; }],
            ['MrpExclude', function () { return Serenity.StringEditor; }],
            ['EnableLot', function () { return Serenity.StringEditor; }],
            ['EnableSerial', function () { return Serenity.StringEditor; }],
            ['LotNoLength', function () { return Serenity.DecimalEditor; }],
            ['SerialNoLength', function () { return Serenity.DecimalEditor; }],
            ['NextLotNo', function () { return Serenity.DecimalEditor; }],
            ['NextSerialNo', function () { return Serenity.DecimalEditor; }],
            ['MaxLotSize', function () { return Serenity.DecimalEditor; }],
            ['LotNoPrefix', function () { return Serenity.StringEditor; }],
            ['SerialNoPrefix', function () { return Serenity.StringEditor; }],
            ['SafeStockLvl', function () { return Serenity.DecimalEditor; }],
            ['CustomProdCode', function () { return Serenity.StringEditor; }],
            ['CustomLotSize', function () { return Serenity.DecimalEditor; }],
            ['CustomGrUom', function () { return Serenity.StringEditor; }],
            ['CustomGrWt', function () { return Serenity.DecimalEditor; }],
            ['CustomNtWt', function () { return Serenity.DecimalEditor; }],
            ['CustomOrigin', function () { return Serenity.StringEditor; }],
            ['QtyOnTransfer', function () { return Serenity.DecimalEditor; }],
            ['WithResetLot', function () { return Serenity.StringEditor; }],
            ['WithResetSerial', function () { return Serenity.StringEditor; }],
            ['PrevResetLotDate', function () { return Serenity.DateEditor; }],
            ['PrevResetSerialDate', function () { return Serenity.DateEditor; }],
            ['AutogenLot', function () { return Serenity.StringEditor; }],
            ['AutogenSerial', function () { return Serenity.StringEditor; }],
            ['FabItem', function () { return Serenity.StringEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['RohsCompliance', function () { return Serenity.BooleanEditor; }],
            ['DefMoldBomNo', function () { return Serenity.StringEditor; }],
            ['DefFormulaCode', function () { return Serenity.StringEditor; }],
            ['BoxType', function () { return Serenity.StringEditor; }],
            ['BoxLength', function () { return Serenity.DecimalEditor; }],
            ['BoxWidth', function () { return Serenity.DecimalEditor; }],
            ['BoxHeight', function () { return Serenity.DecimalEditor; }],
            ['BoxDUom', function () { return Serenity.StringEditor; }],
            ['Wd', function () { return Serenity.DecimalEditor; }],
            ['WdUom', function () { return Serenity.StringEditor; }],
            ['CsLength', function () { return Serenity.DecimalEditor; }],
            ['CsWidth', function () { return Serenity.DecimalEditor; }],
            ['UserDefinedField21', function () { return Serenity.StringEditor; }],
            ['CostWmove', function () { return Serenity.DecimalEditor; }],
            ['CostWcase', function () { return Serenity.DecimalEditor; }],
            ['CostWband', function () { return Serenity.DecimalEditor; }],
            ['CostBatt', function () { return Serenity.DecimalEditor; }],
            ['DescWmove', function () { return Serenity.StringEditor; }],
            ['DescWcase', function () { return Serenity.StringEditor; }],
            ['DescWband', function () { return Serenity.StringEditor; }],
            ['DescBatt', function () { return Serenity.StringEditor; }],
            ['PoBal', function () { return Serenity.DecimalEditor; }],
            ['PoMaxBal', function () { return Serenity.DecimalEditor; }],
            ['IncludeJob', function () { return Serenity.BooleanEditor; }],
            ['CsThickness', function () { return Serenity.DecimalEditor; }],
            ['CsThicknessUom', function () { return Serenity.StringEditor; }],
            ['CsProportion', function () { return Serenity.DecimalEditor; }],
            ['CsProportionUom', function () { return Serenity.StringEditor; }],
            ['DieCutter', function () { return Serenity.DecimalEditor; }],
            ['MatInspectLeadTime', function () { return Serenity.DecimalEditor; }],
            ['MatPrepareLeadTime', function () { return Serenity.DecimalEditor; }],
            ['MatInspectLeadUnit', function () { return Serenity.StringEditor; }],
            ['MatPrepareLeadUnit', function () { return Serenity.StringEditor; }],
            ['ColorCode', function () { return Serenity.StringEditor; }],
            ['CollectionCode', function () { return Serenity.StringEditor; }],
            ['StyleCode', function () { return Serenity.StringEditor; }],
            ['X', function () { return Serenity.DecimalEditor; }],
            ['Y', function () { return Serenity.DecimalEditor; }],
            ['TempDescription', function () { return Serenity.StringEditor; }],
            ['Specification', function () { return Serenity.StringEditor; }],
            ['XUom', function () { return Serenity.StringEditor; }],
            ['YUom', function () { return Serenity.StringEditor; }],
            ['ProductionUomConversionRate', function () { return Serenity.DecimalEditor; }],
            ['PurchaseUomConversionRate', function () { return Serenity.DecimalEditor; }],
            ['AutogenLotIssue', function () { return Serenity.BooleanEditor; }],
            ['AutogenSerialIssue', function () { return Serenity.BooleanEditor; }],
            ['WcCostCcy', function () { return Serenity.StringEditor; }],
            ['WcCost', function () { return Serenity.DecimalEditor; }],
            ['WcCostDisc', function () { return Serenity.DecimalEditor; }],
            ['WcCostExch', function () { return Serenity.DecimalEditor; }],
            ['WcFreight', function () { return Serenity.DecimalEditor; }],
            ['WcMargin', function () { return Serenity.DecimalEditor; }],
            ['CeilingPrice', function () { return Serenity.DecimalEditor; }],
            ['BottomRatio', function () { return Serenity.DecimalEditor; }],
            ['BottomPrice', function () { return Serenity.DecimalEditor; }],
            ['DrawingNo', function () { return Serenity.StringEditor; }],
            ['MaterialType', function () { return Serenity.StringEditor; }],
            ['AcctItmAsset', function () { return Serenity.StringEditor; }],
            ['AcctItmWip', function () { return Serenity.StringEditor; }],
            ['AcctItmConsum', function () { return Serenity.StringEditor; }],
            ['AcctItmScrap', function () { return Serenity.StringEditor; }],
            ['AcctItmPvar', function () { return Serenity.StringEditor; }],
            ['AcctItmReval', function () { return Serenity.StringEditor; }],
            ['AcctItmVaria', function () { return Serenity.StringEditor; }],
            ['AcctItmSales', function () { return Serenity.StringEditor; }],
            ['AcctItmSlret', function () { return Serenity.StringEditor; }],
            ['AcctItmSldisc', function () { return Serenity.StringEditor; }],
            ['AcctItmCogs', function () { return Serenity.StringEditor; }],
            ['AcctItmPurch', function () { return Serenity.StringEditor; }],
            ['AcctItmPuret', function () { return Serenity.StringEditor; }],
            ['AcctItmPudisc', function () { return Serenity.StringEditor; }],
            ['AcctItmPutax', function () { return Serenity.StringEditor; }],
            ['AcctMachine', function () { return Serenity.StringEditor; }],
            ['AcctEnergy', function () { return Serenity.StringEditor; }],
            ['AcctWater', function () { return Serenity.StringEditor; }],
            ['AcctRental', function () { return Serenity.StringEditor; }],
            ['AcctLabor', function () { return Serenity.StringEditor; }],
            ['AcctInlab', function () { return Serenity.StringEditor; }],
            ['AcctInmat', function () { return Serenity.StringEditor; }],
            ['AcctMisc', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ItemForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ItemRow;
        (function (ItemRow) {
            ItemRow.idProperty = 'ItemNo';
            ItemRow.nameProperty = 'ItemNo';
            ItemRow.localTextPrefix = 'MasterData.Item';
            ItemRow.lookupKey = 'MasterData.ItemRow';
            function getLookup() {
                return Q.getLookup('MasterData.ItemRow');
            }
            ItemRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = ItemRow.Fields || (ItemRow.Fields = {}));
            [
                'LookupDescription',
                'Recnum',
                'ItemNo',
                'Description',
                'Suspended',
                'ItemGroup',
                'Charges',
                'Product',
                'Material',
                'Inspected',
                'ItemType',
                'StockUom',
                'MainLoc',
                'MakeBuy',
                'AllocMethod',
                'StdCostOk',
                'CostCentre',
                'CycleCode',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'DefSpecNo',
                'DefSpecCount',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'WithBacklog',
                'WithBalance',
                'QtyOnHand',
                'QtyOnSorder',
                'QtyOnPorder',
                'QtyOnJorder',
                'QtyOnInspect',
                'QtyWaitlisted',
                'QtyReserved',
                'QtyCommitted',
                'QtyAvailable',
                'QtyUnallocated',
                'InvtCostAvail',
                'InvtCostLdg',
                'AverageCost',
                'LatestCost',
                'StdCost',
                'LastCountDate',
                'LastDateIn',
                'LastDateOut',
                'SalesUom',
                'SalesLotSize',
                'PriceCcy',
                'BasePrice',
                'Pricea',
                'Priceb',
                'Pricec',
                'MinPrice',
                'MaxPrice',
                'MinOrderQty',
                'MaxOrderQty',
                'MinOrderDays',
                'InnerPkgType',
                'InnerQty',
                'OuterPkgType',
                'OuterQty',
                'ArticleCode',
                'QuotaCategory',
                'WeightUom',
                'GrossWt',
                'NetWt',
                'DimensionUom',
                'Flength',
                'Width',
                'Height',
                'ComputedVol',
                'DeclaredVol',
                'SrevisedDate',
                'SrevisedBy',
                'MpsItem',
                'OrderPolicy',
                'MinPlanordQty',
                'MaxPlanordQty',
                'StdPlanordQty',
                'MinPlanordPrd',
                'MaxPlanordPrd',
                'StdPlanordPrd',
                'ReorderPt',
                'ReorderQty',
                'MinMthlyProd',
                'MaxMthlyProd',
                'MinMthlyPur',
                'MaxMthlyPur',
                'FollowMinProd',
                'FollowMaxProd',
                'FollowMinPur',
                'FollowMaxPur',
                'AllowMixMode',
                'PrefVendOnly',
                'PrefVend1',
                'PrefVend2',
                'ProdLeadTime',
                'ProdLeadUnit',
                'PurLeadTime',
                'PurLeadUnit',
                'Planner',
                'MrpParmDate',
                'MrpParmBy',
                'AltDescription',
                'PictureFile',
                'AcctItmAsset',
                'AcctItmWip',
                'AcctItmConsum',
                'AcctItmScrap',
                'AcctItmPvar',
                'AcctItmReval',
                'AcctItmVaria',
                'AcctItmSales',
                'AcctItmSlret',
                'AcctItmSldisc',
                'AcctItmCogs',
                'AcctItmPurch',
                'AcctItmPuret',
                'AcctItmPudisc',
                'AcctItmPutax',
                'AcctMachine',
                'AcctEnergy',
                'AcctWater',
                'AcctRental',
                'AcctLabor',
                'AcctInlab',
                'AcctInmat',
                'AcctMisc',
                'ArevisedDate',
                'ArevisedBy',
                'BrevisedDate',
                'BrevisedBy',
                'SalesLtaxCode',
                'PurchLtaxCode',
                'TrevisedDate',
                'TrevisedBy',
                'SpecsCount',
                'DefBomNo',
                'LastSnapNo',
                'CommisType',
                'ProdBranch',
                'OwnerBranch',
                'SourceBranch',
                'ScrapRate',
                'AltExtDesc',
                'ExtendedDesc',
                'PurPriceCtrl',
                'PurMaxDev',
                'WebItem',
                'AcctItmSubcon',
                'WithBinCtrl',
                'Consign',
                'ProdDevt01',
                'ProdDevt02',
                'ProdDevt03',
                'ProdDevt04',
                'ProdDevt05',
                'ProdDevt06',
                'ProdDevt07',
                'ProdDevt08',
                'ProdDevt09',
                'ProdDevt10',
                'ProdDevt11',
                'ProdDevt12',
                'ProdDevt13',
                'ProdDevt14',
                'ProdDevt15',
                'ProdDevt16',
                'ProdDevt17',
                'ProdDevt18',
                'ProdDevt19',
                'ProdDevt20',
                'ProdCheck01',
                'ProdCheck02',
                'ProdCheck03',
                'ProdCheck04',
                'ProdCheck05',
                'ProdCheck06',
                'ProdCheck07',
                'ProdCheck08',
                'ProdCheck09',
                'ProdCheck10',
                'ProdCheck11',
                'ProdCheck12',
                'ProdCheck13',
                'ProdCheck14',
                'ProdCheck15',
                'ProdCheck16',
                'ProdCheck17',
                'ProdCheck18',
                'ProdCheck19',
                'ProdCheck20',
                'LastPackLineNo',
                'PutaxPcent',
                'AcctItmSltax',
                'SltaxPcent',
                'PurUom',
                'PurLotSize',
                'PurCcy',
                'PurBasePrice',
                'QtyNetAvailable',
                'UseStdProdLeadTime',
                'DailyProdQty',
                'IssueLotSize',
                'MrpExclude',
                'EnableLot',
                'EnableSerial',
                'LotNoLength',
                'SerialNoLength',
                'NextLotNo',
                'NextSerialNo',
                'MaxLotSize',
                'LotNoPrefix',
                'SerialNoPrefix',
                'SafeStockLvl',
                'MainBin',
                'CustomProdCode',
                'CustomLotSize',
                'CustomGrUom',
                'CustomGrWt',
                'CustomNtWt',
                'CustomOrigin',
                'IsApproved',
                'ApprovedBy',
                'Preapprove',
                'ApprovedDate',
                'QtyOnTransfer',
                'WithResetLot',
                'WithResetSerial',
                'PrevResetLotDate',
                'PrevResetSerialDate',
                'AutogenLot',
                'AutogenSerial',
                'FabItem',
                'Anlys5',
                'Anlys6',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'UserDefinedField1',
                'UserDefinedField2',
                'UserDefinedField3',
                'UserDefinedField4',
                'UserDefinedField5',
                'UserDefinedField6',
                'UserDefinedField7',
                'UserDefinedField8',
                'UserDefinedField9',
                'UserDefinedField10',
                'UserDefinedField11',
                'UserDefinedField12',
                'UserDefinedField13',
                'UserDefinedField14',
                'UserDefinedField15',
                'UserDefinedField16',
                'UserDefinedField17',
                'UserDefinedField18',
                'UserDefinedField19',
                'UserDefinedField20',
                'RohsCompliance',
                'DefMoldBomNo',
                'DefFormulaCode',
                'BoxType',
                'BoxLength',
                'BoxWidth',
                'BoxHeight',
                'BoxDUom',
                'Wd',
                'WdUom',
                'CsLength',
                'CsWidth',
                'UserDefinedField21',
                'CostWmove',
                'CostWcase',
                'CostWband',
                'CostBatt',
                'DescWmove',
                'DescWcase',
                'DescWband',
                'DescBatt',
                'PoBal',
                'PoMaxBal',
                'IncludeJob',
                'CsThickness',
                'CsThicknessUom',
                'CsProportion',
                'CsProportionUom',
                'DieCutter',
                'MatInspectLeadTime',
                'MatPrepareLeadTime',
                'MatInspectLeadUnit',
                'MatPrepareLeadUnit',
                'ColorCode',
                'CollectionCode',
                'StyleCode',
                'X',
                'Y',
                'TempDescription',
                'Specification',
                'XUom',
                'YUom',
                'ProductionUomConversionRate',
                'PurchaseUomConversionRate',
                'AutogenLotIssue',
                'AutogenSerialIssue',
                'WcCostCcy',
                'WcCost',
                'WcCostDisc',
                'WcCostExch',
                'WcFreight',
                'WcMargin',
                'CeilingPrice',
                'BottomRatio',
                'BottomPrice',
                'DrawingNo',
                'MaterialType',
                'ItemGroupRecnum',
                'ItemGroupDescription',
                'ItemGroupSuspended',
                'ItemGroupProduct',
                'ItemGroupMaterial',
                'ItemGroupInspected',
                'ItemGroupCostCentre',
                'ItemGroupItemType',
                'ItemGroupAllocMethod',
                'ItemGroupProdBranch',
                'ItemGroupAcctItmAsset',
                'ItemGroupAcctItmWip',
                'ItemGroupAcctItmConsum',
                'ItemGroupAcctItmScrap',
                'ItemGroupAcctItmPvar',
                'ItemGroupAcctItmReval',
                'ItemGroupAcctItmVaria',
                'ItemGroupAcctItmSales',
                'ItemGroupAcctItmSlret',
                'ItemGroupAcctItmSldisc',
                'ItemGroupAcctItmCogs',
                'ItemGroupAcctItmPurch',
                'ItemGroupAcctItmPuret',
                'ItemGroupAcctItmPudisc',
                'ItemGroupAcctItmPutax',
                'ItemGroupAcctMachine',
                'ItemGroupAcctEnergy',
                'ItemGroupAcctWater',
                'ItemGroupAcctRental',
                'ItemGroupAcctLabor',
                'ItemGroupAcctInlab',
                'ItemGroupAcctInmat',
                'ItemGroupAcctMisc',
                'ItemGroupArevisedDate',
                'ItemGroupArevisedBy',
                'ItemGroupBrevisedDate',
                'ItemGroupBrevisedBy',
                'ItemGroupMakeOrBuy',
                'ItemGroupTypicalUom',
                'ItemGroupCycleCode',
                'ItemGroupSalesLtaxCode',
                'ItemGroupPurchLtaxCode',
                'ItemGroupInnerPkgType',
                'ItemGroupInnerQty',
                'ItemGroupOuterPkgType',
                'ItemGroupOuterQty',
                'ItemGroupAnlys1',
                'ItemGroupAnlys2',
                'ItemGroupAnlys3',
                'ItemGroupAnlys4',
                'ItemGroupItemCount',
                'ItemGroupCreatedDate',
                'ItemGroupCreatedBy',
                'ItemGroupRevisedDate',
                'ItemGroupRevisedBy',
                'ItemGroupTrevisedDate',
                'ItemGroupTrevisedBy',
                'ItemGroupCommisType',
                'ItemGroupOwnerBranch',
                'ItemGroupSourceBranch',
                'ItemGroupScrapRate',
                'ItemGroupPurPriceCtrl',
                'ItemGroupPurMaxDev',
                'ItemGroupAcctItmSubcon',
                'ItemGroupConsolidate',
                'ItemGroupPutaxPcent',
                'ItemGroupAcctItmSltax',
                'ItemGroupSltaxPcent',
                'ItemGroupEnableLot',
                'ItemGroupEnableSerial',
                'ItemGroupLotNoLength',
                'ItemGroupSerialNoLength',
                'ItemGroupNextLotNo',
                'ItemGroupNextSerialNo',
                'ItemGroupMaxLotSize',
                'ItemGroupLotNoPrefix',
                'ItemGroupSerialNoPrefix',
                'ItemGroupDevtCat01',
                'ItemGroupDevtCat02',
                'ItemGroupDevtCat03',
                'ItemGroupDevtCat04',
                'ItemGroupDevtCat05',
                'ItemGroupDevtCat06',
                'ItemGroupDevtCat07',
                'ItemGroupDevtCat08',
                'ItemGroupDevtCat09',
                'ItemGroupDevtCat10',
                'ItemGroupDevtCat11',
                'ItemGroupDevtCat12',
                'ItemGroupDevtCat13',
                'ItemGroupDevtCat14',
                'ItemGroupDevtCat15',
                'ItemGroupDevtCat16',
                'ItemGroupDevtCat17',
                'ItemGroupDevtCat18',
                'ItemGroupDevtCat19',
                'ItemGroupDevtCat20',
                'ItemGroupMainLoc',
                'ItemGroupMainBin',
                'ItemGroupWithResetLot',
                'ItemGroupWithResetSerial',
                'ItemGroupPrevResetLotDate',
                'ItemGroupPrevResetSerialDate',
                'ItemGroupBomRohsControl',
                'ItemGroupAnlys5',
                'ItemGroupAnlys6',
                'ItemGroupAnlys7',
                'ItemGroupAnlys8',
                'ItemGroupAnlys9',
                'ItemGroupAnlys10',
                'ItemGroupAutogenLot',
                'ItemGroupAutogenSerial',
                'ItemGroupNoScrapInMatIssue',
                'ItemGroupAutogenLotIssue',
                'ItemGroupAutogenSerialIssue'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ItemRow = MasterData.ItemRow || (MasterData.ItemRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ItemService;
        (function (ItemService) {
            ItemService.baseUrl = 'MasterData/Item';
            var Methods;
            (function (Methods) {
            })(Methods = ItemService.Methods || (ItemService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ItemService[x] = function (r, s, o) {
                    return Q.serviceRequest(ItemService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ItemService.baseUrl + '/' + x;
            });
        })(ItemService = MasterData.ItemService || (MasterData.ItemService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var LocationForm = /** @class */ (function (_super) {
            __extends(LocationForm, _super);
            function LocationForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LocationForm.formKey = 'MasterData.Location';
            return LocationForm;
        }(Serenity.PrefixedContext));
        MasterData.LocationForm = LocationForm;
        [['Loc', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['NoReservation', function () { return Serenity.BooleanEditor; }],
            ['NoWaitlist', function () { return Serenity.BooleanEditor; }],
            ['NoAvailable', function () { return Serenity.BooleanEditor; }],
            ['NoPlanning', function () { return Serenity.BooleanEditor; }],
            ['NoIssuance', function () { return Serenity.BooleanEditor; }],
            ['NoReceipts', function () { return Serenity.BooleanEditor; }],
            ['NoMatIssue', function () { return Serenity.BooleanEditor; }],
            ['NoFgReturn', function () { return Serenity.BooleanEditor; }],
            ['NoShipment', function () { return Serenity.BooleanEditor; }],
            ['NoGrn', function () { return Serenity.BooleanEditor; }],
            ['OnSorderCount', function () { return Serenity.DecimalEditor; }],
            ['OnPorderCount', function () { return Serenity.DecimalEditor; }],
            ['OnJorderCount', function () { return Serenity.DecimalEditor; }],
            ['WithBinCtrl', function () { return Serenity.StringEditor; }],
            ['WithPackingBox', function () { return Serenity.BooleanEditor; }],
            ['WithBacklog', function () { return Serenity.StringEditor; }],
            ['InvtCostAvail', function () { return Serenity.DecimalEditor; }],
            ['InvtCostLdg', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(LocationForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var LocationRow;
        (function (LocationRow) {
            LocationRow.idProperty = 'Loc';
            LocationRow.nameProperty = 'Description';
            LocationRow.localTextPrefix = 'MasterData.Location';
            LocationRow.lookupKey = 'MasterData.LocationRow';
            function getLookup() {
                return Q.getLookup('MasterData.LocationRow');
            }
            LocationRow.getLookup = getLookup;
            var Fields;
            (function (Fields) {
            })(Fields = LocationRow.Fields || (LocationRow.Fields = {}));
            [
                'Recnum',
                'Loc',
                'Description',
                'Suspended',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'BranchNo',
                'NoReservation',
                'NoWaitlist',
                'NoAvailable',
                'NoPlanning',
                'NoIssuance',
                'NoReceipts',
                'NoMatIssue',
                'NoFgReturn',
                'NoShipment',
                'NoGrn',
                'WithBacklog',
                'OnSorderCount',
                'OnPorderCount',
                'OnJorderCount',
                'InvtCostAvail',
                'InvtCostLdg',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'WithBinCtrl',
                'WithPackingBox'
            ].forEach(function (x) { return Fields[x] = x; });
        })(LocationRow = MasterData.LocationRow || (MasterData.LocationRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var LocationService;
        (function (LocationService) {
            LocationService.baseUrl = 'MasterData/Location';
            var Methods;
            (function (Methods) {
            })(Methods = LocationService.Methods || (LocationService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                LocationService[x] = function (r, s, o) {
                    return Q.serviceRequest(LocationService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = LocationService.baseUrl + '/' + x;
            });
        })(LocationService = MasterData.LocationService || (MasterData.LocationService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MachineForm = /** @class */ (function (_super) {
            __extends(MachineForm, _super);
            function MachineForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MachineForm.formKey = 'MasterData.Machine';
            return MachineForm;
        }(Serenity.PrefixedContext));
        MasterData.MachineForm = MachineForm;
        [['MachineNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['TemplateCode', function () { return Serenity.StringEditor; }],
            ['PictureFile', function () { return Serenity.StringEditor; }],
            ['Picture', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['WorkCentre', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(MachineForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MachineRow;
        (function (MachineRow) {
            MachineRow.idProperty = 'Recnum';
            MachineRow.nameProperty = 'MachineNo';
            MachineRow.localTextPrefix = 'MasterData.Machine';
            var Fields;
            (function (Fields) {
            })(Fields = MachineRow.Fields || (MachineRow.Fields = {}));
            [
                'Recnum',
                'MachineNo',
                'Description',
                'Suspended',
                'TemplateCode',
                'PictureFile',
                'Picture',
                'Remarks',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'LastDetailNo',
                'WorkCentre'
            ].forEach(function (x) { return Fields[x] = x; });
        })(MachineRow = MasterData.MachineRow || (MasterData.MachineRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MachineService;
        (function (MachineService) {
            MachineService.baseUrl = 'MasterData/Machine';
            var Methods;
            (function (Methods) {
            })(Methods = MachineService.Methods || (MachineService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MachineService[x] = function (r, s, o) {
                    return Q.serviceRequest(MachineService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = MachineService.baseUrl + '/' + x;
            });
        })(MachineService = MasterData.MachineService || (MasterData.MachineService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageAttachmentForm = /** @class */ (function (_super) {
            __extends(MessageAttachmentForm, _super);
            function MessageAttachmentForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MessageAttachmentForm.formKey = 'MasterData.MessageAttachment';
            return MessageAttachmentForm;
        }(Serenity.PrefixedContext));
        MasterData.MessageAttachmentForm = MessageAttachmentForm;
        [['LineNo', function () { return Serenity.IntegerEditor; }],
            ['AttachmentType', function () { return Serenity.IntegerEditor; }],
            ['FileName', function () { return Serenity.StringEditor; }],
            ['FileContent', function () { return Serenity.StringEditor; }],
            ['FileSize', function () { return Serenity.IntegerEditor; }]
        ].forEach(function (x) { return Object.defineProperty(MessageAttachmentForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageAttachmentRow;
        (function (MessageAttachmentRow) {
            MessageAttachmentRow.idProperty = 'MessageId';
            MessageAttachmentRow.nameProperty = 'FileName';
            MessageAttachmentRow.localTextPrefix = 'MasterData.MessageAttachment';
            var Fields;
            (function (Fields) {
            })(Fields = MessageAttachmentRow.Fields || (MessageAttachmentRow.Fields = {}));
            [
                'MessageId',
                'LineNo',
                'AttachmentType',
                'FileName',
                'FileContent',
                'FileSize',
                'MessageCreatedBy',
                'MessageCreatedDate',
                'MessageRevisedBy',
                'MessageRevisedDate',
                'MessageSummary',
                'MessageDetail',
                'MessageParentId',
                'MessagePostStatus',
                'MessageReqId',
                'MessageMsgTo',
                'MessageReqmsgParentId',
                'MessageInstanceNo',
                'MessageHtmlText',
                'MessageWithAttachment'
            ].forEach(function (x) { return Fields[x] = x; });
        })(MessageAttachmentRow = MasterData.MessageAttachmentRow || (MasterData.MessageAttachmentRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageAttachmentService;
        (function (MessageAttachmentService) {
            MessageAttachmentService.baseUrl = 'MasterData/MessageAttachment';
            var Methods;
            (function (Methods) {
            })(Methods = MessageAttachmentService.Methods || (MessageAttachmentService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MessageAttachmentService[x] = function (r, s, o) {
                    return Q.serviceRequest(MessageAttachmentService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = MessageAttachmentService.baseUrl + '/' + x;
            });
        })(MessageAttachmentService = MasterData.MessageAttachmentService || (MasterData.MessageAttachmentService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageForm = /** @class */ (function (_super) {
            __extends(MessageForm, _super);
            function MessageForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MessageForm.formKey = 'MasterData.Message';
            return MessageForm;
        }(Serenity.PrefixedContext));
        MasterData.MessageForm = MessageForm;
        [['CreatedBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['Summary', function () { return Serenity.StringEditor; }],
            ['Detail', function () { return Serenity.StringEditor; }],
            ['ParentId', function () { return Serenity.IntegerEditor; }],
            ['PostStatus', function () { return Serenity.StringEditor; }],
            ['ReqId', function () { return Serenity.IntegerEditor; }],
            ['MsgTo', function () { return Serenity.StringEditor; }],
            ['ReqmsgParentId', function () { return Serenity.DecimalEditor; }],
            ['InstanceNo', function () { return Serenity.IntegerEditor; }],
            ['HtmlText', function () { return Serenity.StringEditor; }],
            ['WithAttachment', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(MessageForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageRow;
        (function (MessageRow) {
            MessageRow.idProperty = 'MessageId';
            MessageRow.nameProperty = 'Summary';
            MessageRow.localTextPrefix = 'MasterData.Message';
            var Fields;
            (function (Fields) {
            })(Fields = MessageRow.Fields || (MessageRow.Fields = {}));
            [
                'DetailList',
                'MessageId',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'Summary',
                'Detail',
                'ParentId',
                'PostStatus',
                'ReqId',
                'MsgTo',
                'ReqmsgParentId',
                'InstanceNo',
                'HtmlText',
                'WithAttachment'
            ].forEach(function (x) { return Fields[x] = x; });
        })(MessageRow = MasterData.MessageRow || (MasterData.MessageRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageService;
        (function (MessageService) {
            MessageService.baseUrl = 'MasterData/Message';
            var Methods;
            (function (Methods) {
            })(Methods = MessageService.Methods || (MessageService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MessageService[x] = function (r, s, o) {
                    return Q.serviceRequest(MessageService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = MessageService.baseUrl + '/' + x;
            });
        })(MessageService = MasterData.MessageService || (MasterData.MessageService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MoldForm = /** @class */ (function (_super) {
            __extends(MoldForm, _super);
            function MoldForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MoldForm.formKey = 'MasterData.Mold';
            return MoldForm;
        }(Serenity.PrefixedContext));
        MasterData.MoldForm = MoldForm;
        [['MoldNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['TotalSet', function () { return Serenity.IntegerEditor; }],
            ['StdOutput', function () { return Serenity.IntegerEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['Length', function () { return Serenity.DecimalEditor; }],
            ['Width', function () { return Serenity.DecimalEditor; }],
            ['Thickness', function () { return Serenity.DecimalEditor; }],
            ['Weight', function () { return Serenity.DecimalEditor; }],
            ['SetWeight', function () { return Serenity.DecimalEditor; }],
            ['Shrink', function () { return Serenity.DecimalEditor; }],
            ['ShotSize', function () { return Serenity.DecimalEditor; }],
            ['CavityFinish', function () { return Serenity.StringEditor; }],
            ['TempCtrlZone', function () { return Serenity.DecimalEditor; }],
            ['WtrFlowA', function () { return Serenity.DecimalEditor; }],
            ['WtrFlowB', function () { return Serenity.DecimalEditor; }],
            ['Qmc', function () { return Serenity.StringEditor; }],
            ['HyCores', function () { return Serenity.StringEditor; }],
            ['MoldCost', function () { return Serenity.DecimalEditor; }],
            ['EjectorRtn', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['PictureFile', function () { return Serenity.StringEditor; }],
            ['CavSets', function () { return Serenity.IntegerEditor; }],
            ['CavSqInch', function () { return Serenity.IntegerEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['LifeTime', function () { return Serenity.DecimalEditor; }],
            ['JobQty', function () { return Serenity.DecimalEditor; }],
            ['FinQty', function () { return Serenity.DecimalEditor; }],
            ['BalQty', function () { return Serenity.DecimalEditor; }],
            ['RepQty', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(MoldForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MoldRow;
        (function (MoldRow) {
            MoldRow.idProperty = 'Recnum';
            MoldRow.nameProperty = 'MoldNo';
            MoldRow.localTextPrefix = 'MasterData.Mold';
            var Fields;
            (function (Fields) {
            })(Fields = MoldRow.Fields || (MoldRow.Fields = {}));
            [
                'Recnum',
                'MoldNo',
                'Description',
                'TotalSet',
                'StdOutput',
                'Suspended',
                'Length',
                'Width',
                'Thickness',
                'Weight',
                'SetWeight',
                'Shrink',
                'ShotSize',
                'CavityFinish',
                'TempCtrlZone',
                'WtrFlowA',
                'WtrFlowB',
                'Qmc',
                'HyCores',
                'MoldCost',
                'EjectorRtn',
                'Remarks',
                'PictureFile',
                'CavSets',
                'CavSqInch',
                'RevisedDate',
                'RevisedBy',
                'CreatedDate',
                'CreatedBy',
                'LifeTime',
                'JobQty',
                'FinQty',
                'BalQty',
                'RepQty'
            ].forEach(function (x) { return Fields[x] = x; });
        })(MoldRow = MasterData.MoldRow || (MasterData.MoldRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MoldService;
        (function (MoldService) {
            MoldService.baseUrl = 'MasterData/Mold';
            var Methods;
            (function (Methods) {
            })(Methods = MoldService.Methods || (MoldService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                MoldService[x] = function (r, s, o) {
                    return Q.serviceRequest(MoldService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = MoldService.baseUrl + '/' + x;
            });
        })(MoldService = MasterData.MoldService || (MasterData.MoldService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var OperationForm = /** @class */ (function (_super) {
            __extends(OperationForm, _super);
            function OperationForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            OperationForm.formKey = 'MasterData.Operation';
            return OperationForm;
        }(Serenity.PrefixedContext));
        MasterData.OperationForm = OperationForm;
        [['OpCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['TicketIssued', function () { return Serenity.BooleanEditor; }],
            ['ReportRequired', function () { return Serenity.BooleanEditor; }],
            ['OperType', function () { return Serenity.StringEditor; }],
            ['ProdnMode', function () { return Serenity.StringEditor; }],
            ['WorkCentre', function () { return Serenity.StringEditor; }],
            ['FixedWctr', function () { return Serenity.StringEditor; }],
            ['MinLotSize', function () { return Serenity.DecimalEditor; }],
            ['StdLotSize', function () { return Serenity.DecimalEditor; }],
            ['DirectLabor', function () { return Serenity.DecimalEditor; }],
            ['SubconVendor', function () { return Serenity.StringEditor; }],
            ['PieceRate', function () { return Serenity.DecimalEditor; }],
            ['Specifications', function () { return Serenity.TextAreaEditor; }],
            ['ManLoadHr', function () { return Serenity.DecimalEditor; }],
            ['ManProcessHr', function () { return Serenity.DecimalEditor; }],
            ['ManUnloadHr', function () { return Serenity.DecimalEditor; }],
            ['MachLoadHr', function () { return Serenity.DecimalEditor; }],
            ['MachProcessHr', function () { return Serenity.DecimalEditor; }],
            ['MachUnloadHr', function () { return Serenity.DecimalEditor; }],
            ['AcctMachine', function () { return Serenity.StringEditor; }],
            ['AcctEnergy', function () { return Serenity.StringEditor; }],
            ['AcctWater', function () { return Serenity.StringEditor; }],
            ['AcctRental', function () { return Serenity.StringEditor; }],
            ['AcctLabor', function () { return Serenity.StringEditor; }],
            ['AcctInlab', function () { return Serenity.StringEditor; }],
            ['AcctInmat', function () { return Serenity.StringEditor; }],
            ['AcctMisc', function () { return Serenity.StringEditor; }],
            ['MachineCost', function () { return Serenity.DecimalEditor; }],
            ['EnergyCost', function () { return Serenity.DecimalEditor; }],
            ['WaterCost', function () { return Serenity.DecimalEditor; }],
            ['RentalCost', function () { return Serenity.DecimalEditor; }],
            ['LaborCost', function () { return Serenity.DecimalEditor; }],
            ['InlabCost', function () { return Serenity.DecimalEditor; }],
            ['InmatCost', function () { return Serenity.DecimalEditor; }],
            ['MiscCost', function () { return Serenity.DecimalEditor; }],
            ['SubconCost', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(OperationForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var OperationRow;
        (function (OperationRow) {
            OperationRow.idProperty = 'Recnum';
            OperationRow.nameProperty = 'OpCode';
            OperationRow.localTextPrefix = 'MasterData.Operation';
            var Fields;
            (function (Fields) {
            })(Fields = OperationRow.Fields || (OperationRow.Fields = {}));
            [
                'Recnum',
                'OpCode',
                'Description',
                'Suspended',
                'TicketIssued',
                'ReportRequired',
                'OperType',
                'ProdnMode',
                'WorkCentre',
                'FixedWctr',
                'MinLotSize',
                'StdLotSize',
                'DirectLabor',
                'MachLoadHr',
                'ManLoadHr',
                'MachProcessHr',
                'ManProcessHr',
                'MachUnloadHr',
                'ManUnloadHr',
                'MachineCost',
                'EnergyCost',
                'WaterCost',
                'RentalCost',
                'LaborCost',
                'InlabCost',
                'InmatCost',
                'MiscCost',
                'SubconCost',
                'SubconVendor',
                'PieceRate',
                'AcctMachine',
                'AcctEnergy',
                'AcctWater',
                'AcctRental',
                'AcctLabor',
                'AcctInlab',
                'AcctInmat',
                'AcctMisc',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'BrevisedDate',
                'BrevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Specifications'
            ].forEach(function (x) { return Fields[x] = x; });
        })(OperationRow = MasterData.OperationRow || (MasterData.OperationRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var OperationService;
        (function (OperationService) {
            OperationService.baseUrl = 'MasterData/Operation';
            var Methods;
            (function (Methods) {
            })(Methods = OperationService.Methods || (OperationService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                OperationService[x] = function (r, s, o) {
                    return Q.serviceRequest(OperationService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = OperationService.baseUrl + '/' + x;
            });
        })(OperationService = MasterData.OperationService || (MasterData.OperationService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PanelForm = /** @class */ (function (_super) {
            __extends(PanelForm, _super);
            function PanelForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PanelForm.formKey = 'MasterData.Panel';
            return PanelForm;
        }(Serenity.PrefixedContext));
        MasterData.PanelForm = PanelForm;
        [['PanelCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Length', function () { return Serenity.DecimalEditor; }],
            ['Width', function () { return Serenity.DecimalEditor; }],
            ['DimUom', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['ItemGroup', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PanelForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PanelRow;
        (function (PanelRow) {
            PanelRow.idProperty = 'Recnum';
            PanelRow.nameProperty = 'PanelCode';
            PanelRow.localTextPrefix = 'MasterData.Panel';
            var Fields;
            (function (Fields) {
            })(Fields = PanelRow.Fields || (PanelRow.Fields = {}));
            [
                'Recnum',
                'PanelCode',
                'Description',
                'Length',
                'Width',
                'DimUom',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'ItemGroup'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PanelRow = MasterData.PanelRow || (MasterData.PanelRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PanelService;
        (function (PanelService) {
            PanelService.baseUrl = 'MasterData/Panel';
            var Methods;
            (function (Methods) {
            })(Methods = PanelService.Methods || (PanelService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PanelService[x] = function (r, s, o) {
                    return Q.serviceRequest(PanelService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PanelService.baseUrl + '/' + x;
            });
        })(PanelService = MasterData.PanelService || (MasterData.PanelService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PayTermForm = /** @class */ (function (_super) {
            __extends(PayTermForm, _super);
            function PayTermForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PayTermForm.formKey = 'MasterData.PayTerm';
            return PayTermForm;
        }(Serenity.PrefixedContext));
        MasterData.PayTermForm = PayTermForm;
        [['PayTerms', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['BaseDate', function () { return Serenity.StringEditor; }],
            ['DueDays', function () { return Serenity.DecimalEditor; }],
            ['DiscDays', function () { return Serenity.DecimalEditor; }],
            ['DiscPercent', function () { return Serenity.DecimalEditor; }],
            ['AdjustCrlimit', function () { return Serenity.StringEditor; }],
            ['MinDueDays', function () { return Serenity.DecimalEditor; }],
            ['Phase1PayTerms', function () { return Serenity.StringEditor; }],
            ['Phase1BaseDate', function () { return Serenity.StringEditor; }],
            ['Phase1DueDays', function () { return Serenity.DecimalEditor; }],
            ['Phase1PayPercent', function () { return Serenity.DecimalEditor; }],
            ['Phase2PayTerms', function () { return Serenity.StringEditor; }],
            ['Phase2BaseDate', function () { return Serenity.StringEditor; }],
            ['Phase2DueDays', function () { return Serenity.DecimalEditor; }],
            ['Phase2PayPercent', function () { return Serenity.DecimalEditor; }],
            ['Phase3PayTerms', function () { return Serenity.StringEditor; }],
            ['Phase3BaseDate', function () { return Serenity.StringEditor; }],
            ['Phase3DueDays', function () { return Serenity.DecimalEditor; }],
            ['Phase3PayPercent', function () { return Serenity.DecimalEditor; }],
            ['Phase4PayTerms', function () { return Serenity.StringEditor; }],
            ['Phase4BaseDate', function () { return Serenity.StringEditor; }],
            ['Phase4DueDays', function () { return Serenity.DecimalEditor; }],
            ['Phase4PayPercent', function () { return Serenity.DecimalEditor; }],
            ['Phase5PayTerms', function () { return Serenity.StringEditor; }],
            ['Phase5BaseDate', function () { return Serenity.StringEditor; }],
            ['Phase5DueDays', function () { return Serenity.DecimalEditor; }],
            ['Phase5PayPercent', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PayTermForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PayTermRow;
        (function (PayTermRow) {
            PayTermRow.idProperty = 'Recnum';
            PayTermRow.nameProperty = 'PayTerms';
            PayTermRow.localTextPrefix = 'MasterData.PayTerm';
            var Fields;
            (function (Fields) {
            })(Fields = PayTermRow.Fields || (PayTermRow.Fields = {}));
            [
                'Recnum',
                'PayTerms',
                'Description',
                'Suspended',
                'BaseDate',
                'DueDays',
                'DiscDays',
                'DiscPercent',
                'AdjustCrlimit',
                'MinDueDays',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Phase1PayTerms',
                'Phase1BaseDate',
                'Phase1DueDays',
                'Phase1PayPercent',
                'Phase2PayTerms',
                'Phase2BaseDate',
                'Phase2DueDays',
                'Phase2PayPercent',
                'Phase3PayTerms',
                'Phase3BaseDate',
                'Phase3DueDays',
                'Phase3PayPercent',
                'Phase4PayTerms',
                'Phase4BaseDate',
                'Phase4DueDays',
                'Phase4PayPercent',
                'Phase5PayTerms',
                'Phase5BaseDate',
                'Phase5DueDays',
                'Phase5PayPercent'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PayTermRow = MasterData.PayTermRow || (MasterData.PayTermRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PayTermService;
        (function (PayTermService) {
            PayTermService.baseUrl = 'MasterData/PayTerm';
            var Methods;
            (function (Methods) {
            })(Methods = PayTermService.Methods || (PayTermService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PayTermService[x] = function (r, s, o) {
                    return Q.serviceRequest(PayTermService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PayTermService.baseUrl + '/' + x;
            });
        })(PayTermService = MasterData.PayTermService || (MasterData.PayTermService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PlannerForm = /** @class */ (function (_super) {
            __extends(PlannerForm, _super);
            function PlannerForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PlannerForm.formKey = 'MasterData.Planner';
            return PlannerForm;
        }(Serenity.PrefixedContext));
        MasterData.PlannerForm = PlannerForm;
        [['Planner', function () { return Serenity.StringEditor; }],
            ['Name', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Userid', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PlannerForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PlannerRow;
        (function (PlannerRow) {
            PlannerRow.idProperty = 'Planner';
            PlannerRow.nameProperty = 'Name';
            PlannerRow.localTextPrefix = 'MasterData.Planner';
            var Fields;
            (function (Fields) {
            })(Fields = PlannerRow.Fields || (PlannerRow.Fields = {}));
            [
                'Recnum',
                'Planner',
                'Name',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Userid'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PlannerRow = MasterData.PlannerRow || (MasterData.PlannerRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PlannerService;
        (function (PlannerService) {
            PlannerService.baseUrl = 'MasterData/Planner';
            var Methods;
            (function (Methods) {
            })(Methods = PlannerService.Methods || (PlannerService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PlannerService[x] = function (r, s, o) {
                    return Q.serviceRequest(PlannerService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PlannerService.baseUrl + '/' + x;
            });
        })(PlannerService = MasterData.PlannerService || (MasterData.PlannerService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PortCodeForm = /** @class */ (function (_super) {
            __extends(PortCodeForm, _super);
            function PortCodeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PortCodeForm.formKey = 'MasterData.PortCode';
            return PortCodeForm;
        }(Serenity.PrefixedContext));
        MasterData.PortCodeForm = PortCodeForm;
        [['PortCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PortCodeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PortCodeRow;
        (function (PortCodeRow) {
            PortCodeRow.idProperty = 'Recnum';
            PortCodeRow.nameProperty = 'PortCode';
            PortCodeRow.localTextPrefix = 'MasterData.PortCode';
            var Fields;
            (function (Fields) {
            })(Fields = PortCodeRow.Fields || (PortCodeRow.Fields = {}));
            [
                'Recnum',
                'PortCode',
                'Description',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PortCodeRow = MasterData.PortCodeRow || (MasterData.PortCodeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PortCodeService;
        (function (PortCodeService) {
            PortCodeService.baseUrl = 'MasterData/PortCode';
            var Methods;
            (function (Methods) {
            })(Methods = PortCodeService.Methods || (PortCodeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PortCodeService[x] = function (r, s, o) {
                    return Q.serviceRequest(PortCodeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PortCodeService.baseUrl + '/' + x;
            });
        })(PortCodeService = MasterData.PortCodeService || (MasterData.PortCodeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ProfitAndLossLayoutForm = /** @class */ (function (_super) {
            __extends(ProfitAndLossLayoutForm, _super);
            function ProfitAndLossLayoutForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ProfitAndLossLayoutForm.formKey = 'MasterData.ProfitAndLossLayout';
            return ProfitAndLossLayoutForm;
        }(Serenity.PrefixedContext));
        MasterData.ProfitAndLossLayoutForm = ProfitAndLossLayoutForm;
        [['LineNo', function () { return Serenity.DecimalEditor; }],
            ['LineType', function () { return Serenity.StringEditor; }],
            ['LineSkip', function () { return Serenity.DecimalEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['AcctFrom', function () { return Serenity.StringEditor; }],
            ['AcctTo', function () { return Serenity.StringEditor; }],
            ['AcctOperator', function () { return Serenity.StringEditor; }],
            ['TotalLevel', function () { return Serenity.DecimalEditor; }],
            ['NormalSign', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ProfitAndLossLayoutForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ProfitAndLossLayoutRow;
        (function (ProfitAndLossLayoutRow) {
            ProfitAndLossLayoutRow.idProperty = 'Recnum';
            ProfitAndLossLayoutRow.nameProperty = 'LineType';
            ProfitAndLossLayoutRow.localTextPrefix = 'MasterData.ProfitAndLossLayout';
            var Fields;
            (function (Fields) {
            })(Fields = ProfitAndLossLayoutRow.Fields || (ProfitAndLossLayoutRow.Fields = {}));
            [
                'Recnum',
                'LineNo',
                'LineType',
                'LineSkip',
                'Description',
                'AcctFrom',
                'AcctTo',
                'AcctOperator',
                'TotalLevel',
                'NormalSign',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Report',
                'CellLineNo',
                'CellValuePeriod',
                'CellValueFiscalYear'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ProfitAndLossLayoutRow = MasterData.ProfitAndLossLayoutRow || (MasterData.ProfitAndLossLayoutRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ProfitAndLossLayoutService;
        (function (ProfitAndLossLayoutService) {
            ProfitAndLossLayoutService.baseUrl = 'MasterData/ProfitAndLossLayout';
            var Methods;
            (function (Methods) {
            })(Methods = ProfitAndLossLayoutService.Methods || (ProfitAndLossLayoutService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ProfitAndLossLayoutService[x] = function (r, s, o) {
                    return Q.serviceRequest(ProfitAndLossLayoutService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ProfitAndLossLayoutService.baseUrl + '/' + x;
            });
        })(ProfitAndLossLayoutService = MasterData.ProfitAndLossLayoutService || (MasterData.ProfitAndLossLayoutService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ReasonCodeForm = /** @class */ (function (_super) {
            __extends(ReasonCodeForm, _super);
            function ReasonCodeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ReasonCodeForm.formKey = 'MasterData.ReasonCode';
            return ReasonCodeForm;
        }(Serenity.PrefixedContext));
        MasterData.ReasonCodeForm = ReasonCodeForm;
        [['ReasonCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Remarks', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ReasonCodeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ReasonCodeRow;
        (function (ReasonCodeRow) {
            ReasonCodeRow.idProperty = 'Recnum';
            ReasonCodeRow.nameProperty = 'ReasonCode';
            ReasonCodeRow.localTextPrefix = 'MasterData.ReasonCode';
            var Fields;
            (function (Fields) {
            })(Fields = ReasonCodeRow.Fields || (ReasonCodeRow.Fields = {}));
            [
                'Recnum',
                'ReasonCode',
                'Description',
                'Suspended',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'Remarks'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ReasonCodeRow = MasterData.ReasonCodeRow || (MasterData.ReasonCodeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ReasonCodeService;
        (function (ReasonCodeService) {
            ReasonCodeService.baseUrl = 'MasterData/ReasonCode';
            var Methods;
            (function (Methods) {
            })(Methods = ReasonCodeService.Methods || (ReasonCodeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ReasonCodeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ReasonCodeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ReasonCodeService.baseUrl + '/' + x;
            });
        })(ReasonCodeService = MasterData.ReasonCodeService || (MasterData.ReasonCodeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SalesmanForm = /** @class */ (function (_super) {
            __extends(SalesmanForm, _super);
            function SalesmanForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SalesmanForm.formKey = 'MasterData.Salesman';
            return SalesmanForm;
        }(Serenity.PrefixedContext));
        MasterData.SalesmanForm = SalesmanForm;
        [['Salesman', function () { return Serenity.StringEditor; }],
            ['SalesmanName', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Rank', function () { return Serenity.DecimalEditor; }],
            ['EmpNo', function () { return Serenity.StringEditor; }],
            ['Supervisor', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(SalesmanForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SalesmanRow;
        (function (SalesmanRow) {
            SalesmanRow.idProperty = 'Recnum';
            SalesmanRow.nameProperty = 'Salesman';
            SalesmanRow.localTextPrefix = 'MasterData.Salesman';
            var Fields;
            (function (Fields) {
            })(Fields = SalesmanRow.Fields || (SalesmanRow.Fields = {}));
            [
                'Recnum',
                'Salesman',
                'SalesmanName',
                'Suspended',
                'Rank',
                'EmpNo',
                'Supervisor',
                'WithBacklog',
                'OnOrderCount',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(SalesmanRow = MasterData.SalesmanRow || (MasterData.SalesmanRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SalesmanService;
        (function (SalesmanService) {
            SalesmanService.baseUrl = 'MasterData/Salesman';
            var Methods;
            (function (Methods) {
            })(Methods = SalesmanService.Methods || (SalesmanService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SalesmanService[x] = function (r, s, o) {
                    return Q.serviceRequest(SalesmanService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = SalesmanService.baseUrl + '/' + x;
            });
        })(SalesmanService = MasterData.SalesmanService || (MasterData.SalesmanService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ShipViaCodeForm = /** @class */ (function (_super) {
            __extends(ShipViaCodeForm, _super);
            function ShipViaCodeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ShipViaCodeForm.formKey = 'MasterData.ShipViaCode';
            return ShipViaCodeForm;
        }(Serenity.PrefixedContext));
        MasterData.ShipViaCodeForm = ShipViaCodeForm;
        [['ShipViaCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ShipViaCodeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ShipViaCodeRow;
        (function (ShipViaCodeRow) {
            ShipViaCodeRow.idProperty = 'Recnum';
            ShipViaCodeRow.nameProperty = 'ShipViaCode';
            ShipViaCodeRow.localTextPrefix = 'MasterData.ShipViaCode';
            var Fields;
            (function (Fields) {
            })(Fields = ShipViaCodeRow.Fields || (ShipViaCodeRow.Fields = {}));
            [
                'Recnum',
                'ShipViaCode',
                'Description',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ShipViaCodeRow = MasterData.ShipViaCodeRow || (MasterData.ShipViaCodeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ShipViaCodeService;
        (function (ShipViaCodeService) {
            ShipViaCodeService.baseUrl = 'MasterData/ShipViaCode';
            var Methods;
            (function (Methods) {
            })(Methods = ShipViaCodeService.Methods || (ShipViaCodeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ShipViaCodeService[x] = function (r, s, o) {
                    return Q.serviceRequest(ShipViaCodeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ShipViaCodeService.baseUrl + '/' + x;
            });
        })(ShipViaCodeService = MasterData.ShipViaCodeService || (MasterData.ShipViaCodeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SizeForm = /** @class */ (function (_super) {
            __extends(SizeForm, _super);
            function SizeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SizeForm.formKey = 'MasterData.Size';
            return SizeForm;
        }(Serenity.PrefixedContext));
        MasterData.SizeForm = SizeForm;
        [['Size', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }]
        ].forEach(function (x) { return Object.defineProperty(SizeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SizeRow;
        (function (SizeRow) {
            SizeRow.idProperty = 'Recnum';
            SizeRow.nameProperty = 'Size';
            SizeRow.localTextPrefix = 'MasterData.Size';
            var Fields;
            (function (Fields) {
            })(Fields = SizeRow.Fields || (SizeRow.Fields = {}));
            [
                'Recnum',
                'Size',
                'Suspended',
                'Description',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(SizeRow = MasterData.SizeRow || (MasterData.SizeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SizeService;
        (function (SizeService) {
            SizeService.baseUrl = 'MasterData/Size';
            var Methods;
            (function (Methods) {
            })(Methods = SizeService.Methods || (SizeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SizeService[x] = function (r, s, o) {
                    return Q.serviceRequest(SizeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = SizeService.baseUrl + '/' + x;
            });
        })(SizeService = MasterData.SizeService || (MasterData.SizeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var StyleForm = /** @class */ (function (_super) {
            __extends(StyleForm, _super);
            function StyleForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            StyleForm.formKey = 'MasterData.Style';
            return StyleForm;
        }(Serenity.PrefixedContext));
        MasterData.StyleForm = StyleForm;
        [['StyleCode', function () { return Serenity.StringEditor; }],
            ['CollectionCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['DieCutter', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(StyleForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var StyleRow;
        (function (StyleRow) {
            StyleRow.idProperty = 'Recnum';
            StyleRow.nameProperty = 'CollectionCode';
            StyleRow.localTextPrefix = 'MasterData.Style';
            var Fields;
            (function (Fields) {
            })(Fields = StyleRow.Fields || (StyleRow.Fields = {}));
            [
                'Recnum',
                'CollectionCode',
                'StyleCode',
                'Description',
                'ChineseDescription',
                'DieCutter',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(StyleRow = MasterData.StyleRow || (MasterData.StyleRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var StyleService;
        (function (StyleService) {
            StyleService.baseUrl = 'MasterData/Style';
            var Methods;
            (function (Methods) {
            })(Methods = StyleService.Methods || (StyleService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                StyleService[x] = function (r, s, o) {
                    return Q.serviceRequest(StyleService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = StyleService.baseUrl + '/' + x;
            });
        })(StyleService = MasterData.StyleService || (MasterData.StyleService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabDetailForm = /** @class */ (function (_super) {
            __extends(TabDetailForm, _super);
            function TabDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TabDetailForm.formKey = 'MasterData.TabDetail';
            return TabDetailForm;
        }(Serenity.PrefixedContext));
        MasterData.TabDetailForm = TabDetailForm;
        [['ItemGroup', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(TabDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabDetailRow;
        (function (TabDetailRow) {
            TabDetailRow.idProperty = 'Tabid';
            TabDetailRow.nameProperty = 'ItemGroup';
            TabDetailRow.localTextPrefix = 'MasterData.TabDetail';
            var Fields;
            (function (Fields) {
            })(Fields = TabDetailRow.Fields || (TabDetailRow.Fields = {}));
            [
                'Tabid',
                'ItemGroup',
                'Description',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'TabidCaption',
                'TabidCreatedDate',
                'TabidCreatedBy',
                'TabidRevisedDate',
                'TabidRevisedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(TabDetailRow = MasterData.TabDetailRow || (MasterData.TabDetailRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabDetailService;
        (function (TabDetailService) {
            TabDetailService.baseUrl = 'MasterData/TabDetail';
            var Methods;
            (function (Methods) {
            })(Methods = TabDetailService.Methods || (TabDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TabDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(TabDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = TabDetailService.baseUrl + '/' + x;
            });
        })(TabDetailService = MasterData.TabDetailService || (MasterData.TabDetailService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabForm = /** @class */ (function (_super) {
            __extends(TabForm, _super);
            function TabForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TabForm.formKey = 'MasterData.Tab';
            return TabForm;
        }(Serenity.PrefixedContext));
        MasterData.TabForm = TabForm;
        [['Caption', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(TabForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabRow;
        (function (TabRow) {
            TabRow.idProperty = 'Tabid';
            TabRow.nameProperty = 'Caption';
            TabRow.localTextPrefix = 'MasterData.Tab';
            var Fields;
            (function (Fields) {
            })(Fields = TabRow.Fields || (TabRow.Fields = {}));
            [
                'Tabid',
                'Caption',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy'
            ].forEach(function (x) { return Fields[x] = x; });
        })(TabRow = MasterData.TabRow || (MasterData.TabRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabService;
        (function (TabService) {
            TabService.baseUrl = 'MasterData/Tab';
            var Methods;
            (function (Methods) {
            })(Methods = TabService.Methods || (TabService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TabService[x] = function (r, s, o) {
                    return Q.serviceRequest(TabService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = TabService.baseUrl + '/' + x;
            });
        })(TabService = MasterData.TabService || (MasterData.TabService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TextTypeForm = /** @class */ (function (_super) {
            __extends(TextTypeForm, _super);
            function TextTypeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TextTypeForm.formKey = 'MasterData.TextType';
            return TextTypeForm;
        }(Serenity.PrefixedContext));
        MasterData.TextTypeForm = TextTypeForm;
        [['TextType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['DefaultText', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(TextTypeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TextTypeRow;
        (function (TextTypeRow) {
            TextTypeRow.idProperty = 'Recnum';
            TextTypeRow.nameProperty = 'TextType';
            TextTypeRow.localTextPrefix = 'MasterData.TextType';
            var Fields;
            (function (Fields) {
            })(Fields = TextTypeRow.Fields || (TextTypeRow.Fields = {}));
            [
                'Recnum',
                'TextType',
                'Description',
                'Suspended',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'DefaultText'
            ].forEach(function (x) { return Fields[x] = x; });
        })(TextTypeRow = MasterData.TextTypeRow || (MasterData.TextTypeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TextTypeService;
        (function (TextTypeService) {
            TextTypeService.baseUrl = 'MasterData/TextType';
            var Methods;
            (function (Methods) {
            })(Methods = TextTypeService.Methods || (TextTypeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                TextTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(TextTypeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = TextTypeService.baseUrl + '/' + x;
            });
        })(TextTypeService = MasterData.TextTypeService || (MasterData.TextTypeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var UnitForm = /** @class */ (function (_super) {
            __extends(UnitForm, _super);
            function UnitForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            UnitForm.formKey = 'MasterData.Unit';
            return UnitForm;
        }(Serenity.PrefixedContext));
        MasterData.UnitForm = UnitForm;
        [['Uom', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['DiscreteQty', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(UnitForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var UnitRow;
        (function (UnitRow) {
            UnitRow.idProperty = 'Recnum';
            UnitRow.nameProperty = 'Uom';
            UnitRow.localTextPrefix = 'MasterData.Unit';
            var Fields;
            (function (Fields) {
            })(Fields = UnitRow.Fields || (UnitRow.Fields = {}));
            [
                'Recnum',
                'Uom',
                'Description',
                'Suspended',
                'DiscreteQty',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch'
            ].forEach(function (x) { return Fields[x] = x; });
        })(UnitRow = MasterData.UnitRow || (MasterData.UnitRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var UnitService;
        (function (UnitService) {
            UnitService.baseUrl = 'MasterData/Unit';
            var Methods;
            (function (Methods) {
            })(Methods = UnitService.Methods || (UnitService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                UnitService[x] = function (r, s, o) {
                    return Q.serviceRequest(UnitService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = UnitService.baseUrl + '/' + x;
            });
        })(UnitService = MasterData.UnitService || (MasterData.UnitService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var VoucherTypeForm = /** @class */ (function (_super) {
            __extends(VoucherTypeForm, _super);
            function VoucherTypeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VoucherTypeForm.formKey = 'MasterData.VoucherType';
            return VoucherTypeForm;
        }(Serenity.PrefixedContext));
        MasterData.VoucherTypeForm = VoucherTypeForm;
        [['VoucherType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['DirectEntry', function () { return Serenity.StringEditor; }],
            ['AllowEdit', function () { return Serenity.StringEditor; }],
            ['MultiCurrency', function () { return Serenity.StringEditor; }],
            ['BatchedPosting', function () { return Serenity.StringEditor; }],
            ['CostCtrOpt', function () { return Serenity.StringEditor; }],
            ['DeptOpt', function () { return Serenity.StringEditor; }],
            ['Anlys1Opt', function () { return Serenity.StringEditor; }],
            ['Anlys2Opt', function () { return Serenity.StringEditor; }],
            ['Anlys3DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys4DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys5DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys6DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys3CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys4CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys5CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys6CrOpt', function () { return Serenity.StringEditor; }],
            ['SeriesCode', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['BatchCount', function () { return Serenity.DecimalEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['Anlys7Opt', function () { return Serenity.StringEditor; }],
            ['Anlys8Opt', function () { return Serenity.StringEditor; }],
            ['Anlys9Opt', function () { return Serenity.StringEditor; }],
            ['Anlys10Opt', function () { return Serenity.StringEditor; }],
            ['Anlys11Opt', function () { return Serenity.StringEditor; }],
            ['Anlys12Opt', function () { return Serenity.StringEditor; }],
            ['Anlys13Opt', function () { return Serenity.StringEditor; }],
            ['Anlys14Opt', function () { return Serenity.StringEditor; }],
            ['Anlys15DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys16DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys17DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys18DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys19DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys20DrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys15CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys16CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys17CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys18CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys19CrOpt', function () { return Serenity.StringEditor; }],
            ['Anlys20CrOpt', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VoucherTypeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var VoucherTypeRow;
        (function (VoucherTypeRow) {
            VoucherTypeRow.idProperty = 'Recnum';
            VoucherTypeRow.nameProperty = 'VoucherType';
            VoucherTypeRow.localTextPrefix = 'MasterData.VoucherType';
            var Fields;
            (function (Fields) {
            })(Fields = VoucherTypeRow.Fields || (VoucherTypeRow.Fields = {}));
            [
                'Recnum',
                'VoucherType',
                'Description',
                'Suspended',
                'DirectEntry',
                'AllowEdit',
                'MultiCurrency',
                'BatchedPosting',
                'CostCtrOpt',
                'DeptOpt',
                'Anlys1Opt',
                'Anlys2Opt',
                'Anlys3DrOpt',
                'Anlys4DrOpt',
                'Anlys5DrOpt',
                'Anlys6DrOpt',
                'Anlys3CrOpt',
                'Anlys4CrOpt',
                'Anlys5CrOpt',
                'Anlys6CrOpt',
                'SeriesCode',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'BatchCount',
                'OwnerBranch',
                'SourceBranch',
                'Remarks',
                'Anlys7Opt',
                'Anlys8Opt',
                'Anlys9Opt',
                'Anlys10Opt',
                'Anlys11Opt',
                'Anlys12Opt',
                'Anlys13Opt',
                'Anlys14Opt',
                'Anlys15DrOpt',
                'Anlys16DrOpt',
                'Anlys17DrOpt',
                'Anlys18DrOpt',
                'Anlys19DrOpt',
                'Anlys20DrOpt',
                'Anlys15CrOpt',
                'Anlys16CrOpt',
                'Anlys17CrOpt',
                'Anlys18CrOpt',
                'Anlys19CrOpt',
                'Anlys20CrOpt'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VoucherTypeRow = MasterData.VoucherTypeRow || (MasterData.VoucherTypeRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var VoucherTypeService;
        (function (VoucherTypeService) {
            VoucherTypeService.baseUrl = 'MasterData/VoucherType';
            var Methods;
            (function (Methods) {
            })(Methods = VoucherTypeService.Methods || (VoucherTypeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VoucherTypeService[x] = function (r, s, o) {
                    return Q.serviceRequest(VoucherTypeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VoucherTypeService.baseUrl + '/' + x;
            });
        })(VoucherTypeService = MasterData.VoucherTypeService || (MasterData.VoucherTypeService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkCentreForm = /** @class */ (function (_super) {
            __extends(WorkCentreForm, _super);
            function WorkCentreForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            WorkCentreForm.formKey = 'MasterData.WorkCentre';
            return WorkCentreForm;
        }(Serenity.PrefixedContext));
        MasterData.WorkCentreForm = WorkCentreForm;
        [['WorkCentre', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Critical', function () { return Serenity.BooleanEditor; }],
            ['NoOfPersons', function () { return Serenity.DecimalEditor; }],
            ['NoOfShifts', function () { return Serenity.DecimalEditor; }],
            ['FirstSetupHr', function () { return Serenity.DecimalEditor; }],
            ['FirstCleanHr', function () { return Serenity.DecimalEditor; }],
            ['OtherSetupHr', function () { return Serenity.DecimalEditor; }],
            ['OtherCleanHr', function () { return Serenity.DecimalEditor; }],
            ['QueueHr', function () { return Serenity.DecimalEditor; }],
            ['OperHrsBasis', function () { return Serenity.StringEditor; }],
            ['NoOfMachines', function () { return Serenity.DecimalEditor; }],
            ['CapacityUnit', function () { return Serenity.StringEditor; }],
            ['MachineUnit', function () { return Serenity.StringEditor; }],
            ['MachineCost', function () { return Serenity.DecimalEditor; }],
            ['EnergyUnit', function () { return Serenity.StringEditor; }],
            ['EnergyCost', function () { return Serenity.DecimalEditor; }],
            ['WaterUnit', function () { return Serenity.StringEditor; }],
            ['WaterCost', function () { return Serenity.DecimalEditor; }],
            ['RentalUnit', function () { return Serenity.StringEditor; }],
            ['RentalCost', function () { return Serenity.DecimalEditor; }],
            ['LaborUnit', function () { return Serenity.StringEditor; }],
            ['LaborCost', function () { return Serenity.DecimalEditor; }],
            ['InlabUnit', function () { return Serenity.StringEditor; }],
            ['InlabCost', function () { return Serenity.DecimalEditor; }],
            ['InmatUnit', function () { return Serenity.StringEditor; }],
            ['InmatCost', function () { return Serenity.DecimalEditor; }],
            ['MiscUnit', function () { return Serenity.StringEditor; }],
            ['MiscCost', function () { return Serenity.DecimalEditor; }],
            ['Restrict0', function () { return Serenity.StringEditor; }],
            ['Restrict1', function () { return Serenity.StringEditor; }],
            ['Restrict2', function () { return Serenity.StringEditor; }],
            ['Restrict3', function () { return Serenity.StringEditor; }],
            ['Restrict4', function () { return Serenity.StringEditor; }],
            ['Restrict5', function () { return Serenity.StringEditor; }],
            ['Restrict6', function () { return Serenity.StringEditor; }],
            ['Restrict7', function () { return Serenity.StringEditor; }],
            ['Restrict8', function () { return Serenity.StringEditor; }],
            ['Restrict9', function () { return Serenity.StringEditor; }],
            ['Require0', function () { return Serenity.StringEditor; }],
            ['Require1', function () { return Serenity.StringEditor; }],
            ['Require2', function () { return Serenity.StringEditor; }],
            ['Require3', function () { return Serenity.StringEditor; }],
            ['Require4', function () { return Serenity.StringEditor; }],
            ['Require5', function () { return Serenity.StringEditor; }],
            ['Require6', function () { return Serenity.StringEditor; }],
            ['Require7', function () { return Serenity.StringEditor; }],
            ['Require8', function () { return Serenity.StringEditor; }],
            ['Require9', function () { return Serenity.StringEditor; }],
            ['AcctMachine', function () { return Serenity.StringEditor; }],
            ['AcctEnergy', function () { return Serenity.StringEditor; }],
            ['AcctWater', function () { return Serenity.StringEditor; }],
            ['AcctRental', function () { return Serenity.StringEditor; }],
            ['AcctLabor', function () { return Serenity.StringEditor; }],
            ['AcctInlab', function () { return Serenity.StringEditor; }],
            ['AcctInmat', function () { return Serenity.StringEditor; }],
            ['AcctMisc', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(WorkCentreForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkCentreRow;
        (function (WorkCentreRow) {
            WorkCentreRow.idProperty = 'Recnum';
            WorkCentreRow.nameProperty = 'WorkCentre';
            WorkCentreRow.localTextPrefix = 'MasterData.WorkCentre';
            var Fields;
            (function (Fields) {
            })(Fields = WorkCentreRow.Fields || (WorkCentreRow.Fields = {}));
            [
                'Recnum',
                'WorkCentre',
                'Description',
                'Suspended',
                'Critical',
                'BranchNo',
                'NoOfPersons',
                'NoOfShifts',
                'FirstSetupHr',
                'FirstCleanHr',
                'OtherSetupHr',
                'OtherCleanHr',
                'QueueHr',
                'MachineUnit',
                'MachineCost',
                'EnergyUnit',
                'EnergyCost',
                'WaterUnit',
                'WaterCost',
                'RentalUnit',
                'RentalCost',
                'LaborUnit',
                'LaborCost',
                'InlabUnit',
                'InlabCost',
                'InmatUnit',
                'InmatCost',
                'MiscUnit',
                'MiscCost',
                'Restrict0',
                'Restrict1',
                'Restrict2',
                'Restrict3',
                'Restrict4',
                'Restrict5',
                'Restrict6',
                'Restrict7',
                'Restrict8',
                'Restrict9',
                'Require0',
                'Require1',
                'Require2',
                'Require3',
                'Require4',
                'Require5',
                'Require6',
                'Require7',
                'Require8',
                'Require9',
                'AcctMachine',
                'AcctEnergy',
                'AcctWater',
                'AcctRental',
                'AcctLabor',
                'AcctInlab',
                'AcctInmat',
                'AcctMisc',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'BrevisedDate',
                'BrevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'OperHrsBasis',
                'NoOfMachines',
                'CapacityUnit'
            ].forEach(function (x) { return Fields[x] = x; });
        })(WorkCentreRow = MasterData.WorkCentreRow || (MasterData.WorkCentreRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkCentreService;
        (function (WorkCentreService) {
            WorkCentreService.baseUrl = 'MasterData/WorkCentre';
            var Methods;
            (function (Methods) {
            })(Methods = WorkCentreService.Methods || (WorkCentreService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                WorkCentreService[x] = function (r, s, o) {
                    return Q.serviceRequest(WorkCentreService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = WorkCentreService.baseUrl + '/' + x;
            });
        })(WorkCentreService = MasterData.WorkCentreService || (MasterData.WorkCentreService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkflowForm = /** @class */ (function (_super) {
            __extends(WorkflowForm, _super);
            function WorkflowForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            WorkflowForm.formKey = 'MasterData.Workflow';
            return WorkflowForm;
        }(Serenity.PrefixedContext));
        MasterData.WorkflowForm = WorkflowForm;
        [['Workflowname', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Tablename', function () { return Serenity.StringEditor; }],
            ['Workflowtype', function () { return Serenity.IntegerEditor; }],
            ['Suspended', function () { return Serenity.BooleanEditor; }],
            ['Seqno', function () { return Serenity.IntegerEditor; }],
            ['Xoml', function () { return Serenity.TextAreaEditor; }],
            ['Rules', function () { return Serenity.TextAreaEditor; }],
            ['Published', function () { return Serenity.BooleanEditor; }],
            ['Publishedxoml', function () { return Serenity.TextAreaEditor; }],
            ['Publishedrules', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(WorkflowForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkflowRow;
        (function (WorkflowRow) {
            WorkflowRow.idProperty = 'Workflowname';
            WorkflowRow.nameProperty = 'Workflowname';
            WorkflowRow.localTextPrefix = 'MasterData.Workflow';
            var Fields;
            (function (Fields) {
            })(Fields = WorkflowRow.Fields || (WorkflowRow.Fields = {}));
            [
                'Workflowname',
                'Description',
                'Tablename',
                'Workflowtype',
                'Seqno',
                'Xoml',
                'Rules',
                'Suspended',
                'Published',
                'Publishedxoml',
                'Publishedrules',
                'Createdby',
                'Createddate',
                'Revisedby',
                'Reviseddate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(WorkflowRow = MasterData.WorkflowRow || (MasterData.WorkflowRow = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkflowService;
        (function (WorkflowService) {
            WorkflowService.baseUrl = 'MasterData/Workflow';
            var Methods;
            (function (Methods) {
            })(Methods = WorkflowService.Methods || (WorkflowService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                WorkflowService[x] = function (r, s, o) {
                    return Q.serviceRequest(WorkflowService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = WorkflowService.baseUrl + '/' + x;
            });
        })(WorkflowService = MasterData.WorkflowService || (MasterData.WorkflowService = {}));
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var ChangePasswordForm = /** @class */ (function (_super) {
            __extends(ChangePasswordForm, _super);
            function ChangePasswordForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ChangePasswordForm.formKey = 'Membership.ChangePassword';
            return ChangePasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ChangePasswordForm = ChangePasswordForm;
        [['OldPassword', function () { return Serenity.PasswordEditor; }],
            ['NewPassword', function () { return Serenity.PasswordEditor; }],
            ['ConfirmPassword', function () { return Serenity.PasswordEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ChangePasswordForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordForm = /** @class */ (function (_super) {
            __extends(ForgotPasswordForm, _super);
            function ForgotPasswordForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ForgotPasswordForm.formKey = 'Membership.ForgotPassword';
            return ForgotPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ForgotPasswordForm = ForgotPasswordForm;
        [['Email', function () { return Serenity.EmailEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ForgotPasswordForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var LoginForm = /** @class */ (function (_super) {
            __extends(LoginForm, _super);
            function LoginForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            LoginForm.formKey = 'Membership.Login';
            return LoginForm;
        }(Serenity.PrefixedContext));
        Membership.LoginForm = LoginForm;
        [['Username', function () { return Serenity.StringEditor; }],
            ['Password', function () { return Serenity.PasswordEditor; }],
            ['CompanyCode', function () { return Serenity.LookupEditor; }]
        ].forEach(function (x) { return Object.defineProperty(LoginForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var ResetPasswordForm = /** @class */ (function (_super) {
            __extends(ResetPasswordForm, _super);
            function ResetPasswordForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ResetPasswordForm.formKey = 'Membership.ResetPassword';
            return ResetPasswordForm;
        }(Serenity.PrefixedContext));
        Membership.ResetPasswordForm = ResetPasswordForm;
        [['NewPassword', function () { return Serenity.PasswordEditor; }],
            ['ConfirmPassword', function () { return Serenity.PasswordEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ResetPasswordForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var SignUpForm = /** @class */ (function (_super) {
            __extends(SignUpForm, _super);
            function SignUpForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SignUpForm.formKey = 'Membership.SignUp';
            return SignUpForm;
        }(Serenity.PrefixedContext));
        Membership.SignUpForm = SignUpForm;
        [['DisplayName', function () { return Serenity.StringEditor; }],
            ['Email', function () { return Serenity.EmailEditor; }],
            ['ConfirmEmail', function () { return Serenity.EmailEditor; }],
            ['Password', function () { return Serenity.PasswordEditor; }],
            ['ConfirmPassword', function () { return Serenity.PasswordEditor; }]
        ].forEach(function (x) { return Object.defineProperty(SignUpForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Microsoft;
(function (Microsoft) {
    var Enums;
    (function (Enums) {
        var ItemType;
        (function (ItemType) {
            ItemType[ItemType["StandardStockItem"] = 0] = "StandardStockItem";
            ItemType[ItemType["StandardAssortment"] = 1] = "StandardAssortment";
            ItemType[ItemType["ConfiguredAssortment"] = 2] = "ConfiguredAssortment";
            ItemType[ItemType["NonStockItem"] = 3] = "NonStockItem";
        })(ItemType = Enums.ItemType || (Enums.ItemType = {}));
        Serenity.Decorators.registerEnum(ItemType, 'Enums.ItemType');
    })(Enums = Microsoft.Enums || (Microsoft.Enums = {}));
})(Microsoft || (Microsoft = {}));
var Matrix;
(function (Matrix) {
    var Modules;
    (function (Modules) {
        var Development;
        (function (Development) {
            var TableExplorerService;
            (function (TableExplorerService) {
                TableExplorerService.baseUrl = 'Development/TableExplorer';
                var Methods;
                (function (Methods) {
                })(Methods = TableExplorerService.Methods || (TableExplorerService.Methods = {}));
                [
                    'List'
                ].forEach(function (x) {
                    TableExplorerService[x] = function (r, s, o) {
                        return Q.serviceRequest(TableExplorerService.baseUrl + '/' + x, r, s, o);
                    };
                    Methods[x] = TableExplorerService.baseUrl + '/' + x;
                });
            })(TableExplorerService = Development.TableExplorerService || (Development.TableExplorerService = {}));
        })(Development = Modules.Development || (Modules.Development = {}));
    })(Modules = Matrix.Modules || (Matrix.Modules = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomForm = /** @class */ (function (_super) {
            __extends(BomForm, _super);
            function BomForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BomForm.formKey = 'Production.Bom';
            return BomForm;
        }(Serenity.PrefixedContext));
        Production.BomForm = BomForm;
        [['BomNo', function () { return Serenity.StringEditor; }],
            ['Suspended', function () { return Serenity.StringEditor; }],
            ['AssmItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['StdOutput', function () { return Serenity.DecimalEditor; }],
            ['EffectFrom', function () { return Serenity.DateEditor; }],
            ['EffectTo', function () { return Serenity.DateEditor; }],
            ['PartsVerified', function () { return Serenity.StringEditor; }],
            ['ProcVerified', function () { return Serenity.StringEditor; }],
            ['EcnRequired', function () { return Serenity.StringEditor; }],
            ['BranchNo', function () { return Serenity.StringEditor; }],
            ['AssemblyLine', function () { return Serenity.StringEditor; }],
            ['FixedAsmLine', function () { return Serenity.StringEditor; }],
            ['WorkEstBasis', function () { return Serenity.StringEditor; }],
            ['StdLotSize', function () { return Serenity.DecimalEditor; }],
            ['MinLotSize', function () { return Serenity.DecimalEditor; }],
            ['MaxLotSize', function () { return Serenity.DecimalEditor; }],
            ['ScrapRate', function () { return Serenity.DecimalEditor; }],
            ['LastLineNo', function () { return Serenity.DecimalEditor; }],
            ['LastLogNo', function () { return Serenity.DecimalEditor; }],
            ['PartsCount', function () { return Serenity.DecimalEditor; }],
            ['RouteCount', function () { return Serenity.DecimalEditor; }],
            ['ByproCount', function () { return Serenity.DecimalEditor; }],
            ['ByproShare', function () { return Serenity.DecimalEditor; }],
            ['MnproShare', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['LockType', function () { return Serenity.StringEditor; }],
            ['LockRefNo', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['LastEcnNo', function () { return Serenity.StringEditor; }],
            ['MassCngId', function () { return Serenity.StringEditor; }],
            ['AllowChgJob', function () { return Serenity.StringEditor; }],
            ['NetWt', function () { return Serenity.DecimalEditor; }],
            ['NetWtUom', function () { return Serenity.StringEditor; }],
            ['BomRevision', function () { return Serenity.StringEditor; }],
            ['Flag', function () { return Serenity.StringEditor; }],
            ['HoldBy', function () { return Serenity.StringEditor; }],
            ['LastPartsSeqNo', function () { return Serenity.DecimalEditor; }],
            ['IsApproved', function () { return Serenity.StringEditor; }],
            ['ApprovedBy', function () { return Serenity.StringEditor; }],
            ['Preapprove', function () { return Serenity.StringEditor; }],
            ['ApprovedDate', function () { return Serenity.DateEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['IssueRunnerWaste', function () { return Serenity.StringEditor; }],
            ['RunnerWasteWt', function () { return Serenity.DecimalEditor; }],
            ['RunnerWasteUom', function () { return Serenity.StringEditor; }],
            ['UserDefinedField1', function () { return Serenity.StringEditor; }],
            ['UserDefinedField2', function () { return Serenity.StringEditor; }],
            ['UserDefinedField3', function () { return Serenity.StringEditor; }],
            ['UserDefinedField4', function () { return Serenity.StringEditor; }],
            ['UserDefinedField5', function () { return Serenity.StringEditor; }],
            ['UserDefinedField6', function () { return Serenity.StringEditor; }],
            ['UserDefinedField7', function () { return Serenity.StringEditor; }],
            ['UserDefinedField8', function () { return Serenity.StringEditor; }],
            ['UserDefinedField9', function () { return Serenity.StringEditor; }],
            ['UserDefinedField10', function () { return Serenity.StringEditor; }],
            ['UserDefinedField11', function () { return Serenity.StringEditor; }],
            ['UserDefinedField12', function () { return Serenity.StringEditor; }],
            ['UserDefinedField13', function () { return Serenity.StringEditor; }],
            ['UserDefinedField14', function () { return Serenity.StringEditor; }],
            ['UserDefinedField15', function () { return Serenity.StringEditor; }],
            ['UserDefinedField16', function () { return Serenity.StringEditor; }],
            ['UserDefinedField17', function () { return Serenity.StringEditor; }],
            ['UserDefinedField18', function () { return Serenity.StringEditor; }],
            ['UserDefinedField19', function () { return Serenity.StringEditor; }],
            ['UserDefinedField20', function () { return Serenity.StringEditor; }],
            ['AllowRohsMatOnly', function () { return Serenity.BooleanEditor; }],
            ['IssueExtraRunnerWaste', function () { return Serenity.BooleanEditor; }],
            ['Phantom', function () { return Serenity.BooleanEditor; }],
            ['DieCutter', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(BomForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomMaterialForm = /** @class */ (function (_super) {
            __extends(BomMaterialForm, _super);
            function BomMaterialForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BomMaterialForm.formKey = 'Production.BomMaterial';
            return BomMaterialForm;
        }(Serenity.PrefixedContext));
        Production.BomMaterialForm = BomMaterialForm;
        [['BomNo', function () { return Serenity.StringEditor; }],
            ['SeqNo', function () { return Serenity.DecimalEditor; }],
            ['PartItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['QtyPer', function () { return Serenity.DecimalEditor; }],
            ['WithAltern', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['EntrySeqNo', function () { return Serenity.DecimalEditor; }],
            ['AssmItemNo', function () { return Serenity.StringEditor; }],
            ['ScrapRate', function () { return Serenity.DecimalEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['LocCount', function () { return Serenity.DecimalEditor; }],
            ['BlowThruBomNo', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['LastAltSeqNo', function () { return Serenity.DecimalEditor; }],
            ['LastEcnNo', function () { return Serenity.StringEditor; }],
            ['RunnerWaste', function () { return Serenity.StringEditor; }],
            ['RunnerWasteRate', function () { return Serenity.DecimalEditor; }],
            ['UserDefinedField1', function () { return Serenity.StringEditor; }],
            ['UserDefinedField2', function () { return Serenity.StringEditor; }],
            ['UserDefinedField3', function () { return Serenity.StringEditor; }],
            ['UserDefinedField4', function () { return Serenity.StringEditor; }],
            ['UserDefinedField5', function () { return Serenity.StringEditor; }],
            ['UserDefinedField6', function () { return Serenity.StringEditor; }],
            ['UserDefinedField7', function () { return Serenity.StringEditor; }],
            ['UserDefinedField8', function () { return Serenity.StringEditor; }],
            ['UserDefinedField9', function () { return Serenity.StringEditor; }],
            ['UserDefinedField10', function () { return Serenity.StringEditor; }],
            ['UserDefinedField11', function () { return Serenity.StringEditor; }],
            ['UserDefinedField12', function () { return Serenity.StringEditor; }],
            ['UserDefinedField13', function () { return Serenity.StringEditor; }],
            ['UserDefinedField14', function () { return Serenity.StringEditor; }],
            ['UserDefinedField15', function () { return Serenity.StringEditor; }],
            ['UserDefinedField16', function () { return Serenity.StringEditor; }],
            ['UserDefinedField17', function () { return Serenity.StringEditor; }],
            ['UserDefinedField18', function () { return Serenity.StringEditor; }],
            ['UserDefinedField19', function () { return Serenity.StringEditor; }],
            ['UserDefinedField20', function () { return Serenity.StringEditor; }],
            ['RohsCompliance', function () { return Serenity.BooleanEditor; }],
            ['Approved', function () { return Serenity.BooleanEditor; }],
            ['Uom2', function () { return Serenity.StringEditor; }],
            ['QtyPer2', function () { return Serenity.DecimalEditor; }],
            ['WorkCentre', function () { return Serenity.StringEditor; }],
            ['QuotationScrapQty', function () { return Serenity.DecimalEditor; }],
            ['QuotationScrapRate', function () { return Serenity.DecimalEditor; }],
            ['QuotationQty', function () { return Serenity.DecimalEditor; }],
            ['ShowCost', function () { return Serenity.BooleanEditor; }],
            ['QtyBeforeConversion', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(BomMaterialForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomMaterialRow;
        (function (BomMaterialRow) {
            BomMaterialRow.idProperty = 'Recnum';
            BomMaterialRow.nameProperty = 'BomNo';
            BomMaterialRow.localTextPrefix = 'Production.BomMaterial';
            var Fields;
            (function (Fields) {
            })(Fields = BomMaterialRow.Fields || (BomMaterialRow.Fields = {}));
            [
                'Recnum',
                'BomNo',
                'SeqNo',
                'PartItemNo',
                'Description',
                'Uom',
                'QtyPer',
                'WithAltern',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'EntrySeqNo',
                'AssmItemNo',
                'ScrapRate',
                'OwnerBranch',
                'SourceBranch',
                'LocCount',
                'BlowThruBomNo',
                'Remarks',
                'LastAltSeqNo',
                'LastEcnNo',
                'RunnerWaste',
                'RunnerWasteRate',
                'UserDefinedField1',
                'UserDefinedField2',
                'UserDefinedField3',
                'UserDefinedField4',
                'UserDefinedField5',
                'UserDefinedField6',
                'UserDefinedField7',
                'UserDefinedField8',
                'UserDefinedField9',
                'UserDefinedField10',
                'UserDefinedField11',
                'UserDefinedField12',
                'UserDefinedField13',
                'UserDefinedField14',
                'UserDefinedField15',
                'UserDefinedField16',
                'UserDefinedField17',
                'UserDefinedField18',
                'UserDefinedField19',
                'UserDefinedField20',
                'RohsCompliance',
                'Approved',
                'Uom2',
                'QtyPer2',
                'WorkCentre',
                'QuotationScrapQty',
                'QuotationScrapRate',
                'QuotationQty',
                'ShowCost',
                'QtyBeforeConversion',
                'BomNoRecnum',
                'BomNoSuspended',
                'BomNoAssmItemNo',
                'BomNoDescription',
                'BomNoUom',
                'BomNoStdOutput',
                'BomNoEffectFrom',
                'BomNoEffectTo',
                'BomNoPartsVerified',
                'BomNoProcVerified',
                'BomNoEcnRequired',
                'BomNoBranchNo',
                'BomNoAssemblyLine',
                'BomNoFixedAsmLine',
                'BomNoWorkEstBasis',
                'BomNoStdLotSize',
                'BomNoMinLotSize',
                'BomNoMaxLotSize',
                'BomNoScrapRate',
                'BomNoLastLineNo',
                'BomNoLastLogNo',
                'BomNoPartsCount',
                'BomNoRouteCount',
                'BomNoByproCount',
                'BomNoByproShare',
                'BomNoMnproShare',
                'BomNoCreatedDate',
                'BomNoCreatedBy',
                'BomNoRevisedDate',
                'BomNoRevisedBy',
                'BomNoLockType',
                'BomNoLockRefNo',
                'BomNoOwnerBranch',
                'BomNoSourceBranch',
                'BomNoLastEcnNo',
                'BomNoMassCngId',
                'BomNoAllowChgJob',
                'BomNoNetWt',
                'BomNoNetWtUom',
                'BomNoBomRevision',
                'BomNoFlag',
                'BomNoHoldBy',
                'BomNoLastPartsSeqNo',
                'BomNoIsApproved',
                'BomNoApprovedBy',
                'BomNoPreapprove',
                'BomNoApprovedDate',
                'BomNoRemarks',
                'BomNoIssueRunnerWaste',
                'BomNoRunnerWasteWt',
                'BomNoRunnerWasteUom',
                'BomNoUserDefinedField1',
                'BomNoUserDefinedField2',
                'BomNoUserDefinedField3',
                'BomNoUserDefinedField4',
                'BomNoUserDefinedField5',
                'BomNoUserDefinedField6',
                'BomNoUserDefinedField7',
                'BomNoUserDefinedField8',
                'BomNoUserDefinedField9',
                'BomNoUserDefinedField10',
                'BomNoUserDefinedField11',
                'BomNoUserDefinedField12',
                'BomNoUserDefinedField13',
                'BomNoUserDefinedField14',
                'BomNoUserDefinedField15',
                'BomNoUserDefinedField16',
                'BomNoUserDefinedField17',
                'BomNoUserDefinedField18',
                'BomNoUserDefinedField19',
                'BomNoUserDefinedField20',
                'BomNoAllowRohsMatOnly',
                'BomNoIssueExtraRunnerWaste',
                'BomNoPhantom',
                'BomNoDieCutter'
            ].forEach(function (x) { return Fields[x] = x; });
        })(BomMaterialRow = Production.BomMaterialRow || (Production.BomMaterialRow = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomMaterialService;
        (function (BomMaterialService) {
            BomMaterialService.baseUrl = 'Production/BomMaterial';
            var Methods;
            (function (Methods) {
            })(Methods = BomMaterialService.Methods || (BomMaterialService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BomMaterialService[x] = function (r, s, o) {
                    return Q.serviceRequest(BomMaterialService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = BomMaterialService.baseUrl + '/' + x;
            });
        })(BomMaterialService = Production.BomMaterialService || (Production.BomMaterialService = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomRoutingStepForm = /** @class */ (function (_super) {
            __extends(BomRoutingStepForm, _super);
            function BomRoutingStepForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BomRoutingStepForm.formKey = 'Production.BomRoutingStep';
            return BomRoutingStepForm;
        }(Serenity.PrefixedContext));
        Production.BomRoutingStepForm = BomRoutingStepForm;
        [['BomNo', function () { return Serenity.StringEditor; }],
            ['SeqNo', function () { return Serenity.DecimalEditor; }],
            ['OpCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Ticketed', function () { return Serenity.StringEditor; }],
            ['Reported', function () { return Serenity.StringEditor; }],
            ['ProdnMode', function () { return Serenity.StringEditor; }],
            ['WorkCentre', function () { return Serenity.StringEditor; }],
            ['FixedWcentre', function () { return Serenity.StringEditor; }],
            ['NoOfWorkers', function () { return Serenity.DecimalEditor; }],
            ['PieceRate', function () { return Serenity.DecimalEditor; }],
            ['SubconVendor', function () { return Serenity.StringEditor; }],
            ['SubconRate', function () { return Serenity.DecimalEditor; }],
            ['FixedVendor', function () { return Serenity.StringEditor; }],
            ['MachLoadHr', function () { return Serenity.DecimalEditor; }],
            ['ManLoadHr', function () { return Serenity.DecimalEditor; }],
            ['MachProcessHr', function () { return Serenity.DecimalEditor; }],
            ['ManProcessHr', function () { return Serenity.DecimalEditor; }],
            ['MachUnloadHr', function () { return Serenity.DecimalEditor; }],
            ['ManUnloadHr', function () { return Serenity.DecimalEditor; }],
            ['MachineCost', function () { return Serenity.DecimalEditor; }],
            ['EnergyCost', function () { return Serenity.DecimalEditor; }],
            ['WaterCost', function () { return Serenity.DecimalEditor; }],
            ['RentalCost', function () { return Serenity.DecimalEditor; }],
            ['LaborCost', function () { return Serenity.DecimalEditor; }],
            ['InlabCost', function () { return Serenity.DecimalEditor; }],
            ['InmatCost', function () { return Serenity.DecimalEditor; }],
            ['MiscCost', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['Specifications', function () { return Serenity.StringEditor; }],
            ['DependTo', function () { return Serenity.DecimalEditor; }],
            ['Dependency', function () { return Serenity.StringEditor; }],
            ['LagHour', function () { return Serenity.DecimalEditor; }],
            ['MachineNo', function () { return Serenity.StringEditor; }],
            ['MoldNo', function () { return Serenity.StringEditor; }],
            ['UserDefinedField1', function () { return Serenity.StringEditor; }],
            ['UserDefinedField2', function () { return Serenity.StringEditor; }],
            ['UserDefinedField3', function () { return Serenity.StringEditor; }],
            ['UserDefinedField4', function () { return Serenity.StringEditor; }],
            ['UserDefinedField5', function () { return Serenity.StringEditor; }],
            ['UserDefinedField6', function () { return Serenity.StringEditor; }],
            ['UserDefinedField7', function () { return Serenity.StringEditor; }],
            ['UserDefinedField8', function () { return Serenity.StringEditor; }],
            ['UserDefinedField9', function () { return Serenity.StringEditor; }],
            ['UserDefinedField10', function () { return Serenity.StringEditor; }],
            ['UserDefinedField11', function () { return Serenity.StringEditor; }],
            ['UserDefinedField12', function () { return Serenity.StringEditor; }],
            ['UserDefinedField13', function () { return Serenity.StringEditor; }],
            ['UserDefinedField14', function () { return Serenity.StringEditor; }],
            ['UserDefinedField15', function () { return Serenity.StringEditor; }],
            ['UserDefinedField16', function () { return Serenity.StringEditor; }],
            ['UserDefinedField17', function () { return Serenity.StringEditor; }],
            ['UserDefinedField18', function () { return Serenity.StringEditor; }],
            ['UserDefinedField19', function () { return Serenity.StringEditor; }],
            ['UserDefinedField20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(BomRoutingStepForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomRoutingStepRow;
        (function (BomRoutingStepRow) {
            BomRoutingStepRow.idProperty = 'Recnum';
            BomRoutingStepRow.nameProperty = 'BomNo';
            BomRoutingStepRow.localTextPrefix = 'Production.BomRoutingStep';
            var Fields;
            (function (Fields) {
            })(Fields = BomRoutingStepRow.Fields || (BomRoutingStepRow.Fields = {}));
            [
                'Recnum',
                'BomNo',
                'SeqNo',
                'OpCode',
                'Description',
                'Ticketed',
                'Reported',
                'ProdnMode',
                'WorkCentre',
                'FixedWcentre',
                'NoOfWorkers',
                'PieceRate',
                'SubconVendor',
                'SubconRate',
                'FixedVendor',
                'MachLoadHr',
                'ManLoadHr',
                'MachProcessHr',
                'ManProcessHr',
                'MachUnloadHr',
                'ManUnloadHr',
                'MachineCost',
                'EnergyCost',
                'WaterCost',
                'RentalCost',
                'LaborCost',
                'InlabCost',
                'InmatCost',
                'MiscCost',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'OwnerBranch',
                'SourceBranch',
                'Specifications',
                'DependTo',
                'Dependency',
                'LagHour',
                'MachineNo',
                'MoldNo',
                'UserDefinedField1',
                'UserDefinedField2',
                'UserDefinedField3',
                'UserDefinedField4',
                'UserDefinedField5',
                'UserDefinedField6',
                'UserDefinedField7',
                'UserDefinedField8',
                'UserDefinedField9',
                'UserDefinedField10',
                'UserDefinedField11',
                'UserDefinedField12',
                'UserDefinedField13',
                'UserDefinedField14',
                'UserDefinedField15',
                'UserDefinedField16',
                'UserDefinedField17',
                'UserDefinedField18',
                'UserDefinedField19',
                'UserDefinedField20',
                'BomNoRecnum',
                'BomNoSuspended',
                'BomNoAssmItemNo',
                'BomNoDescription',
                'BomNoUom',
                'BomNoStdOutput',
                'BomNoEffectFrom',
                'BomNoEffectTo',
                'BomNoPartsVerified',
                'BomNoProcVerified',
                'BomNoEcnRequired',
                'BomNoBranchNo',
                'BomNoAssemblyLine',
                'BomNoFixedAsmLine',
                'BomNoWorkEstBasis',
                'BomNoStdLotSize',
                'BomNoMinLotSize',
                'BomNoMaxLotSize',
                'BomNoScrapRate',
                'BomNoLastLineNo',
                'BomNoLastLogNo',
                'BomNoPartsCount',
                'BomNoRouteCount',
                'BomNoByproCount',
                'BomNoByproShare',
                'BomNoMnproShare',
                'BomNoCreatedDate',
                'BomNoCreatedBy',
                'BomNoRevisedDate',
                'BomNoRevisedBy',
                'BomNoLockType',
                'BomNoLockRefNo',
                'BomNoOwnerBranch',
                'BomNoSourceBranch',
                'BomNoLastEcnNo',
                'BomNoMassCngId',
                'BomNoAllowChgJob',
                'BomNoNetWt',
                'BomNoNetWtUom',
                'BomNoBomRevision',
                'BomNoFlag',
                'BomNoHoldBy',
                'BomNoLastPartsSeqNo',
                'BomNoIsApproved',
                'BomNoApprovedBy',
                'BomNoPreapprove',
                'BomNoApprovedDate',
                'BomNoRemarks',
                'BomNoIssueRunnerWaste',
                'BomNoRunnerWasteWt',
                'BomNoRunnerWasteUom',
                'BomNoUserDefinedField1',
                'BomNoUserDefinedField2',
                'BomNoUserDefinedField3',
                'BomNoUserDefinedField4',
                'BomNoUserDefinedField5',
                'BomNoUserDefinedField6',
                'BomNoUserDefinedField7',
                'BomNoUserDefinedField8',
                'BomNoUserDefinedField9',
                'BomNoUserDefinedField10',
                'BomNoUserDefinedField11',
                'BomNoUserDefinedField12',
                'BomNoUserDefinedField13',
                'BomNoUserDefinedField14',
                'BomNoUserDefinedField15',
                'BomNoUserDefinedField16',
                'BomNoUserDefinedField17',
                'BomNoUserDefinedField18',
                'BomNoUserDefinedField19',
                'BomNoUserDefinedField20',
                'BomNoAllowRohsMatOnly',
                'BomNoIssueExtraRunnerWaste',
                'BomNoPhantom',
                'BomNoDieCutter'
            ].forEach(function (x) { return Fields[x] = x; });
        })(BomRoutingStepRow = Production.BomRoutingStepRow || (Production.BomRoutingStepRow = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomRoutingStepService;
        (function (BomRoutingStepService) {
            BomRoutingStepService.baseUrl = 'Production/BomRoutingStep';
            var Methods;
            (function (Methods) {
            })(Methods = BomRoutingStepService.Methods || (BomRoutingStepService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BomRoutingStepService[x] = function (r, s, o) {
                    return Q.serviceRequest(BomRoutingStepService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = BomRoutingStepService.baseUrl + '/' + x;
            });
        })(BomRoutingStepService = Production.BomRoutingStepService || (Production.BomRoutingStepService = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomRow;
        (function (BomRow) {
            BomRow.idProperty = 'Recnum';
            BomRow.nameProperty = 'BomNo';
            BomRow.localTextPrefix = 'Production.Bom';
            var Fields;
            (function (Fields) {
            })(Fields = BomRow.Fields || (BomRow.Fields = {}));
            [
                'Recnum',
                'BomNo',
                'Suspended',
                'AssmItemNo',
                'Description',
                'Uom',
                'StdOutput',
                'EffectFrom',
                'EffectTo',
                'PartsVerified',
                'ProcVerified',
                'EcnRequired',
                'BranchNo',
                'AssemblyLine',
                'FixedAsmLine',
                'WorkEstBasis',
                'StdLotSize',
                'MinLotSize',
                'MaxLotSize',
                'ScrapRate',
                'LastLineNo',
                'LastLogNo',
                'PartsCount',
                'RouteCount',
                'ByproCount',
                'ByproShare',
                'MnproShare',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'LockType',
                'LockRefNo',
                'OwnerBranch',
                'SourceBranch',
                'LastEcnNo',
                'MassCngId',
                'AllowChgJob',
                'NetWt',
                'NetWtUom',
                'BomRevision',
                'Flag',
                'HoldBy',
                'LastPartsSeqNo',
                'IsApproved',
                'ApprovedBy',
                'Preapprove',
                'ApprovedDate',
                'Remarks',
                'IssueRunnerWaste',
                'RunnerWasteWt',
                'RunnerWasteUom',
                'UserDefinedField1',
                'UserDefinedField2',
                'UserDefinedField3',
                'UserDefinedField4',
                'UserDefinedField5',
                'UserDefinedField6',
                'UserDefinedField7',
                'UserDefinedField8',
                'UserDefinedField9',
                'UserDefinedField10',
                'UserDefinedField11',
                'UserDefinedField12',
                'UserDefinedField13',
                'UserDefinedField14',
                'UserDefinedField15',
                'UserDefinedField16',
                'UserDefinedField17',
                'UserDefinedField18',
                'UserDefinedField19',
                'UserDefinedField20',
                'AllowRohsMatOnly',
                'IssueExtraRunnerWaste',
                'Phantom',
                'DieCutter'
            ].forEach(function (x) { return Fields[x] = x; });
        })(BomRow = Production.BomRow || (Production.BomRow = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomService;
        (function (BomService) {
            BomService.baseUrl = 'Production/Bom';
            var Methods;
            (function (Methods) {
            })(Methods = BomService.Methods || (BomService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                BomService[x] = function (r, s, o) {
                    return Q.serviceRequest(BomService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = BomService.baseUrl + '/' + x;
            });
        })(BomService = Production.BomService || (Production.BomService = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderForm = /** @class */ (function (_super) {
            __extends(JobOrderForm, _super);
            function JobOrderForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            JobOrderForm.formKey = 'Production.JobOrder';
            return JobOrderForm;
        }(Serenity.PrefixedContext));
        Production.JobOrderForm = JobOrderForm;
        [['JobNo', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['Closed', function () { return Serenity.StringEditor; }],
            ['Issued', function () { return Serenity.StringEditor; }],
            ['Finished', function () { return Serenity.StringEditor; }],
            ['AssemblyType', function () { return Serenity.StringEditor; }],
            ['SourceSubjob', function () { return Serenity.StringEditor; }],
            ['SourceSales', function () { return Serenity.StringEditor; }],
            ['SourceAssort', function () { return Serenity.StringEditor; }],
            ['SourceRefNo', function () { return Serenity.StringEditor; }],
            ['SourceLineNo', function () { return Serenity.DecimalEditor; }],
            ['SourcePartNo', function () { return Serenity.DecimalEditor; }],
            ['IssueDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['StartDate', function () { return Serenity.DateEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['TotalQty', function () { return Serenity.DecimalEditor; }],
            ['SpecNo', function () { return Serenity.StringEditor; }],
            ['BomNo', function () { return Serenity.StringEditor; }],
            ['StdOutput', function () { return Serenity.DecimalEditor; }],
            ['ProdLotSize', function () { return Serenity.DecimalEditor; }],
            ['NoOfLots', function () { return Serenity.DecimalEditor; }],
            ['BatchedLots', function () { return Serenity.DecimalEditor; }],
            ['HrsPerLot', function () { return Serenity.DecimalEditor; }],
            ['HrsPerLotCpd', function () { return Serenity.DecimalEditor; }],
            ['BranchNo', function () { return Serenity.StringEditor; }],
            ['AssemblyLine', function () { return Serenity.StringEditor; }],
            ['JobCategory', function () { return Serenity.StringEditor; }],
            ['JobPriority', function () { return Serenity.DecimalEditor; }],
            ['HeaderVerified', function () { return Serenity.StringEditor; }],
            ['ByprodVerified', function () { return Serenity.StringEditor; }],
            ['BatchVerified', function () { return Serenity.StringEditor; }],
            ['BomVerified', function () { return Serenity.StringEditor; }],
            ['RoutingVerifed', function () { return Serenity.StringEditor; }],
            ['MatschVerified', function () { return Serenity.StringEditor; }],
            ['WrkschVerified', function () { return Serenity.StringEditor; }],
            ['CostVerified', function () { return Serenity.StringEditor; }],
            ['ByprCostShare', function () { return Serenity.DecimalEditor; }],
            ['TicketNeeded', function () { return Serenity.StringEditor; }],
            ['TicketClosed', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['PostedDate', function () { return Serenity.DateEditor; }],
            ['PostedBy', function () { return Serenity.StringEditor; }],
            ['LastLineNo', function () { return Serenity.DecimalEditor; }],
            ['LastByprodNo', function () { return Serenity.DecimalEditor; }],
            ['BatchCount', function () { return Serenity.DecimalEditor; }],
            ['LastLogNo', function () { return Serenity.DecimalEditor; }],
            ['LockType', function () { return Serenity.StringEditor; }],
            ['LockRefNo', function () { return Serenity.StringEditor; }],
            ['FgLoc', function () { return Serenity.StringEditor; }],
            ['RmLoc', function () { return Serenity.StringEditor; }],
            ['CostMaterial', function () { return Serenity.DecimalEditor; }],
            ['CostLabor', function () { return Serenity.DecimalEditor; }],
            ['CostSubcon', function () { return Serenity.DecimalEditor; }],
            ['CostMachine', function () { return Serenity.DecimalEditor; }],
            ['CostEnergy', function () { return Serenity.DecimalEditor; }],
            ['CostWater', function () { return Serenity.DecimalEditor; }],
            ['CostRental', function () { return Serenity.DecimalEditor; }],
            ['CostInlab', function () { return Serenity.DecimalEditor; }],
            ['CostInmat', function () { return Serenity.DecimalEditor; }],
            ['CostMisc', function () { return Serenity.DecimalEditor; }],
            ['CostOverhead', function () { return Serenity.DecimalEditor; }],
            ['CostEstimate', function () { return Serenity.DecimalEditor; }],
            ['CostFinished', function () { return Serenity.DecimalEditor; }],
            ['CostScrapped', function () { return Serenity.DecimalEditor; }],
            ['CostCharged', function () { return Serenity.DecimalEditor; }],
            ['CoacRmConsu', function () { return Serenity.DecimalEditor; }],
            ['CoacRmScrap', function () { return Serenity.DecimalEditor; }],
            ['CoacMaterial', function () { return Serenity.DecimalEditor; }],
            ['CoacLabor', function () { return Serenity.DecimalEditor; }],
            ['CoacSubcon', function () { return Serenity.DecimalEditor; }],
            ['CoacMachine', function () { return Serenity.DecimalEditor; }],
            ['CoacEnergy', function () { return Serenity.DecimalEditor; }],
            ['CoacWater', function () { return Serenity.DecimalEditor; }],
            ['CoacRental', function () { return Serenity.DecimalEditor; }],
            ['CoacInlab', function () { return Serenity.DecimalEditor; }],
            ['CoacInmat', function () { return Serenity.DecimalEditor; }],
            ['CoacMisc', function () { return Serenity.DecimalEditor; }],
            ['CoacOverhead', function () { return Serenity.DecimalEditor; }],
            ['CostActual', function () { return Serenity.DecimalEditor; }],
            ['CostVariance', function () { return Serenity.DecimalEditor; }],
            ['CostWip', function () { return Serenity.DecimalEditor; }],
            ['AcctWip', function () { return Serenity.StringEditor; }],
            ['AcctPvar', function () { return Serenity.StringEditor; }],
            ['AcctProdCost', function () { return Serenity.StringEditor; }],
            ['CanEdit', function () { return Serenity.StringEditor; }],
            ['LastSubNo', function () { return Serenity.DecimalEditor; }],
            ['SubjobVerified', function () { return Serenity.StringEditor; }],
            ['LotsIssued', function () { return Serenity.DecimalEditor; }],
            ['LotsFinished', function () { return Serenity.DecimalEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['FinishedType', function () { return Serenity.StringEditor; }],
            ['FinishedDate', function () { return Serenity.DateEditor; }],
            ['Specifications', function () { return Serenity.StringEditor; }],
            ['QtyNeeded', function () { return Serenity.DecimalEditor; }],
            ['ScrapRate', function () { return Serenity.DecimalEditor; }],
            ['ScrapQty', function () { return Serenity.DecimalEditor; }],
            ['QtyAdjusted', function () { return Serenity.DecimalEditor; }],
            ['NetWt', function () { return Serenity.DecimalEditor; }],
            ['NetWtUom', function () { return Serenity.StringEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['BlowThru', function () { return Serenity.StringEditor; }],
            ['Comments1', function () { return Serenity.StringEditor; }],
            ['Comments2', function () { return Serenity.StringEditor; }],
            ['Comments3', function () { return Serenity.StringEditor; }],
            ['Comments4', function () { return Serenity.StringEditor; }],
            ['LastTextNo', function () { return Serenity.DecimalEditor; }],
            ['BomRevision', function () { return Serenity.StringEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['LastLinkNo', function () { return Serenity.DecimalEditor; }],
            ['Flag', function () { return Serenity.StringEditor; }],
            ['HoldBy', function () { return Serenity.StringEditor; }],
            ['IncludeScrapRate', function () { return Serenity.StringEditor; }],
            ['UseItemMasterScrap', function () { return Serenity.StringEditor; }],
            ['WcBackflush', function () { return Serenity.StringEditor; }],
            ['Reorder', function () { return Serenity.StringEditor; }],
            ['CostRework', function () { return Serenity.DecimalEditor; }],
            ['MoldJob', function () { return Serenity.StringEditor; }],
            ['MoldDesc', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['Anlys13', function () { return Serenity.StringEditor; }],
            ['Anlys14', function () { return Serenity.StringEditor; }],
            ['ProjectNo', function () { return Serenity.StringEditor; }],
            ['SourceMrpNo', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(JobOrderForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderMaterialForm = /** @class */ (function (_super) {
            __extends(JobOrderMaterialForm, _super);
            function JobOrderMaterialForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            JobOrderMaterialForm.formKey = 'Production.JobOrderMaterial';
            return JobOrderMaterialForm;
        }(Serenity.PrefixedContext));
        Production.JobOrderMaterialForm = JobOrderMaterialForm;
        [['JobNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['PartItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['QtyPer', function () { return Serenity.DecimalEditor; }],
            ['QtyRequired', function () { return Serenity.DecimalEditor; }],
            ['QtyReserved', function () { return Serenity.DecimalEditor; }],
            ['QtyWaitlisted', function () { return Serenity.DecimalEditor; }],
            ['QtyPurchase', function () { return Serenity.DecimalEditor; }],
            ['QtyProduce', function () { return Serenity.DecimalEditor; }],
            ['SubJobNo', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['OrderDate', function () { return Serenity.DateEditor; }],
            ['PurchaseUom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['PriceCcy', function () { return Serenity.StringEditor; }],
            ['ExpectedPrice', function () { return Serenity.DecimalEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['SchedDate', function () { return Serenity.DateEditor; }],
            ['InvCost', function () { return Serenity.DecimalEditor; }],
            ['StdCost', function () { return Serenity.DecimalEditor; }],
            ['LatCost', function () { return Serenity.DecimalEditor; }],
            ['UnitCost', function () { return Serenity.DecimalEditor; }],
            ['CostMaterial', function () { return Serenity.DecimalEditor; }],
            ['SubDueDate', function () { return Serenity.DateEditor; }],
            ['SubStartDate', function () { return Serenity.DateEditor; }],
            ['SubBomNo', function () { return Serenity.StringEditor; }],
            ['Specifications', function () { return Serenity.StringEditor; }],
            ['QtyNeeded', function () { return Serenity.DecimalEditor; }],
            ['ScrapRate', function () { return Serenity.DecimalEditor; }],
            ['ScrapQty', function () { return Serenity.DecimalEditor; }],
            ['QtyAdjusted', function () { return Serenity.DecimalEditor; }],
            ['SubQty', function () { return Serenity.DecimalEditor; }],
            ['IsAlternate', function () { return Serenity.StringEditor; }],
            ['MainLineNo', function () { return Serenity.DecimalEditor; }],
            ['UsageRate', function () { return Serenity.DecimalEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['Eod', function () { return Serenity.DateEditor; }],
            ['Edd', function () { return Serenity.DateEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['SubBlowThru', function () { return Serenity.StringEditor; }],
            ['BinQtyOut', function () { return Serenity.DecimalEditor; }],
            ['BuyMake', function () { return Serenity.StringEditor; }],
            ['IncludeScrapRate', function () { return Serenity.StringEditor; }],
            ['PoNo', function () { return Serenity.StringEditor; }],
            ['SubWcBackflush', function () { return Serenity.StringEditor; }],
            ['RunnerWaste', function () { return Serenity.StringEditor; }],
            ['ReuseRate', function () { return Serenity.DecimalEditor; }],
            ['RunnerWasteRate', function () { return Serenity.DecimalEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['SubFormulaCode', function () { return Serenity.StringEditor; }],
            ['IncludeJob', function () { return Serenity.BooleanEditor; }],
            ['QuotationScrapQty', function () { return Serenity.DecimalEditor; }],
            ['QuotationScrapRate', function () { return Serenity.DecimalEditor; }],
            ['CustomerProvided', function () { return Serenity.BooleanEditor; }],
            ['OriginalItemNo', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(JobOrderMaterialForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderMaterialRow;
        (function (JobOrderMaterialRow) {
            JobOrderMaterialRow.idProperty = 'Recnum';
            JobOrderMaterialRow.nameProperty = 'JobNo';
            JobOrderMaterialRow.localTextPrefix = 'Production.JobOrderMaterial';
            var Fields;
            (function (Fields) {
            })(Fields = JobOrderMaterialRow.Fields || (JobOrderMaterialRow.Fields = {}));
            [
                'Recnum',
                'JobNo',
                'LineNo',
                'PartItemNo',
                'Description',
                'Uom',
                'QtyPer',
                'QtyRequired',
                'QtyReserved',
                'QtyWaitlisted',
                'QtyPurchase',
                'QtyProduce',
                'SubJobNo',
                'VendorNo',
                'OrderNo',
                'OrderDate',
                'PurchaseUom',
                'LotSize',
                'PriceCcy',
                'ExpectedPrice',
                'DueDate',
                'SchedDate',
                'InvCost',
                'StdCost',
                'LatCost',
                'UnitCost',
                'CostMaterial',
                'SubDueDate',
                'SubStartDate',
                'SubBomNo',
                'Specifications',
                'QtyNeeded',
                'ScrapRate',
                'ScrapQty',
                'QtyAdjusted',
                'SubQty',
                'IsAlternate',
                'MainLineNo',
                'UsageRate',
                'Loc',
                'Eod',
                'Edd',
                'Anlys1',
                'Anlys2',
                'SubBlowThru',
                'BinQtyOut',
                'BuyMake',
                'IncludeScrapRate',
                'PoNo',
                'SubWcBackflush',
                'RunnerWaste',
                'ReuseRate',
                'RunnerWasteRate',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'SubFormulaCode',
                'IncludeJob',
                'QuotationScrapQty',
                'QuotationScrapRate',
                'CustomerProvided',
                'OriginalItemNo',
                'JobNoRecnum',
                'JobNoPosted',
                'JobNoClosed',
                'JobNoIssued',
                'JobNoFinished',
                'JobNoAssemblyType',
                'JobNoSourceSubjob',
                'JobNoSourceSales',
                'JobNoSourceAssort',
                'JobNoSourceRefNo',
                'JobNoSourceLineNo',
                'JobNoSourcePartNo',
                'JobNoIssueDate',
                'JobNoDueDate',
                'JobNoStartDate',
                'JobNoItemNo',
                'JobNoDescription',
                'JobNoUom',
                'JobNoTotalQty',
                'JobNoSpecNo',
                'JobNoBomNo',
                'JobNoStdOutput',
                'JobNoProdLotSize',
                'JobNoNoOfLots',
                'JobNoBatchedLots',
                'JobNoHrsPerLot',
                'JobNoHrsPerLotCpd',
                'JobNoBranchNo',
                'JobNoAssemblyLine',
                'JobNoJobCategory',
                'JobNoJobPriority',
                'JobNoHeaderVerified',
                'JobNoByprodVerified',
                'JobNoBatchVerified',
                'JobNoBomVerified',
                'JobNoRoutingVerifed',
                'JobNoMatschVerified',
                'JobNoWrkschVerified',
                'JobNoCostVerified',
                'JobNoByprCostShare',
                'JobNoTicketNeeded',
                'JobNoTicketClosed',
                'JobNoCreatedDate',
                'JobNoCreatedBy',
                'JobNoRevisedDate',
                'JobNoRevisedBy',
                'JobNoPostedDate',
                'JobNoPostedBy',
                'JobNoLastLineNo',
                'JobNoLastByprodNo',
                'JobNoBatchCount',
                'JobNoLastLogNo',
                'JobNoLockType',
                'JobNoLockRefNo',
                'JobNoFgLoc',
                'JobNoRmLoc',
                'JobNoCostMaterial',
                'JobNoCostLabor',
                'JobNoCostSubcon',
                'JobNoCostMachine',
                'JobNoCostEnergy',
                'JobNoCostWater',
                'JobNoCostRental',
                'JobNoCostInlab',
                'JobNoCostInmat',
                'JobNoCostMisc',
                'JobNoCostOverhead',
                'JobNoCostEstimate',
                'JobNoCostFinished',
                'JobNoCostScrapped',
                'JobNoCostCharged',
                'JobNoCoacRmConsu',
                'JobNoCoacRmScrap',
                'JobNoCoacMaterial',
                'JobNoCoacLabor',
                'JobNoCoacSubcon',
                'JobNoCoacMachine',
                'JobNoCoacEnergy',
                'JobNoCoacWater',
                'JobNoCoacRental',
                'JobNoCoacInlab',
                'JobNoCoacInmat',
                'JobNoCoacMisc',
                'JobNoCoacOverhead',
                'JobNoCostActual',
                'JobNoCostVariance',
                'JobNoCostWip',
                'JobNoAcctWip',
                'JobNoAcctPvar',
                'JobNoAcctProdCost',
                'JobNoCanEdit',
                'JobNoLastSubNo',
                'JobNoSubjobVerified',
                'JobNoLotsIssued',
                'JobNoLotsFinished',
                'JobNoOwnerBranch',
                'JobNoSourceBranch',
                'JobNoFinishedType',
                'JobNoFinishedDate',
                'JobNoSpecifications',
                'JobNoQtyNeeded',
                'JobNoScrapRate',
                'JobNoScrapQty',
                'JobNoQtyAdjusted',
                'JobNoNetWt',
                'JobNoNetWtUom',
                'JobNoAnlys1',
                'JobNoAnlys2',
                'JobNoBlowThru',
                'JobNoComments1',
                'JobNoComments2',
                'JobNoComments3',
                'JobNoComments4',
                'JobNoLastTextNo',
                'JobNoBomRevision',
                'JobNoAnlys7',
                'JobNoAnlys8',
                'JobNoLastLinkNo',
                'JobNoFlag',
                'JobNoHoldBy',
                'JobNoIncludeScrapRate',
                'JobNoUseItemMasterScrap',
                'JobNoWcBackflush',
                'JobNoReorder',
                'JobNoCostRework',
                'JobNoMoldJob',
                'JobNoMoldDesc',
                'JobNoAnlys9',
                'JobNoAnlys10',
                'JobNoAnlys11',
                'JobNoAnlys12',
                'JobNoAnlys13',
                'JobNoAnlys14',
                'JobNoProjectNo',
                'JobNoSourceMrpNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(JobOrderMaterialRow = Production.JobOrderMaterialRow || (Production.JobOrderMaterialRow = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderMaterialService;
        (function (JobOrderMaterialService) {
            JobOrderMaterialService.baseUrl = 'Production/JobOrderMaterial';
            var Methods;
            (function (Methods) {
            })(Methods = JobOrderMaterialService.Methods || (JobOrderMaterialService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                JobOrderMaterialService[x] = function (r, s, o) {
                    return Q.serviceRequest(JobOrderMaterialService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = JobOrderMaterialService.baseUrl + '/' + x;
            });
        })(JobOrderMaterialService = Production.JobOrderMaterialService || (Production.JobOrderMaterialService = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderRoutingStepForm = /** @class */ (function (_super) {
            __extends(JobOrderRoutingStepForm, _super);
            function JobOrderRoutingStepForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            JobOrderRoutingStepForm.formKey = 'Production.JobOrderRoutingStep';
            return JobOrderRoutingStepForm;
        }(Serenity.PrefixedContext));
        Production.JobOrderRoutingStepForm = JobOrderRoutingStepForm;
        [['JobNo', function () { return Serenity.StringEditor; }],
            ['StepNo', function () { return Serenity.DecimalEditor; }],
            ['OpCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['ProdnMode', function () { return Serenity.StringEditor; }],
            ['Ticketed', function () { return Serenity.StringEditor; }],
            ['Reported', function () { return Serenity.StringEditor; }],
            ['WorkCentre', function () { return Serenity.StringEditor; }],
            ['HrsPerLot', function () { return Serenity.DecimalEditor; }],
            ['PieceRate', function () { return Serenity.DecimalEditor; }],
            ['SubVendorNo', function () { return Serenity.StringEditor; }],
            ['SubContractNo', function () { return Serenity.StringEditor; }],
            ['SubIssueDate', function () { return Serenity.DateEditor; }],
            ['SubDueDate', function () { return Serenity.DateEditor; }],
            ['SubLotRate', function () { return Serenity.DecimalEditor; }],
            ['CostMachine', function () { return Serenity.DecimalEditor; }],
            ['CostEnergy', function () { return Serenity.DecimalEditor; }],
            ['CostWater', function () { return Serenity.DecimalEditor; }],
            ['CostRental', function () { return Serenity.DecimalEditor; }],
            ['CostLabor', function () { return Serenity.DecimalEditor; }],
            ['CostInlab', function () { return Serenity.DecimalEditor; }],
            ['CostInmat', function () { return Serenity.DecimalEditor; }],
            ['CostMisc', function () { return Serenity.DecimalEditor; }],
            ['CostSubcon', function () { return Serenity.DecimalEditor; }],
            ['CostMachCpd', function () { return Serenity.DecimalEditor; }],
            ['CostEnergyCpd', function () { return Serenity.DecimalEditor; }],
            ['CostWaterCpd', function () { return Serenity.DecimalEditor; }],
            ['CostRentalCpd', function () { return Serenity.DecimalEditor; }],
            ['CostLaborCpd', function () { return Serenity.DecimalEditor; }],
            ['CostInlabCpd', function () { return Serenity.DecimalEditor; }],
            ['CostInmatCpd', function () { return Serenity.DecimalEditor; }],
            ['CostMiscCpd', function () { return Serenity.DecimalEditor; }],
            ['CostSubCpd', function () { return Serenity.DecimalEditor; }],
            ['AcctMachine', function () { return Serenity.StringEditor; }],
            ['AcctEnergy', function () { return Serenity.StringEditor; }],
            ['AcctWater', function () { return Serenity.StringEditor; }],
            ['AcctRental', function () { return Serenity.StringEditor; }],
            ['AcctLabor', function () { return Serenity.StringEditor; }],
            ['AcctInlab', function () { return Serenity.StringEditor; }],
            ['AcctInmat', function () { return Serenity.StringEditor; }],
            ['AcctMisc', function () { return Serenity.StringEditor; }],
            ['Specifications', function () { return Serenity.StringEditor; }],
            ['Eod', function () { return Serenity.DateEditor; }],
            ['Edd', function () { return Serenity.DateEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['HrsPerLot1', function () { return Serenity.DecimalEditor; }],
            ['TotalManHrs', function () { return Serenity.DecimalEditor; }],
            ['TotalMachHrs', function () { return Serenity.DecimalEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(JobOrderRoutingStepForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderRoutingStepRow;
        (function (JobOrderRoutingStepRow) {
            JobOrderRoutingStepRow.idProperty = 'Recnum';
            JobOrderRoutingStepRow.nameProperty = 'JobNo';
            JobOrderRoutingStepRow.localTextPrefix = 'Production.JobOrderRoutingStep';
            var Fields;
            (function (Fields) {
            })(Fields = JobOrderRoutingStepRow.Fields || (JobOrderRoutingStepRow.Fields = {}));
            [
                'Recnum',
                'JobNo',
                'StepNo',
                'OpCode',
                'Description',
                'ProdnMode',
                'Ticketed',
                'Reported',
                'WorkCentre',
                'HrsPerLot',
                'PieceRate',
                'SubVendorNo',
                'SubContractNo',
                'SubIssueDate',
                'SubDueDate',
                'SubLotRate',
                'CostMachine',
                'CostEnergy',
                'CostWater',
                'CostRental',
                'CostLabor',
                'CostInlab',
                'CostInmat',
                'CostMisc',
                'CostSubcon',
                'CostMachCpd',
                'CostEnergyCpd',
                'CostWaterCpd',
                'CostRentalCpd',
                'CostLaborCpd',
                'CostInlabCpd',
                'CostInmatCpd',
                'CostMiscCpd',
                'CostSubCpd',
                'AcctMachine',
                'AcctEnergy',
                'AcctWater',
                'AcctRental',
                'AcctLabor',
                'AcctInlab',
                'AcctInmat',
                'AcctMisc',
                'Specifications',
                'Eod',
                'Edd',
                'Anlys1',
                'Anlys2',
                'HrsPerLot1',
                'TotalManHrs',
                'TotalMachHrs',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'JobNoRecnum',
                'JobNoPosted',
                'JobNoClosed',
                'JobNoIssued',
                'JobNoFinished',
                'JobNoAssemblyType',
                'JobNoSourceSubjob',
                'JobNoSourceSales',
                'JobNoSourceAssort',
                'JobNoSourceRefNo',
                'JobNoSourceLineNo',
                'JobNoSourcePartNo',
                'JobNoIssueDate',
                'JobNoDueDate',
                'JobNoStartDate',
                'JobNoItemNo',
                'JobNoDescription',
                'JobNoUom',
                'JobNoTotalQty',
                'JobNoSpecNo',
                'JobNoBomNo',
                'JobNoStdOutput',
                'JobNoProdLotSize',
                'JobNoNoOfLots',
                'JobNoBatchedLots',
                'JobNoHrsPerLot',
                'JobNoHrsPerLotCpd',
                'JobNoBranchNo',
                'JobNoAssemblyLine',
                'JobNoJobCategory',
                'JobNoJobPriority',
                'JobNoHeaderVerified',
                'JobNoByprodVerified',
                'JobNoBatchVerified',
                'JobNoBomVerified',
                'JobNoRoutingVerifed',
                'JobNoMatschVerified',
                'JobNoWrkschVerified',
                'JobNoCostVerified',
                'JobNoByprCostShare',
                'JobNoTicketNeeded',
                'JobNoTicketClosed',
                'JobNoCreatedDate',
                'JobNoCreatedBy',
                'JobNoRevisedDate',
                'JobNoRevisedBy',
                'JobNoPostedDate',
                'JobNoPostedBy',
                'JobNoLastLineNo',
                'JobNoLastByprodNo',
                'JobNoBatchCount',
                'JobNoLastLogNo',
                'JobNoLockType',
                'JobNoLockRefNo',
                'JobNoFgLoc',
                'JobNoRmLoc',
                'JobNoCostMaterial',
                'JobNoCostLabor',
                'JobNoCostSubcon',
                'JobNoCostMachine',
                'JobNoCostEnergy',
                'JobNoCostWater',
                'JobNoCostRental',
                'JobNoCostInlab',
                'JobNoCostInmat',
                'JobNoCostMisc',
                'JobNoCostOverhead',
                'JobNoCostEstimate',
                'JobNoCostFinished',
                'JobNoCostScrapped',
                'JobNoCostCharged',
                'JobNoCoacRmConsu',
                'JobNoCoacRmScrap',
                'JobNoCoacMaterial',
                'JobNoCoacLabor',
                'JobNoCoacSubcon',
                'JobNoCoacMachine',
                'JobNoCoacEnergy',
                'JobNoCoacWater',
                'JobNoCoacRental',
                'JobNoCoacInlab',
                'JobNoCoacInmat',
                'JobNoCoacMisc',
                'JobNoCoacOverhead',
                'JobNoCostActual',
                'JobNoCostVariance',
                'JobNoCostWip',
                'JobNoAcctWip',
                'JobNoAcctPvar',
                'JobNoAcctProdCost',
                'JobNoCanEdit',
                'JobNoLastSubNo',
                'JobNoSubjobVerified',
                'JobNoLotsIssued',
                'JobNoLotsFinished',
                'JobNoOwnerBranch',
                'JobNoSourceBranch',
                'JobNoFinishedType',
                'JobNoFinishedDate',
                'JobNoSpecifications',
                'JobNoQtyNeeded',
                'JobNoScrapRate',
                'JobNoScrapQty',
                'JobNoQtyAdjusted',
                'JobNoNetWt',
                'JobNoNetWtUom',
                'JobNoAnlys1',
                'JobNoAnlys2',
                'JobNoBlowThru',
                'JobNoComments1',
                'JobNoComments2',
                'JobNoComments3',
                'JobNoComments4',
                'JobNoLastTextNo',
                'JobNoBomRevision',
                'JobNoAnlys7',
                'JobNoAnlys8',
                'JobNoLastLinkNo',
                'JobNoFlag',
                'JobNoHoldBy',
                'JobNoIncludeScrapRate',
                'JobNoUseItemMasterScrap',
                'JobNoWcBackflush',
                'JobNoReorder',
                'JobNoCostRework',
                'JobNoMoldJob',
                'JobNoMoldDesc',
                'JobNoAnlys9',
                'JobNoAnlys10',
                'JobNoAnlys11',
                'JobNoAnlys12',
                'JobNoAnlys13',
                'JobNoAnlys14',
                'JobNoProjectNo',
                'JobNoSourceMrpNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(JobOrderRoutingStepRow = Production.JobOrderRoutingStepRow || (Production.JobOrderRoutingStepRow = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderRoutingStepService;
        (function (JobOrderRoutingStepService) {
            JobOrderRoutingStepService.baseUrl = 'Production/JobOrderRoutingStep';
            var Methods;
            (function (Methods) {
            })(Methods = JobOrderRoutingStepService.Methods || (JobOrderRoutingStepService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                JobOrderRoutingStepService[x] = function (r, s, o) {
                    return Q.serviceRequest(JobOrderRoutingStepService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = JobOrderRoutingStepService.baseUrl + '/' + x;
            });
        })(JobOrderRoutingStepService = Production.JobOrderRoutingStepService || (Production.JobOrderRoutingStepService = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderRow;
        (function (JobOrderRow) {
            JobOrderRow.idProperty = 'Recnum';
            JobOrderRow.nameProperty = 'JobNo';
            JobOrderRow.localTextPrefix = 'Production.JobOrder';
            var Fields;
            (function (Fields) {
            })(Fields = JobOrderRow.Fields || (JobOrderRow.Fields = {}));
            [
                'Recnum',
                'JobNo',
                'Posted',
                'Closed',
                'Issued',
                'Finished',
                'AssemblyType',
                'SourceSubjob',
                'SourceSales',
                'SourceAssort',
                'SourceRefNo',
                'SourceLineNo',
                'SourcePartNo',
                'IssueDate',
                'DueDate',
                'StartDate',
                'ItemNo',
                'Description',
                'Uom',
                'TotalQty',
                'SpecNo',
                'BomNo',
                'StdOutput',
                'ProdLotSize',
                'NoOfLots',
                'BatchedLots',
                'HrsPerLot',
                'HrsPerLotCpd',
                'BranchNo',
                'AssemblyLine',
                'JobCategory',
                'JobPriority',
                'HeaderVerified',
                'ByprodVerified',
                'BatchVerified',
                'BomVerified',
                'RoutingVerifed',
                'MatschVerified',
                'WrkschVerified',
                'CostVerified',
                'ByprCostShare',
                'TicketNeeded',
                'TicketClosed',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LastLineNo',
                'LastByprodNo',
                'BatchCount',
                'LastLogNo',
                'LockType',
                'LockRefNo',
                'FgLoc',
                'RmLoc',
                'CostMaterial',
                'CostLabor',
                'CostSubcon',
                'CostMachine',
                'CostEnergy',
                'CostWater',
                'CostRental',
                'CostInlab',
                'CostInmat',
                'CostMisc',
                'CostOverhead',
                'CostEstimate',
                'CostFinished',
                'CostScrapped',
                'CostCharged',
                'CoacRmConsu',
                'CoacRmScrap',
                'CoacMaterial',
                'CoacLabor',
                'CoacSubcon',
                'CoacMachine',
                'CoacEnergy',
                'CoacWater',
                'CoacRental',
                'CoacInlab',
                'CoacInmat',
                'CoacMisc',
                'CoacOverhead',
                'CostActual',
                'CostVariance',
                'CostWip',
                'AcctWip',
                'AcctPvar',
                'AcctProdCost',
                'CanEdit',
                'LastSubNo',
                'SubjobVerified',
                'LotsIssued',
                'LotsFinished',
                'OwnerBranch',
                'SourceBranch',
                'FinishedType',
                'FinishedDate',
                'Specifications',
                'QtyNeeded',
                'ScrapRate',
                'ScrapQty',
                'QtyAdjusted',
                'NetWt',
                'NetWtUom',
                'Anlys1',
                'Anlys2',
                'BlowThru',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'LastTextNo',
                'BomRevision',
                'Anlys7',
                'Anlys8',
                'LastLinkNo',
                'Flag',
                'HoldBy',
                'IncludeScrapRate',
                'UseItemMasterScrap',
                'WcBackflush',
                'Reorder',
                'CostRework',
                'MoldJob',
                'MoldDesc',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'ProjectNo',
                'SourceMrpNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(JobOrderRow = Production.JobOrderRow || (Production.JobOrderRow = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderService;
        (function (JobOrderService) {
            JobOrderService.baseUrl = 'Production/JobOrder';
            var Methods;
            (function (Methods) {
            })(Methods = JobOrderService.Methods || (JobOrderService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                JobOrderService[x] = function (r, s, o) {
                    return Q.serviceRequest(JobOrderService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = JobOrderService.baseUrl + '/' + x;
            });
        })(JobOrderService = Production.JobOrderService || (Production.JobOrderService = {}));
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnForm = /** @class */ (function (_super) {
            __extends(GrnForm, _super);
            function GrnForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GrnForm.formKey = 'Purchasing.Grn';
            return GrnForm;
        }(Serenity.PrefixedContext));
        Purchasing.GrnForm = GrnForm;
        [['GrnNo', function () { return Serenity.StringEditor; }],
            ['ReceivedDate', function () { return Serenity.DateEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['InspectPriority', function () { return Serenity.DecimalEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['CutoffDate', function () { return Serenity.DateEditor; }],
            ['DoNo', function () { return Serenity.StringEditor; }],
            ['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['DiscPcent', function () { return Serenity.DecimalEditor; }],
            ['DiscDays', function () { return Serenity.DecimalEditor; }],
            ['DueDays', function () { return Serenity.DecimalEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsCover', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['OrderDetailList', function () { return Purchasing.GrnOrderDetailEditor; }],
            ['EntryMethod', function () { return Serenity.StringEditor; }],
            ['WithInvoice', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['Inspected', function () { return Serenity.StringEditor; }],
            ['Returned', function () { return Serenity.StringEditor; }],
            ['DiscountDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['ComputeTax', function () { return Serenity.StringEditor; }],
            ['Comments1', function () { return Serenity.TextAreaEditor; }],
            ['Comments2', function () { return Serenity.TextAreaEditor; }],
            ['Comments3', function () { return Serenity.TextAreaEditor; }],
            ['Comments4', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(GrnForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderDetailForm = /** @class */ (function (_super) {
            __extends(GrnOrderDetailForm, _super);
            function GrnOrderDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GrnOrderDetailForm.formKey = 'Purchasing.GrnOrderDetail';
            return GrnOrderDetailForm;
        }(Serenity.PrefixedContext));
        Purchasing.GrnOrderDetailForm = GrnOrderDetailForm;
        [['GrnNo', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['QtyBalance', function () { return Serenity.DecimalEditor; }],
            ['QtyDue', function () { return Serenity.DecimalEditor; }],
            ['QtyReceived', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['Ptax', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['PtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxRate', function () { return Serenity.DecimalEditor; }],
            ['LdiscRate', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmtCpd', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmtCpd', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['ReceivedDate', function () { return Serenity.DateEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Inspected', function () { return Serenity.StringEditor; }],
            ['QtyInspected', function () { return Serenity.DecimalEditor; }],
            ['QtyAccepted', function () { return Serenity.DecimalEditor; }],
            ['QtyRejected', function () { return Serenity.DecimalEditor; }],
            ['Returned', function () { return Serenity.StringEditor; }],
            ['QcHold', function () { return Serenity.StringEditor; }],
            ['AcctPurchase', function () { return Serenity.StringEditor; }],
            ['AcctLdisc', function () { return Serenity.StringEditor; }],
            ['AcctPtax', function () { return Serenity.StringEditor; }],
            ['AcctAtax', function () { return Serenity.StringEditor; }],
            ['ItemTaxCode', function () { return Serenity.StringEditor; }],
            ['QtyReturned', function () { return Serenity.DecimalEditor; }],
            ['RetPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['RetPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['RetExtPrice', function () { return Serenity.DecimalEditor; }],
            ['RetLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['RetAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['RetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LretPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LretPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LretExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LretLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LretAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LretItemAmt', function () { return Serenity.DecimalEditor; }],
            ['CostAccepted', function () { return Serenity.DecimalEditor; }],
            ['CostRejected', function () { return Serenity.DecimalEditor; }],
            ['CostReturned', function () { return Serenity.DecimalEditor; }],
            ['ExtDescription', function () { return Serenity.StringEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['PutaxPcent', function () { return Serenity.DecimalEditor; }],
            ['PutaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPutaxAmt', function () { return Serenity.DecimalEditor; }],
            ['InspectPriority', function () { return Serenity.DecimalEditor; }],
            ['QcHoldLoc', function () { return Serenity.StringEditor; }],
            ['JobNo', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }],
            ['MaterialCost', function () { return Serenity.DecimalEditor; }],
            ['VendorItemNo', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(GrnOrderDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderDetailRow;
        (function (GrnOrderDetailRow) {
            GrnOrderDetailRow.idProperty = 'Recnum';
            GrnOrderDetailRow.nameProperty = 'GrnNo';
            GrnOrderDetailRow.localTextPrefix = 'Purchasing.GrnOrderDetail';
            var Fields;
            (function (Fields) {
            })(Fields = GrnOrderDetailRow.Fields || (GrnOrderDetailRow.Fields = {}));
            [
                'Recnum',
                'GrnNo',
                'EntryNo',
                'OrderNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'QtyBalance',
                'QtyDue',
                'QtyReceived',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'PriceAmt',
                'PtaxAmt',
                'AtaxRate',
                'LdiscRate',
                'AtaxAmtCpd',
                'LdiscAmtCpd',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'Posted',
                'LogNo',
                'ReceivedDate',
                'VendorNo',
                'ShipTo',
                'Inspected',
                'QtyInspected',
                'QtyAccepted',
                'QtyRejected',
                'Returned',
                'QcHold',
                'AcctPurchase',
                'AcctLdisc',
                'AcctPtax',
                'AcctAtax',
                'ItemTaxCode',
                'QtyReturned',
                'RetPriceAmt',
                'RetPtaxAmt',
                'RetExtPrice',
                'RetLdiscAmt',
                'RetAtaxAmt',
                'RetItemAmt',
                'LretPriceAmt',
                'LretPtaxAmt',
                'LretExtPrice',
                'LretLdiscAmt',
                'LretAtaxAmt',
                'LretItemAmt',
                'CostAccepted',
                'CostRejected',
                'CostReturned',
                'ExtDescription',
                'Loc',
                'PutaxPcent',
                'PutaxAmt',
                'LocPutaxAmt',
                'InspectPriority',
                'QcHoldLoc',
                'JobNo',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'MaterialCost',
                'VendorItemNo',
                'GrnNoRecnum',
                'GrnNoEntryMethod',
                'GrnNoWithInvoice',
                'GrnNoReceivedDate',
                'GrnNoPosted',
                'GrnNoInspected',
                'GrnNoReturned',
                'GrnNoShipTo',
                'GrnNoOwnerBranch',
                'GrnNoSourceBranch',
                'GrnNoVendorNo',
                'GrnNoVendorName',
                'GrnNoDoNo',
                'GrnNoInvoiceNo',
                'GrnNoPayTerms',
                'GrnNoDiscDays',
                'GrnNoDiscPcent',
                'GrnNoDueDays',
                'GrnNoDiscountDate',
                'GrnNoDueDate',
                'GrnNoCcy',
                'GrnNoExchRate',
                'GrnNoComputeTax',
                'GrnNoTotPriceAmt',
                'GrnNoTotPtaxAmt',
                'GrnNoTotExtPrice',
                'GrnNoTotLdiscAmt',
                'GrnNoTotAtaxAmt',
                'GrnNoTotItemAmt',
                'GrnNoTotTdiscAmt',
                'GrnNoNetTradeAmt',
                'GrnNoTotChgsAmt',
                'GrnNoNetOrdrAmt',
                'GrnNoTotGtaxAmt',
                'GrnNoNetPayAmt',
                'GrnNoDpsCover',
                'GrnNoDpsApplied',
                'GrnNoNetBalAmt',
                'GrnNoLocPriceAmt',
                'GrnNoLocPtaxAmt',
                'GrnNoLocExtPrice',
                'GrnNoLocLdiscAmt',
                'GrnNoLocAtaxAmt',
                'GrnNoLocItemAmt',
                'GrnNoLocTdiscAmt',
                'GrnNoLocChgsAmt',
                'GrnNoLocGtaxAmt',
                'GrnNoLocPayAmt',
                'GrnNoLocDpsApplied',
                'GrnNoCreatedDate',
                'GrnNoCreatedBy',
                'GrnNoRevisedDate',
                'GrnNoRevisedBy',
                'GrnNoPostedDate',
                'GrnNoPostedBy',
                'GrnNoLastOrderNo',
                'GrnNoLastEntryNo',
                'GrnNoLastChgsNo',
                'GrnNoLockType',
                'GrnNoLockRefNo',
                'GrnNoLastLogNo',
                'GrnNoAcctVendor',
                'GrnNoAcctTdisc',
                'GrnNoAcctGtax',
                'GrnNoVendTaxCode',
                'GrnNoCustTaxCode',
                'GrnNoRetPriceAmt',
                'GrnNoRetPtaxAmt',
                'GrnNoRetExtPrice',
                'GrnNoRetLdiscAmt',
                'GrnNoRetAtaxAmt',
                'GrnNoRetItemAmt',
                'GrnNoRetTdiscAmt',
                'GrnNoRetGtaxAmt',
                'GrnNoRetChgsAmt',
                'GrnNoRetPayAmt',
                'GrnNoLretPriceAmt',
                'GrnNoLretPtaxAmt',
                'GrnNoLretExtPrice',
                'GrnNoLretLdiscAmt',
                'GrnNoLretAtaxAmt',
                'GrnNoLretItemAmt',
                'GrnNoLretTdiscAmt',
                'GrnNoLretGtaxAmt',
                'GrnNoLretChgsAmt',
                'GrnNoLretPayAmt',
                'GrnNoSettleAt',
                'GrnNoCheckCrlimit',
                'GrnNoCheckCrbal',
                'GrnNoManual',
                'GrnNoPutaxType',
                'GrnNoGputaxPcent',
                'GrnNoTotGputaxAmt',
                'GrnNoPoPutaxType',
                'GrnNoPoGputaxPcent',
                'GrnNoLocGputaxAmt',
                'GrnNoOrderCount',
                'GrnNoTotLputaxAmt',
                'GrnNoLocLputaxAmt',
                'GrnNoCutoffDate',
                'GrnNoInspectPriority',
                'GrnNoAnlys9',
                'GrnNoAnlys10',
                'GrnNoAnlys11',
                'GrnNoAnlys12',
                'GrnNoFlag',
                'GrnNoHoldBy',
                'GrnNoComments1',
                'GrnNoComments2',
                'GrnNoComments3',
                'GrnNoComments4',
                'GrnNoLastTextNo',
                'GrnNoAnlys13',
                'GrnNoAnlys14',
                'GrnNoAnlys15',
                'GrnNoAnlys16',
                'GrnNoAnlys17',
                'GrnNoAnlys18',
                'GrnNoRefCompanyCode',
                'GrnNoRefShipmentRefNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(GrnOrderDetailRow = Purchasing.GrnOrderDetailRow || (Purchasing.GrnOrderDetailRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderDetailService;
        (function (GrnOrderDetailService) {
            GrnOrderDetailService.baseUrl = 'Purchasing/GrnOrderDetail';
            var Methods;
            (function (Methods) {
            })(Methods = GrnOrderDetailService.Methods || (GrnOrderDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                GrnOrderDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(GrnOrderDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = GrnOrderDetailService.baseUrl + '/' + x;
            });
        })(GrnOrderDetailService = Purchasing.GrnOrderDetailService || (Purchasing.GrnOrderDetailService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderForm = /** @class */ (function (_super) {
            __extends(GrnOrderForm, _super);
            function GrnOrderForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GrnOrderForm.formKey = 'Purchasing.GrnOrder';
            return GrnOrderForm;
        }(Serenity.PrefixedContext));
        Purchasing.GrnOrderForm = GrnOrderForm;
        [['GrnNo', function () { return Serenity.StringEditor; }],
            ['SeqNo', function () { return Serenity.DecimalEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['OrderDate', function () { return Serenity.DateEditor; }],
            ['NextDueDate', function () { return Serenity.DateEditor; }],
            ['Final', function () { return Serenity.StringEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['TotPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotExtPrice', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TotAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetOrdrAmt', function () { return Serenity.DecimalEditor; }],
            ['TotGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsCover', function () { return Serenity.DecimalEditor; }],
            ['DpsPcent', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['LocDpsApplied', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscRate', function () { return Serenity.DecimalEditor; }],
            ['GtaxRate', function () { return Serenity.DecimalEditor; }],
            ['DpsRate', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscCpd', function () { return Serenity.DecimalEditor; }],
            ['TotGtaxCpd', function () { return Serenity.DecimalEditor; }],
            ['DpsAppliedCpd', function () { return Serenity.DecimalEditor; }],
            ['LastLineNo', function () { return Serenity.DecimalEditor; }],
            ['LastChgsNo', function () { return Serenity.DecimalEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['LastLogNo', function () { return Serenity.DecimalEditor; }],
            ['Buyer', function () { return Serenity.StringEditor; }],
            ['ReceivedDate', function () { return Serenity.DateEditor; }],
            ['DetailCount', function () { return Serenity.DecimalEditor; }],
            ['ChargesCount', function () { return Serenity.DecimalEditor; }],
            ['DpsEntryNo', function () { return Serenity.DecimalEditor; }],
            ['CheckCrbal', function () { return Serenity.DecimalEditor; }],
            ['PutaxType', function () { return Serenity.StringEditor; }],
            ['GputaxPcent', function () { return Serenity.DecimalEditor; }],
            ['TotGputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotLputaxAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['ReceiveAll', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['Anlys13', function () { return Serenity.StringEditor; }],
            ['Anlys14', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(GrnOrderForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderRow;
        (function (GrnOrderRow) {
            GrnOrderRow.idProperty = 'Recnum';
            GrnOrderRow.nameProperty = 'GrnNo';
            GrnOrderRow.localTextPrefix = 'Purchasing.GrnOrder';
            var Fields;
            (function (Fields) {
            })(Fields = GrnOrderRow.Fields || (GrnOrderRow.Fields = {}));
            [
                'Recnum',
                'GrnNo',
                'SeqNo',
                'OrderNo',
                'Posted',
                'OrderDate',
                'NextDueDate',
                'Final',
                'Anlys1',
                'Anlys2',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'DpsCover',
                'DpsPcent',
                'DpsApplied',
                'LocDpsApplied',
                'NetBalAmt',
                'TdiscRate',
                'GtaxRate',
                'DpsRate',
                'TotTdiscCpd',
                'TotGtaxCpd',
                'DpsAppliedCpd',
                'LastLineNo',
                'LastChgsNo',
                'LogNo',
                'LastLogNo',
                'Buyer',
                'ReceivedDate',
                'DetailCount',
                'ChargesCount',
                'DpsEntryNo',
                'CheckCrbal',
                'PutaxType',
                'GputaxPcent',
                'TotGputaxAmt',
                'TotLputaxAmt',
                'Anlys7',
                'Anlys8',
                'ReceiveAll',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'GrnNoRecnum',
                'GrnNoEntryMethod',
                'GrnNoWithInvoice',
                'GrnNoReceivedDate',
                'GrnNoPosted',
                'GrnNoInspected',
                'GrnNoReturned',
                'GrnNoShipTo',
                'GrnNoOwnerBranch',
                'GrnNoSourceBranch',
                'GrnNoVendorNo',
                'GrnNoVendorName',
                'GrnNoDoNo',
                'GrnNoInvoiceNo',
                'GrnNoPayTerms',
                'GrnNoDiscDays',
                'GrnNoDiscPcent',
                'GrnNoDueDays',
                'GrnNoDiscountDate',
                'GrnNoDueDate',
                'GrnNoCcy',
                'GrnNoExchRate',
                'GrnNoComputeTax',
                'GrnNoTotPriceAmt',
                'GrnNoTotPtaxAmt',
                'GrnNoTotExtPrice',
                'GrnNoTotLdiscAmt',
                'GrnNoTotAtaxAmt',
                'GrnNoTotItemAmt',
                'GrnNoTotTdiscAmt',
                'GrnNoNetTradeAmt',
                'GrnNoTotChgsAmt',
                'GrnNoNetOrdrAmt',
                'GrnNoTotGtaxAmt',
                'GrnNoNetPayAmt',
                'GrnNoDpsCover',
                'GrnNoDpsApplied',
                'GrnNoNetBalAmt',
                'GrnNoLocPriceAmt',
                'GrnNoLocPtaxAmt',
                'GrnNoLocExtPrice',
                'GrnNoLocLdiscAmt',
                'GrnNoLocAtaxAmt',
                'GrnNoLocItemAmt',
                'GrnNoLocTdiscAmt',
                'GrnNoLocChgsAmt',
                'GrnNoLocGtaxAmt',
                'GrnNoLocPayAmt',
                'GrnNoLocDpsApplied',
                'GrnNoCreatedDate',
                'GrnNoCreatedBy',
                'GrnNoRevisedDate',
                'GrnNoRevisedBy',
                'GrnNoPostedDate',
                'GrnNoPostedBy',
                'GrnNoLastOrderNo',
                'GrnNoLastEntryNo',
                'GrnNoLastChgsNo',
                'GrnNoLockType',
                'GrnNoLockRefNo',
                'GrnNoLastLogNo',
                'GrnNoAcctVendor',
                'GrnNoAcctTdisc',
                'GrnNoAcctGtax',
                'GrnNoVendTaxCode',
                'GrnNoCustTaxCode',
                'GrnNoRetPriceAmt',
                'GrnNoRetPtaxAmt',
                'GrnNoRetExtPrice',
                'GrnNoRetLdiscAmt',
                'GrnNoRetAtaxAmt',
                'GrnNoRetItemAmt',
                'GrnNoRetTdiscAmt',
                'GrnNoRetGtaxAmt',
                'GrnNoRetChgsAmt',
                'GrnNoRetPayAmt',
                'GrnNoLretPriceAmt',
                'GrnNoLretPtaxAmt',
                'GrnNoLretExtPrice',
                'GrnNoLretLdiscAmt',
                'GrnNoLretAtaxAmt',
                'GrnNoLretItemAmt',
                'GrnNoLretTdiscAmt',
                'GrnNoLretGtaxAmt',
                'GrnNoLretChgsAmt',
                'GrnNoLretPayAmt',
                'GrnNoSettleAt',
                'GrnNoCheckCrlimit',
                'GrnNoCheckCrbal',
                'GrnNoManual',
                'GrnNoPutaxType',
                'GrnNoGputaxPcent',
                'GrnNoTotGputaxAmt',
                'GrnNoPoPutaxType',
                'GrnNoPoGputaxPcent',
                'GrnNoLocGputaxAmt',
                'GrnNoOrderCount',
                'GrnNoTotLputaxAmt',
                'GrnNoLocLputaxAmt',
                'GrnNoCutoffDate',
                'GrnNoInspectPriority',
                'GrnNoAnlys9',
                'GrnNoAnlys10',
                'GrnNoAnlys11',
                'GrnNoAnlys12',
                'GrnNoFlag',
                'GrnNoHoldBy',
                'GrnNoComments1',
                'GrnNoComments2',
                'GrnNoComments3',
                'GrnNoComments4',
                'GrnNoLastTextNo',
                'GrnNoAnlys13',
                'GrnNoAnlys14',
                'GrnNoAnlys15',
                'GrnNoAnlys16',
                'GrnNoAnlys17',
                'GrnNoAnlys18',
                'GrnNoRefCompanyCode',
                'GrnNoRefShipmentRefNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(GrnOrderRow = Purchasing.GrnOrderRow || (Purchasing.GrnOrderRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderService;
        (function (GrnOrderService) {
            GrnOrderService.baseUrl = 'Purchasing/GrnOrder';
            var Methods;
            (function (Methods) {
            })(Methods = GrnOrderService.Methods || (GrnOrderService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                GrnOrderService[x] = function (r, s, o) {
                    return Q.serviceRequest(GrnOrderService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = GrnOrderService.baseUrl + '/' + x;
            });
        })(GrnOrderService = Purchasing.GrnOrderService || (Purchasing.GrnOrderService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnRow;
        (function (GrnRow) {
            GrnRow.idProperty = 'GrnNo';
            GrnRow.nameProperty = 'GrnNo';
            GrnRow.localTextPrefix = 'Purchasing.Grn';
            var Fields;
            (function (Fields) {
            })(Fields = GrnRow.Fields || (GrnRow.Fields = {}));
            [
                'Recnum',
                'GrnNo',
                'EntryMethod',
                'WithInvoice',
                'ReceivedDate',
                'Posted',
                'Inspected',
                'Returned',
                'ShipTo',
                'OwnerBranch',
                'SourceBranch',
                'VendorNo',
                'VendorName',
                'DoNo',
                'InvoiceNo',
                'PayTerms',
                'DiscDays',
                'DiscPcent',
                'DueDays',
                'DiscountDate',
                'DueDate',
                'Ccy',
                'ExchRate',
                'ComputeTax',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'DpsCover',
                'DpsApplied',
                'NetBalAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocTdiscAmt',
                'LocChgsAmt',
                'LocGtaxAmt',
                'LocPayAmt',
                'LocDpsApplied',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LastOrderNo',
                'LastEntryNo',
                'LastChgsNo',
                'LockType',
                'LockRefNo',
                'LastLogNo',
                'AcctVendor',
                'AcctTdisc',
                'AcctGtax',
                'VendTaxCode',
                'CustTaxCode',
                'RetPriceAmt',
                'RetPtaxAmt',
                'RetExtPrice',
                'RetLdiscAmt',
                'RetAtaxAmt',
                'RetItemAmt',
                'RetTdiscAmt',
                'RetGtaxAmt',
                'RetChgsAmt',
                'RetPayAmt',
                'LretPriceAmt',
                'LretPtaxAmt',
                'LretExtPrice',
                'LretLdiscAmt',
                'LretAtaxAmt',
                'LretItemAmt',
                'LretTdiscAmt',
                'LretGtaxAmt',
                'LretChgsAmt',
                'LretPayAmt',
                'SettleAt',
                'CheckCrlimit',
                'CheckCrbal',
                'Manual',
                'PutaxType',
                'GputaxPcent',
                'TotGputaxAmt',
                'PoPutaxType',
                'PoGputaxPcent',
                'LocGputaxAmt',
                'OrderCount',
                'TotLputaxAmt',
                'LocLputaxAmt',
                'CutoffDate',
                'InspectPriority',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Flag',
                'HoldBy',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'LastTextNo',
                'Anlys13',
                'Anlys14',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'RefCompanyCode',
                'RefShipmentRefNo',
                'ItemDetailList',
                'OrderDetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(GrnRow = Purchasing.GrnRow || (Purchasing.GrnRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnService;
        (function (GrnService) {
            GrnService.baseUrl = 'Purchasing/Grn';
            var Methods;
            (function (Methods) {
            })(Methods = GrnService.Methods || (GrnService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                GrnService[x] = function (r, s, o) {
                    return Q.serviceRequest(GrnService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = GrnService.baseUrl + '/' + x;
            });
        })(GrnService = Purchasing.GrnService || (Purchasing.GrnService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionDetailForm = /** @class */ (function (_super) {
            __extends(PurchaseInspectionDetailForm, _super);
            function PurchaseInspectionDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseInspectionDetailForm.formKey = 'Purchasing.PurchaseInspectionDetail';
            return PurchaseInspectionDetailForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseInspectionDetailForm = PurchaseInspectionDetailForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['QtyReceived', function () { return Serenity.DecimalEditor; }],
            ['QtyPending', function () { return Serenity.DecimalEditor; }],
            ['QtyInspected', function () { return Serenity.DecimalEditor; }],
            ['QtyRejected', function () { return Serenity.DecimalEditor; }],
            ['Reorder', function () { return Serenity.StringEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['Ptax', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['PtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['GrnNo', function () { return Serenity.StringEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['InspectionDate', function () { return Serenity.DateEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['AcctPurchase', function () { return Serenity.StringEditor; }],
            ['AcctLdisc', function () { return Serenity.StringEditor; }],
            ['AcctGtax', function () { return Serenity.StringEditor; }],
            ['CostAccepted', function () { return Serenity.DecimalEditor; }],
            ['CostRejected', function () { return Serenity.DecimalEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['ExtDescription', function () { return Serenity.StringEditor; }],
            ['AdjustRcvd', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseInspectionDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionDetailRow;
        (function (PurchaseInspectionDetailRow) {
            PurchaseInspectionDetailRow.idProperty = 'Recnum';
            PurchaseInspectionDetailRow.nameProperty = 'RefNo';
            PurchaseInspectionDetailRow.localTextPrefix = 'Purchasing.PurchaseInspectionDetail';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseInspectionDetailRow.Fields || (PurchaseInspectionDetailRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'EntryNo',
                'OrderNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'QtyReceived',
                'QtyPending',
                'QtyInspected',
                'QtyRejected',
                'Reorder',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'PriceAmt',
                'PtaxAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'GrnNo',
                'Loc',
                'InspectionDate',
                'Posted',
                'LogNo',
                'VendorNo',
                'AcctPurchase',
                'AcctLdisc',
                'AcctGtax',
                'CostAccepted',
                'CostRejected',
                'Remarks',
                'ExtDescription',
                'AdjustRcvd',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'RefNoRecnum',
                'RefNoInspectionDate',
                'RefNoEntryMethod',
                'RefNoPosted',
                'RefNoInspectedBy',
                'RefNoLoc',
                'RefNoGrnNo',
                'RefNoVendorNo',
                'RefNoVendorName',
                'RefNoReceivedDate',
                'RefNoCcy',
                'RefNoExchRate',
                'RefNoFullInspection',
                'RefNoPendingCount',
                'RefNoWithRejects',
                'RefNoHoldItems',
                'RefNoReOrderNo',
                'RefNoReOrderDate',
                'RefNoReDueDate',
                'RefNoReSchedDate',
                'RefNoReShipTo',
                'RefNoReShipVia',
                'RefNoReShipTerms',
                'RefNoReCount',
                'RefNoTotPriceAmt',
                'RefNoTotPtaxAmt',
                'RefNoTotExtPrice',
                'RefNoTotLdiscAmt',
                'RefNoTotAtaxAmt',
                'RefNoTotItemAmt',
                'RefNoTdiscPcent',
                'RefNoTotTdiscAmt',
                'RefNoNetTradeAmt',
                'RefNoLocPriceAmt',
                'RefNoLocPtaxAmt',
                'RefNoLocExtPrice',
                'RefNoLocLdiscAmt',
                'RefNoLocAtaxAmt',
                'RefNoLocItemAmt',
                'RefNoLocTdiscAmt',
                'RefNoCreatedDate',
                'RefNoCreatedBy',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoPostedDate',
                'RefNoPostedBy',
                'RefNoLogNo',
                'RefNoLastLogNo',
                'RefNoOwnerBranch',
                'RefNoSourceBranch',
                'RefNoSettleAt',
                'RefNoAnlys1',
                'RefNoAnlys2',
                'RefNoAnlys7',
                'RefNoAnlys8',
                'RefNoDoNo',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseInspectionDetailRow = Purchasing.PurchaseInspectionDetailRow || (Purchasing.PurchaseInspectionDetailRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionDetailService;
        (function (PurchaseInspectionDetailService) {
            PurchaseInspectionDetailService.baseUrl = 'Purchasing/PurchaseInspectionDetail';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseInspectionDetailService.Methods || (PurchaseInspectionDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseInspectionDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseInspectionDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseInspectionDetailService.baseUrl + '/' + x;
            });
        })(PurchaseInspectionDetailService = Purchasing.PurchaseInspectionDetailService || (Purchasing.PurchaseInspectionDetailService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionForm = /** @class */ (function (_super) {
            __extends(PurchaseInspectionForm, _super);
            function PurchaseInspectionForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseInspectionForm.formKey = 'Purchasing.PurchaseInspection';
            return PurchaseInspectionForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseInspectionForm = PurchaseInspectionForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['InspectionDate', function () { return Serenity.DateEditor; }],
            ['InspectedBy', function () { return Serenity.StringEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['GrnNo', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['ReceivedDate', function () { return Serenity.DateEditor; }],
            ['DetailList', function () { return Matrix.Sales.QuotationDetailEditor; }],
            ['ReOrderNo', function () { return Serenity.StringEditor; }],
            ['ReOrderDate', function () { return Serenity.DateEditor; }],
            ['ReDueDate', function () { return Serenity.DateEditor; }],
            ['ReSchedDate', function () { return Serenity.DateEditor; }],
            ['ReShipTo', function () { return Serenity.StringEditor; }],
            ['ReShipVia', function () { return Serenity.StringEditor; }],
            ['ReShipTerms', function () { return Serenity.StringEditor; }],
            ['Comments1', function () { return Serenity.StringEditor; }],
            ['Comments2', function () { return Serenity.StringEditor; }],
            ['Comments3', function () { return Serenity.StringEditor; }],
            ['Comments4', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseInspectionForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionInstructionForm = /** @class */ (function (_super) {
            __extends(PurchaseInspectionInstructionForm, _super);
            function PurchaseInspectionInstructionForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseInspectionInstructionForm.formKey = 'Purchasing.PurchaseInspectionInstruction';
            return PurchaseInspectionInstructionForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseInspectionInstructionForm = PurchaseInspectionInstructionForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['InspectCode', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseInspectionInstructionForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionInstructionRow;
        (function (PurchaseInspectionInstructionRow) {
            PurchaseInspectionInstructionRow.idProperty = 'Recnum';
            PurchaseInspectionInstructionRow.nameProperty = 'RefNo';
            PurchaseInspectionInstructionRow.localTextPrefix = 'Purchasing.PurchaseInspectionInstruction';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseInspectionInstructionRow.Fields || (PurchaseInspectionInstructionRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'LineNo',
                'EntryNo',
                'InspectCode',
                'Description',
                'Remarks',
                'Qty'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseInspectionInstructionRow = Purchasing.PurchaseInspectionInstructionRow || (Purchasing.PurchaseInspectionInstructionRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionInstructionService;
        (function (PurchaseInspectionInstructionService) {
            PurchaseInspectionInstructionService.baseUrl = 'Purchasing/PurchaseInspectionInstruction';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseInspectionInstructionService.Methods || (PurchaseInspectionInstructionService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseInspectionInstructionService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseInspectionInstructionService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseInspectionInstructionService.baseUrl + '/' + x;
            });
        })(PurchaseInspectionInstructionService = Purchasing.PurchaseInspectionInstructionService || (Purchasing.PurchaseInspectionInstructionService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionRow;
        (function (PurchaseInspectionRow) {
            PurchaseInspectionRow.idProperty = 'RefNo';
            PurchaseInspectionRow.nameProperty = 'RefNo';
            PurchaseInspectionRow.localTextPrefix = 'Purchasing.PurchaseInspection';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseInspectionRow.Fields || (PurchaseInspectionRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'InspectionDate',
                'EntryMethod',
                'Posted',
                'InspectedBy',
                'Loc',
                'GrnNo',
                'VendorNo',
                'VendorName',
                'ReceivedDate',
                'Ccy',
                'ExchRate',
                'FullInspection',
                'PendingCount',
                'WithRejects',
                'HoldItems',
                'ReOrderNo',
                'ReOrderDate',
                'ReDueDate',
                'ReSchedDate',
                'ReShipTo',
                'ReShipVia',
                'ReShipTerms',
                'ReCount',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocTdiscAmt',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LogNo',
                'LastLogNo',
                'OwnerBranch',
                'SourceBranch',
                'SettleAt',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'DoNo',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseInspectionRow = Purchasing.PurchaseInspectionRow || (Purchasing.PurchaseInspectionRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionService;
        (function (PurchaseInspectionService) {
            PurchaseInspectionService.baseUrl = 'Purchasing/PurchaseInspection';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseInspectionService.Methods || (PurchaseInspectionService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseInspectionService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseInspectionService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseInspectionService.baseUrl + '/' + x;
            });
        })(PurchaseInspectionService = Purchasing.PurchaseInspectionService || (Purchasing.PurchaseInspectionService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderDetailForm = /** @class */ (function (_super) {
            __extends(PurchaseOrderDetailForm, _super);
            function PurchaseOrderDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseOrderDetailForm.formKey = 'Purchasing.PurchaseOrderDetail';
            return PurchaseOrderDetailForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseOrderDetailForm = PurchaseOrderDetailForm;
        [['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['Closed', function () { return Serenity.StringEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['VendorItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['Ptax', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['PtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['FirstShipQty', function () { return Serenity.DecimalEditor; }],
            ['OtherShipQty', function () { return Serenity.DecimalEditor; }],
            ['LastShipNo', function () { return Serenity.DecimalEditor; }],
            ['WeightUom', function () { return Serenity.StringEditor; }],
            ['GrossWt', function () { return Serenity.DecimalEditor; }],
            ['NetWt', function () { return Serenity.DecimalEditor; }],
            ['DimensionUom', function () { return Serenity.StringEditor; }],
            ['Flength', function () { return Serenity.DecimalEditor; }],
            ['Width', function () { return Serenity.DecimalEditor; }],
            ['Height', function () { return Serenity.DecimalEditor; }],
            ['Volume', function () { return Serenity.DecimalEditor; }],
            ['PriceCpd', function () { return Serenity.DecimalEditor; }],
            ['PtaxCpd', function () { return Serenity.DecimalEditor; }],
            ['AtaxCpd', function () { return Serenity.DecimalEditor; }],
            ['DiscCpd', function () { return Serenity.DecimalEditor; }],
            ['GrossWtCpd', function () { return Serenity.DecimalEditor; }],
            ['NetWtCpd', function () { return Serenity.DecimalEditor; }],
            ['VolumeCpd', function () { return Serenity.DecimalEditor; }],
            ['InnerPkgType', function () { return Serenity.StringEditor; }],
            ['InnerQty', function () { return Serenity.DecimalEditor; }],
            ['InnerPkgs', function () { return Serenity.DecimalEditor; }],
            ['InnerExcsQty', function () { return Serenity.DecimalEditor; }],
            ['OuterPkgType', function () { return Serenity.StringEditor; }],
            ['OuterQty', function () { return Serenity.DecimalEditor; }],
            ['OuterPkgs', function () { return Serenity.DecimalEditor; }],
            ['OuterExcsQty', function () { return Serenity.DecimalEditor; }],
            ['QtyReceived', function () { return Serenity.DecimalEditor; }],
            ['SchedCount', function () { return Serenity.DecimalEditor; }],
            ['ExtDescription', function () { return Serenity.StringEditor; }],
            ['QtyPending', function () { return Serenity.DecimalEditor; }],
            ['JobNo', function () { return Serenity.StringEditor; }],
            ['OriginQty', function () { return Serenity.DecimalEditor; }],
            ['PutaxPcent', function () { return Serenity.DecimalEditor; }],
            ['PutaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotAllocatedQty', function () { return Serenity.DecimalEditor; }],
            ['IweightUom', function () { return Serenity.StringEditor; }],
            ['IgrossWt', function () { return Serenity.DecimalEditor; }],
            ['InetWt', function () { return Serenity.DecimalEditor; }],
            ['Ivolume', function () { return Serenity.DecimalEditor; }],
            ['TotGrossWt', function () { return Serenity.DecimalEditor; }],
            ['TotNetWt', function () { return Serenity.DecimalEditor; }],
            ['Dimension', function () { return Serenity.StringEditor; }],
            ['ReorderQty', function () { return Serenity.DecimalEditor; }],
            ['Remark', function () { return Serenity.StringEditor; }],
            ['SubconJob', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }],
            ['MrpRequiredQty', function () { return Serenity.DecimalEditor; }],
            ['OverReceiptPcent', function () { return Serenity.DecimalEditor; }],
            ['ZeroPrice', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseOrderDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderDetailRow;
        (function (PurchaseOrderDetailRow) {
            PurchaseOrderDetailRow.idProperty = 'Recnum';
            PurchaseOrderDetailRow.nameProperty = 'OrderNo';
            PurchaseOrderDetailRow.localTextPrefix = 'Purchasing.PurchaseOrderDetail';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseOrderDetailRow.Fields || (PurchaseOrderDetailRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'LineNo',
                'Posted',
                'Closed',
                'ItemNo',
                'VendorItemNo',
                'Description',
                'Uom',
                'LotSize',
                'Qty',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'PriceAmt',
                'PtaxAmt',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'FirstShipQty',
                'OtherShipQty',
                'LastShipNo',
                'WeightUom',
                'GrossWt',
                'NetWt',
                'DimensionUom',
                'Flength',
                'Width',
                'Height',
                'Volume',
                'PriceCpd',
                'PtaxCpd',
                'AtaxCpd',
                'DiscCpd',
                'GrossWtCpd',
                'NetWtCpd',
                'VolumeCpd',
                'InnerPkgType',
                'InnerQty',
                'InnerPkgs',
                'InnerExcsQty',
                'OuterPkgType',
                'OuterQty',
                'OuterPkgs',
                'OuterExcsQty',
                'QtyReceived',
                'SchedCount',
                'ExtDescription',
                'QtyPending',
                'JobNo',
                'OriginQty',
                'PutaxPcent',
                'PutaxAmt',
                'TotAllocatedQty',
                'IweightUom',
                'IgrossWt',
                'InetWt',
                'Ivolume',
                'TotGrossWt',
                'TotNetWt',
                'Dimension',
                'ReorderQty',
                'Remark',
                'SubconJob',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'MrpRequiredQty',
                'OverReceiptPcent',
                'ZeroPrice',
                'OrderNoRecnum',
                'OrderNoPosted',
                'OrderNoClosed',
                'OrderNoVendorNo',
                'OrderNoVendorName',
                'OrderNoVendorAddress',
                'OrderNoVendorAddress2',
                'OrderNoVendorAddress3',
                'OrderNoVendorAddress4',
                'OrderNoOrderDate',
                'OrderNoDueDate',
                'OrderNoSchedDate',
                'OrderNoShipTo',
                'OrderNoAddress',
                'OrderNoAddress2',
                'OrderNoAddress3',
                'OrderNoAddress4',
                'OrderNoMultiShip',
                'OrderNoComputeTax',
                'OrderNoShipVia',
                'OrderNoShipmentTerms',
                'OrderNoBuyer',
                'OrderNoPayTerms',
                'OrderNoAnlys1',
                'OrderNoAnlys2',
                'OrderNoCcy',
                'OrderNoExchRate',
                'OrderNoSourceType',
                'OrderNoSourceRefNo',
                'OrderNoLastSchedNo',
                'OrderNoLastLineNo',
                'OrderNoLastTextNo',
                'OrderNoTotPriceAmt',
                'OrderNoTotPtaxAmt',
                'OrderNoTotExtPrice',
                'OrderNoTotLdiscAmt',
                'OrderNoTotAtaxAmt',
                'OrderNoTotItemAmt',
                'OrderNoTdiscPcent',
                'OrderNoTotTdiscAmt',
                'OrderNoNetTradeAmt',
                'OrderNoTotChgsAmt',
                'OrderNoNetOrdrAmt',
                'OrderNoTotGtaxAmt',
                'OrderNoNetPayAmt',
                'OrderNoDpsPcent',
                'OrderNoTotDpsAmt',
                'OrderNoNetBalAmt',
                'OrderNoTotTdiscCpd',
                'OrderNoTotGtaxCpd',
                'OrderNoTotDpsCpd',
                'OrderNoDpsRefNo',
                'OrderNoDpsFundCode',
                'OrderNoDpsPayee',
                'OrderNoDpsChequeNo',
                'OrderNoDpsDate',
                'OrderNoCreatedDate',
                'OrderNoCreatedBy',
                'OrderNoRevisedDate',
                'OrderNoRevisedBy',
                'OrderNoPostedDate',
                'OrderNoPostedBy',
                'OrderNoLockType',
                'OrderNoLockRefNo',
                'OrderNoLastLogNo',
                'OrderNoOwnerBranch',
                'OrderNoSourceBranch',
                'OrderNoComments1',
                'OrderNoComments2',
                'OrderNoComments3',
                'OrderNoComments4',
                'OrderNoServerRevised',
                'OrderNoWebAmended',
                'OrderNoPubAccess',
                'OrderNoConfirmed',
                'OrderNoCheckCrlimit',
                'OrderNoCheckCrbal',
                'OrderNoJobNo',
                'OrderNoConsign',
                'OrderNoPortLoading',
                'OrderNoPortDischarge',
                'OrderNoVesselName',
                'OrderNoForwarder',
                'OrderNoLcNo',
                'OrderNoOriginCountry',
                'OrderNoPutaxType',
                'OrderNoGputaxPcent',
                'OrderNoTotGputaxAmt',
                'OrderNoTotLputaxAmt',
                'OrderNoAnlys7',
                'OrderNoAnlys8',
                'OrderNoLastLinkNo',
                'OrderNoFlag',
                'OrderNoHoldBy',
                'OrderNoSubconPo',
                'OrderNoMrpExclude',
                'OrderNoFromPr',
                'OrderNoAnlys9',
                'OrderNoAnlys10',
                'OrderNoAnlys11',
                'OrderNoAnlys12',
                'OrderNoAnlys13',
                'OrderNoAnlys14',
                'OrderNoRefCompanyCode',
                'OrderNoRefSalesOrderNo',
                'OrderNoTaxTerms',
                'OrderNoCustomTerms',
                'OrderNoLmeCost',
                'OrderNoLmeCcy',
                'OrderNoLmeExchRate',
                'OrderNoAddressCode',
                'OrderNoContactPerson',
                'OrderNoContactTitle',
                'OrderNoTelNo',
                'OrderNoFaxNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseOrderDetailRow = Purchasing.PurchaseOrderDetailRow || (Purchasing.PurchaseOrderDetailRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderDetailService;
        (function (PurchaseOrderDetailService) {
            PurchaseOrderDetailService.baseUrl = 'Purchasing/PurchaseOrderDetail';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseOrderDetailService.Methods || (PurchaseOrderDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseOrderDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseOrderDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseOrderDetailService.baseUrl + '/' + x;
            });
        })(PurchaseOrderDetailService = Purchasing.PurchaseOrderDetailService || (Purchasing.PurchaseOrderDetailService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderForm = /** @class */ (function (_super) {
            __extends(PurchaseOrderForm, _super);
            function PurchaseOrderForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseOrderForm.formKey = 'Purchasing.PurchaseOrder';
            return PurchaseOrderForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseOrderForm = PurchaseOrderForm;
        [['OrderNo', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['VendorAddress', function () { return Serenity.StringEditor; }],
            ['VendorAddress2', function () { return Serenity.StringEditor; }],
            ['VendorAddress3', function () { return Serenity.StringEditor; }],
            ['VendorAddress4', function () { return Serenity.StringEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['OrderDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['SchedDate', function () { return Serenity.DateEditor; }],
            ['Buyer', function () { return Serenity.StringEditor; }],
            ['PortLoading', function () { return Serenity.StringEditor; }],
            ['PortDischarge', function () { return Serenity.StringEditor; }],
            ['ShipVia', function () { return Serenity.StringEditor; }],
            ['ShipmentTerms', function () { return Serenity.StringEditor; }],
            ['Forwarder', function () { return Serenity.StringEditor; }],
            ['LcNo', function () { return Serenity.StringEditor; }],
            ['VesselName', function () { return Serenity.StringEditor; }],
            ['OriginCountry', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['MultiShip', function () { return Serenity.StringEditor; }],
            ['MrpExclude', function () { return Serenity.StringEditor; }],
            ['ItemDetailList', function () { return Purchasing.PurchaseOrderDetailEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TotGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsPcent', function () { return Serenity.DecimalEditor; }],
            ['TotDpsAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsFundCode', function () { return Serenity.StringEditor; }],
            ['DpsDate', function () { return Serenity.DateEditor; }],
            ['DpsChequeNo', function () { return Serenity.StringEditor; }],
            ['DpsRefNo', function () { return Serenity.StringEditor; }],
            ['DpsPayee', function () { return Serenity.TextAreaEditor; }],
            ['Comments1', function () { return Serenity.TextAreaEditor; }],
            ['Comments2', function () { return Serenity.TextAreaEditor; }],
            ['Comments3', function () { return Serenity.TextAreaEditor; }],
            ['Comments4', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseOrderForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderRow;
        (function (PurchaseOrderRow) {
            PurchaseOrderRow.idProperty = 'OrderNo';
            PurchaseOrderRow.nameProperty = 'OrderNo';
            PurchaseOrderRow.localTextPrefix = 'Purchasing.PurchaseOrder';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseOrderRow.Fields || (PurchaseOrderRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'Posted',
                'Closed',
                'VendorNo',
                'VendorName',
                'VendorAddress',
                'VendorAddress2',
                'VendorAddress3',
                'VendorAddress4',
                'OrderDate',
                'DueDate',
                'SchedDate',
                'ShipTo',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'MultiShip',
                'ComputeTax',
                'ShipVia',
                'ShipmentTerms',
                'Buyer',
                'PayTerms',
                'Anlys1',
                'Anlys2',
                'Ccy',
                'ExchRate',
                'SourceType',
                'SourceRefNo',
                'LastSchedNo',
                'LastLineNo',
                'LastTextNo',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'DpsPcent',
                'TotDpsAmt',
                'NetBalAmt',
                'TotTdiscCpd',
                'TotGtaxCpd',
                'TotDpsCpd',
                'DpsRefNo',
                'DpsFundCode',
                'DpsPayee',
                'DpsChequeNo',
                'DpsDate',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LockType',
                'LockRefNo',
                'LastLogNo',
                'OwnerBranch',
                'SourceBranch',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'ServerRevised',
                'WebAmended',
                'PubAccess',
                'Confirmed',
                'CheckCrlimit',
                'CheckCrbal',
                'JobNo',
                'Consign',
                'PortLoading',
                'PortDischarge',
                'VesselName',
                'Forwarder',
                'LcNo',
                'OriginCountry',
                'PutaxType',
                'GputaxPcent',
                'TotGputaxAmt',
                'TotLputaxAmt',
                'Anlys7',
                'Anlys8',
                'LastLinkNo',
                'Flag',
                'HoldBy',
                'SubconPo',
                'MrpExclude',
                'FromPr',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'RefCompanyCode',
                'RefSalesOrderNo',
                'TaxTerms',
                'CustomTerms',
                'LmeCost',
                'LmeCcy',
                'LmeExchRate',
                'AddressCode',
                'ContactPerson',
                'ContactTitle',
                'TelNo',
                'FaxNo',
                'ItemDetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseOrderRow = Purchasing.PurchaseOrderRow || (Purchasing.PurchaseOrderRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderService;
        (function (PurchaseOrderService) {
            PurchaseOrderService.baseUrl = 'Purchasing/PurchaseOrder';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseOrderService.Methods || (PurchaseOrderService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseOrderService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseOrderService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseOrderService.baseUrl + '/' + x;
            });
        })(PurchaseOrderService = Purchasing.PurchaseOrderService || (Purchasing.PurchaseOrderService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionDetailForm = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionDetailForm, _super);
            function PurchaseRequisitionDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseRequisitionDetailForm.formKey = 'Purchasing.PurchaseRequisitionDetail';
            return PurchaseRequisitionDetailForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseRequisitionDetailForm = PurchaseRequisitionDetailForm;
        [['ReqNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['ExtDescription', function () { return Serenity.StringEditor; }],
            ['QtyAllocated', function () { return Serenity.DecimalEditor; }],
            ['Remark', function () { return Serenity.StringEditor; }],
            ['QtyPreAllocated', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseRequisitionDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionDetailRow;
        (function (PurchaseRequisitionDetailRow) {
            PurchaseRequisitionDetailRow.idProperty = 'Recnum';
            PurchaseRequisitionDetailRow.nameProperty = 'ReqNo';
            PurchaseRequisitionDetailRow.localTextPrefix = 'Purchasing.PurchaseRequisitionDetail';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseRequisitionDetailRow.Fields || (PurchaseRequisitionDetailRow.Fields = {}));
            [
                'Recnum',
                'ReqNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'Qty',
                'ExtDescription',
                'QtyAllocated',
                'Remark',
                'QtyPreAllocated',
                'ReqNoRecnum',
                'ReqNoClosed',
                'ReqNoRequestBy',
                'ReqNoRequestDate',
                'ReqNoDueDate',
                'ReqNoRemindDate',
                'ReqNoReminded',
                'ReqNoRecipients',
                'ReqNoComments1',
                'ReqNoComments2',
                'ReqNoComments3',
                'ReqNoComments4',
                'ReqNoCreatedBy',
                'ReqNoCreatedDate',
                'ReqNoRevisedBy',
                'ReqNoRevisedDate',
                'ReqNoClosedBy',
                'ReqNoClosedDate',
                'ReqNoMessageId',
                'ReqNoStatus',
                'ReqNoApproved',
                'ReqNoApprovedBy',
                'ReqNoApprovedDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseRequisitionDetailRow = Purchasing.PurchaseRequisitionDetailRow || (Purchasing.PurchaseRequisitionDetailRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionDetailService;
        (function (PurchaseRequisitionDetailService) {
            PurchaseRequisitionDetailService.baseUrl = 'Purchasing/PurchaseRequisitionDetail';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseRequisitionDetailService.Methods || (PurchaseRequisitionDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseRequisitionDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseRequisitionDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseRequisitionDetailService.baseUrl + '/' + x;
            });
        })(PurchaseRequisitionDetailService = Purchasing.PurchaseRequisitionDetailService || (Purchasing.PurchaseRequisitionDetailService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionForm = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionForm, _super);
            function PurchaseRequisitionForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseRequisitionForm.formKey = 'Purchasing.PurchaseRequisition';
            return PurchaseRequisitionForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseRequisitionForm = PurchaseRequisitionForm;
        [['ReqNo', function () { return Serenity.StringEditor; }],
            ['RequestBy', function () { return Serenity.StringEditor; }],
            ['RequestDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['RemindDate', function () { return Serenity.DateEditor; }],
            ['Reminded', function () { return Serenity.StringEditor; }],
            ['Recipients', function () { return Serenity.StringEditor; }],
            ['DetailList', function () { return Purchasing.PurchaseRequisitionDetailEditor; }],
            ['Comments1', function () { return Serenity.TextAreaEditor; }],
            ['Comments2', function () { return Serenity.TextAreaEditor; }],
            ['Comments3', function () { return Serenity.TextAreaEditor; }],
            ['Comments4', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseRequisitionForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionRow;
        (function (PurchaseRequisitionRow) {
            PurchaseRequisitionRow.idProperty = 'ReqNo';
            PurchaseRequisitionRow.nameProperty = 'ReqNo';
            PurchaseRequisitionRow.localTextPrefix = 'Purchasing.PurchaseRequisition';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseRequisitionRow.Fields || (PurchaseRequisitionRow.Fields = {}));
            [
                'Recnum',
                'ReqNo',
                'Closed',
                'RequestBy',
                'RequestDate',
                'DueDate',
                'RemindDate',
                'Reminded',
                'Recipients',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'CreatedBy',
                'CreatedDate',
                'RevisedBy',
                'RevisedDate',
                'ClosedBy',
                'ClosedDate',
                'MessageId',
                'Status',
                'Approved',
                'ApprovedBy',
                'ApprovedDate'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseRequisitionRow = Purchasing.PurchaseRequisitionRow || (Purchasing.PurchaseRequisitionRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionService;
        (function (PurchaseRequisitionService) {
            PurchaseRequisitionService.baseUrl = 'Purchasing/PurchaseRequisition';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseRequisitionService.Methods || (PurchaseRequisitionService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseRequisitionService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseRequisitionService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseRequisitionService.baseUrl + '/' + x;
            });
        })(PurchaseRequisitionService = Purchasing.PurchaseRequisitionService || (Purchasing.PurchaseRequisitionService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnChargeForm = /** @class */ (function (_super) {
            __extends(PurchaseReturnChargeForm, _super);
            function PurchaseReturnChargeForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseReturnChargeForm.formKey = 'Purchasing.PurchaseReturnCharge';
            return PurchaseReturnChargeForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseReturnChargeForm = PurchaseReturnChargeForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['SeqNo', function () { return Serenity.DecimalEditor; }],
            ['ChargeType', function () { return Serenity.StringEditor; }],
            ['Particulars', function () { return Serenity.StringEditor; }],
            ['BalAmt', function () { return Serenity.DecimalEditor; }],
            ['ReturnAmt', function () { return Serenity.DecimalEditor; }],
            ['LocReturnAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctPurchase', function () { return Serenity.StringEditor; }],
            ['Deduction', function () { return Serenity.StringEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys7', function () { return Serenity.StringEditor; }],
            ['Anlys8', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['Anlys13', function () { return Serenity.StringEditor; }],
            ['Anlys14', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseReturnChargeForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnChargeRow;
        (function (PurchaseReturnChargeRow) {
            PurchaseReturnChargeRow.idProperty = 'Recnum';
            PurchaseReturnChargeRow.nameProperty = 'RefNo';
            PurchaseReturnChargeRow.localTextPrefix = 'Purchasing.PurchaseReturnCharge';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseReturnChargeRow.Fields || (PurchaseReturnChargeRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'EntryNo',
                'OrderNo',
                'SeqNo',
                'ChargeType',
                'Particulars',
                'BalAmt',
                'ReturnAmt',
                'LocReturnAmt',
                'AcctPurchase',
                'Deduction',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'RefNoRecnum',
                'RefNoEntryMethod',
                'RefNoPosted',
                'RefNoTranDate',
                'RefNoGrnNo',
                'RefNoVendorNo',
                'RefNoVendorName',
                'RefNoDoNo',
                'RefNoInvoiceNo',
                'RefNoHoldItems',
                'RefNoLoc',
                'RefNoCcy',
                'RefNoExchRate',
                'RefNoTotPriceAmt',
                'RefNoTotPtaxAmt',
                'RefNoTotExtPrice',
                'RefNoTotLdiscAmt',
                'RefNoTotAtaxAmt',
                'RefNoTotItemAmt',
                'RefNoTotRefundAmt',
                'RefNoTotVariaAmt',
                'RefNoTdiscPcent',
                'RefNoTotTdiscAmt',
                'RefNoNetTradeAmt',
                'RefNoTotChgsAmt',
                'RefNoNetOrdrAmt',
                'RefNoTotGtaxAmt',
                'RefNoNetPayAmt',
                'RefNoTotTdiscCpd',
                'RefNoLocPriceAmt',
                'RefNoLocPtaxAmt',
                'RefNoLocExtPrice',
                'RefNoLocLdiscAmt',
                'RefNoLocAtaxAmt',
                'RefNoLocItemAmt',
                'RefNoLocRefundAmt',
                'RefNoLocVariaAmt',
                'RefNoLocTdiscAmt',
                'RefNoLocChgsAmt',
                'RefNoLocGtaxAmt',
                'RefNoLocPayAmt',
                'RefNoAcctVendor',
                'RefNoAcctTdisc',
                'RefNoAcctGtax',
                'RefNoCreatedDate',
                'RefNoCreatedBy',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoPostedDate',
                'RefNoPostedBy',
                'RefNoLogNo',
                'RefNoLastLogNo',
                'RefNoOwnerBranch',
                'RefNoSourceBranch',
                'RefNoSettleAt',
                'RefNoReason',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14',
                'RefNoAnlys15',
                'RefNoAnlys16',
                'RefNoAnlys17',
                'RefNoAnlys18'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseReturnChargeRow = Purchasing.PurchaseReturnChargeRow || (Purchasing.PurchaseReturnChargeRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnChargeService;
        (function (PurchaseReturnChargeService) {
            PurchaseReturnChargeService.baseUrl = 'Purchasing/PurchaseReturnCharge';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseReturnChargeService.Methods || (PurchaseReturnChargeService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseReturnChargeService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseReturnChargeService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseReturnChargeService.baseUrl + '/' + x;
            });
        })(PurchaseReturnChargeService = Purchasing.PurchaseReturnChargeService || (Purchasing.PurchaseReturnChargeService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnDetailForm = /** @class */ (function (_super) {
            __extends(PurchaseReturnDetailForm, _super);
            function PurchaseReturnDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseReturnDetailForm.formKey = 'Purchasing.PurchaseReturnDetail';
            return PurchaseReturnDetailForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseReturnDetailForm = PurchaseReturnDetailForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['QtyBalance', function () { return Serenity.DecimalEditor; }],
            ['QtyReturned', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['Ptax', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['RefundAmt', function () { return Serenity.DecimalEditor; }],
            ['VariaAmt', function () { return Serenity.DecimalEditor; }],
            ['LdiscRate', function () { return Serenity.DecimalEditor; }],
            ['AtaxRate', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['PtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LocRefundAmt', function () { return Serenity.DecimalEditor; }],
            ['LocVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctPurchase', function () { return Serenity.StringEditor; }],
            ['AcctLdisc', function () { return Serenity.StringEditor; }],
            ['AcctPtax', function () { return Serenity.StringEditor; }],
            ['AcctAtax', function () { return Serenity.StringEditor; }],
            ['AcctVariance', function () { return Serenity.StringEditor; }],
            ['CostReturned', function () { return Serenity.DecimalEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Reorder', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }],
            ['InspectionRefNo', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseReturnDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnDetailRow;
        (function (PurchaseReturnDetailRow) {
            PurchaseReturnDetailRow.idProperty = 'Recnum';
            PurchaseReturnDetailRow.nameProperty = 'RefNo';
            PurchaseReturnDetailRow.localTextPrefix = 'Purchasing.PurchaseReturnDetail';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseReturnDetailRow.Fields || (PurchaseReturnDetailRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'EntryNo',
                'OrderNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'QtyBalance',
                'QtyReturned',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'RefundAmt',
                'VariaAmt',
                'LdiscRate',
                'AtaxRate',
                'PriceAmt',
                'PtaxAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocRefundAmt',
                'LocVariaAmt',
                'AcctPurchase',
                'AcctLdisc',
                'AcctPtax',
                'AcctAtax',
                'AcctVariance',
                'CostReturned',
                'Loc',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'Reorder',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'InspectionRefNo',
                'Remarks',
                'RefNoRecnum',
                'RefNoEntryMethod',
                'RefNoPosted',
                'RefNoTranDate',
                'RefNoGrnNo',
                'RefNoVendorNo',
                'RefNoVendorName',
                'RefNoDoNo',
                'RefNoInvoiceNo',
                'RefNoHoldItems',
                'RefNoLoc',
                'RefNoCcy',
                'RefNoExchRate',
                'RefNoTotPriceAmt',
                'RefNoTotPtaxAmt',
                'RefNoTotExtPrice',
                'RefNoTotLdiscAmt',
                'RefNoTotAtaxAmt',
                'RefNoTotItemAmt',
                'RefNoTotRefundAmt',
                'RefNoTotVariaAmt',
                'RefNoTdiscPcent',
                'RefNoTotTdiscAmt',
                'RefNoNetTradeAmt',
                'RefNoTotChgsAmt',
                'RefNoNetOrdrAmt',
                'RefNoTotGtaxAmt',
                'RefNoNetPayAmt',
                'RefNoTotTdiscCpd',
                'RefNoLocPriceAmt',
                'RefNoLocPtaxAmt',
                'RefNoLocExtPrice',
                'RefNoLocLdiscAmt',
                'RefNoLocAtaxAmt',
                'RefNoLocItemAmt',
                'RefNoLocRefundAmt',
                'RefNoLocVariaAmt',
                'RefNoLocTdiscAmt',
                'RefNoLocChgsAmt',
                'RefNoLocGtaxAmt',
                'RefNoLocPayAmt',
                'RefNoAcctVendor',
                'RefNoAcctTdisc',
                'RefNoAcctGtax',
                'RefNoCreatedDate',
                'RefNoCreatedBy',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoPostedDate',
                'RefNoPostedBy',
                'RefNoLogNo',
                'RefNoLastLogNo',
                'RefNoOwnerBranch',
                'RefNoSourceBranch',
                'RefNoSettleAt',
                'RefNoReason',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14',
                'RefNoAnlys15',
                'RefNoAnlys16',
                'RefNoAnlys17',
                'RefNoAnlys18'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseReturnDetailRow = Purchasing.PurchaseReturnDetailRow || (Purchasing.PurchaseReturnDetailRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnDetailService;
        (function (PurchaseReturnDetailService) {
            PurchaseReturnDetailService.baseUrl = 'Purchasing/PurchaseReturnDetail';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseReturnDetailService.Methods || (PurchaseReturnDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseReturnDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseReturnDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseReturnDetailService.baseUrl + '/' + x;
            });
        })(PurchaseReturnDetailService = Purchasing.PurchaseReturnDetailService || (Purchasing.PurchaseReturnDetailService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnForm = /** @class */ (function (_super) {
            __extends(PurchaseReturnForm, _super);
            function PurchaseReturnForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            PurchaseReturnForm.formKey = 'Purchasing.PurchaseReturn';
            return PurchaseReturnForm;
        }(Serenity.PrefixedContext));
        Purchasing.PurchaseReturnForm = PurchaseReturnForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['EntryMethod', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['TranDate', function () { return Serenity.DateEditor; }],
            ['GrnNo', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['DoNo', function () { return Serenity.StringEditor; }],
            ['InvoiceNo', function () { return Serenity.StringEditor; }],
            ['HoldItems', function () { return Serenity.StringEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['TotPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotExtPrice', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TotAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotRefundAmt', function () { return Serenity.DecimalEditor; }],
            ['TotVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetOrdrAmt', function () { return Serenity.DecimalEditor; }],
            ['TotGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscCpd', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LocRefundAmt', function () { return Serenity.DecimalEditor; }],
            ['LocVariaAmt', function () { return Serenity.DecimalEditor; }],
            ['LocTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['LocGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPayAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctVendor', function () { return Serenity.StringEditor; }],
            ['AcctTdisc', function () { return Serenity.StringEditor; }],
            ['AcctGtax', function () { return Serenity.StringEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['PostedDate', function () { return Serenity.DateEditor; }],
            ['PostedBy', function () { return Serenity.StringEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['LastLogNo', function () { return Serenity.DecimalEditor; }],
            ['OwnerBranch', function () { return Serenity.StringEditor; }],
            ['SourceBranch', function () { return Serenity.StringEditor; }],
            ['SettleAt', function () { return Serenity.StringEditor; }],
            ['Reason', function () { return Serenity.StringEditor; }],
            ['Anlys9', function () { return Serenity.StringEditor; }],
            ['Anlys10', function () { return Serenity.StringEditor; }],
            ['Anlys11', function () { return Serenity.StringEditor; }],
            ['Anlys12', function () { return Serenity.StringEditor; }],
            ['Anlys13', function () { return Serenity.StringEditor; }],
            ['Anlys14', function () { return Serenity.StringEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(PurchaseReturnForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnRow;
        (function (PurchaseReturnRow) {
            PurchaseReturnRow.idProperty = 'Recnum';
            PurchaseReturnRow.nameProperty = 'RefNo';
            PurchaseReturnRow.localTextPrefix = 'Purchasing.PurchaseReturn';
            var Fields;
            (function (Fields) {
            })(Fields = PurchaseReturnRow.Fields || (PurchaseReturnRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'EntryMethod',
                'Posted',
                'TranDate',
                'GrnNo',
                'VendorNo',
                'VendorName',
                'DoNo',
                'InvoiceNo',
                'HoldItems',
                'Loc',
                'Ccy',
                'ExchRate',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TotRefundAmt',
                'TotVariaAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'TotTdiscCpd',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocRefundAmt',
                'LocVariaAmt',
                'LocTdiscAmt',
                'LocChgsAmt',
                'LocGtaxAmt',
                'LocPayAmt',
                'AcctVendor',
                'AcctTdisc',
                'AcctGtax',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LogNo',
                'LastLogNo',
                'OwnerBranch',
                'SourceBranch',
                'SettleAt',
                'Reason',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18'
            ].forEach(function (x) { return Fields[x] = x; });
        })(PurchaseReturnRow = Purchasing.PurchaseReturnRow || (Purchasing.PurchaseReturnRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnService;
        (function (PurchaseReturnService) {
            PurchaseReturnService.baseUrl = 'Purchasing/PurchaseReturn';
            var Methods;
            (function (Methods) {
            })(Methods = PurchaseReturnService.Methods || (PurchaseReturnService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                PurchaseReturnService[x] = function (r, s, o) {
                    return Q.serviceRequest(PurchaseReturnService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = PurchaseReturnService.baseUrl + '/' + x;
            });
        })(PurchaseReturnService = Purchasing.PurchaseReturnService || (Purchasing.PurchaseReturnService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationForm = /** @class */ (function (_super) {
            __extends(VendorQuotationForm, _super);
            function VendorQuotationForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VendorQuotationForm.formKey = 'Purchasing.VendorQuotation';
            return VendorQuotationForm;
        }(Serenity.PrefixedContext));
        Purchasing.VendorQuotationForm = VendorQuotationForm;
        [['OrderNo', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }],
            ['VendorRefNo', function () { return Serenity.StringEditor; }],
            ['VendorAddress', function () { return Serenity.StringEditor; }],
            ['VendorAddress2', function () { return Serenity.StringEditor; }],
            ['VendorAddress3', function () { return Serenity.StringEditor; }],
            ['VendorAddress4', function () { return Serenity.StringEditor; }],
            ['OrderDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['SchedDate', function () { return Serenity.DateEditor; }],
            ['ValidUntil', function () { return Serenity.DateEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['Buyer', function () { return Serenity.StringEditor; }],
            ['MultiShip', function () { return Serenity.StringEditor; }],
            ['PortLoading', function () { return Serenity.StringEditor; }],
            ['PortDischarge', function () { return Serenity.StringEditor; }],
            ['ShipVia', function () { return Serenity.StringEditor; }],
            ['ShipmentTerms', function () { return Serenity.StringEditor; }],
            ['VesselName', function () { return Serenity.StringEditor; }],
            ['Forwarder', function () { return Serenity.StringEditor; }],
            ['LcNo', function () { return Serenity.StringEditor; }],
            ['OriginCountry', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['PutaxType', function () { return Serenity.StringEditor; }],
            ['ComputeTax', function () { return Serenity.StringEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['Comments1', function () { return Serenity.TextAreaEditor; }],
            ['Comments2', function () { return Serenity.TextAreaEditor; }],
            ['Comments3', function () { return Serenity.TextAreaEditor; }],
            ['Comments4', function () { return Serenity.TextAreaEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VendorQuotationForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationItemAdditionalInfoForm = /** @class */ (function (_super) {
            __extends(VendorQuotationItemAdditionalInfoForm, _super);
            function VendorQuotationItemAdditionalInfoForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VendorQuotationItemAdditionalInfoForm.formKey = 'Purchasing.VendorQuotationItemAdditionalInfo';
            return VendorQuotationItemAdditionalInfoForm;
        }(Serenity.PrefixedContext));
        Purchasing.VendorQuotationItemAdditionalInfoForm = VendorQuotationItemAdditionalInfoForm;
        [['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.IntegerEditor; }],
            ['EntryNo', function () { return Serenity.IntegerEditor; }],
            ['Caption', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['BitmapPath', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VendorQuotationItemAdditionalInfoForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationItemAdditionalInfoRow;
        (function (VendorQuotationItemAdditionalInfoRow) {
            VendorQuotationItemAdditionalInfoRow.idProperty = 'Recnum';
            VendorQuotationItemAdditionalInfoRow.nameProperty = 'OrderNo';
            VendorQuotationItemAdditionalInfoRow.localTextPrefix = 'Purchasing.VendorQuotationItemAdditionalInfo';
            var Fields;
            (function (Fields) {
            })(Fields = VendorQuotationItemAdditionalInfoRow.Fields || (VendorQuotationItemAdditionalInfoRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'LineNo',
                'EntryNo',
                'Caption',
                'Description',
                'BitmapPath'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VendorQuotationItemAdditionalInfoRow = Purchasing.VendorQuotationItemAdditionalInfoRow || (Purchasing.VendorQuotationItemAdditionalInfoRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationItemAdditionalInfoService;
        (function (VendorQuotationItemAdditionalInfoService) {
            VendorQuotationItemAdditionalInfoService.baseUrl = 'Purchasing/VendorQuotationItemAdditionalInfo';
            var Methods;
            (function (Methods) {
            })(Methods = VendorQuotationItemAdditionalInfoService.Methods || (VendorQuotationItemAdditionalInfoService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorQuotationItemAdditionalInfoService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorQuotationItemAdditionalInfoService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VendorQuotationItemAdditionalInfoService.baseUrl + '/' + x;
            });
        })(VendorQuotationItemAdditionalInfoService = Purchasing.VendorQuotationItemAdditionalInfoService || (Purchasing.VendorQuotationItemAdditionalInfoService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationRemarkForm = /** @class */ (function (_super) {
            __extends(VendorQuotationRemarkForm, _super);
            function VendorQuotationRemarkForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VendorQuotationRemarkForm.formKey = 'Purchasing.VendorQuotationRemark';
            return VendorQuotationRemarkForm;
        }(Serenity.PrefixedContext));
        Purchasing.VendorQuotationRemarkForm = VendorQuotationRemarkForm;
        [['OrderNo', function () { return Serenity.StringEditor; }],
            ['TextNo', function () { return Serenity.IntegerEditor; }],
            ['TextType', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Remarks', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VendorQuotationRemarkForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationRemarkRow;
        (function (VendorQuotationRemarkRow) {
            VendorQuotationRemarkRow.idProperty = 'Recnum';
            VendorQuotationRemarkRow.nameProperty = 'OrderNo';
            VendorQuotationRemarkRow.localTextPrefix = 'Purchasing.VendorQuotationRemark';
            var Fields;
            (function (Fields) {
            })(Fields = VendorQuotationRemarkRow.Fields || (VendorQuotationRemarkRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'TextNo',
                'TextType',
                'Description',
                'Remarks',
                'OrderNoRecnum',
                'OrderNoClosed',
                'OrderNoVendorNo',
                'OrderNoVendorName',
                'OrderNoVendorAddress',
                'OrderNoVendorAddress2',
                'OrderNoVendorAddress3',
                'OrderNoVendorAddress4',
                'OrderNoOrderDate',
                'OrderNoDueDate',
                'OrderNoSchedDate',
                'OrderNoShipTo',
                'OrderNoAddress',
                'OrderNoAddress2',
                'OrderNoAddress3',
                'OrderNoAddress4',
                'OrderNoMultiShip',
                'OrderNoComputeTax',
                'OrderNoShipVia',
                'OrderNoShipmentTerms',
                'OrderNoBuyer',
                'OrderNoPayTerms',
                'OrderNoAnlys1',
                'OrderNoAnlys2',
                'OrderNoCcy',
                'OrderNoExchRate',
                'OrderNoSourceType',
                'OrderNoSourceRefNo',
                'OrderNoLastSchedNo',
                'OrderNoLastLineNo',
                'OrderNoLastTextNo',
                'OrderNoTotPriceAmt',
                'OrderNoTotPtaxAmt',
                'OrderNoTotExtPrice',
                'OrderNoTotLdiscAmt',
                'OrderNoTotAtaxAmt',
                'OrderNoTotItemAmt',
                'OrderNoTdiscPcent',
                'OrderNoTotTdiscAmt',
                'OrderNoNetTradeAmt',
                'OrderNoTotChgsAmt',
                'OrderNoNetOrdrAmt',
                'OrderNoTotGtaxAmt',
                'OrderNoNetPayAmt',
                'OrderNoDpsPcent',
                'OrderNoTotDpsAmt',
                'OrderNoNetBalAmt',
                'OrderNoTotTdiscCpd',
                'OrderNoTotGtaxCpd',
                'OrderNoTotDpsCpd',
                'OrderNoCreatedDate',
                'OrderNoCreatedBy',
                'OrderNoRevisedDate',
                'OrderNoRevisedBy',
                'OrderNoPostedDate',
                'OrderNoPostedBy',
                'OrderNoLockRefNo',
                'OrderNoLastLogNo',
                'OrderNoOwnerBranch',
                'OrderNoSourceBranch',
                'OrderNoComments1',
                'OrderNoComments2',
                'OrderNoComments3',
                'OrderNoComments4',
                'OrderNoPortLoading',
                'OrderNoPortDischarge',
                'OrderNoVesselName',
                'OrderNoForwarder',
                'OrderNoLcNo',
                'OrderNoOriginCountry',
                'OrderNoPutaxType',
                'OrderNoGputaxPcent',
                'OrderNoTotGputaxAmt',
                'OrderNoTotLputaxAmt',
                'OrderNoAnlys7',
                'OrderNoAnlys8',
                'OrderNoVendorRefNo',
                'OrderNoValidUntil',
                'OrderNoClosedBy',
                'OrderNoClosedDate',
                'OrderNoAnlys9',
                'OrderNoAnlys10',
                'OrderNoAnlys11',
                'OrderNoAnlys12',
                'OrderNoAnlys13',
                'OrderNoAnlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VendorQuotationRemarkRow = Purchasing.VendorQuotationRemarkRow || (Purchasing.VendorQuotationRemarkRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationRemarkService;
        (function (VendorQuotationRemarkService) {
            VendorQuotationRemarkService.baseUrl = 'Purchasing/VendorQuotationRemark';
            var Methods;
            (function (Methods) {
            })(Methods = VendorQuotationRemarkService.Methods || (VendorQuotationRemarkService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorQuotationRemarkService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorQuotationRemarkService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VendorQuotationRemarkService.baseUrl + '/' + x;
            });
        })(VendorQuotationRemarkService = Purchasing.VendorQuotationRemarkService || (Purchasing.VendorQuotationRemarkService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationRow;
        (function (VendorQuotationRow) {
            VendorQuotationRow.idProperty = 'Recnum';
            VendorQuotationRow.nameProperty = 'OrderNo';
            VendorQuotationRow.localTextPrefix = 'Purchasing.VendorQuotation';
            var Fields;
            (function (Fields) {
            })(Fields = VendorQuotationRow.Fields || (VendorQuotationRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'Closed',
                'VendorNo',
                'VendorName',
                'VendorAddress',
                'VendorAddress2',
                'VendorAddress3',
                'VendorAddress4',
                'OrderDate',
                'DueDate',
                'SchedDate',
                'ShipTo',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'MultiShip',
                'ComputeTax',
                'ShipVia',
                'ShipmentTerms',
                'Buyer',
                'PayTerms',
                'Anlys1',
                'Anlys2',
                'Ccy',
                'ExchRate',
                'SourceType',
                'SourceRefNo',
                'LastSchedNo',
                'LastLineNo',
                'LastTextNo',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'DpsPcent',
                'TotDpsAmt',
                'NetBalAmt',
                'TotTdiscCpd',
                'TotGtaxCpd',
                'TotDpsCpd',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LockRefNo',
                'LastLogNo',
                'OwnerBranch',
                'SourceBranch',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'PortLoading',
                'PortDischarge',
                'VesselName',
                'Forwarder',
                'LcNo',
                'OriginCountry',
                'PutaxType',
                'GputaxPcent',
                'TotGputaxAmt',
                'TotLputaxAmt',
                'Anlys7',
                'Anlys8',
                'VendorRefNo',
                'ValidUntil',
                'ClosedBy',
                'ClosedDate',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VendorQuotationRow = Purchasing.VendorQuotationRow || (Purchasing.VendorQuotationRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationScheduleForm = /** @class */ (function (_super) {
            __extends(VendorQuotationScheduleForm, _super);
            function VendorQuotationScheduleForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VendorQuotationScheduleForm.formKey = 'Purchasing.VendorQuotationSchedule';
            return VendorQuotationScheduleForm;
        }(Serenity.PrefixedContext));
        Purchasing.VendorQuotationScheduleForm = VendorQuotationScheduleForm;
        [['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.IntegerEditor; }],
            ['ShipNo', function () { return Serenity.IntegerEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['SchedDate', function () { return Serenity.DateEditor; }],
            ['ShipVia', function () { return Serenity.StringEditor; }],
            ['ShipmentTerms', function () { return Serenity.StringEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['Buyer', function () { return Serenity.StringEditor; }],
            ['VendorName', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(VendorQuotationScheduleForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationScheduleRow;
        (function (VendorQuotationScheduleRow) {
            VendorQuotationScheduleRow.idProperty = 'Recnum';
            VendorQuotationScheduleRow.nameProperty = 'OrderNo';
            VendorQuotationScheduleRow.localTextPrefix = 'Purchasing.VendorQuotationSchedule';
            var Fields;
            (function (Fields) {
            })(Fields = VendorQuotationScheduleRow.Fields || (VendorQuotationScheduleRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'LineNo',
                'ShipNo',
                'DueDate',
                'SchedDate',
                'ShipVia',
                'ShipmentTerms',
                'Qty',
                'ItemNo',
                'ShipTo',
                'Uom',
                'LotSize',
                'VendorNo',
                'Buyer',
                'VendorName'
            ].forEach(function (x) { return Fields[x] = x; });
        })(VendorQuotationScheduleRow = Purchasing.VendorQuotationScheduleRow || (Purchasing.VendorQuotationScheduleRow = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationScheduleService;
        (function (VendorQuotationScheduleService) {
            VendorQuotationScheduleService.baseUrl = 'Purchasing/VendorQuotationSchedule';
            var Methods;
            (function (Methods) {
            })(Methods = VendorQuotationScheduleService.Methods || (VendorQuotationScheduleService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorQuotationScheduleService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorQuotationScheduleService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VendorQuotationScheduleService.baseUrl + '/' + x;
            });
        })(VendorQuotationScheduleService = Purchasing.VendorQuotationScheduleService || (Purchasing.VendorQuotationScheduleService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationService;
        (function (VendorQuotationService) {
            VendorQuotationService.baseUrl = 'Purchasing/VendorQuotation';
            var Methods;
            (function (Methods) {
            })(Methods = VendorQuotationService.Methods || (VendorQuotationService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                VendorQuotationService[x] = function (r, s, o) {
                    return Q.serviceRequest(VendorQuotationService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = VendorQuotationService.baseUrl + '/' + x;
            });
        })(VendorQuotationService = Purchasing.VendorQuotationService || (Purchasing.VendorQuotationService = {}));
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationDetailForm = /** @class */ (function (_super) {
            __extends(QuotationDetailForm, _super);
            function QuotationDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            QuotationDetailForm.formKey = 'Sales.QuotationDetail';
            return QuotationDetailForm;
        }(Serenity.PrefixedContext));
        Sales.QuotationDetailForm = QuotationDetailForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['Ptax', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['PtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceCpd', function () { return Serenity.DecimalEditor; }],
            ['PtaxCpd', function () { return Serenity.DecimalEditor; }],
            ['CreatedDate', function () { return Serenity.DateEditor; }],
            ['CreatedBy', function () { return Serenity.StringEditor; }],
            ['RevisedDate', function () { return Serenity.DateEditor; }],
            ['RevisedBy', function () { return Serenity.StringEditor; }],
            ['Configurable', function () { return Serenity.StringEditor; }],
            ['CustItemNo', function () { return Serenity.StringEditor; }],
            ['SpecNo', function () { return Serenity.StringEditor; }],
            ['BomNo', function () { return Serenity.StringEditor; }],
            ['StdAssort', function () { return Serenity.StringEditor; }],
            ['ExtDescription', function () { return Serenity.StringEditor; }],
            ['SltaxPcent', function () { return Serenity.DecimalEditor; }],
            ['SltaxAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['MarkupPcent', function () { return Serenity.DecimalEditor; }],
            ['Markup', function () { return Serenity.DecimalEditor; }],
            ['MoldBomNo', function () { return Serenity.StringEditor; }],
            ['MoldFormulaCode', function () { return Serenity.StringEditor; }],
            ['MoldExpectedQty', function () { return Serenity.DecimalEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(QuotationDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationDetailRow;
        (function (QuotationDetailRow) {
            QuotationDetailRow.idProperty = 'Recnum';
            QuotationDetailRow.nameProperty = 'RefNo';
            QuotationDetailRow.localTextPrefix = 'Sales.QuotationDetail';
            var Fields;
            (function (Fields) {
            })(Fields = QuotationDetailRow.Fields || (QuotationDetailRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'Qty',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'PriceAmt',
                'PtaxAmt',
                'PriceCpd',
                'PtaxCpd',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'Configurable',
                'CustItemNo',
                'SpecNo',
                'BomNo',
                'StdAssort',
                'ExtDescription',
                'SltaxPcent',
                'SltaxAmt',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'MarkupPcent',
                'Markup',
                'MoldBomNo',
                'MoldFormulaCode',
                'MoldExpectedQty',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'RefNoRecnum',
                'RefNoIssueDate',
                'RefNoValidUntil',
                'RefNoClosed',
                'RefNoCustomerNo',
                'RefNoCustomerName',
                'RefNoAddress',
                'RefNoAddress2',
                'RefNoAddress3',
                'RefNoAddress4',
                'RefNoAttention',
                'RefNoShipVia',
                'RefNoShipmentTerms',
                'RefNoBaseLoc',
                'RefNoSalesman',
                'RefNoPayTerms',
                'RefNoPriceCode',
                'RefNoAnlys1',
                'RefNoAnlys2',
                'RefNoCcy',
                'RefNoExchRate',
                'RefNoComputeTax',
                'RefNoLastLineNo',
                'RefNoLastMailNo',
                'RefNoLastTextNo',
                'RefNoTotPriceAmt',
                'RefNoTotPtaxAmt',
                'RefNoTotExtPrice',
                'RefNoTotLdiscAmt',
                'RefNoTotAtaxAmt',
                'RefNoTotItemAmt',
                'RefNoTdiscPcent',
                'RefNoTotTdiscAmt',
                'RefNoNetTradeAmt',
                'RefNoTotChgsAmt',
                'RefNoNetOrdrAmt',
                'RefNoTotGtaxAmt',
                'RefNoNetPayAmt',
                'RefNoDpsPcent',
                'RefNoTotDpsAmt',
                'RefNoCreatedDate',
                'RefNoCreatedBy',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoTotTdiscCpd',
                'RefNoTotGtaxCpd',
                'RefNoTotDpsCpd',
                'RefNoClosedDate',
                'RefNoClosedBy',
                'RefNoComments1',
                'RefNoComments2',
                'RefNoComments3',
                'RefNoComments4',
                'RefNoWebPublished',
                'RefNoConfirmed',
                'RefNoRfqNo',
                'RefNoWebUserName',
                'RefNoShipTo',
                'RefNoTelNo',
                'RefNoFaxNo',
                'RefNoPortLoading',
                'RefNoPortDischarge',
                'RefNoOriginCountry',
                'RefNoSltaxType',
                'RefNoGsltaxPcent',
                'RefNoTotGsltaxAmt',
                'RefNoTotLsltaxAmt',
                'RefNoAnlys7',
                'RefNoAnlys8',
                'RefNoMarkupDecimal',
                'RefNoPkgUnit',
                'RefNoWeightUnit',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14',
                'RefNoItemCode',
                'RefNoTransport'
            ].forEach(function (x) { return Fields[x] = x; });
        })(QuotationDetailRow = Sales.QuotationDetailRow || (Sales.QuotationDetailRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationDetailService;
        (function (QuotationDetailService) {
            QuotationDetailService.baseUrl = 'Sales/QuotationDetail';
            var Methods;
            (function (Methods) {
            })(Methods = QuotationDetailService.Methods || (QuotationDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                QuotationDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(QuotationDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = QuotationDetailService.baseUrl + '/' + x;
            });
        })(QuotationDetailService = Sales.QuotationDetailService || (Sales.QuotationDetailService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationForm = /** @class */ (function (_super) {
            __extends(QuotationForm, _super);
            function QuotationForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            QuotationForm.formKey = 'Sales.Quotation';
            return QuotationForm;
        }(Serenity.PrefixedContext));
        Sales.QuotationForm = QuotationForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['IssueDate', function () { return Serenity.DateEditor; }],
            ['ValidUntil', function () { return Serenity.DateEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['PortLoading', function () { return Serenity.StringEditor; }],
            ['PortDischarge', function () { return Serenity.StringEditor; }],
            ['ShipVia', function () { return Serenity.StringEditor; }],
            ['ShipmentTerms', function () { return Serenity.StringEditor; }],
            ['OriginCountry', function () { return Serenity.StringEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Attention', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['TelNo', function () { return Serenity.StringEditor; }],
            ['FaxNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['Salesman', function () { return Serenity.StringEditor; }],
            ['PriceCode', function () { return Serenity.StringEditor; }],
            ['BaseLoc', function () { return Serenity.StringEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsPcent', function () { return Serenity.DecimalEditor; }],
            ['TotDpsAmt', function () { return Serenity.DecimalEditor; }],
            ['DetailList', function () { return Sales.QuotationDetailEditor; }],
            ['Comments1', function () { return Serenity.StringEditor; }],
            ['Comments2', function () { return Serenity.StringEditor; }],
            ['Comments3', function () { return Serenity.StringEditor; }],
            ['Comments4', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(QuotationForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationRow;
        (function (QuotationRow) {
            QuotationRow.idProperty = 'RefNo';
            QuotationRow.nameProperty = 'RefNo';
            QuotationRow.localTextPrefix = 'Sales.Quotation';
            var Fields;
            (function (Fields) {
            })(Fields = QuotationRow.Fields || (QuotationRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'IssueDate',
                'ValidUntil',
                'Closed',
                'CustomerNo',
                'CustomerName',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'Attention',
                'ShipVia',
                'ShipmentTerms',
                'BaseLoc',
                'Salesman',
                'PayTerms',
                'PriceCode',
                'Anlys1',
                'Anlys2',
                'Ccy',
                'ExchRate',
                'ComputeTax',
                'LastLineNo',
                'LastMailNo',
                'LastTextNo',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'DpsPcent',
                'TotDpsAmt',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'TotTdiscCpd',
                'TotGtaxCpd',
                'TotDpsCpd',
                'ClosedDate',
                'ClosedBy',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'WebPublished',
                'Confirmed',
                'RfqNo',
                'WebUserName',
                'ShipTo',
                'TelNo',
                'FaxNo',
                'PortLoading',
                'PortDischarge',
                'OriginCountry',
                'SltaxType',
                'GsltaxPcent',
                'TotGsltaxAmt',
                'TotLsltaxAmt',
                'Anlys7',
                'Anlys8',
                'MarkupDecimal',
                'PkgUnit',
                'WeightUnit',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'ItemCode',
                'Transport',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(QuotationRow = Sales.QuotationRow || (Sales.QuotationRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationService;
        (function (QuotationService) {
            QuotationService.baseUrl = 'Sales/Quotation';
            var Methods;
            (function (Methods) {
            })(Methods = QuotationService.Methods || (QuotationService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                QuotationService[x] = function (r, s, o) {
                    return Q.serviceRequest(QuotationService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = QuotationService.baseUrl + '/' + x;
            });
        })(QuotationService = Sales.QuotationService || (Sales.QuotationService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderDetailForm = /** @class */ (function (_super) {
            __extends(SalesOrderDetailForm, _super);
            function SalesOrderDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SalesOrderDetailForm.formKey = 'Sales.SalesOrderDetail';
            return SalesOrderDetailForm;
        }(Serenity.PrefixedContext));
        Sales.SalesOrderDetailForm = SalesOrderDetailForm;
        [['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Qty', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(SalesOrderDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderDetailRow;
        (function (SalesOrderDetailRow) {
            SalesOrderDetailRow.idProperty = 'Recnum';
            SalesOrderDetailRow.nameProperty = 'OrderNo';
            SalesOrderDetailRow.localTextPrefix = 'Sales.SalesOrderDetail';
            var Fields;
            (function (Fields) {
            })(Fields = SalesOrderDetailRow.Fields || (SalesOrderDetailRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'LineNo',
                'Posted',
                'Closed',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'Qty',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'PriceAmt',
                'PtaxAmt',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'CommisType',
                'CommisRefNo',
                'Configurable',
                'FirstShipQty',
                'OtherShipQty',
                'LastShipNo',
                'Reserved',
                'ResvStubNo',
                'Waitlisted',
                'WaitlistNo',
                'WeightUom',
                'GrossWt',
                'NetWt',
                'DimensionUom',
                'Flength',
                'Width',
                'Height',
                'UnitVolume',
                'Volume',
                'PriceCpd',
                'PtaxCpd',
                'AtaxCpd',
                'DiscCpd',
                'GrossWtCpd',
                'NetWtCpd',
                'VolumeCpd',
                'InnerPkgType',
                'InnerQty',
                'InnerPkgs',
                'InnerExcsQty',
                'OuterPkgType',
                'OuterQty',
                'OuterPkgs',
                'OuterExcsQty',
                'StartCtnNo',
                'QtyShipped',
                'ItemTaxCode',
                'CustItemNo',
                'SpecNo',
                'BomNo',
                'QtyPacked',
                'JobNo',
                'ProdBranch',
                'AssemblyLine',
                'ProdDueDate',
                'MakeIt',
                'ProdStartDate',
                'SchedCount',
                'StdAssort',
                'ExtDescription',
                'QtyPending',
                'VendorNo',
                'VendorPrice',
                'VendorPack',
                'VendorCcy',
                'OriginQty',
                'SltaxPcent',
                'SltaxAmt',
                'ReorderQty',
                'IncludeScrapRate',
                'MarkupPcent',
                'Markup',
                'ItemCode',
                'MoldBomNo',
                'MoldFormulaCode',
                'MoldExpectedQty',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'ShipmarkRmk',
                'LotSizeCost',
                'ReleaseQty',
                'BlanketRef',
                'BlanketLineNo',
                'OrderNoRecnum',
                'OrderNoPosted',
                'OrderNoClosed',
                'OrderNoCustomerNo',
                'OrderNoCustomerName',
                'OrderNoOrderDate',
                'OrderNoDueDate',
                'OrderNoSchedDate',
                'OrderNoCustomerPo',
                'OrderNoShipTo',
                'OrderNoAddress',
                'OrderNoAddress2',
                'OrderNoAddress3',
                'OrderNoAddress4',
                'OrderNoMultiShip',
                'OrderNoAutoPo',
                'OrderNoAutoJob',
                'OrderNoComputeTax',
                'OrderNoAutoResv',
                'OrderNoAutoWait',
                'OrderNoVendorNo',
                'OrderNoPoNo',
                'OrderNoPoPayTerms',
                'OrderNoPoShipTo',
                'OrderNoPoBuyer',
                'OrderNoShipVia',
                'OrderNoShipmentTerms',
                'OrderNoSalesman',
                'OrderNoPayTerms',
                'OrderNoPriceCode',
                'OrderNoAnlys1',
                'OrderNoAnlys2',
                'OrderNoCcy',
                'OrderNoExchRate',
                'OrderNoShipFrom',
                'OrderNoLastSchedNo',
                'OrderNoLastLineNo',
                'OrderNoLastTextNo',
                'OrderNoLastCtnNo',
                'OrderNoTotPriceAmt',
                'OrderNoTotPtaxAmt',
                'OrderNoTotExtPrice',
                'OrderNoTotLdiscAmt',
                'OrderNoTotAtaxAmt',
                'OrderNoTotItemAmt',
                'OrderNoTdiscPcent',
                'OrderNoTotTdiscAmt',
                'OrderNoNetTradeAmt',
                'OrderNoTotChgsAmt',
                'OrderNoNetOrdrAmt',
                'OrderNoTotGtaxAmt',
                'OrderNoNetPayAmt',
                'OrderNoDpsPcent',
                'OrderNoTotDpsAmt',
                'OrderNoNetBalAmt',
                'OrderNoTotTdiscCpd',
                'OrderNoTotGtaxCpd',
                'OrderNoTotDpsCpd',
                'OrderNoDpsReceiptNo',
                'OrderNoDpsFundCode',
                'OrderNoDpsReference',
                'OrderNoDpsRcptDate',
                'OrderNoCreatedDate',
                'OrderNoCreatedBy',
                'OrderNoRevisedDate',
                'OrderNoRevisedBy',
                'OrderNoPostedDate',
                'OrderNoPostedBy',
                'OrderNoPrevisedDate',
                'OrderNoPrevisedBy',
                'OrderNoLockType',
                'OrderNoLockRefNo',
                'OrderNoLastLogNo',
                'OrderNoVendTaxCode',
                'OrderNoCustTaxCode',
                'OrderNoPackingOk',
                'OrderNoWeightUom',
                'OrderNoGrWt',
                'OrderNoNtWt',
                'OrderNoDimensionUom',
                'OrderNoVolume',
                'OrderNoOwnerBranch',
                'OrderNoSourceBranch',
                'OrderNoComments1',
                'OrderNoComments2',
                'OrderNoComments3',
                'OrderNoComments4',
                'OrderNoCheckCrlimit',
                'OrderNoCheckCrbal',
                'OrderNoWebPublished',
                'OrderNoSendWebMsg',
                'OrderNoWebUserName',
                'OrderNoAttention',
                'OrderNoTelNo',
                'OrderNoFaxNo',
                'OrderNoPortLoading',
                'OrderNoPortDischarge',
                'OrderNoVesselName',
                'OrderNoForwarder',
                'OrderNoLcNo',
                'OrderNoOriginCountry',
                'OrderNoMrpExclude',
                'OrderNoSltaxType',
                'OrderNoGsltaxPcent',
                'OrderNoTotGsltaxAmt',
                'OrderNoTotLsltaxAmt',
                'OrderNoLastTextNo1',
                'OrderNoComments5',
                'OrderNoComments6',
                'OrderNoComments7',
                'OrderNoComments8',
                'OrderNoAnlys7',
                'OrderNoAnlys8',
                'OrderNoFlag',
                'OrderNoHoldBy',
                'OrderNoQuoRefNo',
                'OrderNoBrandCode',
                'OrderNoItemCode',
                'OrderNoPkgUnit',
                'OrderNoWeightUnit',
                'OrderNoAnlys9',
                'OrderNoAnlys10',
                'OrderNoAnlys11',
                'OrderNoAnlys12',
                'OrderNoAnlys13',
                'OrderNoAnlys14',
                'OrderNoOrderType',
                'OrderNoRefCompanyCode',
                'OrderNoRefPurchaseOrderNo'
            ].forEach(function (x) { return Fields[x] = x; });
        })(SalesOrderDetailRow = Sales.SalesOrderDetailRow || (Sales.SalesOrderDetailRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderDetailService;
        (function (SalesOrderDetailService) {
            SalesOrderDetailService.baseUrl = 'Sales/SalesOrderDetail';
            var Methods;
            (function (Methods) {
            })(Methods = SalesOrderDetailService.Methods || (SalesOrderDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SalesOrderDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(SalesOrderDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = SalesOrderDetailService.baseUrl + '/' + x;
            });
        })(SalesOrderDetailService = Sales.SalesOrderDetailService || (Sales.SalesOrderDetailService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderForm = /** @class */ (function (_super) {
            __extends(SalesOrderForm, _super);
            function SalesOrderForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SalesOrderForm.formKey = 'Sales.SalesOrder';
            return SalesOrderForm;
        }(Serenity.PrefixedContext));
        Sales.SalesOrderForm = SalesOrderForm;
        [['OrderNo', function () { return Serenity.StringEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['CustomerPo', function () { return Serenity.StringEditor; }],
            ['QuoRefNo', function () { return Serenity.StringEditor; }],
            ['OrderDate', function () { return Serenity.DateEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['SchedDate', function () { return Serenity.DateEditor; }],
            ['PortLoading', function () { return Serenity.StringEditor; }],
            ['ShipVia', function () { return Serenity.StringEditor; }],
            ['VesselName', function () { return Serenity.StringEditor; }],
            ['LcNo', function () { return Serenity.StringEditor; }],
            ['PortDischarge', function () { return Serenity.StringEditor; }],
            ['ShipmentTerms', function () { return Serenity.StringEditor; }],
            ['Forwarder', function () { return Serenity.StringEditor; }],
            ['OriginCountry', function () { return Serenity.StringEditor; }],
            ['Salesman', function () { return Serenity.StringEditor; }],
            ['PriceCode', function () { return Serenity.StringEditor; }],
            ['ShipFrom', function () { return Serenity.StringEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Attention', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['TelNo', function () { return Serenity.StringEditor; }],
            ['FaxNo', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['VendorNo', function () { return Serenity.StringEditor; }],
            ['PoNo', function () { return Serenity.StringEditor; }],
            ['PoPayTerms', function () { return Serenity.StringEditor; }],
            ['PoShipTo', function () { return Serenity.StringEditor; }],
            ['PoBuyer', function () { return Serenity.StringEditor; }],
            ['MultiShip', function () { return Serenity.StringEditor; }],
            ['AutoResv', function () { return Serenity.StringEditor; }],
            ['AutoPo', function () { return Serenity.StringEditor; }],
            ['AutoJob', function () { return Serenity.StringEditor; }],
            ['DetailList', function () { return Sales.SalesOrderDetailEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotGtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsPcent', function () { return Serenity.DecimalEditor; }],
            ['TotDpsAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsReceiptNo', function () { return Serenity.StringEditor; }],
            ['DpsRcptDate', function () { return Serenity.DateEditor; }],
            ['DpsFundCode', function () { return Serenity.StringEditor; }],
            ['DpsReference', function () { return Serenity.StringEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['Comments1', function () { return Serenity.StringEditor; }],
            ['Comments2', function () { return Serenity.StringEditor; }],
            ['Comments3', function () { return Serenity.StringEditor; }],
            ['Comments4', function () { return Serenity.StringEditor; }],
            ['Comments5', function () { return Serenity.StringEditor; }],
            ['Comments6', function () { return Serenity.StringEditor; }],
            ['Comments7', function () { return Serenity.StringEditor; }],
            ['Comments8', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(SalesOrderForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderRow;
        (function (SalesOrderRow) {
            SalesOrderRow.idProperty = 'OrderNo';
            SalesOrderRow.nameProperty = 'OrderNo';
            SalesOrderRow.localTextPrefix = 'Sales.SalesOrder';
            var Fields;
            (function (Fields) {
            })(Fields = SalesOrderRow.Fields || (SalesOrderRow.Fields = {}));
            [
                'Recnum',
                'OrderNo',
                'Posted',
                'Closed',
                'CustomerNo',
                'CustomerName',
                'OrderDate',
                'DueDate',
                'SchedDate',
                'CustomerPo',
                'ShipTo',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'MultiShip',
                'AutoPo',
                'AutoJob',
                'ComputeTax',
                'AutoResv',
                'AutoWait',
                'VendorNo',
                'PoNo',
                'PoPayTerms',
                'PoShipTo',
                'PoBuyer',
                'ShipVia',
                'ShipmentTerms',
                'Salesman',
                'PayTerms',
                'PriceCode',
                'Anlys1',
                'Anlys2',
                'Ccy',
                'ExchRate',
                'ShipFrom',
                'LastSchedNo',
                'LastLineNo',
                'LastTextNo',
                'LastCtnNo',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'DpsPcent',
                'TotDpsAmt',
                'NetBalAmt',
                'TotTdiscCpd',
                'TotGtaxCpd',
                'TotDpsCpd',
                'DpsReceiptNo',
                'DpsFundCode',
                'DpsReference',
                'DpsRcptDate',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'PrevisedDate',
                'PrevisedBy',
                'LockType',
                'LockRefNo',
                'LastLogNo',
                'VendTaxCode',
                'CustTaxCode',
                'PackingOk',
                'WeightUom',
                'GrWt',
                'NtWt',
                'DimensionUom',
                'Volume',
                'OwnerBranch',
                'SourceBranch',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'CheckCrlimit',
                'CheckCrbal',
                'WebPublished',
                'SendWebMsg',
                'WebUserName',
                'Attention',
                'TelNo',
                'FaxNo',
                'PortLoading',
                'PortDischarge',
                'VesselName',
                'Forwarder',
                'LcNo',
                'OriginCountry',
                'MrpExclude',
                'SltaxType',
                'GsltaxPcent',
                'TotGsltaxAmt',
                'TotLsltaxAmt',
                'LastTextNo1',
                'Comments5',
                'Comments6',
                'Comments7',
                'Comments8',
                'Anlys7',
                'Anlys8',
                'Flag',
                'HoldBy',
                'QuoRefNo',
                'BrandCode',
                'ItemCode',
                'PkgUnit',
                'WeightUnit',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'OrderType',
                'RefCompanyCode',
                'RefPurchaseOrderNo',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(SalesOrderRow = Sales.SalesOrderRow || (Sales.SalesOrderRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderService;
        (function (SalesOrderService) {
            SalesOrderService.baseUrl = 'Sales/SalesOrder';
            var Methods;
            (function (Methods) {
            })(Methods = SalesOrderService.Methods || (SalesOrderService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SalesOrderService[x] = function (r, s, o) {
                    return Q.serviceRequest(SalesOrderService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = SalesOrderService.baseUrl + '/' + x;
            });
        })(SalesOrderService = Sales.SalesOrderService || (Sales.SalesOrderService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnDetailForm = /** @class */ (function (_super) {
            __extends(SalesReturnDetailForm, _super);
            function SalesReturnDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SalesReturnDetailForm.formKey = 'Sales.SalesReturnDetail';
            return SalesReturnDetailForm;
        }(Serenity.PrefixedContext));
        Sales.SalesReturnDetailForm = SalesReturnDetailForm;
        [['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['RefundAmt', function () { return Serenity.DecimalEditor; }],
            ['Reorder', function () { return Serenity.BooleanEditor; }]
        ].forEach(function (x) { return Object.defineProperty(SalesReturnDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnDetailRow;
        (function (SalesReturnDetailRow) {
            SalesReturnDetailRow.idProperty = 'Recnum';
            SalesReturnDetailRow.nameProperty = 'RefNo';
            SalesReturnDetailRow.localTextPrefix = 'Sales.SalesReturnDetail';
            var Fields;
            (function (Fields) {
            })(Fields = SalesReturnDetailRow.Fields || (SalesReturnDetailRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'EntryNo',
                'OrderNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'QtyBalance',
                'QtyReturned',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'RefundAmt',
                'VariaAmt',
                'LdiscRate',
                'AtaxRate',
                'PriceAmt',
                'PtaxAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocRefundAmt',
                'LocVariaAmt',
                'AcctSales',
                'AcctLdisc',
                'AcctPtax',
                'AcctAtax',
                'AcctVariance',
                'CommisType',
                'CommisRefNo',
                'CostReturned',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'Reorder',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'RefNoRecnum',
                'RefNoPosted',
                'RefNoTranDate',
                'RefNoShipmentRef',
                'RefNoCustomerNo',
                'RefNoCustomerName',
                'RefNoLoc',
                'RefNoCcy',
                'RefNoExchRate',
                'RefNoTotPriceAmt',
                'RefNoTotPtaxAmt',
                'RefNoTotExtPrice',
                'RefNoTotLdiscAmt',
                'RefNoTotAtaxAmt',
                'RefNoTotItemAmt',
                'RefNoTotRefundAmt',
                'RefNoTotVariaAmt',
                'RefNoTdiscPcent',
                'RefNoTotTdiscAmt',
                'RefNoNetTradeAmt',
                'RefNoTotChgsAmt',
                'RefNoNetOrdrAmt',
                'RefNoTotGtaxAmt',
                'RefNoNetPayAmt',
                'RefNoLocPriceAmt',
                'RefNoLocPtaxAmt',
                'RefNoLocExtPrice',
                'RefNoLocLdiscAmt',
                'RefNoLocAtaxAmt',
                'RefNoLocItemAmt',
                'RefNoLocRefundAmt',
                'RefNoLocVariaAmt',
                'RefNoLocTdiscAmt',
                'RefNoLocChgsAmt',
                'RefNoLocGtaxAmt',
                'RefNoLocPayAmt',
                'RefNoTotTdiscCpd',
                'RefNoAcctCustomer',
                'RefNoAcctTdisc',
                'RefNoAcctGtax',
                'RefNoCreatedDate',
                'RefNoCreatedBy',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoPostedDate',
                'RefNoPostedBy',
                'RefNoLogNo',
                'RefNoLastLogNo',
                'RefNoGlLink',
                'RefNoGlLinkType',
                'RefNoGlLinkNo',
                'RefNoOwnerBranch',
                'RefNoSourceBranch',
                'RefNoReason',
                'RefNoAnlys1',
                'RefNoAnlys2',
                'RefNoAnlys7',
                'RefNoAnlys8',
                'RefNoReturnOnly',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14'
            ].forEach(function (x) { return Fields[x] = x; });
        })(SalesReturnDetailRow = Sales.SalesReturnDetailRow || (Sales.SalesReturnDetailRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnDetailService;
        (function (SalesReturnDetailService) {
            SalesReturnDetailService.baseUrl = 'Sales/SalesReturnDetail';
            var Methods;
            (function (Methods) {
            })(Methods = SalesReturnDetailService.Methods || (SalesReturnDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SalesReturnDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(SalesReturnDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = SalesReturnDetailService.baseUrl + '/' + x;
            });
        })(SalesReturnDetailService = Sales.SalesReturnDetailService || (Sales.SalesReturnDetailService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnForm = /** @class */ (function (_super) {
            __extends(SalesReturnForm, _super);
            function SalesReturnForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            SalesReturnForm.formKey = 'Sales.SalesReturn';
            return SalesReturnForm;
        }(Serenity.PrefixedContext));
        Sales.SalesReturnForm = SalesReturnForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['TranDate', function () { return Serenity.DateEditor; }],
            ['Loc', function () { return Serenity.StringEditor; }],
            ['ShipmentRef', function () { return Serenity.StringEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['Reason', function () { return Serenity.TextAreaEditor; }],
            ['DetailList', function () { return Sales.SalesReturnDetailEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotRefundAmt', function () { return Serenity.DecimalEditor; }],
            ['TdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['TotLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotChgsAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(SalesReturnForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnRow;
        (function (SalesReturnRow) {
            SalesReturnRow.idProperty = 'RefNo';
            SalesReturnRow.nameProperty = 'RefNo';
            SalesReturnRow.localTextPrefix = 'Sales.SalesReturn';
            var Fields;
            (function (Fields) {
            })(Fields = SalesReturnRow.Fields || (SalesReturnRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'Posted',
                'TranDate',
                'ShipmentRef',
                'CustomerNo',
                'CustomerName',
                'Loc',
                'Ccy',
                'ExchRate',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TotRefundAmt',
                'TotVariaAmt',
                'TdiscPcent',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocRefundAmt',
                'LocVariaAmt',
                'LocTdiscAmt',
                'LocChgsAmt',
                'LocGtaxAmt',
                'LocPayAmt',
                'TotTdiscCpd',
                'AcctCustomer',
                'AcctTdisc',
                'AcctGtax',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'LogNo',
                'LastLogNo',
                'GlLink',
                'GlLinkType',
                'GlLinkNo',
                'OwnerBranch',
                'SourceBranch',
                'Reason',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'ReturnOnly',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(SalesReturnRow = Sales.SalesReturnRow || (Sales.SalesReturnRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnService;
        (function (SalesReturnService) {
            SalesReturnService.baseUrl = 'Sales/SalesReturn';
            var Methods;
            (function (Methods) {
            })(Methods = SalesReturnService.Methods || (SalesReturnService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                SalesReturnService[x] = function (r, s, o) {
                    return Q.serviceRequest(SalesReturnService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = SalesReturnService.baseUrl + '/' + x;
            });
        })(SalesReturnService = Sales.SalesReturnService || (Sales.SalesReturnService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentDetailForm = /** @class */ (function (_super) {
            __extends(ShipmentDetailForm, _super);
            function ShipmentDetailForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ShipmentDetailForm.formKey = 'Sales.ShipmentDetail';
            return ShipmentDetailForm;
        }(Serenity.PrefixedContext));
        Sales.ShipmentDetailForm = ShipmentDetailForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['EntryNo', function () { return Serenity.DecimalEditor; }],
            ['Selected', function () { return Serenity.StringEditor; }],
            ['OrderNo', function () { return Serenity.StringEditor; }],
            ['LineNo', function () { return Serenity.DecimalEditor; }],
            ['ItemNo', function () { return Serenity.StringEditor; }],
            ['Description', function () { return Serenity.StringEditor; }],
            ['Uom', function () { return Serenity.StringEditor; }],
            ['LotSize', function () { return Serenity.DecimalEditor; }],
            ['Configurable', function () { return Serenity.StringEditor; }],
            ['QtyBalance', function () { return Serenity.DecimalEditor; }],
            ['QtyDue', function () { return Serenity.DecimalEditor; }],
            ['QtyShipped', function () { return Serenity.DecimalEditor; }],
            ['Price', function () { return Serenity.DecimalEditor; }],
            ['Ptax', function () { return Serenity.DecimalEditor; }],
            ['NetPrice', function () { return Serenity.DecimalEditor; }],
            ['ExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LdiscPcent', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['PriceAmt', function () { return Serenity.DecimalEditor; }],
            ['PtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LdiscRate', function () { return Serenity.DecimalEditor; }],
            ['AtaxRate', function () { return Serenity.DecimalEditor; }],
            ['LdiscAmtCpd', function () { return Serenity.DecimalEditor; }],
            ['AtaxAmtCpd', function () { return Serenity.DecimalEditor; }],
            ['LocPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LocPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LocLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LocAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocItemAmt', function () { return Serenity.DecimalEditor; }],
            ['Anlys1', function () { return Serenity.StringEditor; }],
            ['Anlys2', function () { return Serenity.StringEditor; }],
            ['Anlys3', function () { return Serenity.StringEditor; }],
            ['Anlys4', function () { return Serenity.StringEditor; }],
            ['Anlys5', function () { return Serenity.StringEditor; }],
            ['Anlys6', function () { return Serenity.StringEditor; }],
            ['Posted', function () { return Serenity.StringEditor; }],
            ['LogNo', function () { return Serenity.DecimalEditor; }],
            ['Returned', function () { return Serenity.StringEditor; }],
            ['ShipmentDate', function () { return Serenity.DateEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['ShipFrom', function () { return Serenity.StringEditor; }],
            ['CommisType', function () { return Serenity.StringEditor; }],
            ['CommisRefNo', function () { return Serenity.StringEditor; }],
            ['CustItemNo', function () { return Serenity.StringEditor; }],
            ['AcctSales', function () { return Serenity.StringEditor; }],
            ['AcctLdisc', function () { return Serenity.StringEditor; }],
            ['AcctPtax', function () { return Serenity.StringEditor; }],
            ['AcctAtax', function () { return Serenity.StringEditor; }],
            ['ItemTaxCode', function () { return Serenity.StringEditor; }],
            ['QtyReturned', function () { return Serenity.DecimalEditor; }],
            ['RetPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['RetPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['RetExtPrice', function () { return Serenity.DecimalEditor; }],
            ['RetLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['RetAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['RetItemAmt', function () { return Serenity.DecimalEditor; }],
            ['LretPriceAmt', function () { return Serenity.DecimalEditor; }],
            ['LretPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LretExtPrice', function () { return Serenity.DecimalEditor; }],
            ['LretLdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['LretAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LretItemAmt', function () { return Serenity.DecimalEditor; }],
            ['QtyPacked', function () { return Serenity.DecimalEditor; }],
            ['CostReturned', function () { return Serenity.DecimalEditor; }],
            ['StdAssort', function () { return Serenity.StringEditor; }],
            ['ExtDescription', function () { return Serenity.StringEditor; }],
            ['VendorPack', function () { return Serenity.StringEditor; }],
            ['SltaxPcent', function () { return Serenity.DecimalEditor; }],
            ['SltaxAmt', function () { return Serenity.DecimalEditor; }],
            ['LocSltaxAmt', function () { return Serenity.DecimalEditor; }],
            ['AcctSltax', function () { return Serenity.StringEditor; }],
            ['MarkupPcent', function () { return Serenity.DecimalEditor; }],
            ['Markup', function () { return Serenity.DecimalEditor; }],
            ['Anlys15', function () { return Serenity.StringEditor; }],
            ['Anlys16', function () { return Serenity.StringEditor; }],
            ['Anlys17', function () { return Serenity.StringEditor; }],
            ['Anlys18', function () { return Serenity.StringEditor; }],
            ['Anlys19', function () { return Serenity.StringEditor; }],
            ['Anlys20', function () { return Serenity.StringEditor; }],
            ['LotSizeCost', function () { return Serenity.DecimalEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ShipmentDetailForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentDetailRow;
        (function (ShipmentDetailRow) {
            ShipmentDetailRow.idProperty = 'Recnum';
            ShipmentDetailRow.nameProperty = 'RefNo';
            ShipmentDetailRow.localTextPrefix = 'Sales.ShipmentDetail';
            var Fields;
            (function (Fields) {
            })(Fields = ShipmentDetailRow.Fields || (ShipmentDetailRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'EntryNo',
                'Selected',
                'OrderNo',
                'LineNo',
                'ItemNo',
                'Description',
                'Uom',
                'LotSize',
                'Configurable',
                'QtyBalance',
                'QtyDue',
                'QtyShipped',
                'Price',
                'Ptax',
                'NetPrice',
                'ExtPrice',
                'LdiscPcent',
                'LdiscAmt',
                'AtaxAmt',
                'NetItemAmt',
                'PriceAmt',
                'PtaxAmt',
                'LdiscRate',
                'AtaxRate',
                'LdiscAmtCpd',
                'AtaxAmtCpd',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'Anlys1',
                'Anlys2',
                'Anlys3',
                'Anlys4',
                'Anlys5',
                'Anlys6',
                'Posted',
                'LogNo',
                'Returned',
                'ShipmentDate',
                'CustomerNo',
                'ShipFrom',
                'CommisType',
                'CommisRefNo',
                'CustItemNo',
                'AcctSales',
                'AcctLdisc',
                'AcctPtax',
                'AcctAtax',
                'ItemTaxCode',
                'QtyReturned',
                'RetPriceAmt',
                'RetPtaxAmt',
                'RetExtPrice',
                'RetLdiscAmt',
                'RetAtaxAmt',
                'RetItemAmt',
                'LretPriceAmt',
                'LretPtaxAmt',
                'LretExtPrice',
                'LretLdiscAmt',
                'LretAtaxAmt',
                'LretItemAmt',
                'QtyPacked',
                'CostReturned',
                'StdAssort',
                'ExtDescription',
                'VendorPack',
                'SltaxPcent',
                'SltaxAmt',
                'LocSltaxAmt',
                'AcctSltax',
                'MarkupPcent',
                'Markup',
                'Anlys15',
                'Anlys16',
                'Anlys17',
                'Anlys18',
                'Anlys19',
                'Anlys20',
                'LotSizeCost',
                'RefNoRecnum',
                'RefNoShipmentDate',
                'RefNoPosted',
                'RefNoReturned',
                'RefNoCustomerNo',
                'RefNoCustomerName',
                'RefNoShipTo',
                'RefNoAddress',
                'RefNoAddress2',
                'RefNoAddress3',
                'RefNoAddress4',
                'RefNoCutoffDate',
                'RefNoShipVia',
                'RefNoShipmentTerms',
                'RefNoVesselName',
                'RefNoEtd',
                'RefNoEta',
                'RefNoPayTerms',
                'RefNoDiscDays',
                'RefNoDiscPercent',
                'RefNoNetDays',
                'RefNoDiscountDate',
                'RefNoDueDate',
                'RefNoExpectedDate',
                'RefNoCcy',
                'RefNoExchRate',
                'RefNoShipFrom',
                'RefNoOwnerBranch',
                'RefNoSourceBranch',
                'RefNoComputeTax',
                'RefNoTotPriceAmt',
                'RefNoTotPtaxAmt',
                'RefNoTotExtPrice',
                'RefNoTotLdiscAmt',
                'RefNoTotAtaxAmt',
                'RefNoTotItemAmt',
                'RefNoTotTdiscAmt',
                'RefNoNetTradeAmt',
                'RefNoTotChgsAmt',
                'RefNoNetOrdrAmt',
                'RefNoTotGtaxAmt',
                'RefNoNetPayAmt',
                'RefNoDpsCover',
                'RefNoDpsApplied',
                'RefNoNetBalAmt',
                'RefNoCpdTdiscAmt',
                'RefNoCpdGtaxAmt',
                'RefNoCpdDpsAmt',
                'RefNoLocPriceAmt',
                'RefNoLocPtaxAmt',
                'RefNoLocExtPrice',
                'RefNoLocLdiscAmt',
                'RefNoLocAtaxAmt',
                'RefNoLocItemAmt',
                'RefNoLocTdiscAmt',
                'RefNoLocChgsAmt',
                'RefNoLocGtaxAmt',
                'RefNoLocPayAmt',
                'RefNoLocDpsApplied',
                'RefNoCreatedDate',
                'RefNoCreatedBy',
                'RefNoRevisedDate',
                'RefNoRevisedBy',
                'RefNoPostedDate',
                'RefNoPostedBy',
                'RefNoPrevisedDate',
                'RefNoPrevisedBy',
                'RefNoLastEntryNo',
                'RefNoLastChgsNo',
                'RefNoLastTextNo',
                'RefNoLastCtnNo',
                'RefNoLockType',
                'RefNoLockRefNo',
                'RefNoLastLogNo',
                'RefNoNewItemCount',
                'RefNoNewChgsCount',
                'RefNoAcctCustomer',
                'RefNoAcctTdisc',
                'RefNoAcctGtax',
                'RefNoDpsApplyRef',
                'RefNoVendTaxCode',
                'RefNoCustTaxCode',
                'RefNoRetPriceAmt',
                'RefNoRetPtaxAmt',
                'RefNoRetExtPrice',
                'RefNoRetLdiscAmt',
                'RefNoRetAtaxAmt',
                'RefNoRetItemAmt',
                'RefNoRetTdiscAmt',
                'RefNoRetGtaxAmt',
                'RefNoRetChgsAmt',
                'RefNoRetPayAmt',
                'RefNoLretPriceAmt',
                'RefNoLretPtaxAmt',
                'RefNoLretExtPrice',
                'RefNoLretLdiscAmt',
                'RefNoLretAtaxAmt',
                'RefNoLretItemAmt',
                'RefNoLretTdiscAmt',
                'RefNoLretGtaxAmt',
                'RefNoLretChgsAmt',
                'RefNoLretPayAmt',
                'RefNoWeightUom',
                'RefNoGrWt',
                'RefNoNtWt',
                'RefNoDimensionUom',
                'RefNoVolume',
                'RefNoGlLink',
                'RefNoGlLinkType',
                'RefNoGlLinkNo',
                'RefNoPackingOk',
                'RefNoComments1',
                'RefNoComments2',
                'RefNoComments3',
                'RefNoComments4',
                'RefNoSettleAt',
                'RefNoCheckCrlimit',
                'RefNoCheckCrbal',
                'RefNoAttention',
                'RefNoTelNo',
                'RefNoFaxNo',
                'RefNoPortLoading',
                'RefNoPortDischarge',
                'RefNoForwarder',
                'RefNoLcNo',
                'RefNoOriginCountry',
                'RefNoComments5',
                'RefNoComments6',
                'RefNoComments7',
                'RefNoComments8',
                'RefNoIssueBank',
                'RefNoIssueDate',
                'RefNoSltaxType',
                'RefNoGsltaxPcent',
                'RefNoTotGsltaxAmt',
                'RefNoTotLsltaxAmt',
                'RefNoLocGsltaxAmt',
                'RefNoLocLsltaxAmt',
                'RefNoSoSltaxType',
                'RefNoSoGsltaxPcent',
                'RefNoOrderCount',
                'RefNoAcctSltax',
                'RefNoLastTextNo1',
                'RefNoAnlys1',
                'RefNoAnlys2',
                'RefNoAnlys7',
                'RefNoAnlys8',
                'RefNoDnOnly',
                'RefNoInvoiced',
                'RefNoInvoiceNo',
                'RefNoFlag',
                'RefNoHoldBy',
                'RefNoAnlys9',
                'RefNoAnlys10',
                'RefNoAnlys11',
                'RefNoAnlys12',
                'RefNoAnlys13',
                'RefNoAnlys14',
                'RefNoManualShipmentDetail',
                'RefNoRefCompanyCode',
                'RefNoRefGrnNo',
                'RefNoLcName'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ShipmentDetailRow = Sales.ShipmentDetailRow || (Sales.ShipmentDetailRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentDetailService;
        (function (ShipmentDetailService) {
            ShipmentDetailService.baseUrl = 'Sales/ShipmentDetail';
            var Methods;
            (function (Methods) {
            })(Methods = ShipmentDetailService.Methods || (ShipmentDetailService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ShipmentDetailService[x] = function (r, s, o) {
                    return Q.serviceRequest(ShipmentDetailService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ShipmentDetailService.baseUrl + '/' + x;
            });
        })(ShipmentDetailService = Sales.ShipmentDetailService || (Sales.ShipmentDetailService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentForm = /** @class */ (function (_super) {
            __extends(ShipmentForm, _super);
            function ShipmentForm() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ShipmentForm.formKey = 'Sales.Shipment';
            return ShipmentForm;
        }(Serenity.PrefixedContext));
        Sales.ShipmentForm = ShipmentForm;
        [['RefNo', function () { return Serenity.StringEditor; }],
            ['ShipmentDate', function () { return Serenity.DateEditor; }],
            ['ShipFrom', function () { return Serenity.StringEditor; }],
            ['CustomerNo', function () { return Serenity.StringEditor; }],
            ['CustomerName', function () { return Serenity.StringEditor; }],
            ['CutoffDate', function () { return Serenity.DateEditor; }],
            ['ShipTo', function () { return Serenity.StringEditor; }],
            ['Attention', function () { return Serenity.StringEditor; }],
            ['Address', function () { return Serenity.StringEditor; }],
            ['Address2', function () { return Serenity.StringEditor; }],
            ['Address3', function () { return Serenity.StringEditor; }],
            ['Address4', function () { return Serenity.StringEditor; }],
            ['TelNo', function () { return Serenity.StringEditor; }],
            ['FaxNo', function () { return Serenity.StringEditor; }],
            ['PortLoading', function () { return Serenity.StringEditor; }],
            ['ShipVia', function () { return Serenity.StringEditor; }],
            ['VesselName', function () { return Serenity.StringEditor; }],
            ['LcNo', function () { return Serenity.StringEditor; }],
            ['PortDischarge', function () { return Serenity.StringEditor; }],
            ['ShipmentTerms', function () { return Serenity.StringEditor; }],
            ['Forwarder', function () { return Serenity.StringEditor; }],
            ['OriginCountry', function () { return Serenity.StringEditor; }],
            ['Etd', function () { return Serenity.DateEditor; }],
            ['Eta', function () { return Serenity.DateEditor; }],
            ['IssueBank', function () { return Serenity.StringEditor; }],
            ['IssueDate', function () { return Serenity.DateEditor; }],
            ['Ccy', function () { return Serenity.StringEditor; }],
            ['ExchRate', function () { return Serenity.DecimalEditor; }],
            ['PayTerms', function () { return Serenity.StringEditor; }],
            ['DiscPercent', function () { return Serenity.DecimalEditor; }],
            ['DiscDays', function () { return Serenity.DecimalEditor; }],
            ['DueDate', function () { return Serenity.DateEditor; }],
            ['ExpectedDate', function () { return Serenity.DateEditor; }],
            ['TotItemAmt', function () { return Serenity.DecimalEditor; }],
            ['TotTdiscAmt', function () { return Serenity.DecimalEditor; }],
            ['NetTradeAmt', function () { return Serenity.DecimalEditor; }],
            ['TotAtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['TotPtaxAmt', function () { return Serenity.DecimalEditor; }],
            ['NetPayAmt', function () { return Serenity.DecimalEditor; }],
            ['DpsCover', function () { return Serenity.DecimalEditor; }],
            ['DpsApplied', function () { return Serenity.DecimalEditor; }],
            ['NetBalAmt', function () { return Serenity.DecimalEditor; }],
            ['ManualShipmentDetail', function () { return Serenity.BooleanEditor; }],
            ['RefCompanyCode', function () { return Serenity.StringEditor; }],
            ['DetailList', function () { return Sales.ShipmentDetailEditor; }],
            ['RefGrnNo', function () { return Serenity.StringEditor; }],
            ['LcName', function () { return Serenity.StringEditor; }],
            ['Comments1', function () { return Serenity.StringEditor; }],
            ['Comments2', function () { return Serenity.StringEditor; }],
            ['Comments3', function () { return Serenity.StringEditor; }],
            ['Comments4', function () { return Serenity.StringEditor; }],
            ['Comments5', function () { return Serenity.StringEditor; }],
            ['Comments6', function () { return Serenity.StringEditor; }],
            ['Comments7', function () { return Serenity.StringEditor; }],
            ['Comments8', function () { return Serenity.StringEditor; }]
        ].forEach(function (x) { return Object.defineProperty(ShipmentForm.prototype, x[0], { get: function () { return this.w(x[0], x[1]()); }, enumerable: true, configurable: true }); });
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentRow;
        (function (ShipmentRow) {
            ShipmentRow.idProperty = 'RefNo';
            ShipmentRow.nameProperty = 'RefNo';
            ShipmentRow.localTextPrefix = 'Sales.Shipment';
            var Fields;
            (function (Fields) {
            })(Fields = ShipmentRow.Fields || (ShipmentRow.Fields = {}));
            [
                'Recnum',
                'RefNo',
                'ShipmentDate',
                'Posted',
                'Returned',
                'CustomerNo',
                'CustomerName',
                'ShipTo',
                'Address',
                'Address2',
                'Address3',
                'Address4',
                'CutoffDate',
                'ShipVia',
                'ShipmentTerms',
                'VesselName',
                'Etd',
                'Eta',
                'PayTerms',
                'DiscDays',
                'DiscPercent',
                'NetDays',
                'DiscountDate',
                'DueDate',
                'ExpectedDate',
                'Ccy',
                'ExchRate',
                'ShipFrom',
                'OwnerBranch',
                'SourceBranch',
                'ComputeTax',
                'TotPriceAmt',
                'TotPtaxAmt',
                'TotExtPrice',
                'TotLdiscAmt',
                'TotAtaxAmt',
                'TotItemAmt',
                'TotTdiscAmt',
                'NetTradeAmt',
                'TotChgsAmt',
                'NetOrdrAmt',
                'TotGtaxAmt',
                'NetPayAmt',
                'DpsCover',
                'DpsApplied',
                'NetBalAmt',
                'CpdTdiscAmt',
                'CpdGtaxAmt',
                'CpdDpsAmt',
                'LocPriceAmt',
                'LocPtaxAmt',
                'LocExtPrice',
                'LocLdiscAmt',
                'LocAtaxAmt',
                'LocItemAmt',
                'LocTdiscAmt',
                'LocChgsAmt',
                'LocGtaxAmt',
                'LocPayAmt',
                'LocDpsApplied',
                'CreatedDate',
                'CreatedBy',
                'RevisedDate',
                'RevisedBy',
                'PostedDate',
                'PostedBy',
                'PrevisedDate',
                'PrevisedBy',
                'LastEntryNo',
                'LastChgsNo',
                'LastTextNo',
                'LastCtnNo',
                'LockType',
                'LockRefNo',
                'LastLogNo',
                'NewItemCount',
                'NewChgsCount',
                'AcctCustomer',
                'AcctTdisc',
                'AcctGtax',
                'DpsApplyRef',
                'VendTaxCode',
                'CustTaxCode',
                'RetPriceAmt',
                'RetPtaxAmt',
                'RetExtPrice',
                'RetLdiscAmt',
                'RetAtaxAmt',
                'RetItemAmt',
                'RetTdiscAmt',
                'RetGtaxAmt',
                'RetChgsAmt',
                'RetPayAmt',
                'LretPriceAmt',
                'LretPtaxAmt',
                'LretExtPrice',
                'LretLdiscAmt',
                'LretAtaxAmt',
                'LretItemAmt',
                'LretTdiscAmt',
                'LretGtaxAmt',
                'LretChgsAmt',
                'LretPayAmt',
                'WeightUom',
                'GrWt',
                'NtWt',
                'DimensionUom',
                'Volume',
                'GlLink',
                'GlLinkType',
                'GlLinkNo',
                'PackingOk',
                'Comments1',
                'Comments2',
                'Comments3',
                'Comments4',
                'SettleAt',
                'CheckCrlimit',
                'CheckCrbal',
                'Attention',
                'TelNo',
                'FaxNo',
                'PortLoading',
                'PortDischarge',
                'Forwarder',
                'LcNo',
                'OriginCountry',
                'Comments5',
                'Comments6',
                'Comments7',
                'Comments8',
                'IssueBank',
                'IssueDate',
                'SltaxType',
                'GsltaxPcent',
                'TotGsltaxAmt',
                'TotLsltaxAmt',
                'LocGsltaxAmt',
                'LocLsltaxAmt',
                'SoSltaxType',
                'SoGsltaxPcent',
                'OrderCount',
                'AcctSltax',
                'LastTextNo1',
                'Anlys1',
                'Anlys2',
                'Anlys7',
                'Anlys8',
                'DnOnly',
                'Invoiced',
                'InvoiceNo',
                'Flag',
                'HoldBy',
                'Anlys9',
                'Anlys10',
                'Anlys11',
                'Anlys12',
                'Anlys13',
                'Anlys14',
                'ManualShipmentDetail',
                'RefCompanyCode',
                'RefGrnNo',
                'LcName',
                'DetailList'
            ].forEach(function (x) { return Fields[x] = x; });
        })(ShipmentRow = Sales.ShipmentRow || (Sales.ShipmentRow = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentService;
        (function (ShipmentService) {
            ShipmentService.baseUrl = 'Sales/Shipment';
            var Methods;
            (function (Methods) {
            })(Methods = ShipmentService.Methods || (ShipmentService.Methods = {}));
            [
                'Create',
                'Update',
                'Delete',
                'Retrieve',
                'List'
            ].forEach(function (x) {
                ShipmentService[x] = function (r, s, o) {
                    return Q.serviceRequest(ShipmentService.baseUrl + '/' + x, r, s, o);
                };
                Methods[x] = ShipmentService.baseUrl + '/' + x;
            });
        })(ShipmentService = Sales.ShipmentService || (Sales.ShipmentService = {}));
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var SalesOrderType;
    (function (SalesOrderType) {
        SalesOrderType[SalesOrderType["Sample"] = 65] = "Sample";
        SalesOrderType[SalesOrderType["Blanket"] = 66] = "Blanket";
        SalesOrderType[SalesOrderType["Release"] = 82] = "Release";
        SalesOrderType[SalesOrderType["Standard"] = 83] = "Standard";
    })(SalesOrderType = Matrix.SalesOrderType || (Matrix.SalesOrderType = {}));
    var SalesOrderTypeOption = /** @class */ (function () {
        function SalesOrderTypeOption() {
            this.Mapping = new Matrix.KeyedCollection();
            this.Mapping.Add("A", "Sample"); //65,
            this.Mapping.Add("B", "Blanket"); //66,
            this.Mapping.Add("R", "Release"); //82,
            this.Mapping.Add("S", "Standard"); //83
        }
        return SalesOrderTypeOption;
    }());
    Matrix.SalesOrderTypeOption = SalesOrderTypeOption;
    Serenity.Decorators.registerEnum(SalesOrderType, 'Enums.SalesOrderType');
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Modules;
    (function (Modules) {
        var Development;
        (function (Development) {
            var TableExplorerControlGrid = /** @class */ (function (_super) {
                __extends(TableExplorerControlGrid, _super);
                function TableExplorerControlGrid(container) {
                    var _this = _super.call(this, container) || this;
                    _this.setTitle("Table Explorer");
                    return _this;
                }
                TableExplorerControlGrid.prototype.getColumnsKey = function () { return 'Development.TableExplorerColumns'; };
                TableExplorerControlGrid.prototype.getDialogType = function () { return null; };
                TableExplorerControlGrid.prototype.getIdProperty = function () { return TableExplorerColumns.idProperty; };
                TableExplorerControlGrid.prototype.getLocalTextPrefix = function () { return ""; };
                TableExplorerControlGrid.prototype.getService = function () { return Development.TableExplorerService.baseUrl; };
                TableExplorerControlGrid.prototype.getButtons = function () {
                    var buttons = _super.prototype.getButtons.call(this);
                    buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                    return buttons;
                };
                TableExplorerControlGrid.prototype.getSlickOptions = function () {
                    var opt = _super.prototype.getSlickOptions.call(this);
                    opt.enableTextSelectionOnCells = true;
                    opt.selectedCellCssClass = "slick-row-selected";
                    opt.enableCellNavigation = true;
                    return opt;
                };
                TableExplorerControlGrid.prototype.createSlickGrid = function () {
                    var grid = _super.prototype.createSlickGrid.call(this);
                    grid.setSelectionModel(new Slick.RowSelectionModel());
                    return grid;
                };
                TableExplorerControlGrid = __decorate([
                    Serenity.Decorators.registerClass()
                ], TableExplorerControlGrid);
                return TableExplorerControlGrid;
            }(Serenity.EntityGrid));
            Development.TableExplorerControlGrid = TableExplorerControlGrid;
            var TableExplorerColumns;
            (function (TableExplorerColumns) {
                TableExplorerColumns.idProperty = 'LineNo';
                TableExplorerColumns.nameProperty = 'Table';
                TableExplorerColumns.localTextPrefix = 'Administration.User';
                TableExplorerColumns.lookupKey = 'Administration.User';
                function getLookup() {
                    return Q.getLookup('Administration.User');
                }
                TableExplorerColumns.getLookup = getLookup;
                var Fields;
                (function (Fields) {
                })(Fields = TableExplorerColumns.Fields || (TableExplorerColumns.Fields = {}));
                [
                    'LineNo',
                    'Table',
                    'Entity'
                ].forEach(function (x) { return Fields[x] = x; });
            })(TableExplorerColumns = Development.TableExplorerColumns || (Development.TableExplorerColumns = {}));
        })(Development = Modules.Development || (Modules.Development = {}));
    })(Modules = Matrix.Modules || (Matrix.Modules = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerApprovalGrid = /** @class */ (function (_super) {
            __extends(CustomerApprovalGrid, _super);
            function CustomerApprovalGrid(container) {
                return _super.call(this, container) || this;
            }
            CustomerApprovalGrid.prototype.getColumnsKey = function () { return 'MasterData.CustomerApproval'; };
            CustomerApprovalGrid.prototype.getDialogType = function () { return MasterData.CustomerDialog; };
            CustomerApprovalGrid.prototype.getIdProperty = function () { return MasterData.CustomerRow.idProperty; };
            CustomerApprovalGrid.prototype.getLocalTextPrefix = function () { return MasterData.CustomerRow.localTextPrefix; };
            CustomerApprovalGrid.prototype.getService = function () { return MasterData.CustomerService.baseUrl; };
            CustomerApprovalGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CustomerApprovalGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CustomerApprovalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomerApprovalGrid);
            return CustomerApprovalGrid;
        }(Serenity.EntityGrid));
        MasterData.CustomerApprovalGrid = CustomerApprovalGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ItemApprovalGrid = /** @class */ (function (_super) {
            __extends(ItemApprovalGrid, _super);
            function ItemApprovalGrid(container) {
                return _super.call(this, container) || this;
            }
            ItemApprovalGrid.prototype.getColumnsKey = function () { return 'MasterData.ItemApproval'; };
            ItemApprovalGrid.prototype.getDialogType = function () { return MasterData.ItemDialog; };
            ItemApprovalGrid.prototype.getIdProperty = function () { return MasterData.ItemRow.idProperty; };
            ItemApprovalGrid.prototype.getLocalTextPrefix = function () { return MasterData.ItemRow.localTextPrefix; };
            ItemApprovalGrid.prototype.getService = function () { return MasterData.ItemService.baseUrl; };
            ItemApprovalGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ItemApprovalGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ItemApprovalGrid.prototype.createToolbarExtensions = function () {
                _super.prototype.createToolbarExtensions.call(this);
                this.rowSelection = new Serenity.GridRowSelectionMixin(this);
            };
            ItemApprovalGrid.prototype.getColumns = function () {
                var _this = this;
                var columns = _super.prototype.getColumns.call(this);
                columns.splice(0, 0, Serenity.GridRowSelectionMixin.createSelectColumn(function () { return _this.rowSelection; }));
                return columns;
            };
            ItemApprovalGrid.prototype.getViewOptions = function () {
                var opt = _super.prototype.getViewOptions.call(this);
                opt.rowsPerPage = 18;
                return opt;
            };
            ItemApprovalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ItemApprovalGrid);
            return ItemApprovalGrid;
        }(Serenity.EntityGrid));
        MasterData.ItemApprovalGrid = ItemApprovalGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionApprovalGrid = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionApprovalGrid, _super);
            function PurchaseRequisitionApprovalGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseRequisitionApprovalGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseRequisitionApproval'; };
            PurchaseRequisitionApprovalGrid.prototype.getDialogType = function () { return Purchasing.PurchaseRequisitionDialog; };
            PurchaseRequisitionApprovalGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseRequisitionRow.idProperty; };
            PurchaseRequisitionApprovalGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseRequisitionRow.localTextPrefix; };
            PurchaseRequisitionApprovalGrid.prototype.getService = function () { return Purchasing.PurchaseRequisitionService.baseUrl; };
            PurchaseRequisitionApprovalGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            /*
            When constructing your options, you can use forceFitColumns: true
            var options = {
            enableCellNavigation: true,
            forceFitColumns: true
            };
        
           This will make the columns fill the entire width of your grid div.
    
    
    slickgrid-column-data-autosize
    
    This plug-in is for slickgrid to handle auto size columns based on the header size, data size, cell-formats and max data length.
    
    ######Single column auto size Double click on a column resize handle.
    
    ######All columns auto size Select a cell or row => Ctrl-Shift-a
    
    ######How it works
    
    1.Column will auto fit to given/default max width if cell data width is more than given max width. Slick.AutoColumnSize(100) or default :200
    
    OR
    
    
    2.Column will auto fit to max data width in the row if header width is lesser than data width.
    
    OR
    
    
    3.Column will auto fit to header width if header width is greater than data width.
    
    
    ######Browser <script src="../src/slick.autocolumnsize.js"></script>
    
    ######Bower npm install slickgrid-column-data-autosize
    
    ######Usage
      grid = new Slick.Grid("#myGrid", data, columns, options);
      grid.registerPlugin( new Slick.AutoColumnSize());
      [OR]
      grid.registerPlugin( new Slick.AutoColumnSize(200));
    
    
           */
            PurchaseRequisitionApprovalGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                opt.forceFitColumns = true;
                opt.enableColumnReorder = false;
                return opt;
            };
            //protected createSlickGrid() {
            //    var grid = super.createSlickGrid();
            //    // need to register this plugin for grouping or you'll have errors
            //    this.view.setSummaryOptions({
            //        aggregators: [
            //            new Slick.Aggregators.Avg('UnitPrice'),
            //            new Slick.Aggregators.Sum('UnitsInStock'),
            //            new Slick.Aggregators.Max('UnitsOnOrder'),
            //            new Slick.Aggregators.Avg('ReorderLevel')
            //        ]
            //    });
            //    return grid;
            //}
            PurchaseRequisitionApprovalGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                //grid.registerPlugin(new Slick.AutoColumnSize());
                // *** If you want to make it autoresize when grid is loaded, use: new Slick.AutoColumnSize(true);
                var autoSize = new Slick.AutoColumnSize(true);
                grid.registerPlugin(autoSize);
                return grid;
            };
            PurchaseRequisitionApprovalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseRequisitionApprovalGrid);
            return PurchaseRequisitionApprovalGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseRequisitionApprovalGrid = PurchaseRequisitionApprovalGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorApprovalGrid = /** @class */ (function (_super) {
            __extends(VendorApprovalGrid, _super);
            function VendorApprovalGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorApprovalGrid.prototype.getColumnsKey = function () { return 'Enterprise.VendorApproval'; };
            VendorApprovalGrid.prototype.getDialogType = function () { return Enterprise.VendorDialog; };
            VendorApprovalGrid.prototype.getIdProperty = function () { return Enterprise.VendorRow.idProperty; };
            VendorApprovalGrid.prototype.getLocalTextPrefix = function () { return Enterprise.VendorRow.localTextPrefix; };
            VendorApprovalGrid.prototype.getService = function () { return Enterprise.VendorService.baseUrl; };
            VendorApprovalGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            VendorApprovalGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            VendorApprovalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorApprovalGrid);
            return VendorApprovalGrid;
        }(Serenity.EntityGrid));
        Enterprise.VendorApprovalGrid = VendorApprovalGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var CompanyDialog = /** @class */ (function (_super) {
            __extends(CompanyDialog, _super);
            function CompanyDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.CompanyForm(_this.idPrefix);
                return _this;
            }
            CompanyDialog.prototype.getFormKey = function () { return "Administration.CompanyForm"; };
            CompanyDialog.prototype.getIdProperty = function () { return Administration.CompanyRow.idProperty; };
            CompanyDialog.prototype.getLocalTextPrefix = function () { return Administration.CompanyRow.localTextPrefix; };
            CompanyDialog.prototype.getNameProperty = function () { return Administration.CompanyRow.nameProperty; };
            CompanyDialog.prototype.getService = function () { return Administration.CompanyService.baseUrl; };
            CompanyDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], CompanyDialog);
            return CompanyDialog;
        }(Serenity.EntityDialog));
        Administration.CompanyDialog = CompanyDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var CompanyGrid = /** @class */ (function (_super) {
            __extends(CompanyGrid, _super);
            function CompanyGrid(container) {
                return _super.call(this, container) || this;
            }
            CompanyGrid.prototype.getColumnsKey = function () { return 'Administration.CompanyDialog'; };
            CompanyGrid.prototype.getDialogType = function () { return Administration.CompanyDialog; };
            CompanyGrid.prototype.getIdProperty = function () { return Administration.CompanyRow.idProperty; };
            CompanyGrid.prototype.getLocalTextPrefix = function () { return Administration.CompanyRow.localTextPrefix; };
            CompanyGrid.prototype.getService = function () { return Administration.CompanyService.baseUrl; };
            //protected getButtons(): Serenity.ToolButton[] {
            //    var buttons = super.getButtons();
            //    buttons.splice(Q.indexOf(buttons, x => x.cssClass === "add-button"), 1);
            //    return buttons;
            //}
            CompanyGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CompanyGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CompanyGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CompanyGrid);
            return CompanyGrid;
        }(Serenity.EntityGrid));
        Administration.CompanyGrid = CompanyGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogDialog = /** @class */ (function (_super) {
            __extends(LookupDialogDialog, _super);
            function LookupDialogDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.LookupDialogForm(_this.idPrefix);
                return _this;
            }
            LookupDialogDialog.prototype.getFormKey = function () { return Administration.LookupDialogForm.formKey; };
            LookupDialogDialog.prototype.getIdProperty = function () { return Administration.LookupDialogRow.idProperty; };
            LookupDialogDialog.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogRow.localTextPrefix; };
            LookupDialogDialog.prototype.getNameProperty = function () { return Administration.LookupDialogRow.nameProperty; };
            LookupDialogDialog.prototype.getService = function () { return Administration.LookupDialogService.baseUrl; };
            LookupDialogDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            LookupDialogDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            LookupDialogDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], LookupDialogDialog);
            return LookupDialogDialog;
        }(Serenity.EntityDialog));
        Administration.LookupDialogDialog = LookupDialogDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterColumnDetailDialog = /** @class */ (function (_super) {
            __extends(LookupDialogFilterColumnDetailDialog, _super);
            function LookupDialogFilterColumnDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.LookupDialogFilterColumnDetailForm(_this.idPrefix);
                return _this;
            }
            LookupDialogFilterColumnDetailDialog.prototype.getFormKey = function () { return Administration.LookupDialogFilterColumnDetailForm.formKey; };
            LookupDialogFilterColumnDetailDialog.prototype.getIdProperty = function () { return Administration.LookupDialogFilterColumnDetailRow.idProperty; };
            LookupDialogFilterColumnDetailDialog.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogFilterColumnDetailRow.localTextPrefix; };
            LookupDialogFilterColumnDetailDialog.prototype.getNameProperty = function () { return Administration.LookupDialogFilterColumnDetailRow.nameProperty; };
            LookupDialogFilterColumnDetailDialog.prototype.getService = function () { return Administration.LookupDialogFilterColumnDetailService.baseUrl; };
            LookupDialogFilterColumnDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            LookupDialogFilterColumnDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            LookupDialogFilterColumnDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], LookupDialogFilterColumnDetailDialog);
            return LookupDialogFilterColumnDetailDialog;
        }(Serenity.EntityDialog));
        Administration.LookupDialogFilterColumnDetailDialog = LookupDialogFilterColumnDetailDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterColumnDetailGrid = /** @class */ (function (_super) {
            __extends(LookupDialogFilterColumnDetailGrid, _super);
            function LookupDialogFilterColumnDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            LookupDialogFilterColumnDetailGrid.prototype.getColumnsKey = function () { return 'Administration.LookupDialogFilterColumnDetail'; };
            LookupDialogFilterColumnDetailGrid.prototype.getDialogType = function () { return Administration.LookupDialogFilterColumnDetailDialog; };
            LookupDialogFilterColumnDetailGrid.prototype.getIdProperty = function () { return Administration.LookupDialogFilterColumnDetailRow.idProperty; };
            LookupDialogFilterColumnDetailGrid.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogFilterColumnDetailRow.localTextPrefix; };
            LookupDialogFilterColumnDetailGrid.prototype.getService = function () { return Administration.LookupDialogFilterColumnDetailService.baseUrl; };
            LookupDialogFilterColumnDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            LookupDialogFilterColumnDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            LookupDialogFilterColumnDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            LookupDialogFilterColumnDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LookupDialogFilterColumnDetailGrid);
            return LookupDialogFilterColumnDetailGrid;
        }(Serenity.EntityGrid));
        Administration.LookupDialogFilterColumnDetailGrid = LookupDialogFilterColumnDetailGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterDetailDialog = /** @class */ (function (_super) {
            __extends(LookupDialogFilterDetailDialog, _super);
            function LookupDialogFilterDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.LookupDialogFilterDetailForm(_this.idPrefix);
                return _this;
            }
            LookupDialogFilterDetailDialog.prototype.getFormKey = function () { return Administration.LookupDialogFilterDetailForm.formKey; };
            LookupDialogFilterDetailDialog.prototype.getIdProperty = function () { return Administration.LookupDialogFilterDetailRow.idProperty; };
            LookupDialogFilterDetailDialog.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogFilterDetailRow.localTextPrefix; };
            LookupDialogFilterDetailDialog.prototype.getNameProperty = function () { return Administration.LookupDialogFilterDetailRow.nameProperty; };
            LookupDialogFilterDetailDialog.prototype.getService = function () { return Administration.LookupDialogFilterDetailService.baseUrl; };
            LookupDialogFilterDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            LookupDialogFilterDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            LookupDialogFilterDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], LookupDialogFilterDetailDialog);
            return LookupDialogFilterDetailDialog;
        }(Serenity.EntityDialog));
        Administration.LookupDialogFilterDetailDialog = LookupDialogFilterDetailDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterDetailGrid = /** @class */ (function (_super) {
            __extends(LookupDialogFilterDetailGrid, _super);
            function LookupDialogFilterDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            LookupDialogFilterDetailGrid.prototype.getColumnsKey = function () { return 'Administration.LookupDialogFilterDetail'; };
            LookupDialogFilterDetailGrid.prototype.getDialogType = function () { return Administration.LookupDialogFilterDetailDialog; };
            LookupDialogFilterDetailGrid.prototype.getIdProperty = function () { return Administration.LookupDialogFilterDetailRow.idProperty; };
            LookupDialogFilterDetailGrid.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogFilterDetailRow.localTextPrefix; };
            LookupDialogFilterDetailGrid.prototype.getService = function () { return Administration.LookupDialogFilterDetailService.baseUrl; };
            LookupDialogFilterDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            LookupDialogFilterDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            LookupDialogFilterDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            LookupDialogFilterDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LookupDialogFilterDetailGrid);
            return LookupDialogFilterDetailGrid;
        }(Serenity.EntityGrid));
        Administration.LookupDialogFilterDetailGrid = LookupDialogFilterDetailGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterDialog = /** @class */ (function (_super) {
            __extends(LookupDialogFilterDialog, _super);
            function LookupDialogFilterDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.LookupDialogFilterForm(_this.idPrefix);
                return _this;
            }
            LookupDialogFilterDialog.prototype.getFormKey = function () { return Administration.LookupDialogFilterForm.formKey; };
            LookupDialogFilterDialog.prototype.getIdProperty = function () { return Administration.LookupDialogFilterRow.idProperty; };
            LookupDialogFilterDialog.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogFilterRow.localTextPrefix; };
            LookupDialogFilterDialog.prototype.getNameProperty = function () { return Administration.LookupDialogFilterRow.nameProperty; };
            LookupDialogFilterDialog.prototype.getService = function () { return Administration.LookupDialogFilterService.baseUrl; };
            LookupDialogFilterDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            LookupDialogFilterDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            LookupDialogFilterDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], LookupDialogFilterDialog);
            return LookupDialogFilterDialog;
        }(Serenity.EntityDialog));
        Administration.LookupDialogFilterDialog = LookupDialogFilterDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogFilterGrid = /** @class */ (function (_super) {
            __extends(LookupDialogFilterGrid, _super);
            function LookupDialogFilterGrid(container) {
                return _super.call(this, container) || this;
            }
            LookupDialogFilterGrid.prototype.getColumnsKey = function () { return 'Administration.LookupDialogFilter'; };
            LookupDialogFilterGrid.prototype.getDialogType = function () { return Administration.LookupDialogFilterDialog; };
            LookupDialogFilterGrid.prototype.getIdProperty = function () { return Administration.LookupDialogFilterRow.idProperty; };
            LookupDialogFilterGrid.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogFilterRow.localTextPrefix; };
            LookupDialogFilterGrid.prototype.getService = function () { return Administration.LookupDialogFilterService.baseUrl; };
            LookupDialogFilterGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            LookupDialogFilterGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            LookupDialogFilterGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            LookupDialogFilterGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LookupDialogFilterGrid);
            return LookupDialogFilterGrid;
        }(Serenity.EntityGrid));
        Administration.LookupDialogFilterGrid = LookupDialogFilterGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogGrid = /** @class */ (function (_super) {
            __extends(LookupDialogGrid, _super);
            function LookupDialogGrid(container) {
                return _super.call(this, container) || this;
            }
            LookupDialogGrid.prototype.getColumnsKey = function () { return 'Administration.LookupDialog'; };
            LookupDialogGrid.prototype.getDialogType = function () { return Administration.LookupDialogDialog; };
            LookupDialogGrid.prototype.getIdProperty = function () { return Administration.LookupDialogRow.idProperty; };
            LookupDialogGrid.prototype.getLocalTextPrefix = function () { return Administration.LookupDialogRow.localTextPrefix; };
            LookupDialogGrid.prototype.getService = function () { return Administration.LookupDialogService.baseUrl; };
            LookupDialogGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            LookupDialogGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            LookupDialogGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            LookupDialogGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LookupDialogGrid);
            return LookupDialogGrid;
        }(Serenity.EntityGrid));
        Administration.LookupDialogGrid = LookupDialogGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogDialog = /** @class */ (function (_super) {
            __extends(ReportDialogDialog, _super);
            function ReportDialogDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new EnterpriseSys.ReportDialogForm(_this.idPrefix);
                return _this;
            }
            ReportDialogDialog.prototype.getFormKey = function () { return EnterpriseSys.ReportDialogForm.formKey; };
            ReportDialogDialog.prototype.getIdProperty = function () { return EnterpriseSys.ReportDialogRow.idProperty; };
            ReportDialogDialog.prototype.getLocalTextPrefix = function () { return EnterpriseSys.ReportDialogRow.localTextPrefix; };
            ReportDialogDialog.prototype.getNameProperty = function () { return EnterpriseSys.ReportDialogRow.nameProperty; };
            ReportDialogDialog.prototype.getService = function () { return EnterpriseSys.ReportDialogService.baseUrl; };
            ReportDialogDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            ReportDialogDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            ReportDialogDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], ReportDialogDialog);
            return ReportDialogDialog;
        }(Serenity.EntityDialog));
        EnterpriseSys.ReportDialogDialog = ReportDialogDialog;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogGrid = /** @class */ (function (_super) {
            __extends(ReportDialogGrid, _super);
            function ReportDialogGrid(container) {
                return _super.call(this, container) || this;
            }
            ReportDialogGrid.prototype.getColumnsKey = function () { return 'EnterpriseSys.ReportDialog'; };
            ReportDialogGrid.prototype.getDialogType = function () { return EnterpriseSys.ReportDialogDialog; };
            ReportDialogGrid.prototype.getIdProperty = function () { return EnterpriseSys.ReportDialogRow.idProperty; };
            ReportDialogGrid.prototype.getLocalTextPrefix = function () { return EnterpriseSys.ReportDialogRow.localTextPrefix; };
            ReportDialogGrid.prototype.getService = function () { return EnterpriseSys.ReportDialogService.baseUrl; };
            ReportDialogGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.push({
                    field: 'Preview',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action preview-report"  title="Preview">' +
                        '<i class="fa fa-trash-o text-red"></i></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                return columns;
            };
            ReportDialogGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            ReportDialogGrid.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (target.hasClass('preview-report')) {
                        //let reportId = item.ReportId;
                        //let desc = item.Description;
                        var parm = {
                            reportId: item.ReportId,
                            desc: item.Description
                        };
                        var dlg = new Matrix.EnterpriseSys.ReportPreivewDialog(parm);
                        this.initDialog(dlg);
                        dlg.dialogOpen(false);
                    }
                }
            };
            ReportDialogGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ReportDialogGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ReportDialogGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ReportDialogGrid);
            return ReportDialogGrid;
        }(Serenity.EntityGrid));
        EnterpriseSys.ReportDialogGrid = ReportDialogGrid;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionDialog = /** @class */ (function (_super) {
            __extends(ReportDialogOptionDialog, _super);
            function ReportDialogOptionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new EnterpriseSys.ReportDialogOptionForm(_this.idPrefix);
                return _this;
            }
            ReportDialogOptionDialog.prototype.getFormKey = function () { return EnterpriseSys.ReportDialogOptionForm.formKey; };
            ReportDialogOptionDialog.prototype.getLocalTextPrefix = function () { return EnterpriseSys.ReportDialogOptionRow.localTextPrefix; };
            ReportDialogOptionDialog.prototype.getNameProperty = function () { return EnterpriseSys.ReportDialogOptionRow.nameProperty; };
            ReportDialogOptionDialog.prototype.getService = function () { return EnterpriseSys.ReportDialogOptionService.baseUrl; };
            ReportDialogOptionDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            ReportDialogOptionDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            ReportDialogOptionDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], ReportDialogOptionDialog);
            return ReportDialogOptionDialog;
        }(Serenity.EntityDialog));
        EnterpriseSys.ReportDialogOptionDialog = ReportDialogOptionDialog;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var GridEditorBase = /** @class */ (function (_super) {
            __extends(GridEditorBase, _super);
            function GridEditorBase(container) {
                var _this = _super.call(this, container) || this;
                _this.nextId = 1;
                return _this;
            }
            GridEditorBase.prototype.getIdProperty = function () { return "__id"; };
            GridEditorBase.prototype.id = function (entity) {
                return entity[this.getIdProperty()];
            };
            GridEditorBase.prototype.getNextId = function () {
                return "`" + this.nextId++;
            };
            GridEditorBase.prototype.setNewId = function (entity) {
                entity[this.getIdProperty()] = this.getNextId();
            };
            GridEditorBase.prototype.save = function (opt, callback) {
                var _this = this;
                var request = opt.request;
                var row = Q.deepClone(request.Entity);
                var id = this.id(row);
                if (id == null) {
                    row[this.getIdProperty()] = this.getNextId();
                }
                if (!this.validateEntity(row, id)) {
                    return;
                }
                var items = this.view.getItems().slice();
                if (id == null) {
                    items.push(row);
                }
                else {
                    var index = Q.indexOf(items, function (x) { return _this.id(x) === id; });
                    items[index] = Q.deepClone({}, items[index], row);
                }
                this.setEntities(items);
                callback({});
            };
            GridEditorBase.prototype.deleteEntity = function (id) {
                this.view.deleteItem(id);
                return true;
            };
            GridEditorBase.prototype.validateEntity = function (row, id) {
                return true;
            };
            GridEditorBase.prototype.setEntities = function (items) {
                this.view.setItems(items, true);
            };
            GridEditorBase.prototype.getNewEntity = function () {
                return {};
            };
            GridEditorBase.prototype.getButtons = function () {
                var _this = this;
                return [{
                        title: this.getAddButtonCaption(),
                        cssClass: 'add-button',
                        onClick: function () {
                            _this.createEntityDialog(_this.getItemType(), function (dlg) {
                                var dialog = dlg;
                                dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                                dialog.loadEntityAndOpenDialog(_this.getNewEntity());
                            });
                        }
                    }];
            };
            GridEditorBase.prototype.editItem = function (entityOrId) {
                var _this = this;
                var id = entityOrId;
                var item = this.view.getItemById(id);
                this.createEntityDialog(this.getItemType(), function (dlg) {
                    var dialog = dlg;
                    dialog.onDelete = function (opt, callback) {
                        if (!_this.deleteEntity(id)) {
                            return;
                        }
                        callback({});
                    };
                    dialog.onSave = function (opt, callback) { return _this.save(opt, callback); };
                    dialog.loadEntityAndOpenDialog(item);
                });
                ;
            };
            GridEditorBase.prototype.getEditValue = function (property, target) {
                target[property.name] = this.value;
            };
            GridEditorBase.prototype.setEditValue = function (source, property) {
                this.value = source[property.name];
            };
            Object.defineProperty(GridEditorBase.prototype, "value", {
                get: function () {
                    var p = this.getIdProperty();
                    return this.view.getItems().map(function (x) {
                        var y = Q.deepClone(x);
                        var id = y[p];
                        if (id && id.toString().charAt(0) == '`')
                            delete y[p];
                        return y;
                    });
                },
                set: function (value) {
                    var _this = this;
                    var p = this.getIdProperty();
                    this.view.setItems((value || []).map(function (x) {
                        var y = Q.deepClone(x);
                        if (y[p] == null)
                            y[p] = "`" + _this.getNextId();
                        return y;
                    }), true);
                },
                enumerable: true,
                configurable: true
            });
            GridEditorBase.prototype.getGridCanLoad = function () {
                return false;
            };
            GridEditorBase.prototype.usePager = function () {
                return false;
            };
            GridEditorBase.prototype.getInitialTitle = function () {
                return null;
            };
            GridEditorBase.prototype.createQuickSearchInput = function () {
            };
            GridEditorBase = __decorate([
                Serenity.Decorators.registerClass([Serenity.IGetEditValue, Serenity.ISetEditValue]),
                Serenity.Decorators.editor(),
                Serenity.Decorators.element("<div/>")
            ], GridEditorBase);
            return GridEditorBase;
        }(Serenity.EntityGrid));
        Common.GridEditorBase = GridEditorBase;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionEditor = /** @class */ (function (_super) {
            __extends(ReportDialogOptionEditor, _super);
            function ReportDialogOptionEditor(container) {
                return _super.call(this, container) || this;
            }
            ReportDialogOptionEditor.prototype.getColumnsKey = function () { return "EnterpriseSys.ReportDialogOption"; };
            ReportDialogOptionEditor.prototype.getDialogType = function () { return EnterpriseSys.ReportDialogOptionDialog; };
            ReportDialogOptionEditor.prototype.getLocalTextPrefix = function () { return EnterpriseSys.ReportDialogOptionRow.localTextPrefix; };
            ReportDialogOptionEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            ReportDialogOptionEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            ReportDialogOptionEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], ReportDialogOptionEditor);
            return ReportDialogOptionEditor;
        }(Matrix.Common.GridEditorBase));
        EnterpriseSys.ReportDialogOptionEditor = ReportDialogOptionEditor;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionGrid = /** @class */ (function (_super) {
            __extends(ReportDialogOptionGrid, _super);
            function ReportDialogOptionGrid(container) {
                return _super.call(this, container) || this;
            }
            ReportDialogOptionGrid.prototype.getColumnsKey = function () { return 'EnterpriseSys.ReportDialogOption'; };
            ReportDialogOptionGrid.prototype.getDialogType = function () { return EnterpriseSys.ReportDialogOptionDialog; };
            ReportDialogOptionGrid.prototype.getLocalTextPrefix = function () { return EnterpriseSys.ReportDialogOptionRow.localTextPrefix; };
            ReportDialogOptionGrid.prototype.getService = function () { return EnterpriseSys.ReportDialogOptionService.baseUrl; };
            ReportDialogOptionGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            ReportDialogOptionGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ReportDialogOptionGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ReportDialogOptionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ReportDialogOptionGrid);
            return ReportDialogOptionGrid;
        }(Serenity.EntityGrid));
        EnterpriseSys.ReportDialogOptionGrid = ReportDialogOptionGrid;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionItemDialog = /** @class */ (function (_super) {
            __extends(ReportDialogOptionItemDialog, _super);
            function ReportDialogOptionItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new EnterpriseSys.ReportDialogOptionItemForm(_this.idPrefix);
                return _this;
            }
            ReportDialogOptionItemDialog.prototype.getFormKey = function () { return EnterpriseSys.ReportDialogOptionItemForm.formKey; };
            ReportDialogOptionItemDialog.prototype.getIdProperty = function () { return EnterpriseSys.ReportDialogOptionItemRow.idProperty; };
            ReportDialogOptionItemDialog.prototype.getLocalTextPrefix = function () { return EnterpriseSys.ReportDialogOptionItemRow.localTextPrefix; };
            ReportDialogOptionItemDialog.prototype.getNameProperty = function () { return EnterpriseSys.ReportDialogOptionItemRow.nameProperty; };
            ReportDialogOptionItemDialog.prototype.getService = function () { return EnterpriseSys.ReportDialogOptionItemService.baseUrl; };
            ReportDialogOptionItemDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            ReportDialogOptionItemDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            ReportDialogOptionItemDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], ReportDialogOptionItemDialog);
            return ReportDialogOptionItemDialog;
        }(Serenity.EntityDialog));
        EnterpriseSys.ReportDialogOptionItemDialog = ReportDialogOptionItemDialog;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var ReportDialogOptionItemGrid = /** @class */ (function (_super) {
            __extends(ReportDialogOptionItemGrid, _super);
            function ReportDialogOptionItemGrid(container) {
                return _super.call(this, container) || this;
            }
            ReportDialogOptionItemGrid.prototype.getColumnsKey = function () { return 'EnterpriseSys.ReportDialogOptionItem'; };
            ReportDialogOptionItemGrid.prototype.getDialogType = function () { return EnterpriseSys.ReportDialogOptionItemDialog; };
            ReportDialogOptionItemGrid.prototype.getIdProperty = function () { return EnterpriseSys.ReportDialogOptionItemRow.idProperty; };
            ReportDialogOptionItemGrid.prototype.getLocalTextPrefix = function () { return EnterpriseSys.ReportDialogOptionItemRow.localTextPrefix; };
            ReportDialogOptionItemGrid.prototype.getService = function () { return EnterpriseSys.ReportDialogOptionItemService.baseUrl; };
            ReportDialogOptionItemGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            ReportDialogOptionItemGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ReportDialogOptionItemGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ReportDialogOptionItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ReportDialogOptionItemGrid);
            return ReportDialogOptionItemGrid;
        }(Serenity.EntityGrid));
        EnterpriseSys.ReportDialogOptionItemGrid = ReportDialogOptionItemGrid;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        //import any = Q.any;
        var ReportPreivewDialog = /** @class */ (function (_super) {
            __extends(ReportPreivewDialog, _super);
            function ReportPreivewDialog(reportId) {
                var _this = _super.call(this, reportId) || this;
                _this.reportId = reportId.reportId;
                _this.desc = reportId.desc;
                $('#reportTitle').val(_this.reportId);
                _this.load(_this.reportId);
                return _this;
            }
            ReportPreivewDialog.prototype.load = function (reportId) {
                var _this = this;
                var data = {
                    ReportId: reportId
                };
                EnterpriseSys.ReportDialogService.ReportDetail(data, function (response) {
                    var initialize = "";
                    for (var _i = 0, _a = response.Rows; _i < _a.length; _i++) {
                        var x = _a[_i];
                        x.Vue = initialize;
                    }
                    _this.rows = response.Rows;
                    console.log("ReportDetail", response);
                    var vm = new Vue({
                        el: '#reports',
                        data: {
                            rows: _this.rows,
                            yes: true,
                            no: false,
                            age: 28,
                            name: 'keepfool'
                        },
                        methods: {
                            OnPreview: function (event) {
                                if (event)
                                    event.preventDefault();
                                console.log("changed", this.rows);
                                var values = [];
                                for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
                                    var entry = _a[_i];
                                    if (entry.Required === 1) {
                                        Q.warning(entry.Caption + " is required");
                                        return;
                                    }
                                    var item = {};
                                    item.OptionNo = entry.OptionNo;
                                    item.Value = entry.Vue;
                                    values.push(item);
                                }
                                var parm = {};
                                parm.ReportId = reportId;
                                parm.Values = values;
                                var url = "http://localhost:7451/Modules/Report/Default.aspx";
                                EnterpriseSys.ReportDialogService.ReportPreview(parm, function (response) {
                                    window.open(url, "_blank");
                                });
                            },
                            OnPrint: function (msg) {
                                //alert(msg)
                            }
                        }
                    });
                });
            };
            ReportPreivewDialog.initializePage = function () {
                //$(function () {
                //    $('#LaunchDialogButton').click(function (e) {
                //        (new ChartInDialog()).dialogOpen();
                //    });
                //});
            };
            ReportPreivewDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
                //BasicSamplesService.OrdersByShipper({}, response => {
                //    this.areaChart = new Morris.Area({
                //        element: this.idPrefix + 'Chart',
                //        resize: true, parseTime: false,
                //        data: response.Values,
                //        xkey: 'Month',
                //        ykeys: response.ShipperKeys, labels: response.ShipperLabels, hideHover: 'auto'
                //    });
                //});
            };
            ReportPreivewDialog.prototype.getDialogOptions = function () {
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.title = this.desc;
                return opt;
            };
            ReportPreivewDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.resizable(),
                Serenity.Decorators.maximizable()
            ], ReportPreivewDialog);
            return ReportPreivewDialog;
        }(Serenity.TemplatedDialog));
        EnterpriseSys.ReportPreivewDialog = ReportPreivewDialog;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialog = /** @class */ (function (_super) {
            __extends(LookupDialog, _super);
            function LookupDialog(data) {
                var _this = _super.call(this, data) || this;
                _this.LookupName = data.LookupName;
                _this.LookupFilter = data.LookupFilter;
                _this.CurrentPageIndex = data.CurrentPageIndex;
                _this.TargetId = data.TargetId;
                _this.KeyValue1 = "";
                _this.KeyValue2 = "";
                _this.KeyValue3 = "";
                return _this;
            }
            LookupDialog.prototype.onDialogOpen = function () {
                var _this = this;
                _super.prototype.onDialogOpen.call(this);
                //$(this).dialog('widget').position({ my: "center", at: "center", of: window });
                var data = {
                    LookupName: this.LookupName,
                    LookupFilter: this.LookupFilter,
                    CurrentPageIndex: this.CurrentPageIndex
                };
                Matrix.Administration.TranslationService.Lookup(data, function (response) {
                    console.log("GetData response:", response);
                    _this.InitializeDialog(response);
                    _this.InitializeVueJS(_this, response, _this.LookupName, _this.LookupFilter, _this.CurrentPageIndex);
                });
            };
            LookupDialog.prototype.InitializeDialog = function (response) {
                this.dialogTitle = response.Description;
            };
            LookupDialog.prototype.InitializeVueJS = function (parent, response, lookupName, lookupFilter, currentPageIndex) {
                this.vuejs = new Vue({
                    el: '#lookup',
                    data: {
                        Rows: response.RowData.Data,
                        Columns: response.Columns,
                        PageCount: response.PageCount,
                        CurrentPageIndex: currentPageIndex,
                        LookupName: lookupName,
                        LookupFilter: lookupFilter,
                        KeyField1: response.KeyField1,
                        KeyField2: response.KeyField2,
                        KeyField3: response.KeyField3,
                        KeyFieldValue1: null,
                        KeyFieldValue2: null,
                        KeyFieldValue3: null,
                        Parent: parent
                    },
                    computed: {
                        PagerDisplay: function () {
                            var self = this;
                            var PAGE_NUMBER = 10;
                            var min = 0;
                            var max = 0;
                            if (self.PageCount <= PAGE_NUMBER) {
                                min = 1;
                                max = Math.min(self.PageCount, PAGE_NUMBER);
                            }
                            else {
                                if (self.CurrentPageIndex < 6) {
                                    min = 1;
                                    max = PAGE_NUMBER;
                                }
                                else {
                                    min = self.CurrentPageIndex;
                                    max = Math.min(self.CurrentPageIndex + 4, self.PageCount);
                                    var vcount = max - min + 1;
                                    if (vcount < PAGE_NUMBER) {
                                        var number1 = max - min + 1;
                                        min = self.CurrentPageIndex - (PAGE_NUMBER - number1);
                                    }
                                }
                            }
                            var pageList = [];
                            for (var i = min; i <= max; i++) {
                                pageList.push(i);
                            }
                            console.log("pageList", pageList);
                            return pageList;
                        }
                    },
                    ready: function () {
                        //this.getCustomers();
                    },
                    methods: {
                        OnOKClick: function (event) {
                            this.Parent.dialogClose();
                            var texbox = jQuery("#" + this.Parent.TargetId);
                            texbox.val(this.KeyFieldValue1);
                        },
                        OnCloseClick: function (event) {
                            this.Parent.dialogClose();
                        },
                        OnNextPageClick: function (event) {
                            this.CurrentPageIndex = this.CurrentPageIndex + 1;
                            this.GetData(this.LookupName, this.LookupFilter, this.CurrentPageIndex);
                        },
                        OnPreviousClick: function (event) {
                            this.CurrentPageIndex = this.CurrentPageIndex - 1;
                            this.GetData(this.LookupName, this.LookupFilter, this.CurrentPageIndex);
                        },
                        OnPagerClick: function (pageIndex) {
                            console.log("PagerClick", pageIndex);
                            this.CurrentPageIndex = pageIndex;
                            this.GetData(this.LookupName, this.LookupFilter, pageIndex);
                        },
                        OnNonPagerClick: function (event) {
                            if (event)
                                event.preventDefault();
                        },
                        OnRowClick: function (event, row) {
                            console.log("select row", row);
                            var key1 = row[this.KeyField1];
                            this.KeyFieldValue1 = key1;
                        },
                        GetData: function (lookupName, lookupFilter, currentPageIndex) {
                            var _this = this;
                            var data = {
                                LookupName: lookupName,
                                LookupFilter: lookupFilter,
                                CurrentPageIndex: currentPageIndex
                            };
                            Matrix.Administration.TranslationService.Lookup(data, function (response) {
                                console.log("GetData response in page changed :", response);
                                _this.Rows = response.RowData.Data,
                                    _this.Columns = response.Columns;
                                _this.PageCount = response.PageCount;
                            });
                        }
                    }
                });
            };
            LookupDialog.prototype.getDialogOptions = function () {
                var opt = _super.prototype.getDialogOptions.call(this);
                //opt.position = {  my: "center",  at: "center",  of: window  };
                return opt;
            };
            LookupDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.resizable(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.maximizable()
            ], LookupDialog);
            return LookupDialog;
        }(Serenity.TemplatedDialog));
        Administration.LookupDialog = LookupDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var LookupDialogController = /** @class */ (function () {
            function LookupDialogController(data) {
                this.controls = data;
            }
            LookupDialogController.prototype.InitiaizeLookupUI = function () {
                this.controls.each(function (i, item) {
                    var txt = $(item).text();
                    var lookup = $(item).attr("lookup");
                    var filter = $(item).attr("filter");
                    var targetId = $(item).attr("id");
                    var ctrl = jQuery.validator
                        .format('<input id="btn{2}" style="margin-left:5pt" class="buttonLookup" type="button" value="..."  lookup="{0}"   filter="{1}"  targetId="{2}" />', lookup, filter, targetId);
                    $(item).after($(ctrl));
                });
            };
            LookupDialogController.prototype.InitiaizeLookupExecution = function () {
                this.controls.each(function (i, item) {
                    jQuery(document).off().on('click', item, function (event) {
                        //event.preventDefault();
                        event.stopPropagation();
                        //$(event).one('click', function (e) { e.stopImmediatePropagation(); });
                        var control = event.target;
                        if (control.tagName !== "INPUT")
                            return;
                        console.log("control", control);
                        var lookupname = control.getAttribute("lookup");
                        if (lookupname == null)
                            return;
                        var filter = control.getAttribute("filter");
                        var targetId = control.getAttribute("targetId");
                        var pageIndex = 1;
                        if (lookupname == null || filter == null) {
                            console.log("Error in retrieve lookup data", control);
                            return;
                        }
                        console.log(jQuery.validator.format("reuest param:{0}.{1}.{2}.{3}", lookupname, filter, targetId, pageIndex));
                        var data = {
                            LookupName: lookupname,
                            LookupFilter: filter,
                            TargetId: targetId,
                            CurrentPageIndex: pageIndex
                        };
                        var dlg = new Matrix.Administration.LookupDialog(data);
                        dlg.dialogOpen(false);
                    });
                });
            };
            return LookupDialogController;
        }());
        Administration.LookupDialogController = LookupDialogController;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var TranslationDialog = /** @class */ (function (_super) {
            __extends(TranslationDialog, _super);
            function TranslationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.TranslationForm(_this.idPrefix);
                return _this;
            }
            TranslationDialog.prototype.getFormKey = function () { return Administration.TranslationForm.formKey; };
            TranslationDialog.prototype.getIdProperty = function () { return "__id"; };
            TranslationDialog.prototype.getLocalTextPrefix = function () { return Administration.TranslationRow.localTextPrefix; };
            TranslationDialog.prototype.getNameProperty = function () { return Administration.TranslationRow.nameProperty; };
            TranslationDialog.prototype.getService = function () { return Administration.TranslationService.baseUrl; };
            TranslationDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            TranslationDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            TranslationDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], TranslationDialog);
            return TranslationDialog;
        }(Serenity.EntityDialog));
        Administration.TranslationDialog = TranslationDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../../../Serenity/Serenity.TypeScript.CodeGeneration/Serenity.CodeGeneration.d.ts" />
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var TranslationGrid = /** @class */ (function (_super) {
            __extends(TranslationGrid, _super);
            function TranslationGrid(container) {
                var _this = _super.call(this, container) || this;
                _this.nextId = 1;
                return _this;
            }
            TranslationGrid.prototype.getColumnsKey = function () { return 'Administration.Translation'; };
            TranslationGrid.prototype.getDialogType = function () { return Administration.TranslationDialog; };
            TranslationGrid.prototype.getIdProperty = function () { return "__id"; };
            TranslationGrid.prototype.getLocalTextPrefix = function () { return Administration.TranslationRow.localTextPrefix; };
            TranslationGrid.prototype.getService = function () { return Administration.TranslationService.baseUrl; };
            TranslationGrid.prototype.onViewProcessData = function (response) {
                response = _super.prototype.onViewProcessData.call(this, response);
                if (response.Entities == null)
                    return response;
                for (var _i = 0, _a = response.Entities; _i < _a.length; _i++) {
                    var x = _a[_i];
                    x.__id = this.nextId++;
                }
                return response;
            };
            TranslationGrid.prototype.getDefaultSortBy = function () {
                return [Administration.TranslationRow.Fields.KeyText];
            };
            TranslationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TranslationGrid);
            return TranslationGrid;
        }(Serenity.EntityGrid));
        Administration.TranslationGrid = TranslationGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserDialog = /** @class */ (function (_super) {
            __extends(UserDialog, _super);
            function UserDialog() {
                var _this = _super.call(this) || this;
                _this.form = new Administration.UserForm(_this.idPrefix);
                _this.form.Password.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.Password.value.length < 7)
                        return "Password must be at least 7 characters!";
                });
                return _this;
                //this.form.PasswordConfirm.addValidationRule(this.uniqueName, e => {
                //    if (this.form.Password.value != this.form.PasswordConfirm.value)
                //        return "The passwords entered doesn't match!";
                //});
            }
            UserDialog.prototype.getFormKey = function () { return Administration.UserForm.formKey; };
            UserDialog.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserDialog.prototype.getIsActiveProperty = function () { return true; };
            UserDialog.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserDialog.prototype.getNameProperty = function () { return Administration.UserRow.nameProperty; };
            UserDialog.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.push({
                    title: Q.text('Site.UserDialog.EditRolesButton'),
                    cssClass: 'edit-roles-button',
                    icon: 'icon-people text-blue',
                    onClick: function () {
                        //new UserRoleDialog({
                        //    userID: this.entity.UserId,
                        //    username: this.entity.Username
                        //}).dialogOpen();
                    }
                });
                buttons.push({
                    title: Q.text('Site.UserDialog.EditPermissionsButton'),
                    cssClass: 'edit-permissions-button',
                    icon: 'icon-lock-open text-green',
                    onClick: function () {
                        //new UserPermissionDialog({
                        //    userID: this.entity.UserId,
                        //    username: this.entity.Username
                        //}).dialogOpen();
                    }
                });
                return buttons;
            };
            UserDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.toolbar.findButton('edit-roles-button').toggleClass('disabled', this.isNewOrDeleted());
                this.toolbar.findButton("edit-permissions-button").toggleClass("disabled", this.isNewOrDeleted());
            };
            UserDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                // these fields are only required in new record mode
                this.form.Password.element.toggleClass('required', this.isNew())
                    .closest('.field').find('sup').toggle(this.isNew());
                //this.form.PasswordConfirm.element.toggleClass('required', this.isNew())
                //    .closest('.field').find('sup').toggle(this.isNew());
            };
            UserDialog = __decorate([
                Serenity.Decorators.panel(),
                Serenity.Decorators.registerClass()
            ], UserDialog);
            return UserDialog;
        }(Serenity.EntityDialog));
        Administration.UserDialog = UserDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserGrid = /** @class */ (function (_super) {
            __extends(UserGrid, _super);
            function UserGrid(container) {
                return _super.call(this, container) || this;
            }
            UserGrid.prototype.getColumnsKey = function () { return "Administration.User"; };
            UserGrid.prototype.getDialogType = function () { return Administration.UserDialog; };
            UserGrid.prototype.getIdProperty = function () { return Administration.UserRow.idProperty; };
            UserGrid.prototype.getIsActiveProperty = function () { return true; };
            UserGrid.prototype.getLocalTextPrefix = function () { return Administration.UserRow.localTextPrefix; };
            UserGrid.prototype.getService = function () { return Administration.UserService.baseUrl; };
            UserGrid.prototype.getDefaultSortBy = function () {
                return [Administration.UserRow.Fields.Username];
            };
            UserGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            UserGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            UserGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            UserGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], UserGrid);
            return UserGrid;
        }(Serenity.EntityGrid));
        Administration.UserGrid = UserGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserDefinedQueryDialog = /** @class */ (function (_super) {
            __extends(UserDefinedQueryDialog, _super);
            function UserDefinedQueryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Administration.UserDefinedQueryForm(_this.idPrefix);
                return _this;
            }
            UserDefinedQueryDialog.prototype.getFormKey = function () { return Administration.UserDefinedQueryForm.formKey; };
            UserDefinedQueryDialog.prototype.getIdProperty = function () { return Administration.UserDefinedQueryRow.idProperty; };
            UserDefinedQueryDialog.prototype.getLocalTextPrefix = function () { return Administration.UserDefinedQueryRow.localTextPrefix; };
            UserDefinedQueryDialog.prototype.getNameProperty = function () { return Administration.UserDefinedQueryRow.nameProperty; };
            UserDefinedQueryDialog.prototype.getService = function () { return Administration.UserDefinedQueryService.baseUrl; };
            UserDefinedQueryDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            UserDefinedQueryDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            UserDefinedQueryDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], UserDefinedQueryDialog);
            return UserDefinedQueryDialog;
        }(Serenity.EntityDialog));
        Administration.UserDefinedQueryDialog = UserDefinedQueryDialog;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Administration;
    (function (Administration) {
        var UserDefinedQueryGrid = /** @class */ (function (_super) {
            __extends(UserDefinedQueryGrid, _super);
            function UserDefinedQueryGrid(container) {
                return _super.call(this, container) || this;
            }
            UserDefinedQueryGrid.prototype.getColumnsKey = function () { return 'Administration.UserDefinedQuery'; };
            UserDefinedQueryGrid.prototype.getDialogType = function () { return Administration.UserDefinedQueryDialog; };
            UserDefinedQueryGrid.prototype.getIdProperty = function () { return Administration.UserDefinedQueryRow.idProperty; };
            UserDefinedQueryGrid.prototype.getLocalTextPrefix = function () { return Administration.UserDefinedQueryRow.localTextPrefix; };
            UserDefinedQueryGrid.prototype.getService = function () { return Administration.UserDefinedQueryService.baseUrl; };
            UserDefinedQueryGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            UserDefinedQueryGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            UserDefinedQueryGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            UserDefinedQueryGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.push({
                    field: 'View Details',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action view-details" title="view details">View Detail</a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                return columns;
            };
            UserDefinedQueryGrid.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                // if user clicks "i" element, e.g. icon
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (target.hasClass('view-details')) {
                        Q.notifySuccess("No problem!" + item);
                    }
                }
            };
            UserDefinedQueryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], UserDefinedQueryGrid);
            return UserDefinedQueryGrid;
        }(Serenity.EntityGrid));
        Administration.UserDefinedQueryGrid = UserDefinedQueryGrid;
    })(Administration = Matrix.Administration || (Matrix.Administration = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var KeyedCollection = /** @class */ (function () {
        function KeyedCollection() {
            this.items = {};
            this.count = 0;
        }
        KeyedCollection.prototype.ContainsKey = function (key) {
            return this.items.hasOwnProperty(key);
        };
        KeyedCollection.prototype.Count = function () {
            return this.count;
        };
        KeyedCollection.prototype.Add = function (key, value) {
            if (!this.items.hasOwnProperty(key))
                this.count++;
            this.items[key] = value;
        };
        KeyedCollection.prototype.Remove = function (key) {
            var val = this.items[key];
            delete this.items[key];
            this.count--;
            return val;
        };
        KeyedCollection.prototype.Item = function (key) {
            return this.items[key];
        };
        KeyedCollection.prototype.Keys = function () {
            var keySet = [];
            for (var prop in this.items) {
                if (this.items.hasOwnProperty(prop)) {
                    keySet.push(prop);
                }
            }
            return keySet;
        };
        KeyedCollection.prototype.Values = function () {
            var values = [];
            for (var prop in this.items) {
                if (this.items.hasOwnProperty(prop)) {
                    values.push(this.items[prop]);
                }
            }
            return values;
        };
        return KeyedCollection;
    }());
    Matrix.KeyedCollection = KeyedCollection;
})(Matrix || (Matrix = {}));
var App;
(function (App) {
    //export class String {
    //    public static isNullOrEmpty(value: string | any): boolean {
    //        if (value === undefined || value == null || value === '')
    //            return true;
    //        return false;
    //    }
    //    public static toDate(value: string | any, formats?: any): Date {
    //        if (Object.isNullOrUndefined(formats)) {
    //            formats = DateTimeFormat.DateTimeSecond;
    //        }
    //        return kendo.parseDate(value, formats, Setting['lang']);
    //    }
    //    public static translate(code: string): any {
    //        var gettextCatalog = Setting['gettext'] as angular.gettext.gettextCatalog;
    //        return gettextCatalog.getString(code);
    //    }
    //    public static format(code: string, formatdata: any): string {
    //        var gettextCatalog = Setting['gettext'] as angular.gettext.gettextCatalog;
    //        var txt = gettextCatalog.getString(code);
    //        var j: number = 0;
    //        $.each(formatdata, (i, n) => {
    //            var langStr = "{" + j + "}";
    //            txt = txt.replace(langStr, "{{" + i + "}}");
    //            j++;
    //        });
    //        return gettextCatalog.getString(txt, formatdata);
    //    }
    //}
    var DateTime = /** @class */ (function () {
        function DateTime() {
        }
        DateTime.today = function () {
            var date = new Date();
            return new Date(date.getFullYear(), date.getMonth(), date.getDate());
        };
        DateTime.addDays = function (date, days) {
            var resultDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            resultDate.setDate(resultDate.getDate() + days);
            return resultDate;
        };
        DateTime.addMonths = function (date, months) {
            var resultDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            resultDate.setMonth(resultDate.getMonth() + months);
            return resultDate;
        };
        DateTime.addHours = function (date, hours) {
            var resultDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            resultDate.setHours(resultDate.getHours() + hours);
            return resultDate;
        };
        DateTime.addMintues = function (date, minutes) {
            var resultDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            resultDate.setMinutes(resultDate.getMinutes() + minutes);
            return resultDate;
        };
        DateTime.CheckDateTimeFormatToMinute = function (value) {
            //Format: dd/MM/yyyy HH:mm
            var formatReg = new RegExp("^([12][0-9]|3[01]|0?[1-9])/([1][0-2]|0?[1-9])/[1-2][0-9][0-9][0-9] ([01][0-9]|[2][0-3]):[0-5][0-9]$");
            return formatReg.test(value);
            // for february need add new one Regexp
        };
        DateTime.CheckDateTimeFormatToDay = function (value) {
            //Format: dd/MM/yyyy
            var formatReg = new RegExp("^([12][0-9]|3[01]|0?[1-9])/([1][0-2]|0?[1-9])/[1-2][0-9][0-9][0-9]$");
            return formatReg.test(value);
            // for february need add new one Regexp
        };
        return DateTime;
    }());
    App.DateTime = DateTime;
    var Object = /** @class */ (function () {
        function Object() {
        }
        Object.isNullOrUndefined = function (value) {
            if (value === undefined || value == null || value == "")
                return true;
            return false;
        };
        return Object;
    }());
    App.Object = Object;
    var Guid = /** @class */ (function () {
        function Guid() {
        }
        Guid.isEmpty = function (value) {
            return value === '00000000-0000-0000-0000-000000000000';
        };
        Guid.Empty = '00000000-0000-0000-0000-000000000000';
        return Guid;
    }());
    App.Guid = Guid;
    var Array = /** @class */ (function () {
        function Array() {
        }
        Array.RemoveAt = function (index, data) {
            if (isNaN(index) || index > data.length) {
                return data;
            }
            return data.slice(0, index).concat(data.slice(index + 1, data.length));
        };
        return Array;
    }());
    App.Array = Array;
    var Common = /** @class */ (function () {
        function Common() {
        }
        Common.HandleError = function (reason) {
            console.log(reason);
        };
        return Common;
    }());
    App.Common = Common;
    var Table = /** @class */ (function () {
        function Table() {
        }
        Table.InitGridControl = function () {
            $(".table-select tr").bind('click', function (event) {
                //multi table
                var container = $(event.currentTarget).parents(".table-select");
                container.find(".select-tr").removeClass("select-tr");
                //group table
                var containergroup = $(event.currentTarget).parents(".table-group");
                containergroup.find(".select-tr").removeClass("select-tr");
                $(event.currentTarget).addClass("select-tr");
                var dd = $(event.currentTarget).parentsUntil(".table-select");
                $.each(dd, function (i, n) {
                    if ($(n).is("tr")) {
                        $(n).addClass("select-tr");
                    }
                });
                $(event.currentTarget).find(".table-subgrid tr").first().addClass("select-tr");
                return false;
            });
            this.TableStripedHandle();
            this.InitMultiGrid();
        };
        Table.TableStripedHandle = function () {
            $(".table-striped>tbody>tr").each(function (i, n) {
                $(n).find(".table-subgrid").css('background-color', $(n).css('background-color'));
            });
        };
        Table.InitMultiGrid = function () {
            $('.collapse').collapse('show');
        };
        //kendo grid
        Table.InitMergeRowsKendoGrid = function (mergeColumns, target) {
            var tb = target.element;
            mergeColumns.forEach(function (ii, nn) {
                var indexCol = ii;
                if (indexCol > -1) {
                    var first_instance = null;
                    var rowspan = 1;
                    var trs = $(tb).find('tr');
                    var keyRLength;
                    trs.each(function (i, row) {
                        var dimension_td = $($(row).find('td')[indexCol]);
                        var rLength = $($(row).find('td')[mergeColumns[0]]).attr('rowspan');
                        if (rLength)
                            keyRLength = rLength;
                        if (first_instance == null) {
                            first_instance = dimension_td;
                            rowspan = 1;
                        }
                        else if (dimension_td.text() == first_instance.text()) {
                            if (rLength) {
                                first_instance.attr('rowspan', rowspan);
                                rowspan = 1;
                                first_instance = dimension_td;
                            }
                            else {
                                rowspan++;
                                dimension_td.hide();
                            }
                        }
                        else {
                            first_instance.attr('rowspan', rowspan);
                            //set css
                            // console.warn(indexCol == mergeColumns[0], indexCol, mergeColumns[0]);
                            if (indexCol == mergeColumns[0]) {
                                $(first_instance).parent("tr:first").addClass("rowspan");
                            }
                            rowspan = 1;
                            first_instance = dimension_td;
                        }
                        if (i == trs.length - 1) {
                            first_instance.attr('rowspan', rowspan);
                            //set css
                            if (indexCol == mergeColumns[0]) {
                                $(first_instance).parent("tr:first").addClass("rowspan");
                            }
                        }
                    });
                }
            });
            var trs = $(tb).find('tr');
            var mergeRowIndex = 0;
            trs.each(function (i, n) {
                var row = $(n);
                if (row.hasClass("rowspan")) {
                    if (mergeRowIndex % 2 > 0) {
                        row.addClass("odd");
                    }
                    mergeRowIndex++;
                }
                else {
                    var prerow = row.prev("tr");
                    if (prerow.hasClass("rowspan")) {
                        prerow.find("td").css("border-bottom-width", "0px");
                        prerow.find("td[rowspan]").css("border-bottom-width", "1px");
                    }
                    var nextrow = row.next("tr");
                    if (!nextrow.hasClass("rowspan"))
                        row.find("td").css("border-bottom-width", "0px");
                    if (mergeRowIndex % 2 == 0) {
                        row.addClass("odd");
                    }
                }
            });
            trs.last().find("td").css("border-bottom-width", "1px");
            trs.bind('click', function (event) {
                var row = $(event.currentTarget);
                row.siblings().removeClass("k-state-selected");
                row.siblings().find("td").removeClass("k-state-selected");
                row.siblings().find("td").removeClass("select-tr");
                row.addClass("k-state-selected");
                if (!row.hasClass("rowspan")) {
                    var mrows = row.prevAll(".rowspan");
                    // $(mrows[0]).find("td[rowspan]").addClass("k-state-selected");
                    $(mrows[0]).find("td[rowspan]").addClass("select-tr");
                }
            });
            //group header not display
            $(".k-grid .k-grouping-header").hide();
        };
        Table.InitMergeRowsKendoGridWithGroup = function (mergeColumns, target) {
            var tb = target.element;
            mergeColumns.forEach(function (ii, nn) {
                var indexCol = ii;
                if (indexCol > -1) {
                    var first_instance = null;
                    var rowspan = 1;
                    var trs = $(tb).find('tr');
                    trs.each(function (i, row) {
                        var dimension_td = $($(row).find('td')[indexCol]);
                        var rLength = $($(row).find('td')[mergeColumns[0]]).attr('rowspan');
                        if (first_instance == null) {
                            first_instance = dimension_td;
                            rowspan = 1;
                        }
                        else if (dimension_td.text() == first_instance.text()) {
                            if (rLength) {
                                first_instance.attr('rowspan', rowspan);
                                rowspan = 1;
                                first_instance = dimension_td;
                            }
                            else {
                                rowspan++;
                                dimension_td.hide();
                            }
                        }
                        else {
                            first_instance.attr('rowspan', rowspan);
                            //set css
                            //console.warn(indexCol == mergeColumns[0], indexCol, mergeColumns[0]);
                            if (indexCol == mergeColumns[0]) {
                                $(first_instance).parent("tr:first").addClass("rowspan");
                            }
                            rowspan = 1;
                            first_instance = dimension_td;
                        }
                        if (i == trs.length - 1) {
                            first_instance.attr('rowspan', rowspan);
                            //set css
                            if (indexCol == mergeColumns[0]) {
                                $(first_instance).parent("tr:first").addClass("rowspan");
                            }
                        }
                    });
                }
            });
            var trs = $(tb).find('tr');
            var mergeRowIndex = 1;
            trs.each(function (i, n) {
                var row = $(n);
                if (row.hasClass("rowspan")) {
                    if (mergeRowIndex % 2 > 0) {
                        row.addClass("odd");
                    }
                    mergeRowIndex++;
                }
                else {
                    var prerow = row.prev("tr");
                    if (prerow.hasClass("rowspan")) {
                        prerow.find("td").css("border-bottom-width", "0px");
                        prerow.find("td[rowspan]").css("border-bottom-width", "1px");
                    }
                    var nextrow = row.next("tr");
                    if (!nextrow.hasClass("rowspan"))
                        row.find("td").css("border-bottom-width", "0px");
                    if (row.hasClass("k-grouping-row")) {
                        row.prev("tr").find("td").css("border-bottom-width", "1px");
                    }
                    if (mergeRowIndex % 2 == 0) {
                        row.addClass("odd");
                    }
                }
                if (row.hasClass("k-grouping-row")) {
                    mergeRowIndex += 1;
                }
            });
            trs.last().find("td").css("border-bottom-width", "1px");
            trs.bind('click', function (event) {
                var kIcon = $(event.target);
                var row = $(event.currentTarget);
                if (row.hasClass("k-grouping-row") && !kIcon.hasClass("k-icon") && !kIcon.hasClass("linkurl")) {
                    return false;
                }
                row.siblings().removeClass("k-state-selected");
                row.siblings().find("td").removeClass("k-state-selected");
                row.siblings().find("td").removeClass("select-tr");
                row.addClass("k-state-selected");
                if (!row.hasClass("rowspan") && !kIcon.hasClass("k-icon")) {
                    var mrows = row.prevAll(".rowspan");
                    $(mrows[0]).find("td[rowspan]").addClass("select-tr");
                }
                if (kIcon.hasClass("k-icon")) {
                    var groupHeader = kIcon.parents("tr");
                    groupHeader.removeClass("k-state-selected");
                    var rows = groupHeader.nextUntil(".k-grouping-row");
                    if (kIcon.hasClass("k-i-collapse")) {
                        rows.addClass("display-none");
                    }
                    else {
                        rows.removeClass("display-none");
                    }
                }
                return true;
            });
            //group header not display
            $(".k-grid .k-grouping-header").hide();
            if ($("tr").find(".k-group-cell.k-header").length > 1) {
                $("tr:first").find(".k-group-cell.k-header").css("border-bottom", "none");
            }
        };
        return Table;
    }());
    App.Table = Table;
    var Util = /** @class */ (function () {
        function Util() {
        }
        Util.GetUrlParms = function (parmname, matchCase) {
            var reg, r;
            if (!matchCase) {
                reg = new RegExp("(^|&)" + parmname.toLowerCase() + "=([^&]*)(&|$)");
                r = window.location.search.toLowerCase().substr(1).match(reg);
            }
            else {
                reg = new RegExp("(^|&)" + parmname + "=([^&]*)(&|$)");
                r = window.location.search.substr(1).match(reg);
            }
            if (r != null)
                return r[2];
            return null;
        };
        Util.Timestamp = function () {
            return new Date().getTime();
        };
        Util.InitFormValidStyle = function (myForm) {
            $("#" + myForm.$name).addClass("ng-dirty");
        };
        Util.SetWindowAdaptiveHeight = function (fixedElement, adaptElemnet, opts) {
            var setting = {
                adjustHeight: 90,
                componentMinHeight: 200,
                pageAllRowEle: []
            };
            var newWinHeight = 0;
            $.extend(setting, opts);
            var fixedElementHeight = 0;
            var winHeight = $(window).innerHeight();
            setting.pageAllRowEle.forEach(function (t) {
                newWinHeight += $(t).height();
            });
            if (newWinHeight > winHeight) {
                winHeight = newWinHeight;
            }
            if (fixedElement !== null) {
                fixedElement.forEach(function (element, index, arr) {
                    fixedElementHeight += $(element).height();
                });
            }
            var adaptHeight = winHeight - fixedElementHeight - setting.adjustHeight;
            if (adaptHeight < setting.componentMinHeight) {
                adaptHeight = setting.componentMinHeight;
            }
            if (adaptElemnet != null) {
                adaptElemnet.forEach(function (item) {
                    if (item.toString().indexOf("|") <= 0) {
                        $(item).height(adaptHeight);
                    }
                    else {
                        var ele = item.toString().split("|");
                        var eleHeight = adaptHeight + parseInt(ele[1]);
                        $(ele[0]).height(eleHeight);
                    }
                });
            }
            return adaptHeight;
        };
        Util.FindValue = function (eleName, array) {
            var eleValue;
            if (array) {
                $.each(array, function (i, n) {
                    if (n.text == eleName)
                        eleValue = n.value;
                });
            }
            return eleValue;
        };
        Util.Title = function (title, num) {
            if (num) {
                return title + " for " + num;
            }
            return title;
        };
        ;
        Util.DisplayErroMsg = function (resp) {
            var erroMsg = "";
            var errMsg = JSON.parse(resp.statusText);
            for (var i = 0, len = errMsg.length; i < len; i++) {
                erroMsg += "*" + errMsg[i].Message + "\n";
            }
            return erroMsg;
        };
        ;
        //page control 
        Util.EnhanceControl = function () {
            var txtInputs = $("input[type='text']");
            txtInputs.each(function (i, n) {
                if (!n.hasAttribute("maxlength") && !$(n).parent().parent().hasClass("k-numerictextbox"))
                    $(n).attr("maxlength", 200);
                else if (!n.hasAttribute("maxlength"))
                    $(n).attr("maxlength", 14);
            });
            var areasInputs = $("textarea");
            areasInputs.each(function (i, n) {
                if (!n.hasAttribute("maxlength"))
                    $(n).attr("maxlength", 500);
            });
            var numberInputs = $("input[type='number']");
            numberInputs.each(function (i, n) {
                if (!n.hasAttribute("oninput"))
                    $(n).attr("oninput", "if (value.length > 14) value = value.slice(0, 14)");
            });
        };
        Util.GoBack = function () {
            history.go(-1);
        };
        Util.GoBackAndRefresh = function () {
            document.location.href = document.referrer;
        };
        //extract messages from  server message object
        Util.ExtractMessages = function (messagedata, level) {
            var messageData = [];
            var data = [];
            if (!Object.isNullOrUndefined(messagedata.statusText)) {
                data = JSON.parse(messagedata.statusText);
                for (var i = 0; i < data.length; i++) {
                    var msg = data[i];
                    if (level && msg.Level == level)
                        messageData.push(msg.Message);
                    else
                        messageData.push(msg.Message);
                }
            }
            return messageData;
        };
        Util.OkBtnHandle = function () {
            document.onkeydown = function (e) {
                var event = window.event || e;
                var code = event.keyCode || event.which;
                if (code == 13) {
                    var okEle = $(".ngdialog.ng-scope .btnOK");
                    if (okEle.length > 0) {
                        okEle.trigger("click");
                        return false;
                    }
                }
            };
        };
        //static DatasPaging(datas: any[], currentPage: number, pageSize: number): IPagingDatas {
        //    var totleCount = datas.length;
        //    var totlePage = totleCount / pageSize;
        //    if ((totleCount) / pageSize > parseInt(((totleCount - 1) / pageSize).toString())) {
        //        totlePage = parseInt(((totleCount - 1) / pageSize).toString()) + 1;
        //    } else {
        //        totlePage = parseInt(((totleCount - 1) / pageSize).toString());
        //    }
        //    currentPage = currentPage < 1 ? totlePage : currentPage;
        //    currentPage = currentPage > totlePage ? 1 : currentPage;
        //    var startRow = (currentPage - 1) * pageSize;
        //    var endRow = currentPage * pageSize;
        //    endRow = (endRow > totleCount) ? totleCount : endRow;
        //    var pageModel = { TotlePages: totlePage, PageSize: pageSize, CurrentPage: currentPage, TotleCount: totleCount }
        //    var result = datas.slice(startRow, endRow);
        //    return { PagingModel: pageModel, Datas: result } as IPagingDatas;
        //}
        //ui 
        Util.NoRecordTemp = "<div><img src='/Content/Images/nodata.png'></div>";
        Util.SDTemp = "<div class='shutdown' style='height:55px;'><span class='glyphicon glyphicon-off' aria-hidden='true'></span><span> SD </span></div>";
        return Util;
    }());
    App.Util = Util;
})(App || (App = {}));
var Matrix;
(function (Matrix) {
    var ItemTypeOption = /** @class */ (function () {
        function ItemTypeOption() {
            this.Mapping = new Matrix.KeyedCollection();
            this.Mapping.Add("STD", "Standard Stocked Item");
            this.Mapping.Add("STA", "Standard Assortment");
            this.Mapping.Add("CFA", "Configurable Assortment");
            this.Mapping.Add("NSI", "Non-Stocked Item");
        }
        return ItemTypeOption;
    }());
    Matrix.ItemTypeOption = ItemTypeOption;
    var NavigationIcon = /** @class */ (function () {
        function NavigationIcon() {
            this.Mapping = new Matrix.KeyedCollection();
            this.Mapping.Add("Reports", "fa-th");
            this.Mapping.Add("Setup", "fa-cog");
            this.Mapping.Add("Data Import", "fa-refresh");
            this.Mapping.Add("Enquiries", "fa-tv");
        }
        return NavigationIcon;
    }());
    Matrix.NavigationIcon = NavigationIcon;
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var LanguageList;
    (function (LanguageList) {
        function getValue() {
            var result = [];
            //for (var k of Administration.TranslationRow.getLookup().items) {
            //    if (k.LanguageId !== 'en') {
            //        result.push([k.Id.toString(), k.LanguageName]);
            //    }
            //}
            return result;
        }
        LanguageList.getValue = getValue;
    })(LanguageList = Matrix.LanguageList || (Matrix.LanguageList = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var UserPreferenceStorage = /** @class */ (function () {
            function UserPreferenceStorage() {
            }
            UserPreferenceStorage.prototype.getItem = function (key) {
                var value;
                Common.UserPreferenceService.Retrieve({
                    PreferenceType: "UserPreferenceStorage",
                    Name: key
                }, function (response) { return value = response.Value; }, {
                    async: false
                });
                return value;
            };
            UserPreferenceStorage.prototype.setItem = function (key, data) {
                Common.UserPreferenceService.Update({
                    PreferenceType: "UserPreferenceStorage",
                    Name: key,
                    Value: data
                });
            };
            return UserPreferenceStorage;
        }());
        Common.UserPreferenceStorage = UserPreferenceStorage;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../Helpers/LanguageList.ts" />
/// <reference path="../Common/UserPreference/UserPreferenceStorage.ts" />
var Matrix;
(function (Matrix) {
    var ScriptInitialization;
    (function (ScriptInitialization) {
        Q.Config.responsiveDialogs = true;
        Q.Config.rootNamespaces.push('Matrix');
        Serenity.EntityDialog.defaultLanguageList = Matrix.LanguageList.getValue;
        Serenity.DataGrid.defaultPersistanceStorage = new Matrix.Common.UserPreferenceStorage();
        //type PrimitiveArray = Array<string | number | boolean>;
        //type MyNumber = number;
        ////type NgScope = ng.IScope;
        //type Callback = () => void;
    })(ScriptInitialization = Matrix.ScriptInitialization || (Matrix.ScriptInitialization = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var SelectableEntityGrid = /** @class */ (function (_super) {
        __extends(SelectableEntityGrid, _super);
        function SelectableEntityGrid() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectableEntityGrid.prototype.getSlickOptions = function () {
            var opt = _super.prototype.getSlickOptions.call(this);
            opt.enableTextSelectionOnCells = true;
            opt.selectedCellCssClass = "slick-row-selected";
            opt.enableCellNavigation = true;
            return opt;
        };
        SelectableEntityGrid.prototype.createSlickGrid = function () {
            var grid = _super.prototype.createSlickGrid.call(this);
            grid.setSelectionModel(new Slick.RowSelectionModel());
            return grid;
        };
        SelectableEntityGrid = __decorate([
            Serenity.Decorators.registerClass()
        ], SelectableEntityGrid);
        return SelectableEntityGrid;
    }(Serenity.EntityGrid));
    Matrix.SelectableEntityGrid = SelectableEntityGrid;
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var BasicProgressDialog = /** @class */ (function (_super) {
        __extends(BasicProgressDialog, _super);
        function BasicProgressDialog() {
            var _this = _super.call(this) || this;
            _this.byId('ProgressBar').progressbar({
                max: 100,
                value: 0,
                change: function (e, v) {
                    _this.byId('ProgressLabel').text(_this.value + ' / ' + _this.max);
                }
            });
            return _this;
        }
        Object.defineProperty(BasicProgressDialog.prototype, "max", {
            get: function () {
                return this.byId('ProgressBar').progressbar().progressbar('option', 'max');
            },
            set: function (value) {
                this.byId('ProgressBar').progressbar().progressbar('option', 'max', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicProgressDialog.prototype, "value", {
            get: function () {
                return this.byId('ProgressBar').progressbar('value');
            },
            set: function (value) {
                this.byId('ProgressBar').progressbar().progressbar('value', value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicProgressDialog.prototype, "title", {
            get: function () {
                return this.element.dialog().dialog('option', 'title');
            },
            set: function (value) {
                this.element.dialog().dialog('option', 'title', value);
            },
            enumerable: true,
            configurable: true
        });
        BasicProgressDialog.prototype.getDialogOptions = function () {
            var _this = this;
            var opt = _super.prototype.getDialogOptions.call(this);
            opt.title = "Please wait...";
            opt.width = 600;
            opt.buttons = [{
                    text: "Cancel",
                    click: function () {
                        _this.cancelled = true;
                        _this.element.closest('.ui-dialog')
                            .find('.ui-dialog-buttonpane .ui-button')
                            .attr('disabled', 'disabled')
                            .css('opacity', '0.5');
                        _this.element.dialog('option', 'title', Q.trimToNull(_this.cancelTitle) ||
                            Q.text('Site.BasicProgressDialog.CancelTitle'));
                    }
                }];
            return opt;
        };
        BasicProgressDialog.prototype.initDialog = function () {
            _super.prototype.initDialog.call(this);
            this.element.closest('.ui-dialog').find('.ui-dialog-titlebar-close').hide();
        };
        BasicProgressDialog.prototype.getTemplate = function () {
            return ("<div class='s-DialogContent s-BasicProgressDialogContent'>" +
                "<div id='~_StatusText' class='status-text' ></div>" +
                "<div id='~_ProgressBar' class='progress-bar'>" +
                "<div id='~_ProgressLabel' class='progress-label' ></div>" +
                "</div>" +
                "</div>");
        };
        return BasicProgressDialog;
    }(Serenity.TemplatedDialog));
    Matrix.BasicProgressDialog = BasicProgressDialog;
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var BulkServiceAction = /** @class */ (function () {
            function BulkServiceAction() {
            }
            BulkServiceAction.prototype.createProgressDialog = function () {
                this.progressDialog = new Matrix.BasicProgressDialog();
                this.progressDialog.dialogOpen();
                this.progressDialog.max = this.keys.length;
                this.progressDialog.value = 0;
            };
            BulkServiceAction.prototype.getConfirmationFormat = function () {
                return Q.text('Site.BulkServiceAction.ConfirmationFormat');
            };
            BulkServiceAction.prototype.getConfirmationMessage = function (targetCount) {
                return Q.format(this.getConfirmationFormat(), targetCount);
            };
            BulkServiceAction.prototype.confirm = function (targetCount, action) {
                Q.confirm(this.getConfirmationMessage(targetCount), action);
            };
            BulkServiceAction.prototype.getNothingToProcessMessage = function () {
                return Q.text('Site.BulkServiceAction.NothingToProcess');
            };
            BulkServiceAction.prototype.nothingToProcess = function () {
                Q.notifyError(this.getNothingToProcessMessage());
            };
            BulkServiceAction.prototype.getParallelRequests = function () {
                return 1;
            };
            BulkServiceAction.prototype.getBatchSize = function () {
                return 1;
            };
            BulkServiceAction.prototype.startParallelExecution = function () {
                this.createProgressDialog();
                this.successCount = 0;
                this.errorCount = 0;
                this.pendingRequests = 0;
                this.completedRequests = 0;
                this.errorCount = 0;
                this.errorByKey = {};
                this.queue = this.keys.slice();
                this.queueIndex = 0;
                var parallelRequests = this.getParallelRequests();
                while (parallelRequests-- > 0) {
                    this.executeNextBatch();
                }
            };
            BulkServiceAction.prototype.serviceCallCleanup = function () {
                this.pendingRequests--;
                this.completedRequests++;
                var title = Q.text((this.progressDialog.cancelled ?
                    'Site.BasicProgressDialog.CancelTitle' : 'Site.BasicProgressDialog.PleaseWait'));
                title += ' (';
                if (this.successCount > 0) {
                    title += Q.format(Q.text('Site.BulkServiceAction.SuccessCount'), this.successCount);
                }
                if (this.errorCount > 0) {
                    if (this.successCount > 0) {
                        title += ', ';
                    }
                    title += Q.format(Q.text('Site.BulkServiceAction.ErrorCount'), this.errorCount);
                }
                this.progressDialog.title = title + ')';
                this.progressDialog.value = this.successCount + this.errorCount;
                if (!this.progressDialog.cancelled && this.progressDialog.value < this.keys.length) {
                    this.executeNextBatch();
                }
                else if (this.pendingRequests === 0) {
                    this.progressDialog.dialogClose();
                    this.showResults();
                    if (this.done) {
                        this.done();
                        this.done = null;
                    }
                }
            };
            BulkServiceAction.prototype.executeForBatch = function (batch) {
            };
            BulkServiceAction.prototype.executeNextBatch = function () {
                var batchSize = this.getBatchSize();
                var batch = [];
                while (true) {
                    if (batch.length >= batchSize) {
                        break;
                    }
                    if (this.queueIndex >= this.queue.length) {
                        break;
                    }
                    batch.push(this.queue[this.queueIndex++]);
                }
                if (batch.length > 0) {
                    this.pendingRequests++;
                    this.executeForBatch(batch);
                }
            };
            BulkServiceAction.prototype.getAllHadErrorsFormat = function () {
                return Q.text('Site.BulkServiceAction.AllHadErrorsFormat');
            };
            BulkServiceAction.prototype.showAllHadErrors = function () {
                Q.notifyError(Q.format(this.getAllHadErrorsFormat(), this.errorCount));
            };
            BulkServiceAction.prototype.getSomeHadErrorsFormat = function () {
                return Q.text('Site.BulkServiceAction.SomeHadErrorsFormat');
            };
            BulkServiceAction.prototype.showSomeHadErrors = function () {
                Q.notifyWarning(Q.format(this.getSomeHadErrorsFormat(), this.successCount, this.errorCount));
            };
            BulkServiceAction.prototype.getAllSuccessFormat = function () {
                return Q.text('Site.BulkServiceAction.AllSuccessFormat');
            };
            BulkServiceAction.prototype.showAllSuccess = function () {
                Q.notifySuccess(Q.format(this.getAllSuccessFormat(), this.successCount));
            };
            BulkServiceAction.prototype.showResults = function () {
                if (this.errorCount === 0 && this.successCount === 0) {
                    this.nothingToProcess();
                    return;
                }
                if (this.errorCount > 0 && this.successCount === 0) {
                    this.showAllHadErrors();
                    return;
                }
                if (this.errorCount > 0) {
                    this.showSomeHadErrors();
                    return;
                }
                this.showAllSuccess();
            };
            BulkServiceAction.prototype.execute = function (keys) {
                var _this = this;
                this.keys = keys;
                if (this.keys.length === 0) {
                    this.nothingToProcess();
                    return;
                }
                this.confirm(this.keys.length, function () { return _this.startParallelExecution(); });
            };
            BulkServiceAction.prototype.get_successCount = function () {
                return this.successCount;
            };
            BulkServiceAction.prototype.set_successCount = function (value) {
                this.successCount = value;
            };
            BulkServiceAction.prototype.get_errorCount = function () {
                return this.errorCount;
            };
            BulkServiceAction.prototype.set_errorCount = function (value) {
                this.errorCount = value;
            };
            return BulkServiceAction;
        }());
        Common.BulkServiceAction = BulkServiceAction;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var DialogUtils;
    (function (DialogUtils) {
        function pendingChangesConfirmation(element, hasPendingChanges) {
            element.on('dialogbeforeclose panelbeforeclose', function (e) {
                if (!Serenity.WX.hasOriginalEvent(e) || !hasPendingChanges()) {
                    return;
                }
                e.preventDefault();
                Q.confirm('You have pending changes. Save them?', function () { return element.find('div.save-and-close-button').click(); }, {
                    onNo: function () {
                        if (element.hasClass('ui-dialog-content'))
                            element.dialog('close');
                        else if (element.hasClass('s-Panel'))
                            Serenity.TemplatedDialog.closePanel(element);
                    }
                });
            });
        }
        DialogUtils.pendingChangesConfirmation = pendingChangesConfirmation;
    })(DialogUtils = Matrix.DialogUtils || (Matrix.DialogUtils = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var EnumSelectFormatter = /** @class */ (function () {
            function EnumSelectFormatter() {
                this.allowClear = true;
            }
            EnumSelectFormatter.prototype.format = function (ctx) {
                var enumType = Serenity.EnumTypeRegistry.get(this.enumKey);
                var sb = "<select>";
                if (this.allowClear) {
                    sb += '<option value="">';
                    sb += Q.htmlEncode(this.emptyItemText || Q.text("Controls.SelectEditor.EmptyItemText"));
                    sb += '</option>';
                }
                for (var _i = 0, _a = Object.keys(enumType).filter(function (v) { return !isNaN(parseInt(v, 10)); }); _i < _a.length; _i++) {
                    var x = _a[_i];
                    sb += '<option value="' + Q.attrEncode(x) + '"';
                    if (x == ctx.value)
                        sb += " selected";
                    var name = enumType[x];
                    sb += ">";
                    sb += Q.htmlEncode(Q.tryGetText("Enums." + this.enumKey + "." + name) || name);
                    sb += "</option>";
                }
                sb += "</select>";
                return sb;
            };
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "enumKey", void 0);
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "allowClear", void 0);
            __decorate([
                Serenity.Decorators.option()
            ], EnumSelectFormatter.prototype, "emptyItemText", void 0);
            EnumSelectFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], EnumSelectFormatter);
            return EnumSelectFormatter;
        }());
        Common.EnumSelectFormatter = EnumSelectFormatter;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var ExcelExportHelper;
        (function (ExcelExportHelper) {
            function createToolButton(options) {
                return {
                    hint: Q.coalesce(options.title, 'Excel'),
                    title: Q.coalesce(options.hint, ''),
                    cssClass: 'export-xlsx-button',
                    onClick: function () {
                        if (!options.onViewSubmit()) {
                            return;
                        }
                        var grid = options.grid;
                        var request = Q.deepClone(grid.getView().params);
                        request.Take = 0;
                        request.Skip = 0;
                        var sortBy = grid.getView().sortBy;
                        if (sortBy) {
                            request.Sort = sortBy;
                        }
                        request.IncludeColumns = [];
                        var columns = grid.getGrid().getColumns();
                        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                            var column = columns_1[_i];
                            request.IncludeColumns.push(column.id || column.field);
                        }
                        Q.postToService({ service: options.service, request: request, target: '_blank' });
                    },
                    separator: options.separator
                };
            }
            ExcelExportHelper.createToolButton = createToolButton;
        })(ExcelExportHelper = Common.ExcelExportHelper || (Common.ExcelExportHelper = {}));
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var GridEditorDialog = /** @class */ (function (_super) {
            __extends(GridEditorDialog, _super);
            function GridEditorDialog() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            GridEditorDialog.prototype.getIdProperty = function () { return "__id"; };
            GridEditorDialog.prototype.destroy = function () {
                this.onSave = null;
                this.onDelete = null;
                _super.prototype.destroy.call(this);
            };
            GridEditorDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                // apply changes button doesn't work properly with in-memory grids yet
                if (this.applyChangesButton) {
                    this.applyChangesButton.hide();
                }
            };
            GridEditorDialog.prototype.saveHandler = function (options, callback) {
                this.onSave && this.onSave(options, callback);
            };
            GridEditorDialog.prototype.deleteHandler = function (options, callback) {
                this.onDelete && this.onDelete(options, callback);
            };
            GridEditorDialog = __decorate([
                Serenity.Decorators.registerClass()
            ], GridEditorDialog);
            return GridEditorDialog;
        }(Serenity.EntityDialog));
        Common.GridEditorDialog = GridEditorDialog;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    /**
     * This is an editor widget but it only displays a text, not edits it.
     *
     */
    var StaticTextBlock = /** @class */ (function (_super) {
        __extends(StaticTextBlock, _super);
        function StaticTextBlock(container, options) {
            var _this = _super.call(this, container, options) || this;
            // hide the caption label for this editor if in a form. ugly hack
            if (_this.options.hideLabel)
                _this.element.closest('.field').find('.caption').hide();
            _this.updateElementContent();
            return _this;
        }
        StaticTextBlock.prototype.updateElementContent = function () {
            var text = Q.coalesce(this.options.text, this.value);
            // if isLocalText is set, text is actually a local text key
            if (this.options.isLocalText)
                text = Q.text(text);
            // don't html encode if isHtml option is true
            if (this.options.isHtml)
                this.element.html(text);
            else
                this.element.text(text);
        };
        /**
         * By implementing ISetEditValue interface, we allow this editor to display its field value.
         * But only do this when our text content is not explicitly set in options
         */
        StaticTextBlock.prototype.setEditValue = function (source, property) {
            if (this.options.text == null) {
                this.value = Q.coalesce(this.options.text, source[property.name]);
                this.updateElementContent();
            }
        };
        StaticTextBlock = __decorate([
            Serenity.Decorators.element("<div/>"),
            Serenity.Decorators.registerEditor([Serenity.ISetEditValue])
        ], StaticTextBlock);
        return StaticTextBlock;
    }(Serenity.Widget));
    Matrix.StaticTextBlock = StaticTextBlock;
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Document;
    (function (Document) {
        var AttachmentDialog = /** @class */ (function (_super) {
            __extends(AttachmentDialog, _super);
            function AttachmentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Document.AttachmentForm(_this.idPrefix);
                return _this;
            }
            AttachmentDialog.prototype.getFormKey = function () { return Document.AttachmentForm.formKey; };
            AttachmentDialog.prototype.getIdProperty = function () { return Document.AttachmentRow.idProperty; };
            AttachmentDialog.prototype.getLocalTextPrefix = function () { return Document.AttachmentRow.localTextPrefix; };
            AttachmentDialog.prototype.getNameProperty = function () { return Document.AttachmentRow.nameProperty; };
            AttachmentDialog.prototype.getService = function () { return Document.AttachmentService.baseUrl; };
            AttachmentDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            AttachmentDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            AttachmentDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], AttachmentDialog);
            return AttachmentDialog;
        }(Serenity.EntityDialog));
        Document.AttachmentDialog = AttachmentDialog;
    })(Document = Matrix.Document || (Matrix.Document = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Document;
    (function (Document) {
        var AttachmentGrid = /** @class */ (function (_super) {
            __extends(AttachmentGrid, _super);
            function AttachmentGrid(container) {
                return _super.call(this, container) || this;
            }
            AttachmentGrid.prototype.getColumnsKey = function () { return 'Document.Attachment'; };
            AttachmentGrid.prototype.getDialogType = function () { return Document.AttachmentDialog; };
            AttachmentGrid.prototype.getIdProperty = function () { return Document.AttachmentRow.idProperty; };
            AttachmentGrid.prototype.getLocalTextPrefix = function () { return Document.AttachmentRow.localTextPrefix; };
            AttachmentGrid.prototype.getService = function () { return Document.AttachmentService.baseUrl; };
            AttachmentGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            AttachmentGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                columns.push({
                    field: 'Preview',
                    name: '',
                    format: function (ctx) { return '<a class="inline-action preview-report"  title="Preview">' +
                        '<i class="fa fa-trash-o text-red"></i></a>'; },
                    width: 24,
                    minWidth: 24,
                    maxWidth: 24
                });
                return columns;
            };
            AttachmentGrid.prototype.onClick = function (e, row, cell) {
                _super.prototype.onClick.call(this, e, row, cell);
                if (e.isDefaultPrevented())
                    return;
                var item = this.itemAt(row);
                var target = $(e.target);
                if (target.parent().hasClass('inline-action'))
                    target = target.parent();
                if (target.hasClass('inline-action')) {
                    e.preventDefault();
                    if (target.hasClass('preview-report')) {
                        var parm = {
                            reportId: item.FilePath
                        };
                        var path = Q.format("PDFDisplay?fileName={0}", item.FilePath);
                        document.location.href = path;
                        //open with document 
                        //var dlg = new Matrix.EnterpriseSys.DocumentPreivewDialog(parm);
                        //this.initDialog(dlg);
                        //dlg.dialogOpen(false);
                    }
                }
            };
            AttachmentGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            AttachmentGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            AttachmentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AttachmentGrid);
            return AttachmentGrid;
        }(Serenity.EntityGrid));
        Document.AttachmentGrid = AttachmentGrid;
    })(Document = Matrix.Document || (Matrix.Document = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var EnterpriseSys;
    (function (EnterpriseSys) {
        var DocumentPreivewDialog = /** @class */ (function (_super) {
            __extends(DocumentPreivewDialog, _super);
            function DocumentPreivewDialog(reportId) {
                return _super.call(this, reportId) || this;
            }
            DocumentPreivewDialog.prototype.load = function (reportId) {
            };
            DocumentPreivewDialog.initializePage = function () {
            };
            DocumentPreivewDialog.prototype.onDialogOpen = function () {
                _super.prototype.onDialogOpen.call(this);
            };
            DocumentPreivewDialog.prototype.getDialogOptions = function () {
                var opt = _super.prototype.getDialogOptions.call(this);
                opt.title = this.desc;
                return opt;
            };
            DocumentPreivewDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.resizable(),
                Serenity.Decorators.maximizable()
            ], DocumentPreivewDialog);
            return DocumentPreivewDialog;
        }(Serenity.TemplatedDialog));
        EnterpriseSys.DocumentPreivewDialog = DocumentPreivewDialog;
    })(EnterpriseSys = Matrix.EnterpriseSys || (Matrix.EnterpriseSys = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationAdjustmentDialog = /** @class */ (function (_super) {
            __extends(AccountReconciliationAdjustmentDialog, _super);
            function AccountReconciliationAdjustmentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountReconciliationAdjustmentForm(_this.idPrefix);
                return _this;
            }
            AccountReconciliationAdjustmentDialog.prototype.getFormKey = function () { return Finance.AccountReconciliationAdjustmentForm.formKey; };
            AccountReconciliationAdjustmentDialog.prototype.getIdProperty = function () { return Finance.AccountReconciliationAdjustmentRow.idProperty; };
            AccountReconciliationAdjustmentDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountReconciliationAdjustmentRow.localTextPrefix; };
            AccountReconciliationAdjustmentDialog.prototype.getNameProperty = function () { return Finance.AccountReconciliationAdjustmentRow.nameProperty; };
            AccountReconciliationAdjustmentDialog.prototype.getService = function () { return Finance.AccountReconciliationAdjustmentService.baseUrl; };
            AccountReconciliationAdjustmentDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountReconciliationAdjustmentDialog);
            return AccountReconciliationAdjustmentDialog;
        }(Serenity.EntityDialog));
        Finance.AccountReconciliationAdjustmentDialog = AccountReconciliationAdjustmentDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationAdjustmentGrid = /** @class */ (function (_super) {
            __extends(AccountReconciliationAdjustmentGrid, _super);
            function AccountReconciliationAdjustmentGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountReconciliationAdjustmentGrid.prototype.getColumnsKey = function () { return 'Finance.AccountReconciliationAdjustment'; };
            AccountReconciliationAdjustmentGrid.prototype.getDialogType = function () { return Finance.AccountReconciliationAdjustmentDialog; };
            AccountReconciliationAdjustmentGrid.prototype.getIdProperty = function () { return Finance.AccountReconciliationAdjustmentRow.idProperty; };
            AccountReconciliationAdjustmentGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountReconciliationAdjustmentRow.localTextPrefix; };
            AccountReconciliationAdjustmentGrid.prototype.getService = function () { return Finance.AccountReconciliationAdjustmentService.baseUrl; };
            AccountReconciliationAdjustmentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountReconciliationAdjustmentGrid);
            return AccountReconciliationAdjustmentGrid;
        }(Serenity.EntityGrid));
        Finance.AccountReconciliationAdjustmentGrid = AccountReconciliationAdjustmentGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationDetailDialog = /** @class */ (function (_super) {
            __extends(AccountReconciliationDetailDialog, _super);
            function AccountReconciliationDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountReconciliationDetailForm(_this.idPrefix);
                return _this;
            }
            AccountReconciliationDetailDialog.prototype.getFormKey = function () { return Finance.AccountReconciliationDetailForm.formKey; };
            AccountReconciliationDetailDialog.prototype.getIdProperty = function () { return Finance.AccountReconciliationDetailRow.idProperty; };
            AccountReconciliationDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountReconciliationDetailRow.localTextPrefix; };
            AccountReconciliationDetailDialog.prototype.getNameProperty = function () { return Finance.AccountReconciliationDetailRow.nameProperty; };
            AccountReconciliationDetailDialog.prototype.getService = function () { return Finance.AccountReconciliationDetailService.baseUrl; };
            AccountReconciliationDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountReconciliationDetailDialog);
            return AccountReconciliationDetailDialog;
        }(Serenity.EntityDialog));
        Finance.AccountReconciliationDetailDialog = AccountReconciliationDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationDetailGrid = /** @class */ (function (_super) {
            __extends(AccountReconciliationDetailGrid, _super);
            function AccountReconciliationDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountReconciliationDetailGrid.prototype.getColumnsKey = function () { return 'Finance.AccountReconciliationDetail'; };
            AccountReconciliationDetailGrid.prototype.getDialogType = function () { return Finance.AccountReconciliationDetailDialog; };
            AccountReconciliationDetailGrid.prototype.getIdProperty = function () { return Finance.AccountReconciliationDetailRow.idProperty; };
            AccountReconciliationDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountReconciliationDetailRow.localTextPrefix; };
            AccountReconciliationDetailGrid.prototype.getService = function () { return Finance.AccountReconciliationDetailService.baseUrl; };
            AccountReconciliationDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountReconciliationDetailGrid);
            return AccountReconciliationDetailGrid;
        }(Serenity.EntityGrid));
        Finance.AccountReconciliationDetailGrid = AccountReconciliationDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationDialog = /** @class */ (function (_super) {
            __extends(AccountReconciliationDialog, _super);
            function AccountReconciliationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountReconciliationForm(_this.idPrefix);
                return _this;
            }
            AccountReconciliationDialog.prototype.getFormKey = function () { return Finance.AccountReconciliationForm.formKey; };
            AccountReconciliationDialog.prototype.getIdProperty = function () { return Finance.AccountReconciliationRow.idProperty; };
            AccountReconciliationDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountReconciliationRow.localTextPrefix; };
            AccountReconciliationDialog.prototype.getNameProperty = function () { return Finance.AccountReconciliationRow.nameProperty; };
            AccountReconciliationDialog.prototype.getService = function () { return Finance.AccountReconciliationService.baseUrl; };
            AccountReconciliationDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountReconciliationDialog);
            return AccountReconciliationDialog;
        }(Serenity.EntityDialog));
        Finance.AccountReconciliationDialog = AccountReconciliationDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountReconciliationGrid = /** @class */ (function (_super) {
            __extends(AccountReconciliationGrid, _super);
            function AccountReconciliationGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountReconciliationGrid.prototype.getColumnsKey = function () { return 'Finance.AccountReconciliation'; };
            AccountReconciliationGrid.prototype.getDialogType = function () { return Finance.AccountReconciliationDialog; };
            AccountReconciliationGrid.prototype.getIdProperty = function () { return Finance.AccountReconciliationRow.idProperty; };
            AccountReconciliationGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountReconciliationRow.localTextPrefix; };
            AccountReconciliationGrid.prototype.getService = function () { return Finance.AccountReconciliationService.baseUrl; };
            AccountReconciliationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountReconciliationGrid);
            return AccountReconciliationGrid;
        }(Serenity.EntityGrid));
        Finance.AccountReconciliationGrid = AccountReconciliationGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceDetailDialog = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceDetailDialog, _super);
            function AccountsPayableInvoiceDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayableInvoiceDetailForm(_this.idPrefix);
                return _this;
            }
            AccountsPayableInvoiceDetailDialog.prototype.getFormKey = function () { return Finance.AccountsPayableInvoiceDetailForm.formKey; };
            AccountsPayableInvoiceDetailDialog.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceDetailRow.idProperty; };
            AccountsPayableInvoiceDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceDetailRow.localTextPrefix; };
            AccountsPayableInvoiceDetailDialog.prototype.getNameProperty = function () { return Finance.AccountsPayableInvoiceDetailRow.nameProperty; };
            AccountsPayableInvoiceDetailDialog.prototype.getService = function () { return Finance.AccountsPayableInvoiceDetailService.baseUrl; };
            AccountsPayableInvoiceDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayableInvoiceDetailDialog);
            return AccountsPayableInvoiceDetailDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayableInvoiceDetailDialog = AccountsPayableInvoiceDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceDetailEditor = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceDetailEditor, _super);
            function AccountsPayableInvoiceDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableInvoiceDetailEditor.prototype.getColumnsKey = function () { return "Finance.AccountsPayableInvoiceDetail"; };
            AccountsPayableInvoiceDetailEditor.prototype.getDialogType = function () { return Finance.AccountsPayableInvoiceDetailDialog; };
            AccountsPayableInvoiceDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceDetailRow.localTextPrefix; };
            AccountsPayableInvoiceDetailEditor.prototype.usePager = function () {
                return true;
            };
            AccountsPayableInvoiceDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsPayableInvoiceDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableInvoiceDetailEditor);
            return AccountsPayableInvoiceDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsPayableInvoiceDetailEditor = AccountsPayableInvoiceDetailEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceDetailGrid = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceDetailGrid, _super);
            function AccountsPayableInvoiceDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableInvoiceDetailGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayableInvoiceDetail'; };
            AccountsPayableInvoiceDetailGrid.prototype.getDialogType = function () { return Finance.AccountsPayableInvoiceDetailDialog; };
            AccountsPayableInvoiceDetailGrid.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceDetailRow.idProperty; };
            AccountsPayableInvoiceDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceDetailRow.localTextPrefix; };
            AccountsPayableInvoiceDetailGrid.prototype.getService = function () { return Finance.AccountsPayableInvoiceDetailService.baseUrl; };
            AccountsPayableInvoiceDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableInvoiceDetailGrid);
            return AccountsPayableInvoiceDetailGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayableInvoiceDetailGrid = AccountsPayableInvoiceDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceDialog = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceDialog, _super);
            function AccountsPayableInvoiceDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayableInvoiceForm(_this.idPrefix);
                return _this;
            }
            AccountsPayableInvoiceDialog.prototype.getFormKey = function () { return Finance.AccountsPayableInvoiceForm.formKey; };
            AccountsPayableInvoiceDialog.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceRow.idProperty; };
            AccountsPayableInvoiceDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceRow.localTextPrefix; };
            AccountsPayableInvoiceDialog.prototype.getNameProperty = function () { return Finance.AccountsPayableInvoiceRow.nameProperty; };
            AccountsPayableInvoiceDialog.prototype.getService = function () { return Finance.AccountsPayableInvoiceService.baseUrl; };
            AccountsPayableInvoiceDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayableInvoiceDialog);
            return AccountsPayableInvoiceDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayableInvoiceDialog = AccountsPayableInvoiceDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceGrid = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceGrid, _super);
            function AccountsPayableInvoiceGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableInvoiceGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayableInvoice'; };
            AccountsPayableInvoiceGrid.prototype.getDialogType = function () { return Finance.AccountsPayableInvoiceDialog; };
            AccountsPayableInvoiceGrid.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceRow.idProperty; };
            AccountsPayableInvoiceGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceRow.localTextPrefix; };
            AccountsPayableInvoiceGrid.prototype.getService = function () { return Finance.AccountsPayableInvoiceService.baseUrl; };
            AccountsPayableInvoiceGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableInvoiceGrid);
            return AccountsPayableInvoiceGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayableInvoiceGrid = AccountsPayableInvoiceGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceOrderDialog = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceOrderDialog, _super);
            function AccountsPayableInvoiceOrderDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayableInvoiceOrderForm(_this.idPrefix);
                return _this;
            }
            AccountsPayableInvoiceOrderDialog.prototype.getFormKey = function () { return Finance.AccountsPayableInvoiceOrderForm.formKey; };
            AccountsPayableInvoiceOrderDialog.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceOrderRow.idProperty; };
            AccountsPayableInvoiceOrderDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceOrderRow.localTextPrefix; };
            AccountsPayableInvoiceOrderDialog.prototype.getNameProperty = function () { return Finance.AccountsPayableInvoiceOrderRow.nameProperty; };
            AccountsPayableInvoiceOrderDialog.prototype.getService = function () { return Finance.AccountsPayableInvoiceOrderService.baseUrl; };
            AccountsPayableInvoiceOrderDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayableInvoiceOrderDialog);
            return AccountsPayableInvoiceOrderDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayableInvoiceOrderDialog = AccountsPayableInvoiceOrderDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceOrderEditor = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceOrderEditor, _super);
            function AccountsPayableInvoiceOrderEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableInvoiceOrderEditor.prototype.getColumnsKey = function () { return "Finance.AccountsPayableInvoiceOrder"; };
            AccountsPayableInvoiceOrderEditor.prototype.getDialogType = function () { return Finance.AccountsPayableInvoiceOrderDialog; };
            AccountsPayableInvoiceOrderEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceOrderRow.localTextPrefix; };
            AccountsPayableInvoiceOrderEditor.prototype.usePager = function () {
                return true;
            };
            AccountsPayableInvoiceOrderEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsPayableInvoiceOrderEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableInvoiceOrderEditor);
            return AccountsPayableInvoiceOrderEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsPayableInvoiceOrderEditor = AccountsPayableInvoiceOrderEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceOrderGrid = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceOrderGrid, _super);
            function AccountsPayableInvoiceOrderGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableInvoiceOrderGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayableInvoiceOrder'; };
            AccountsPayableInvoiceOrderGrid.prototype.getDialogType = function () { return Finance.AccountsPayableInvoiceOrderDialog; };
            AccountsPayableInvoiceOrderGrid.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceOrderRow.idProperty; };
            AccountsPayableInvoiceOrderGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceOrderRow.localTextPrefix; };
            AccountsPayableInvoiceOrderGrid.prototype.getService = function () { return Finance.AccountsPayableInvoiceOrderService.baseUrl; };
            AccountsPayableInvoiceOrderGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableInvoiceOrderGrid);
            return AccountsPayableInvoiceOrderGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayableInvoiceOrderGrid = AccountsPayableInvoiceOrderGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceSummaryDialog = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceSummaryDialog, _super);
            function AccountsPayableInvoiceSummaryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayableInvoiceSummaryForm(_this.idPrefix);
                return _this;
            }
            AccountsPayableInvoiceSummaryDialog.prototype.getFormKey = function () { return Finance.AccountsPayableInvoiceSummaryForm.formKey; };
            AccountsPayableInvoiceSummaryDialog.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceSummaryRow.idProperty; };
            AccountsPayableInvoiceSummaryDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceSummaryRow.localTextPrefix; };
            AccountsPayableInvoiceSummaryDialog.prototype.getNameProperty = function () { return Finance.AccountsPayableInvoiceSummaryRow.nameProperty; };
            AccountsPayableInvoiceSummaryDialog.prototype.getService = function () { return Finance.AccountsPayableInvoiceSummaryService.baseUrl; };
            AccountsPayableInvoiceSummaryDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayableInvoiceSummaryDialog);
            return AccountsPayableInvoiceSummaryDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayableInvoiceSummaryDialog = AccountsPayableInvoiceSummaryDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableInvoiceSummaryGrid = /** @class */ (function (_super) {
            __extends(AccountsPayableInvoiceSummaryGrid, _super);
            function AccountsPayableInvoiceSummaryGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableInvoiceSummaryGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayableInvoiceSummary'; };
            AccountsPayableInvoiceSummaryGrid.prototype.getDialogType = function () { return Finance.AccountsPayableInvoiceSummaryDialog; };
            AccountsPayableInvoiceSummaryGrid.prototype.getIdProperty = function () { return Finance.AccountsPayableInvoiceSummaryRow.idProperty; };
            AccountsPayableInvoiceSummaryGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableInvoiceSummaryRow.localTextPrefix; };
            AccountsPayableInvoiceSummaryGrid.prototype.getService = function () { return Finance.AccountsPayableInvoiceSummaryService.baseUrl; };
            AccountsPayableInvoiceSummaryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableInvoiceSummaryGrid);
            return AccountsPayableInvoiceSummaryGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayableInvoiceSummaryGrid = AccountsPayableInvoiceSummaryGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableJournalDialog = /** @class */ (function (_super) {
            __extends(AccountsPayableJournalDialog, _super);
            function AccountsPayableJournalDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayableJournalForm(_this.idPrefix);
                return _this;
            }
            AccountsPayableJournalDialog.prototype.getFormKey = function () { return Finance.AccountsPayableJournalForm.formKey; };
            AccountsPayableJournalDialog.prototype.getIdProperty = function () { return Finance.AccountsPayableJournalRow.idProperty; };
            AccountsPayableJournalDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableJournalRow.localTextPrefix; };
            AccountsPayableJournalDialog.prototype.getNameProperty = function () { return Finance.AccountsPayableJournalRow.nameProperty; };
            AccountsPayableJournalDialog.prototype.getService = function () { return Finance.AccountsPayableJournalService.baseUrl; };
            AccountsPayableJournalDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayableJournalDialog);
            return AccountsPayableJournalDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayableJournalDialog = AccountsPayableJournalDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableJournalGrid = /** @class */ (function (_super) {
            __extends(AccountsPayableJournalGrid, _super);
            function AccountsPayableJournalGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableJournalGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayableJournal'; };
            AccountsPayableJournalGrid.prototype.getDialogType = function () { return Finance.AccountsPayableJournalDialog; };
            AccountsPayableJournalGrid.prototype.getIdProperty = function () { return Finance.AccountsPayableJournalRow.idProperty; };
            AccountsPayableJournalGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableJournalRow.localTextPrefix; };
            AccountsPayableJournalGrid.prototype.getService = function () { return Finance.AccountsPayableJournalService.baseUrl; };
            AccountsPayableJournalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableJournalGrid);
            return AccountsPayableJournalGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayableJournalGrid = AccountsPayableJournalGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableLedgerDialog = /** @class */ (function (_super) {
            __extends(AccountsPayableLedgerDialog, _super);
            function AccountsPayableLedgerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayableLedgerForm(_this.idPrefix);
                return _this;
            }
            AccountsPayableLedgerDialog.prototype.getFormKey = function () { return Finance.AccountsPayableLedgerForm.formKey; };
            AccountsPayableLedgerDialog.prototype.getIdProperty = function () { return Finance.AccountsPayableLedgerRow.idProperty; };
            AccountsPayableLedgerDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableLedgerRow.localTextPrefix; };
            AccountsPayableLedgerDialog.prototype.getNameProperty = function () { return Finance.AccountsPayableLedgerRow.nameProperty; };
            AccountsPayableLedgerDialog.prototype.getService = function () { return Finance.AccountsPayableLedgerService.baseUrl; };
            AccountsPayableLedgerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayableLedgerDialog);
            return AccountsPayableLedgerDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayableLedgerDialog = AccountsPayableLedgerDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayableLedgerGrid = /** @class */ (function (_super) {
            __extends(AccountsPayableLedgerGrid, _super);
            function AccountsPayableLedgerGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayableLedgerGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayableLedger'; };
            AccountsPayableLedgerGrid.prototype.getDialogType = function () { return Finance.AccountsPayableLedgerDialog; };
            AccountsPayableLedgerGrid.prototype.getIdProperty = function () { return Finance.AccountsPayableLedgerRow.idProperty; };
            AccountsPayableLedgerGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayableLedgerRow.localTextPrefix; };
            AccountsPayableLedgerGrid.prototype.getService = function () { return Finance.AccountsPayableLedgerService.baseUrl; };
            AccountsPayableLedgerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayableLedgerGrid);
            return AccountsPayableLedgerGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayableLedgerGrid = AccountsPayableLedgerGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentCurrencyDialog = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentCurrencyDialog, _super);
            function AccountsPayablePaymentCurrencyDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayablePaymentCurrencyForm(_this.idPrefix);
                return _this;
            }
            AccountsPayablePaymentCurrencyDialog.prototype.getFormKey = function () { return Finance.AccountsPayablePaymentCurrencyForm.formKey; };
            AccountsPayablePaymentCurrencyDialog.prototype.getIdProperty = function () { return Finance.AccountsPayablePaymentCurrencyRow.idProperty; };
            AccountsPayablePaymentCurrencyDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayablePaymentCurrencyRow.localTextPrefix; };
            AccountsPayablePaymentCurrencyDialog.prototype.getNameProperty = function () { return Finance.AccountsPayablePaymentCurrencyRow.nameProperty; };
            AccountsPayablePaymentCurrencyDialog.prototype.getService = function () { return Finance.AccountsPayablePaymentCurrencyService.baseUrl; };
            AccountsPayablePaymentCurrencyDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayablePaymentCurrencyDialog);
            return AccountsPayablePaymentCurrencyDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayablePaymentCurrencyDialog = AccountsPayablePaymentCurrencyDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentCurrencyGrid = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentCurrencyGrid, _super);
            function AccountsPayablePaymentCurrencyGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayablePaymentCurrencyGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayablePaymentCurrency'; };
            AccountsPayablePaymentCurrencyGrid.prototype.getDialogType = function () { return Finance.AccountsPayablePaymentCurrencyDialog; };
            AccountsPayablePaymentCurrencyGrid.prototype.getIdProperty = function () { return Finance.AccountsPayablePaymentCurrencyRow.idProperty; };
            AccountsPayablePaymentCurrencyGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayablePaymentCurrencyRow.localTextPrefix; };
            AccountsPayablePaymentCurrencyGrid.prototype.getService = function () { return Finance.AccountsPayablePaymentCurrencyService.baseUrl; };
            AccountsPayablePaymentCurrencyGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayablePaymentCurrencyGrid);
            return AccountsPayablePaymentCurrencyGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayablePaymentCurrencyGrid = AccountsPayablePaymentCurrencyGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentDetailDialog = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentDetailDialog, _super);
            function AccountsPayablePaymentDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayablePaymentDetailForm(_this.idPrefix);
                return _this;
            }
            AccountsPayablePaymentDetailDialog.prototype.getFormKey = function () { return Finance.AccountsPayablePaymentDetailForm.formKey; };
            AccountsPayablePaymentDetailDialog.prototype.getIdProperty = function () { return Finance.AccountsPayablePaymentDetailRow.idProperty; };
            AccountsPayablePaymentDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayablePaymentDetailRow.localTextPrefix; };
            AccountsPayablePaymentDetailDialog.prototype.getNameProperty = function () { return Finance.AccountsPayablePaymentDetailRow.nameProperty; };
            AccountsPayablePaymentDetailDialog.prototype.getService = function () { return Finance.AccountsPayablePaymentDetailService.baseUrl; };
            AccountsPayablePaymentDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayablePaymentDetailDialog);
            return AccountsPayablePaymentDetailDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayablePaymentDetailDialog = AccountsPayablePaymentDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentDetailEditor = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentDetailEditor, _super);
            function AccountsPayablePaymentDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayablePaymentDetailEditor.prototype.getColumnsKey = function () { return "Finance.AccountsPayablePaymentDetail"; };
            AccountsPayablePaymentDetailEditor.prototype.getDialogType = function () { return Finance.AccountsPayablePaymentDetailDialog; };
            AccountsPayablePaymentDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayablePaymentDetailRow.localTextPrefix; };
            AccountsPayablePaymentDetailEditor.prototype.usePager = function () {
                return true;
            };
            AccountsPayablePaymentDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsPayablePaymentDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayablePaymentDetailEditor);
            return AccountsPayablePaymentDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsPayablePaymentDetailEditor = AccountsPayablePaymentDetailEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentDetailGrid = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentDetailGrid, _super);
            function AccountsPayablePaymentDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayablePaymentDetailGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayablePaymentDetail'; };
            AccountsPayablePaymentDetailGrid.prototype.getDialogType = function () { return Finance.AccountsPayablePaymentDetailDialog; };
            AccountsPayablePaymentDetailGrid.prototype.getIdProperty = function () { return Finance.AccountsPayablePaymentDetailRow.idProperty; };
            AccountsPayablePaymentDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayablePaymentDetailRow.localTextPrefix; };
            AccountsPayablePaymentDetailGrid.prototype.getService = function () { return Finance.AccountsPayablePaymentDetailService.baseUrl; };
            AccountsPayablePaymentDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayablePaymentDetailGrid);
            return AccountsPayablePaymentDetailGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayablePaymentDetailGrid = AccountsPayablePaymentDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentDialog = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentDialog, _super);
            function AccountsPayablePaymentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsPayablePaymentForm(_this.idPrefix);
                return _this;
            }
            AccountsPayablePaymentDialog.prototype.getFormKey = function () { return Finance.AccountsPayablePaymentForm.formKey; };
            AccountsPayablePaymentDialog.prototype.getIdProperty = function () { return Finance.AccountsPayablePaymentRow.idProperty; };
            AccountsPayablePaymentDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayablePaymentRow.localTextPrefix; };
            AccountsPayablePaymentDialog.prototype.getNameProperty = function () { return Finance.AccountsPayablePaymentRow.nameProperty; };
            AccountsPayablePaymentDialog.prototype.getService = function () { return Finance.AccountsPayablePaymentService.baseUrl; };
            AccountsPayablePaymentDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsPayablePaymentDialog);
            return AccountsPayablePaymentDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsPayablePaymentDialog = AccountsPayablePaymentDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsPayablePaymentGrid = /** @class */ (function (_super) {
            __extends(AccountsPayablePaymentGrid, _super);
            function AccountsPayablePaymentGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsPayablePaymentGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsPayablePayment'; };
            AccountsPayablePaymentGrid.prototype.getDialogType = function () { return Finance.AccountsPayablePaymentDialog; };
            AccountsPayablePaymentGrid.prototype.getIdProperty = function () { return Finance.AccountsPayablePaymentRow.idProperty; };
            AccountsPayablePaymentGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsPayablePaymentRow.localTextPrefix; };
            AccountsPayablePaymentGrid.prototype.getService = function () { return Finance.AccountsPayablePaymentService.baseUrl; };
            AccountsPayablePaymentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsPayablePaymentGrid);
            return AccountsPayablePaymentGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsPayablePaymentGrid = AccountsPayablePaymentGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableCommissionDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivableCommissionDialog, _super);
            function AccountsReceivableCommissionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivableCommissionForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivableCommissionDialog.prototype.getFormKey = function () { return Finance.AccountsReceivableCommissionForm.formKey; };
            AccountsReceivableCommissionDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivableCommissionRow.idProperty; };
            AccountsReceivableCommissionDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableCommissionRow.localTextPrefix; };
            AccountsReceivableCommissionDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivableCommissionRow.nameProperty; };
            AccountsReceivableCommissionDialog.prototype.getService = function () { return Finance.AccountsReceivableCommissionService.baseUrl; };
            AccountsReceivableCommissionDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivableCommissionDialog);
            return AccountsReceivableCommissionDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivableCommissionDialog = AccountsReceivableCommissionDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableCommissionGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivableCommissionGrid, _super);
            function AccountsReceivableCommissionGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableCommissionGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivableCommission'; };
            AccountsReceivableCommissionGrid.prototype.getDialogType = function () { return Finance.AccountsReceivableCommissionDialog; };
            AccountsReceivableCommissionGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivableCommissionRow.idProperty; };
            AccountsReceivableCommissionGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableCommissionRow.localTextPrefix; };
            AccountsReceivableCommissionGrid.prototype.getService = function () { return Finance.AccountsReceivableCommissionService.baseUrl; };
            AccountsReceivableCommissionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableCommissionGrid);
            return AccountsReceivableCommissionGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivableCommissionGrid = AccountsReceivableCommissionGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceDetailDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceDetailDialog, _super);
            function AccountsReceivableInvoiceDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivableInvoiceDetailForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivableInvoiceDetailDialog.prototype.getFormKey = function () { return Finance.AccountsReceivableInvoiceDetailForm.formKey; };
            AccountsReceivableInvoiceDetailDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivableInvoiceDetailRow.idProperty; };
            AccountsReceivableInvoiceDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceDetailRow.localTextPrefix; };
            AccountsReceivableInvoiceDetailDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivableInvoiceDetailRow.nameProperty; };
            AccountsReceivableInvoiceDetailDialog.prototype.getService = function () { return Finance.AccountsReceivableInvoiceDetailService.baseUrl; };
            AccountsReceivableInvoiceDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivableInvoiceDetailDialog);
            return AccountsReceivableInvoiceDetailDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivableInvoiceDetailDialog = AccountsReceivableInvoiceDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceDetailGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceDetailGrid, _super);
            function AccountsReceivableInvoiceDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableInvoiceDetailGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivableInvoiceDetail'; };
            AccountsReceivableInvoiceDetailGrid.prototype.getDialogType = function () { return Finance.AccountsReceivableInvoiceDetailDialog; };
            AccountsReceivableInvoiceDetailGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivableInvoiceDetailRow.idProperty; };
            AccountsReceivableInvoiceDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceDetailRow.localTextPrefix; };
            AccountsReceivableInvoiceDetailGrid.prototype.getService = function () { return Finance.AccountsReceivableInvoiceDetailService.baseUrl; };
            AccountsReceivableInvoiceDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableInvoiceDetailGrid);
            return AccountsReceivableInvoiceDetailGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivableInvoiceDetailGrid = AccountsReceivableInvoiceDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceDialog, _super);
            function AccountsReceivableInvoiceDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivableInvoiceForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivableInvoiceDialog.prototype.getFormKey = function () { return Finance.AccountsReceivableInvoiceForm.formKey; };
            AccountsReceivableInvoiceDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivableInvoiceRow.idProperty; };
            AccountsReceivableInvoiceDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceRow.localTextPrefix; };
            AccountsReceivableInvoiceDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivableInvoiceRow.nameProperty; };
            AccountsReceivableInvoiceDialog.prototype.getService = function () { return Finance.AccountsReceivableInvoiceService.baseUrl; };
            AccountsReceivableInvoiceDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivableInvoiceDialog);
            return AccountsReceivableInvoiceDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivableInvoiceDialog = AccountsReceivableInvoiceDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceGrid, _super);
            function AccountsReceivableInvoiceGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableInvoiceGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivableInvoice'; };
            AccountsReceivableInvoiceGrid.prototype.getDialogType = function () { return Finance.AccountsReceivableInvoiceDialog; };
            AccountsReceivableInvoiceGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivableInvoiceRow.idProperty; };
            AccountsReceivableInvoiceGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceRow.localTextPrefix; };
            AccountsReceivableInvoiceGrid.prototype.getService = function () { return Finance.AccountsReceivableInvoiceService.baseUrl; };
            AccountsReceivableInvoiceGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableInvoiceGrid);
            return AccountsReceivableInvoiceGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivableInvoiceGrid = AccountsReceivableInvoiceGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceOrderDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceOrderDialog, _super);
            function AccountsReceivableInvoiceOrderDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivableInvoiceOrderForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivableInvoiceOrderDialog.prototype.getFormKey = function () { return Finance.AccountsReceivableInvoiceOrderForm.formKey; };
            AccountsReceivableInvoiceOrderDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivableInvoiceOrderRow.idProperty; };
            AccountsReceivableInvoiceOrderDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceOrderRow.localTextPrefix; };
            AccountsReceivableInvoiceOrderDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivableInvoiceOrderRow.nameProperty; };
            AccountsReceivableInvoiceOrderDialog.prototype.getService = function () { return Finance.AccountsReceivableInvoiceOrderService.baseUrl; };
            AccountsReceivableInvoiceOrderDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivableInvoiceOrderDialog);
            return AccountsReceivableInvoiceOrderDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivableInvoiceOrderDialog = AccountsReceivableInvoiceOrderDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceOrderEditor = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceOrderEditor, _super);
            function AccountsReceivableInvoiceOrderEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableInvoiceOrderEditor.prototype.getColumnsKey = function () { return "Finance.AccountsReceivableInvoiceOrder"; };
            AccountsReceivableInvoiceOrderEditor.prototype.getDialogType = function () { return Finance.AccountsReceivableInvoiceOrderDialog; };
            AccountsReceivableInvoiceOrderEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceOrderRow.localTextPrefix; };
            AccountsReceivableInvoiceOrderEditor.prototype.usePager = function () {
                return true;
            };
            AccountsReceivableInvoiceOrderEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsReceivableInvoiceOrderEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableInvoiceOrderEditor);
            return AccountsReceivableInvoiceOrderEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsReceivableInvoiceOrderEditor = AccountsReceivableInvoiceOrderEditor;
        var AccountsReceivableInvoiceDetailEditor = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceDetailEditor, _super);
            function AccountsReceivableInvoiceDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableInvoiceDetailEditor.prototype.getColumnsKey = function () { return "Finance.AccountsReceivableInvoiceDetail"; };
            AccountsReceivableInvoiceDetailEditor.prototype.getDialogType = function () { return Finance.AccountsReceivableInvoiceDetailDialog; };
            AccountsReceivableInvoiceDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceDetailRow.localTextPrefix; };
            AccountsReceivableInvoiceDetailEditor.prototype.usePager = function () {
                return true;
            };
            AccountsReceivableInvoiceDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsReceivableInvoiceDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableInvoiceDetailEditor);
            return AccountsReceivableInvoiceDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsReceivableInvoiceDetailEditor = AccountsReceivableInvoiceDetailEditor;
        var AccountsReceivableCommissionEditor = /** @class */ (function (_super) {
            __extends(AccountsReceivableCommissionEditor, _super);
            function AccountsReceivableCommissionEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableCommissionEditor.prototype.getColumnsKey = function () { return "Finance.AccountsReceivableCommission"; };
            AccountsReceivableCommissionEditor.prototype.getDialogType = function () { return Finance.AccountsReceivableCommissionDialog; };
            AccountsReceivableCommissionEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableCommissionRow.localTextPrefix; };
            AccountsReceivableCommissionEditor.prototype.usePager = function () {
                return true;
            };
            AccountsReceivableCommissionEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsReceivableCommissionEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableCommissionEditor);
            return AccountsReceivableCommissionEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsReceivableCommissionEditor = AccountsReceivableCommissionEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableInvoiceOrderGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivableInvoiceOrderGrid, _super);
            function AccountsReceivableInvoiceOrderGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableInvoiceOrderGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivableInvoiceOrder'; };
            AccountsReceivableInvoiceOrderGrid.prototype.getDialogType = function () { return Finance.AccountsReceivableInvoiceOrderDialog; };
            AccountsReceivableInvoiceOrderGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivableInvoiceOrderRow.idProperty; };
            AccountsReceivableInvoiceOrderGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableInvoiceOrderRow.localTextPrefix; };
            AccountsReceivableInvoiceOrderGrid.prototype.getService = function () { return Finance.AccountsReceivableInvoiceOrderService.baseUrl; };
            AccountsReceivableInvoiceOrderGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableInvoiceOrderGrid);
            return AccountsReceivableInvoiceOrderGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivableInvoiceOrderGrid = AccountsReceivableInvoiceOrderGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableJournalDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivableJournalDialog, _super);
            function AccountsReceivableJournalDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivableJournalForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivableJournalDialog.prototype.getFormKey = function () { return Finance.AccountsReceivableJournalForm.formKey; };
            AccountsReceivableJournalDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivableJournalRow.idProperty; };
            AccountsReceivableJournalDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableJournalRow.localTextPrefix; };
            AccountsReceivableJournalDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivableJournalRow.nameProperty; };
            AccountsReceivableJournalDialog.prototype.getService = function () { return Finance.AccountsReceivableJournalService.baseUrl; };
            AccountsReceivableJournalDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivableJournalDialog);
            return AccountsReceivableJournalDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivableJournalDialog = AccountsReceivableJournalDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableJournalGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivableJournalGrid, _super);
            function AccountsReceivableJournalGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableJournalGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivableJournal'; };
            AccountsReceivableJournalGrid.prototype.getDialogType = function () { return Finance.AccountsReceivableJournalDialog; };
            AccountsReceivableJournalGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivableJournalRow.idProperty; };
            AccountsReceivableJournalGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableJournalRow.localTextPrefix; };
            AccountsReceivableJournalGrid.prototype.getService = function () { return Finance.AccountsReceivableJournalService.baseUrl; };
            AccountsReceivableJournalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableJournalGrid);
            return AccountsReceivableJournalGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivableJournalGrid = AccountsReceivableJournalGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableLedgerDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivableLedgerDialog, _super);
            function AccountsReceivableLedgerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivableLedgerForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivableLedgerDialog.prototype.getFormKey = function () { return Finance.AccountsReceivableLedgerForm.formKey; };
            AccountsReceivableLedgerDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivableLedgerRow.idProperty; };
            AccountsReceivableLedgerDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableLedgerRow.localTextPrefix; };
            AccountsReceivableLedgerDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivableLedgerRow.nameProperty; };
            AccountsReceivableLedgerDialog.prototype.getService = function () { return Finance.AccountsReceivableLedgerService.baseUrl; };
            AccountsReceivableLedgerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivableLedgerDialog);
            return AccountsReceivableLedgerDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivableLedgerDialog = AccountsReceivableLedgerDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivableLedgerGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivableLedgerGrid, _super);
            function AccountsReceivableLedgerGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivableLedgerGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivableLedger'; };
            AccountsReceivableLedgerGrid.prototype.getDialogType = function () { return Finance.AccountsReceivableLedgerDialog; };
            AccountsReceivableLedgerGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivableLedgerRow.idProperty; };
            AccountsReceivableLedgerGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivableLedgerRow.localTextPrefix; };
            AccountsReceivableLedgerGrid.prototype.getService = function () { return Finance.AccountsReceivableLedgerService.baseUrl; };
            AccountsReceivableLedgerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivableLedgerGrid);
            return AccountsReceivableLedgerGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivableLedgerGrid = AccountsReceivableLedgerGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentCurrencyDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentCurrencyDialog, _super);
            function AccountsReceivablePaymentCurrencyDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivablePaymentCurrencyForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivablePaymentCurrencyDialog.prototype.getFormKey = function () { return Finance.AccountsReceivablePaymentCurrencyForm.formKey; };
            AccountsReceivablePaymentCurrencyDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentCurrencyRow.idProperty; };
            AccountsReceivablePaymentCurrencyDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentCurrencyRow.localTextPrefix; };
            AccountsReceivablePaymentCurrencyDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivablePaymentCurrencyRow.nameProperty; };
            AccountsReceivablePaymentCurrencyDialog.prototype.getService = function () { return Finance.AccountsReceivablePaymentCurrencyService.baseUrl; };
            AccountsReceivablePaymentCurrencyDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivablePaymentCurrencyDialog);
            return AccountsReceivablePaymentCurrencyDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivablePaymentCurrencyDialog = AccountsReceivablePaymentCurrencyDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentCurrencyGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentCurrencyGrid, _super);
            function AccountsReceivablePaymentCurrencyGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivablePaymentCurrencyGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivablePaymentCurrency'; };
            AccountsReceivablePaymentCurrencyGrid.prototype.getDialogType = function () { return Finance.AccountsReceivablePaymentCurrencyDialog; };
            AccountsReceivablePaymentCurrencyGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentCurrencyRow.idProperty; };
            AccountsReceivablePaymentCurrencyGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentCurrencyRow.localTextPrefix; };
            AccountsReceivablePaymentCurrencyGrid.prototype.getService = function () { return Finance.AccountsReceivablePaymentCurrencyService.baseUrl; };
            AccountsReceivablePaymentCurrencyGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivablePaymentCurrencyGrid);
            return AccountsReceivablePaymentCurrencyGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivablePaymentCurrencyGrid = AccountsReceivablePaymentCurrencyGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDepositDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDepositDialog, _super);
            function AccountsReceivablePaymentDepositDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivablePaymentDepositForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivablePaymentDepositDialog.prototype.getFormKey = function () { return Finance.AccountsReceivablePaymentDepositForm.formKey; };
            AccountsReceivablePaymentDepositDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentDepositRow.idProperty; };
            AccountsReceivablePaymentDepositDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentDepositRow.localTextPrefix; };
            AccountsReceivablePaymentDepositDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivablePaymentDepositRow.nameProperty; };
            AccountsReceivablePaymentDepositDialog.prototype.getService = function () { return Finance.AccountsReceivablePaymentDepositService.baseUrl; };
            AccountsReceivablePaymentDepositDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivablePaymentDepositDialog);
            return AccountsReceivablePaymentDepositDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivablePaymentDepositDialog = AccountsReceivablePaymentDepositDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDepositGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDepositGrid, _super);
            function AccountsReceivablePaymentDepositGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivablePaymentDepositGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivablePaymentDeposit'; };
            AccountsReceivablePaymentDepositGrid.prototype.getDialogType = function () { return Finance.AccountsReceivablePaymentDepositDialog; };
            AccountsReceivablePaymentDepositGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentDepositRow.idProperty; };
            AccountsReceivablePaymentDepositGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentDepositRow.localTextPrefix; };
            AccountsReceivablePaymentDepositGrid.prototype.getService = function () { return Finance.AccountsReceivablePaymentDepositService.baseUrl; };
            AccountsReceivablePaymentDepositGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivablePaymentDepositGrid);
            return AccountsReceivablePaymentDepositGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivablePaymentDepositGrid = AccountsReceivablePaymentDepositGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDepositRowDetailEditor = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDepositRowDetailEditor, _super);
            function AccountsReceivablePaymentDepositRowDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivablePaymentDepositRowDetailEditor.prototype.getColumnsKey = function () { return "Finance.AccountsReceivablePaymentDeposit"; };
            AccountsReceivablePaymentDepositRowDetailEditor.prototype.getDialogType = function () { return Finance.AccountsReceivablePaymentDepositDialog; };
            AccountsReceivablePaymentDepositRowDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentDepositRow.localTextPrefix; };
            AccountsReceivablePaymentDepositRowDetailEditor.prototype.usePager = function () {
                return true;
            };
            AccountsReceivablePaymentDepositRowDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsReceivablePaymentDepositRowDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivablePaymentDepositRowDetailEditor);
            return AccountsReceivablePaymentDepositRowDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsReceivablePaymentDepositRowDetailEditor = AccountsReceivablePaymentDepositRowDetailEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDetailDetailEditor = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDetailDetailEditor, _super);
            function AccountsReceivablePaymentDetailDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivablePaymentDetailDetailEditor.prototype.getColumnsKey = function () { return "Finance.AccountsReceivablePaymentDetail"; };
            AccountsReceivablePaymentDetailDetailEditor.prototype.getDialogType = function () { return Finance.AccountsReceivablePaymentDetailDialog; };
            AccountsReceivablePaymentDetailDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentDetailRow.localTextPrefix; };
            AccountsReceivablePaymentDetailDetailEditor.prototype.usePager = function () {
                return true;
            };
            AccountsReceivablePaymentDetailDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountsReceivablePaymentDetailDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivablePaymentDetailDetailEditor);
            return AccountsReceivablePaymentDetailDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.AccountsReceivablePaymentDetailDetailEditor = AccountsReceivablePaymentDetailDetailEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDetailDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDetailDialog, _super);
            function AccountsReceivablePaymentDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivablePaymentDetailForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivablePaymentDetailDialog.prototype.getFormKey = function () { return Finance.AccountsReceivablePaymentDetailForm.formKey; };
            AccountsReceivablePaymentDetailDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentDetailRow.idProperty; };
            AccountsReceivablePaymentDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentDetailRow.localTextPrefix; };
            AccountsReceivablePaymentDetailDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivablePaymentDetailRow.nameProperty; };
            AccountsReceivablePaymentDetailDialog.prototype.getService = function () { return Finance.AccountsReceivablePaymentDetailService.baseUrl; };
            AccountsReceivablePaymentDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivablePaymentDetailDialog);
            return AccountsReceivablePaymentDetailDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivablePaymentDetailDialog = AccountsReceivablePaymentDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDetailGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDetailGrid, _super);
            function AccountsReceivablePaymentDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivablePaymentDetailGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivablePaymentDetail'; };
            AccountsReceivablePaymentDetailGrid.prototype.getDialogType = function () { return Finance.AccountsReceivablePaymentDetailDialog; };
            AccountsReceivablePaymentDetailGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentDetailRow.idProperty; };
            AccountsReceivablePaymentDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentDetailRow.localTextPrefix; };
            AccountsReceivablePaymentDetailGrid.prototype.getService = function () { return Finance.AccountsReceivablePaymentDetailService.baseUrl; };
            AccountsReceivablePaymentDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivablePaymentDetailGrid);
            return AccountsReceivablePaymentDetailGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivablePaymentDetailGrid = AccountsReceivablePaymentDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentDialog = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentDialog, _super);
            function AccountsReceivablePaymentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.AccountsReceivablePaymentForm(_this.idPrefix);
                return _this;
            }
            AccountsReceivablePaymentDialog.prototype.getFormKey = function () { return Finance.AccountsReceivablePaymentForm.formKey; };
            AccountsReceivablePaymentDialog.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentRow.idProperty; };
            AccountsReceivablePaymentDialog.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentRow.localTextPrefix; };
            AccountsReceivablePaymentDialog.prototype.getNameProperty = function () { return Finance.AccountsReceivablePaymentRow.nameProperty; };
            AccountsReceivablePaymentDialog.prototype.getService = function () { return Finance.AccountsReceivablePaymentService.baseUrl; };
            AccountsReceivablePaymentDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountsReceivablePaymentDialog);
            return AccountsReceivablePaymentDialog;
        }(Serenity.EntityDialog));
        Finance.AccountsReceivablePaymentDialog = AccountsReceivablePaymentDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var AccountsReceivablePaymentGrid = /** @class */ (function (_super) {
            __extends(AccountsReceivablePaymentGrid, _super);
            function AccountsReceivablePaymentGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountsReceivablePaymentGrid.prototype.getColumnsKey = function () { return 'Finance.AccountsReceivablePayment'; };
            AccountsReceivablePaymentGrid.prototype.getDialogType = function () { return Finance.AccountsReceivablePaymentDialog; };
            AccountsReceivablePaymentGrid.prototype.getIdProperty = function () { return Finance.AccountsReceivablePaymentRow.idProperty; };
            AccountsReceivablePaymentGrid.prototype.getLocalTextPrefix = function () { return Finance.AccountsReceivablePaymentRow.localTextPrefix; };
            AccountsReceivablePaymentGrid.prototype.getService = function () { return Finance.AccountsReceivablePaymentService.baseUrl; };
            AccountsReceivablePaymentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountsReceivablePaymentGrid);
            return AccountsReceivablePaymentGrid;
        }(Serenity.EntityGrid));
        Finance.AccountsReceivablePaymentGrid = AccountsReceivablePaymentGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CostCenterBudgetDialog = /** @class */ (function (_super) {
            __extends(CostCenterBudgetDialog, _super);
            function CostCenterBudgetDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.CostCenterBudgetForm(_this.idPrefix);
                return _this;
            }
            CostCenterBudgetDialog.prototype.getFormKey = function () { return Finance.CostCenterBudgetForm.formKey; };
            CostCenterBudgetDialog.prototype.getIdProperty = function () { return Finance.CostCenterBudgetRow.idProperty; };
            CostCenterBudgetDialog.prototype.getLocalTextPrefix = function () { return Finance.CostCenterBudgetRow.localTextPrefix; };
            CostCenterBudgetDialog.prototype.getNameProperty = function () { return Finance.CostCenterBudgetRow.nameProperty; };
            CostCenterBudgetDialog.prototype.getService = function () { return Finance.CostCenterBudgetService.baseUrl; };
            CostCenterBudgetDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CostCenterBudgetDialog);
            return CostCenterBudgetDialog;
        }(Serenity.EntityDialog));
        Finance.CostCenterBudgetDialog = CostCenterBudgetDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CostCenterBudgetGrid = /** @class */ (function (_super) {
            __extends(CostCenterBudgetGrid, _super);
            function CostCenterBudgetGrid(container) {
                return _super.call(this, container) || this;
            }
            CostCenterBudgetGrid.prototype.getColumnsKey = function () { return 'Finance.CostCenterBudget'; };
            CostCenterBudgetGrid.prototype.getDialogType = function () { return Finance.CostCenterBudgetDialog; };
            CostCenterBudgetGrid.prototype.getIdProperty = function () { return Finance.CostCenterBudgetRow.idProperty; };
            CostCenterBudgetGrid.prototype.getLocalTextPrefix = function () { return Finance.CostCenterBudgetRow.localTextPrefix; };
            CostCenterBudgetGrid.prototype.getService = function () { return Finance.CostCenterBudgetService.baseUrl; };
            CostCenterBudgetGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CostCenterBudgetGrid);
            return CostCenterBudgetGrid;
        }(Serenity.EntityGrid));
        Finance.CostCenterBudgetGrid = CostCenterBudgetGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyBalanceDialog = /** @class */ (function (_super) {
            __extends(CurrencyBalanceDialog, _super);
            function CurrencyBalanceDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.CurrencyBalanceForm(_this.idPrefix);
                return _this;
            }
            CurrencyBalanceDialog.prototype.getFormKey = function () { return Finance.CurrencyBalanceForm.formKey; };
            CurrencyBalanceDialog.prototype.getIdProperty = function () { return Finance.CurrencyBalanceRow.idProperty; };
            CurrencyBalanceDialog.prototype.getLocalTextPrefix = function () { return Finance.CurrencyBalanceRow.localTextPrefix; };
            CurrencyBalanceDialog.prototype.getNameProperty = function () { return Finance.CurrencyBalanceRow.nameProperty; };
            CurrencyBalanceDialog.prototype.getService = function () { return Finance.CurrencyBalanceService.baseUrl; };
            CurrencyBalanceDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CurrencyBalanceDialog);
            return CurrencyBalanceDialog;
        }(Serenity.EntityDialog));
        Finance.CurrencyBalanceDialog = CurrencyBalanceDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyBalanceGrid = /** @class */ (function (_super) {
            __extends(CurrencyBalanceGrid, _super);
            function CurrencyBalanceGrid(container) {
                return _super.call(this, container) || this;
            }
            CurrencyBalanceGrid.prototype.getColumnsKey = function () { return 'Finance.CurrencyBalance'; };
            CurrencyBalanceGrid.prototype.getDialogType = function () { return Finance.CurrencyBalanceDialog; };
            CurrencyBalanceGrid.prototype.getIdProperty = function () { return Finance.CurrencyBalanceRow.idProperty; };
            CurrencyBalanceGrid.prototype.getLocalTextPrefix = function () { return Finance.CurrencyBalanceRow.localTextPrefix; };
            CurrencyBalanceGrid.prototype.getService = function () { return Finance.CurrencyBalanceService.baseUrl; };
            CurrencyBalanceGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CurrencyBalanceGrid);
            return CurrencyBalanceGrid;
        }(Serenity.EntityGrid));
        Finance.CurrencyBalanceGrid = CurrencyBalanceGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerDialog = /** @class */ (function (_super) {
            __extends(CurrencyLedgerDialog, _super);
            function CurrencyLedgerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.CurrencyLedgerForm(_this.idPrefix);
                return _this;
            }
            CurrencyLedgerDialog.prototype.getFormKey = function () { return Finance.CurrencyLedgerForm.formKey; };
            CurrencyLedgerDialog.prototype.getIdProperty = function () { return Finance.CurrencyLedgerRow.idProperty; };
            CurrencyLedgerDialog.prototype.getLocalTextPrefix = function () { return Finance.CurrencyLedgerRow.localTextPrefix; };
            CurrencyLedgerDialog.prototype.getNameProperty = function () { return Finance.CurrencyLedgerRow.nameProperty; };
            CurrencyLedgerDialog.prototype.getService = function () { return Finance.CurrencyLedgerService.baseUrl; };
            CurrencyLedgerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CurrencyLedgerDialog);
            return CurrencyLedgerDialog;
        }(Serenity.EntityDialog));
        Finance.CurrencyLedgerDialog = CurrencyLedgerDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerGrid = /** @class */ (function (_super) {
            __extends(CurrencyLedgerGrid, _super);
            function CurrencyLedgerGrid(container) {
                return _super.call(this, container) || this;
            }
            CurrencyLedgerGrid.prototype.getColumnsKey = function () { return 'Finance.CurrencyLedger'; };
            CurrencyLedgerGrid.prototype.getDialogType = function () { return Finance.CurrencyLedgerDialog; };
            CurrencyLedgerGrid.prototype.getIdProperty = function () { return Finance.CurrencyLedgerRow.idProperty; };
            CurrencyLedgerGrid.prototype.getLocalTextPrefix = function () { return Finance.CurrencyLedgerRow.localTextPrefix; };
            CurrencyLedgerGrid.prototype.getService = function () { return Finance.CurrencyLedgerService.baseUrl; };
            CurrencyLedgerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CurrencyLedgerGrid);
            return CurrencyLedgerGrid;
        }(Serenity.EntityGrid));
        Finance.CurrencyLedgerGrid = CurrencyLedgerGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerSummaryDialog = /** @class */ (function (_super) {
            __extends(CurrencyLedgerSummaryDialog, _super);
            function CurrencyLedgerSummaryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.CurrencyLedgerSummaryForm(_this.idPrefix);
                return _this;
            }
            CurrencyLedgerSummaryDialog.prototype.getFormKey = function () { return Finance.CurrencyLedgerSummaryForm.formKey; };
            CurrencyLedgerSummaryDialog.prototype.getIdProperty = function () { return Finance.CurrencyLedgerSummaryRow.idProperty; };
            CurrencyLedgerSummaryDialog.prototype.getLocalTextPrefix = function () { return Finance.CurrencyLedgerSummaryRow.localTextPrefix; };
            CurrencyLedgerSummaryDialog.prototype.getNameProperty = function () { return Finance.CurrencyLedgerSummaryRow.nameProperty; };
            CurrencyLedgerSummaryDialog.prototype.getService = function () { return Finance.CurrencyLedgerSummaryService.baseUrl; };
            CurrencyLedgerSummaryDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CurrencyLedgerSummaryDialog);
            return CurrencyLedgerSummaryDialog;
        }(Serenity.EntityDialog));
        Finance.CurrencyLedgerSummaryDialog = CurrencyLedgerSummaryDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var CurrencyLedgerSummaryGrid = /** @class */ (function (_super) {
            __extends(CurrencyLedgerSummaryGrid, _super);
            function CurrencyLedgerSummaryGrid(container) {
                return _super.call(this, container) || this;
            }
            CurrencyLedgerSummaryGrid.prototype.getColumnsKey = function () { return 'Finance.CurrencyLedgerSummary'; };
            CurrencyLedgerSummaryGrid.prototype.getDialogType = function () { return Finance.CurrencyLedgerSummaryDialog; };
            CurrencyLedgerSummaryGrid.prototype.getIdProperty = function () { return Finance.CurrencyLedgerSummaryRow.idProperty; };
            CurrencyLedgerSummaryGrid.prototype.getLocalTextPrefix = function () { return Finance.CurrencyLedgerSummaryRow.localTextPrefix; };
            CurrencyLedgerSummaryGrid.prototype.getService = function () { return Finance.CurrencyLedgerSummaryService.baseUrl; };
            CurrencyLedgerSummaryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CurrencyLedgerSummaryGrid);
            return CurrencyLedgerSummaryGrid;
        }(Serenity.EntityGrid));
        Finance.CurrencyLedgerSummaryGrid = CurrencyLedgerSummaryGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var LedgerSummaryDialog = /** @class */ (function (_super) {
            __extends(LedgerSummaryDialog, _super);
            function LedgerSummaryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.LedgerSummaryForm(_this.idPrefix);
                return _this;
            }
            LedgerSummaryDialog.prototype.getFormKey = function () { return Finance.LedgerSummaryForm.formKey; };
            LedgerSummaryDialog.prototype.getIdProperty = function () { return Finance.LedgerSummaryRow.idProperty; };
            LedgerSummaryDialog.prototype.getLocalTextPrefix = function () { return Finance.LedgerSummaryRow.localTextPrefix; };
            LedgerSummaryDialog.prototype.getNameProperty = function () { return Finance.LedgerSummaryRow.nameProperty; };
            LedgerSummaryDialog.prototype.getService = function () { return Finance.LedgerSummaryService.baseUrl; };
            LedgerSummaryDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], LedgerSummaryDialog);
            return LedgerSummaryDialog;
        }(Serenity.EntityDialog));
        Finance.LedgerSummaryDialog = LedgerSummaryDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var LedgerSummaryGrid = /** @class */ (function (_super) {
            __extends(LedgerSummaryGrid, _super);
            function LedgerSummaryGrid(container) {
                return _super.call(this, container) || this;
            }
            LedgerSummaryGrid.prototype.getColumnsKey = function () { return 'Finance.LedgerSummary'; };
            LedgerSummaryGrid.prototype.getDialogType = function () { return Finance.LedgerSummaryDialog; };
            LedgerSummaryGrid.prototype.getIdProperty = function () { return Finance.LedgerSummaryRow.idProperty; };
            LedgerSummaryGrid.prototype.getLocalTextPrefix = function () { return Finance.LedgerSummaryRow.localTextPrefix; };
            LedgerSummaryGrid.prototype.getService = function () { return Finance.LedgerSummaryService.baseUrl; };
            LedgerSummaryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LedgerSummaryGrid);
            return LedgerSummaryGrid;
        }(Serenity.EntityGrid));
        Finance.LedgerSummaryGrid = LedgerSummaryGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherDetailDialog = /** @class */ (function (_super) {
            __extends(PeriodicVoucherDetailDialog, _super);
            function PeriodicVoucherDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.PeriodicVoucherDetailForm(_this.idPrefix);
                return _this;
            }
            PeriodicVoucherDetailDialog.prototype.getFormKey = function () { return Finance.PeriodicVoucherDetailForm.formKey; };
            PeriodicVoucherDetailDialog.prototype.getIdProperty = function () { return Finance.PeriodicVoucherDetailRow.idProperty; };
            PeriodicVoucherDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherDetailRow.localTextPrefix; };
            PeriodicVoucherDetailDialog.prototype.getNameProperty = function () { return Finance.PeriodicVoucherDetailRow.nameProperty; };
            PeriodicVoucherDetailDialog.prototype.getService = function () { return Finance.PeriodicVoucherDetailService.baseUrl; };
            PeriodicVoucherDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PeriodicVoucherDetailDialog);
            return PeriodicVoucherDetailDialog;
        }(Serenity.EntityDialog));
        Finance.PeriodicVoucherDetailDialog = PeriodicVoucherDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherDetailEditor = /** @class */ (function (_super) {
            __extends(PeriodicVoucherDetailEditor, _super);
            function PeriodicVoucherDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            PeriodicVoucherDetailEditor.prototype.getColumnsKey = function () { return "Sales.QuotationDetail"; };
            PeriodicVoucherDetailEditor.prototype.getDialogType = function () { return Finance.PeriodicVoucherDetailDialog; };
            PeriodicVoucherDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherDetailRow.localTextPrefix; };
            PeriodicVoucherDetailEditor.prototype.usePager = function () {
                return true;
            };
            PeriodicVoucherDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            PeriodicVoucherDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], PeriodicVoucherDetailEditor);
            return PeriodicVoucherDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.PeriodicVoucherDetailEditor = PeriodicVoucherDetailEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherDetailGrid = /** @class */ (function (_super) {
            __extends(PeriodicVoucherDetailGrid, _super);
            function PeriodicVoucherDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            PeriodicVoucherDetailGrid.prototype.getColumnsKey = function () { return 'Finance.PeriodicVoucherDetail'; };
            PeriodicVoucherDetailGrid.prototype.getDialogType = function () { return Finance.PeriodicVoucherDetailDialog; };
            PeriodicVoucherDetailGrid.prototype.getIdProperty = function () { return Finance.PeriodicVoucherDetailRow.idProperty; };
            PeriodicVoucherDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherDetailRow.localTextPrefix; };
            PeriodicVoucherDetailGrid.prototype.getService = function () { return Finance.PeriodicVoucherDetailService.baseUrl; };
            PeriodicVoucherDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PeriodicVoucherDetailGrid);
            return PeriodicVoucherDetailGrid;
        }(Serenity.EntityGrid));
        Finance.PeriodicVoucherDetailGrid = PeriodicVoucherDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherDialog = /** @class */ (function (_super) {
            __extends(PeriodicVoucherDialog, _super);
            function PeriodicVoucherDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.PeriodicVoucherForm(_this.idPrefix);
                return _this;
            }
            PeriodicVoucherDialog.prototype.getFormKey = function () { return Finance.PeriodicVoucherForm.formKey; };
            PeriodicVoucherDialog.prototype.getIdProperty = function () { return Finance.PeriodicVoucherRow.idProperty; };
            PeriodicVoucherDialog.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherRow.localTextPrefix; };
            PeriodicVoucherDialog.prototype.getNameProperty = function () { return Finance.PeriodicVoucherRow.nameProperty; };
            PeriodicVoucherDialog.prototype.getService = function () { return Finance.PeriodicVoucherService.baseUrl; };
            PeriodicVoucherDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PeriodicVoucherDialog);
            return PeriodicVoucherDialog;
        }(Serenity.EntityDialog));
        Finance.PeriodicVoucherDialog = PeriodicVoucherDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherGrid = /** @class */ (function (_super) {
            __extends(PeriodicVoucherGrid, _super);
            function PeriodicVoucherGrid(container) {
                return _super.call(this, container) || this;
            }
            PeriodicVoucherGrid.prototype.getColumnsKey = function () { return 'Finance.PeriodicVoucher'; };
            PeriodicVoucherGrid.prototype.getDialogType = function () { return Finance.PeriodicVoucherDialog; };
            PeriodicVoucherGrid.prototype.getIdProperty = function () { return Finance.PeriodicVoucherRow.idProperty; };
            PeriodicVoucherGrid.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherRow.localTextPrefix; };
            PeriodicVoucherGrid.prototype.getService = function () { return Finance.PeriodicVoucherService.baseUrl; };
            PeriodicVoucherGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PeriodicVoucherGrid);
            return PeriodicVoucherGrid;
        }(Serenity.EntityGrid));
        Finance.PeriodicVoucherGrid = PeriodicVoucherGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherScheduleDetailEditor = /** @class */ (function (_super) {
            __extends(PeriodicVoucherScheduleDetailEditor, _super);
            function PeriodicVoucherScheduleDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            PeriodicVoucherScheduleDetailEditor.prototype.getColumnsKey = function () { return "Sales.QuotationDetail"; };
            PeriodicVoucherScheduleDetailEditor.prototype.getDialogType = function () { return Finance.PeriodicVoucherScheduleDialog; };
            PeriodicVoucherScheduleDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherScheduleRow.localTextPrefix; };
            PeriodicVoucherScheduleDetailEditor.prototype.usePager = function () {
                return true;
            };
            PeriodicVoucherScheduleDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            PeriodicVoucherScheduleDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], PeriodicVoucherScheduleDetailEditor);
            return PeriodicVoucherScheduleDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.PeriodicVoucherScheduleDetailEditor = PeriodicVoucherScheduleDetailEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherScheduleDialog = /** @class */ (function (_super) {
            __extends(PeriodicVoucherScheduleDialog, _super);
            function PeriodicVoucherScheduleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.PeriodicVoucherScheduleForm(_this.idPrefix);
                return _this;
            }
            PeriodicVoucherScheduleDialog.prototype.getFormKey = function () { return Finance.PeriodicVoucherScheduleForm.formKey; };
            PeriodicVoucherScheduleDialog.prototype.getIdProperty = function () { return Finance.PeriodicVoucherScheduleRow.idProperty; };
            PeriodicVoucherScheduleDialog.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherScheduleRow.localTextPrefix; };
            PeriodicVoucherScheduleDialog.prototype.getNameProperty = function () { return Finance.PeriodicVoucherScheduleRow.nameProperty; };
            PeriodicVoucherScheduleDialog.prototype.getService = function () { return Finance.PeriodicVoucherScheduleService.baseUrl; };
            PeriodicVoucherScheduleDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PeriodicVoucherScheduleDialog);
            return PeriodicVoucherScheduleDialog;
        }(Serenity.EntityDialog));
        Finance.PeriodicVoucherScheduleDialog = PeriodicVoucherScheduleDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var PeriodicVoucherScheduleGrid = /** @class */ (function (_super) {
            __extends(PeriodicVoucherScheduleGrid, _super);
            function PeriodicVoucherScheduleGrid(container) {
                return _super.call(this, container) || this;
            }
            PeriodicVoucherScheduleGrid.prototype.getColumnsKey = function () { return 'Finance.PeriodicVoucherSchedule'; };
            PeriodicVoucherScheduleGrid.prototype.getDialogType = function () { return Finance.PeriodicVoucherScheduleDialog; };
            PeriodicVoucherScheduleGrid.prototype.getIdProperty = function () { return Finance.PeriodicVoucherScheduleRow.idProperty; };
            PeriodicVoucherScheduleGrid.prototype.getLocalTextPrefix = function () { return Finance.PeriodicVoucherScheduleRow.localTextPrefix; };
            PeriodicVoucherScheduleGrid.prototype.getService = function () { return Finance.PeriodicVoucherScheduleService.baseUrl; };
            PeriodicVoucherScheduleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PeriodicVoucherScheduleGrid);
            return PeriodicVoucherScheduleGrid;
        }(Serenity.EntityGrid));
        Finance.PeriodicVoucherScheduleGrid = PeriodicVoucherScheduleGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCurrencyDetailDialog = /** @class */ (function (_super) {
            __extends(VoucherCurrencyDetailDialog, _super);
            function VoucherCurrencyDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.VoucherCurrencyDetailForm(_this.idPrefix);
                return _this;
            }
            VoucherCurrencyDetailDialog.prototype.getFormKey = function () { return Finance.VoucherCurrencyDetailForm.formKey; };
            VoucherCurrencyDetailDialog.prototype.getIdProperty = function () { return Finance.VoucherCurrencyDetailRow.idProperty; };
            VoucherCurrencyDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.VoucherCurrencyDetailRow.localTextPrefix; };
            VoucherCurrencyDetailDialog.prototype.getNameProperty = function () { return Finance.VoucherCurrencyDetailRow.nameProperty; };
            VoucherCurrencyDetailDialog.prototype.getService = function () { return Finance.VoucherCurrencyDetailService.baseUrl; };
            VoucherCurrencyDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VoucherCurrencyDetailDialog);
            return VoucherCurrencyDetailDialog;
        }(Serenity.EntityDialog));
        Finance.VoucherCurrencyDetailDialog = VoucherCurrencyDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCurrencyDetailGrid = /** @class */ (function (_super) {
            __extends(VoucherCurrencyDetailGrid, _super);
            function VoucherCurrencyDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            VoucherCurrencyDetailGrid.prototype.getColumnsKey = function () { return 'Finance.VoucherCurrencyDetail'; };
            VoucherCurrencyDetailGrid.prototype.getDialogType = function () { return Finance.VoucherCurrencyDetailDialog; };
            VoucherCurrencyDetailGrid.prototype.getIdProperty = function () { return Finance.VoucherCurrencyDetailRow.idProperty; };
            VoucherCurrencyDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.VoucherCurrencyDetailRow.localTextPrefix; };
            VoucherCurrencyDetailGrid.prototype.getService = function () { return Finance.VoucherCurrencyDetailService.baseUrl; };
            VoucherCurrencyDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VoucherCurrencyDetailGrid);
            return VoucherCurrencyDetailGrid;
        }(Serenity.EntityGrid));
        Finance.VoucherCurrencyDetailGrid = VoucherCurrencyDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherDetailDialog = /** @class */ (function (_super) {
            __extends(VoucherDetailDialog, _super);
            function VoucherDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.VoucherDetailForm(_this.idPrefix);
                return _this;
            }
            VoucherDetailDialog.prototype.getFormKey = function () { return Finance.VoucherDetailForm.formKey; };
            VoucherDetailDialog.prototype.getIdProperty = function () { return Finance.VoucherDetailRow.idProperty; };
            VoucherDetailDialog.prototype.getLocalTextPrefix = function () { return Finance.VoucherDetailRow.localTextPrefix; };
            VoucherDetailDialog.prototype.getNameProperty = function () { return Finance.VoucherDetailRow.nameProperty; };
            VoucherDetailDialog.prototype.getService = function () { return Finance.VoucherDetailService.baseUrl; };
            VoucherDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VoucherDetailDialog);
            return VoucherDetailDialog;
        }(Serenity.EntityDialog));
        Finance.VoucherDetailDialog = VoucherDetailDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherDetailEditor = /** @class */ (function (_super) {
            __extends(VoucherDetailEditor, _super);
            function VoucherDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            VoucherDetailEditor.prototype.getColumnsKey = function () { return "Finance.VoucherDetail"; };
            VoucherDetailEditor.prototype.getDialogType = function () { return Finance.VoucherDetailDialog; };
            VoucherDetailEditor.prototype.getLocalTextPrefix = function () { return Finance.VoucherDetailRow.localTextPrefix; };
            VoucherDetailEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            VoucherDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            VoucherDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], VoucherDetailEditor);
            return VoucherDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Finance.VoucherDetailEditor = VoucherDetailEditor;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherDetailGrid = /** @class */ (function (_super) {
            __extends(VoucherDetailGrid, _super);
            function VoucherDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            VoucherDetailGrid.prototype.getColumnsKey = function () { return 'Finance.VoucherDetail'; };
            VoucherDetailGrid.prototype.getDialogType = function () { return Finance.VoucherDetailDialog; };
            VoucherDetailGrid.prototype.getIdProperty = function () { return Finance.VoucherDetailRow.idProperty; };
            VoucherDetailGrid.prototype.getLocalTextPrefix = function () { return Finance.VoucherDetailRow.localTextPrefix; };
            VoucherDetailGrid.prototype.getService = function () { return Finance.VoucherDetailService.baseUrl; };
            VoucherDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VoucherDetailGrid);
            return VoucherDetailGrid;
        }(Serenity.EntityGrid));
        Finance.VoucherDetailGrid = VoucherDetailGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherDialog = /** @class */ (function (_super) {
            __extends(VoucherDialog, _super);
            function VoucherDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.VoucherForm(_this.idPrefix);
                return _this;
            }
            VoucherDialog.prototype.getFormKey = function () { return Finance.VoucherForm.formKey; };
            VoucherDialog.prototype.getIdProperty = function () { return Finance.VoucherRow.idProperty; };
            VoucherDialog.prototype.getLocalTextPrefix = function () { return Finance.VoucherRow.localTextPrefix; };
            VoucherDialog.prototype.getNameProperty = function () { return Finance.VoucherRow.nameProperty; };
            VoucherDialog.prototype.getService = function () { return Finance.VoucherService.baseUrl; };
            VoucherDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VoucherDialog);
            return VoucherDialog;
        }(Serenity.EntityDialog));
        Finance.VoucherDialog = VoucherDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherGrid = /** @class */ (function (_super) {
            __extends(VoucherGrid, _super);
            function VoucherGrid(container) {
                return _super.call(this, container) || this;
            }
            VoucherGrid.prototype.getColumnsKey = function () { return 'Finance.Voucher'; };
            VoucherGrid.prototype.getDialogType = function () { return Finance.VoucherDialog; };
            VoucherGrid.prototype.getIdProperty = function () { return Finance.VoucherRow.idProperty; };
            VoucherGrid.prototype.getLocalTextPrefix = function () { return Finance.VoucherRow.localTextPrefix; };
            VoucherGrid.prototype.getService = function () { return Finance.VoucherService.baseUrl; };
            VoucherGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VoucherGrid);
            return VoucherGrid;
        }(Serenity.EntityGrid));
        Finance.VoucherGrid = VoucherGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCancellationDialog = /** @class */ (function (_super) {
            __extends(VoucherCancellationDialog, _super);
            function VoucherCancellationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.VoucherCancellationForm(_this.idPrefix);
                return _this;
            }
            VoucherCancellationDialog.prototype.getFormKey = function () { return Finance.VoucherCancellationForm.formKey; };
            VoucherCancellationDialog.prototype.getIdProperty = function () { return Finance.VoucherCancellationRow.idProperty; };
            VoucherCancellationDialog.prototype.getLocalTextPrefix = function () { return Finance.VoucherCancellationRow.localTextPrefix; };
            VoucherCancellationDialog.prototype.getNameProperty = function () { return Finance.VoucherCancellationRow.nameProperty; };
            VoucherCancellationDialog.prototype.getService = function () { return Finance.VoucherCancellationService.baseUrl; };
            VoucherCancellationDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VoucherCancellationDialog);
            return VoucherCancellationDialog;
        }(Serenity.EntityDialog));
        Finance.VoucherCancellationDialog = VoucherCancellationDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherCancellationGrid = /** @class */ (function (_super) {
            __extends(VoucherCancellationGrid, _super);
            function VoucherCancellationGrid(container) {
                return _super.call(this, container) || this;
            }
            VoucherCancellationGrid.prototype.getColumnsKey = function () { return 'Finance.VoucherCancellation'; };
            VoucherCancellationGrid.prototype.getDialogType = function () { return Finance.VoucherCancellationDialog; };
            VoucherCancellationGrid.prototype.getIdProperty = function () { return Finance.VoucherCancellationRow.idProperty; };
            VoucherCancellationGrid.prototype.getLocalTextPrefix = function () { return Finance.VoucherCancellationRow.localTextPrefix; };
            VoucherCancellationGrid.prototype.getService = function () { return Finance.VoucherCancellationService.baseUrl; };
            VoucherCancellationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VoucherCancellationGrid);
            return VoucherCancellationGrid;
        }(Serenity.EntityGrid));
        Finance.VoucherCancellationGrid = VoucherCancellationGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherPresetDialog = /** @class */ (function (_super) {
            __extends(VoucherPresetDialog, _super);
            function VoucherPresetDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Finance.VoucherPresetForm(_this.idPrefix);
                return _this;
            }
            VoucherPresetDialog.prototype.getFormKey = function () { return Finance.VoucherPresetForm.formKey; };
            VoucherPresetDialog.prototype.getIdProperty = function () { return Finance.VoucherPresetRow.idProperty; };
            VoucherPresetDialog.prototype.getLocalTextPrefix = function () { return Finance.VoucherPresetRow.localTextPrefix; };
            VoucherPresetDialog.prototype.getNameProperty = function () { return Finance.VoucherPresetRow.nameProperty; };
            VoucherPresetDialog.prototype.getService = function () { return Finance.VoucherPresetService.baseUrl; };
            VoucherPresetDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VoucherPresetDialog);
            return VoucherPresetDialog;
        }(Serenity.EntityDialog));
        Finance.VoucherPresetDialog = VoucherPresetDialog;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Finance;
    (function (Finance) {
        var VoucherPresetGrid = /** @class */ (function (_super) {
            __extends(VoucherPresetGrid, _super);
            function VoucherPresetGrid(container) {
                return _super.call(this, container) || this;
            }
            VoucherPresetGrid.prototype.getColumnsKey = function () { return 'Finance.VoucherPreset'; };
            VoucherPresetGrid.prototype.getDialogType = function () { return Finance.VoucherPresetDialog; };
            VoucherPresetGrid.prototype.getIdProperty = function () { return Finance.VoucherPresetRow.idProperty; };
            VoucherPresetGrid.prototype.getLocalTextPrefix = function () { return Finance.VoucherPresetRow.localTextPrefix; };
            VoucherPresetGrid.prototype.getService = function () { return Finance.VoucherPresetService.baseUrl; };
            VoucherPresetGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VoucherPresetGrid);
            return VoucherPresetGrid;
        }(Serenity.EntityGrid));
        Finance.VoucherPresetGrid = VoucherPresetGrid;
    })(Finance = Matrix.Finance || (Matrix.Finance = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var FifoControlDialog = /** @class */ (function (_super) {
            __extends(FifoControlDialog, _super);
            function FifoControlDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inventory.FifoControlForm(_this.idPrefix);
                return _this;
            }
            FifoControlDialog.prototype.getFormKey = function () { return Inventory.FifoControlForm.formKey; };
            FifoControlDialog.prototype.getIdProperty = function () { return Inventory.FifoControlRow.idProperty; };
            FifoControlDialog.prototype.getLocalTextPrefix = function () { return Inventory.FifoControlRow.localTextPrefix; };
            FifoControlDialog.prototype.getNameProperty = function () { return Inventory.FifoControlRow.nameProperty; };
            FifoControlDialog.prototype.getService = function () { return Inventory.FifoControlService.baseUrl; };
            FifoControlDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            FifoControlDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            FifoControlDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], FifoControlDialog);
            return FifoControlDialog;
        }(Serenity.EntityDialog));
        Inventory.FifoControlDialog = FifoControlDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var FifoControlGrid = /** @class */ (function (_super) {
            __extends(FifoControlGrid, _super);
            function FifoControlGrid(container) {
                return _super.call(this, container) || this;
            }
            FifoControlGrid.prototype.getColumnsKey = function () { return 'Inventory.FifoControl'; };
            FifoControlGrid.prototype.getDialogType = function () { return Inventory.FifoControlDialog; };
            FifoControlGrid.prototype.getIdProperty = function () { return Inventory.FifoControlRow.idProperty; };
            FifoControlGrid.prototype.getLocalTextPrefix = function () { return Inventory.FifoControlRow.localTextPrefix; };
            FifoControlGrid.prototype.getService = function () { return Inventory.FifoControlService.baseUrl; };
            FifoControlGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            FifoControlGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            FifoControlGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            FifoControlGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], FifoControlGrid);
            return FifoControlGrid;
        }(Serenity.EntityGrid));
        Inventory.FifoControlGrid = FifoControlGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryBalanceDialog = /** @class */ (function (_super) {
            __extends(InventoryBalanceDialog, _super);
            function InventoryBalanceDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inventory.InventoryBalanceForm(_this.idPrefix);
                return _this;
            }
            InventoryBalanceDialog.prototype.getFormKey = function () { return Inventory.InventoryBalanceForm.formKey; };
            InventoryBalanceDialog.prototype.getIdProperty = function () { return Inventory.InventoryBalanceRow.idProperty; };
            InventoryBalanceDialog.prototype.getLocalTextPrefix = function () { return Inventory.InventoryBalanceRow.localTextPrefix; };
            InventoryBalanceDialog.prototype.getNameProperty = function () { return Inventory.InventoryBalanceRow.nameProperty; };
            InventoryBalanceDialog.prototype.getService = function () { return Inventory.InventoryBalanceService.baseUrl; };
            InventoryBalanceDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            InventoryBalanceDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            InventoryBalanceDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], InventoryBalanceDialog);
            return InventoryBalanceDialog;
        }(Serenity.EntityDialog));
        Inventory.InventoryBalanceDialog = InventoryBalanceDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryBalanceGrid = /** @class */ (function (_super) {
            __extends(InventoryBalanceGrid, _super);
            function InventoryBalanceGrid(container) {
                return _super.call(this, container) || this;
            }
            InventoryBalanceGrid.prototype.getColumnsKey = function () { return 'Inventory.InventoryBalance'; };
            InventoryBalanceGrid.prototype.getDialogType = function () { return Inventory.InventoryBalanceDialog; };
            InventoryBalanceGrid.prototype.getIdProperty = function () { return Inventory.InventoryBalanceRow.idProperty; };
            InventoryBalanceGrid.prototype.getLocalTextPrefix = function () { return Inventory.InventoryBalanceRow.localTextPrefix; };
            InventoryBalanceGrid.prototype.getService = function () { return Inventory.InventoryBalanceService.baseUrl; };
            InventoryBalanceGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            InventoryBalanceGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            InventoryBalanceGrid.prototype.getButtons = function () {
                // call base method to get list of buttons
                // by default, base entity grid adds a few buttons, 
                // add, refresh, column selection in order.
                var buttons = _super.prototype.getButtons.call(this);
                // here is several methods to remove add button
                // only one is enabled, others are commented
                // METHOD 1
                // we would be able to simply return an empty button list,
                // but this would also remove all other buttons
                // return [];
                // METHOD 2
                // remove by splicing (something like delete by index)
                // here we hard code add button index (not nice!)
                // buttons.splice(0, 1);
                // METHOD 3 - recommended
                // remove by splicing, but this time find button index
                // by its css class. it is the best and safer method
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass == "add-button"; }), 1);
                return buttons;
            };
            InventoryBalanceGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], InventoryBalanceGrid);
            return InventoryBalanceGrid;
        }(Serenity.EntityGrid));
        Inventory.InventoryBalanceGrid = InventoryBalanceGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementDetailDialog = /** @class */ (function (_super) {
            __extends(InventoryMovementDetailDialog, _super);
            function InventoryMovementDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inventory.InventoryMovementDetailForm(_this.idPrefix);
                return _this;
            }
            InventoryMovementDetailDialog.prototype.getFormKey = function () { return Inventory.InventoryMovementDetailForm.formKey; };
            InventoryMovementDetailDialog.prototype.getIdProperty = function () { return Inventory.InventoryMovementDetailRow.idProperty; };
            InventoryMovementDetailDialog.prototype.getLocalTextPrefix = function () { return Inventory.InventoryMovementDetailRow.localTextPrefix; };
            InventoryMovementDetailDialog.prototype.getNameProperty = function () { return Inventory.InventoryMovementDetailRow.nameProperty; };
            InventoryMovementDetailDialog.prototype.getService = function () { return Inventory.InventoryMovementDetailService.baseUrl; };
            InventoryMovementDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            InventoryMovementDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            InventoryMovementDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], InventoryMovementDetailDialog);
            return InventoryMovementDetailDialog;
        }(Serenity.EntityDialog));
        Inventory.InventoryMovementDetailDialog = InventoryMovementDetailDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementDetailEditor = /** @class */ (function (_super) {
            __extends(InventoryMovementDetailEditor, _super);
            function InventoryMovementDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            InventoryMovementDetailEditor.prototype.getColumnsKey = function () { return "Inventory.InventoryMovementDetail"; };
            InventoryMovementDetailEditor.prototype.getDialogType = function () { return Inventory.InventoryMovementDetailDialog; };
            InventoryMovementDetailEditor.prototype.getLocalTextPrefix = function () { return Inventory.InventoryMovementDetailRow.localTextPrefix; };
            InventoryMovementDetailEditor.prototype.validateEntity = function (row, id) {
                //row.ProductID = Q.toId(row.ProductID);
                //var sameProduct = Q.tryFirst(this.view.getItems(), x => x.ProductID === row.ProductID);
                //if (sameProduct && this.id(sameProduct) !== id) {
                //    Q.alert('This product is already in order details!');
                //    return false;
                //}
                //row.ProductName = ProductRow.getLookup().itemById[row.ProductID].ProductName;
                //row.LineTotal = (row.Quantity || 0) * (row.UnitPrice || 0) - (row.Discount || 0);
                return true;
            };
            InventoryMovementDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            InventoryMovementDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], InventoryMovementDetailEditor);
            return InventoryMovementDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Inventory.InventoryMovementDetailEditor = InventoryMovementDetailEditor;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementDetailGrid = /** @class */ (function (_super) {
            __extends(InventoryMovementDetailGrid, _super);
            function InventoryMovementDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            InventoryMovementDetailGrid.prototype.getColumnsKey = function () { return 'Inventory.InventoryMovementDetail'; };
            InventoryMovementDetailGrid.prototype.getDialogType = function () { return Inventory.InventoryMovementDetailDialog; };
            InventoryMovementDetailGrid.prototype.getIdProperty = function () { return Inventory.InventoryMovementDetailRow.idProperty; };
            InventoryMovementDetailGrid.prototype.getLocalTextPrefix = function () { return Inventory.InventoryMovementDetailRow.localTextPrefix; };
            InventoryMovementDetailGrid.prototype.getService = function () { return Inventory.InventoryMovementDetailService.baseUrl; };
            InventoryMovementDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            InventoryMovementDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            InventoryMovementDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            InventoryMovementDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], InventoryMovementDetailGrid);
            return InventoryMovementDetailGrid;
        }(Serenity.EntityGrid));
        Inventory.InventoryMovementDetailGrid = InventoryMovementDetailGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementDialog = /** @class */ (function (_super) {
            __extends(InventoryMovementDialog, _super);
            function InventoryMovementDialog(container) {
                var _this = _super.call(this, container) || this;
                console.log("InventoryMovementDialog.FlowType", InventoryMovementDialog_1.FlowType);
                if (InventoryMovementDialog_1.FlowType === "I")
                    _this.form = new Inventory.InventoryMovementIssueForm(_this.idPrefix);
                if (InventoryMovementDialog_1.FlowType === "R")
                    _this.form = new Inventory.InventoryMovementReceiptForm(_this.idPrefix);
                if (InventoryMovementDialog_1.FlowType === "T")
                    _this.form = new Inventory.InventoryMovementTransferForm(_this.idPrefix);
                return _this;
            }
            InventoryMovementDialog_1 = InventoryMovementDialog;
            InventoryMovementDialog.prototype.getFormKey = function () {
                return Inventory.InventoryMovementIssueForm.formKey;
            };
            InventoryMovementDialog.prototype.getIdProperty = function () { return Inventory.InventoryMovementRow.idProperty; };
            InventoryMovementDialog.prototype.getLocalTextPrefix = function () { return Inventory.InventoryMovementRow.localTextPrefix; };
            InventoryMovementDialog.prototype.getNameProperty = function () { return Inventory.InventoryMovementRow.nameProperty; };
            InventoryMovementDialog.prototype.getService = function () {
                return Inventory.InventoryMovementService.baseUrl;
            };
            InventoryMovementDialog.prototype.getEntityTitle = function () {
                var entityType = _super.prototype.getEntitySingular.call(this);
                var name = this.getEntityNameFieldValue() || "";
                return Q.format("View {0} ({1})", entityType, name);
            };
            InventoryMovementDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            InventoryMovementDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            InventoryMovementDialog = InventoryMovementDialog_1 = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], InventoryMovementDialog);
            return InventoryMovementDialog;
            var InventoryMovementDialog_1;
        }(Serenity.EntityDialog));
        Inventory.InventoryMovementDialog = InventoryMovementDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var InventoryMovementGrid = /** @class */ (function (_super) {
            __extends(InventoryMovementGrid, _super);
            function InventoryMovementGrid(container, flowType) {
                var _this = _super.call(this, container) || this;
                _this.flowType = flowType;
                return _this;
            }
            InventoryMovementGrid.prototype.getColumnsKey = function () { return 'Inventory.InventoryMovement'; };
            InventoryMovementGrid.prototype.getDialogType = function () {
                return Inventory.InventoryMovementDialog;
            };
            InventoryMovementGrid.prototype.getIdProperty = function () { return Inventory.InventoryMovementRow.idProperty; };
            InventoryMovementGrid.prototype.getLocalTextPrefix = function () { return Inventory.InventoryMovementRow.localTextPrefix; };
            InventoryMovementGrid.prototype.getService = function () { return Inventory.InventoryMovementService.baseUrl; };
            InventoryMovementGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            InventoryMovementGrid.prototype.setFlowType = function (flowType) {
                this.flowType = flowType;
                Inventory.InventoryMovementDialog.FlowType = flowType;
            };
            InventoryMovementGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            InventoryMovementGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            InventoryMovementGrid.prototype.getQuickFilters = function () {
                var _this = this;
                var items = _super.prototype.getQuickFilters.call(this);
                var genreListFilter = Q.first(items, function (x) { return x.field === Inventory.InventoryMovementRow.Fields.FlowType; });
                genreListFilter.handler = function (h) {
                    var request = h.request;
                    request.FlowType = _this.flowType;
                    h.handled = true;
                };
                return items;
            };
            InventoryMovementGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], InventoryMovementGrid);
            return InventoryMovementGrid;
        }(Serenity.EntityGrid));
        Inventory.InventoryMovementGrid = InventoryMovementGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotDialog = /** @class */ (function (_super) {
            __extends(ItemLotDialog, _super);
            function ItemLotDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inventory.ItemLotForm(_this.idPrefix);
                return _this;
            }
            ItemLotDialog.prototype.getFormKey = function () { return Inventory.ItemLotForm.formKey; };
            ItemLotDialog.prototype.getIdProperty = function () { return Inventory.ItemLotRow.idProperty; };
            ItemLotDialog.prototype.getLocalTextPrefix = function () { return Inventory.ItemLotRow.localTextPrefix; };
            ItemLotDialog.prototype.getNameProperty = function () { return Inventory.ItemLotRow.nameProperty; };
            ItemLotDialog.prototype.getService = function () { return Inventory.ItemLotService.baseUrl; };
            ItemLotDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ItemLotDialog);
            return ItemLotDialog;
        }(Serenity.EntityDialog));
        Inventory.ItemLotDialog = ItemLotDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotGrid = /** @class */ (function (_super) {
            __extends(ItemLotGrid, _super);
            function ItemLotGrid(container) {
                return _super.call(this, container) || this;
            }
            ItemLotGrid.prototype.getColumnsKey = function () { return 'Inventory.ItemLot'; };
            ItemLotGrid.prototype.getDialogType = function () { return Inventory.ItemLotDialog; };
            ItemLotGrid.prototype.getIdProperty = function () { return Inventory.ItemLotRow.idProperty; };
            ItemLotGrid.prototype.getLocalTextPrefix = function () { return Inventory.ItemLotRow.localTextPrefix; };
            ItemLotGrid.prototype.getService = function () { return Inventory.ItemLotService.baseUrl; };
            ItemLotGrid.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                var opt = {
                    lookupKey: 'Inventory.ItemLotItemLookup'
                };
                this.sourceLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', 'Item No.'); },
                    options: opt
                });
                this.sourceLanguage.changeSelect2(function (e) {
                    _this.refresh();
                });
            };
            ItemLotGrid.prototype.onViewSubmit = function () {
                var request = this.view.params;
                if (Q.isEmptyOrNull(this.sourceLanguage.value))
                    return false;
                request.ItemNo = this.sourceLanguage.value;
                return _super.prototype.onViewSubmit.call(this);
            };
            ItemLotGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ItemLotGrid);
            return ItemLotGrid;
        }(Serenity.EntityGrid));
        Inventory.ItemLotGrid = ItemLotGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotSerialDialog = /** @class */ (function (_super) {
            __extends(ItemLotSerialDialog, _super);
            function ItemLotSerialDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inventory.ItemLotSerialForm(_this.idPrefix);
                return _this;
            }
            ItemLotSerialDialog.prototype.getFormKey = function () { return Inventory.ItemLotSerialForm.formKey; };
            ItemLotSerialDialog.prototype.getIdProperty = function () { return Inventory.ItemLotSerialRow.idProperty; };
            ItemLotSerialDialog.prototype.getLocalTextPrefix = function () { return Inventory.ItemLotSerialRow.localTextPrefix; };
            ItemLotSerialDialog.prototype.getNameProperty = function () { return Inventory.ItemLotSerialRow.nameProperty; };
            ItemLotSerialDialog.prototype.getService = function () { return Inventory.ItemLotSerialService.baseUrl; };
            ItemLotSerialDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ItemLotSerialDialog);
            return ItemLotSerialDialog;
        }(Serenity.EntityDialog));
        Inventory.ItemLotSerialDialog = ItemLotSerialDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var ItemLotSerialGrid = /** @class */ (function (_super) {
            __extends(ItemLotSerialGrid, _super);
            function ItemLotSerialGrid(container) {
                return _super.call(this, container) || this;
            }
            ItemLotSerialGrid.prototype.getColumnsKey = function () { return 'Inventory.ItemLotSerial'; };
            ItemLotSerialGrid.prototype.getDialogType = function () { return Inventory.ItemLotSerialDialog; };
            ItemLotSerialGrid.prototype.getIdProperty = function () { return Inventory.ItemLotSerialRow.idProperty; };
            ItemLotSerialGrid.prototype.getLocalTextPrefix = function () { return Inventory.ItemLotSerialRow.localTextPrefix; };
            ItemLotSerialGrid.prototype.getService = function () { return Inventory.ItemLotSerialService.baseUrl; };
            ItemLotSerialGrid.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                var opt = {
                    lookupKey: 'Inventory.ItemLotSerialItemLookup'
                };
                this.sourceLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', 'Item No.'); },
                    options: opt
                });
                this.sourceLanguage.changeSelect2(function (e) {
                    _this.refresh();
                });
            };
            ItemLotSerialGrid.prototype.onViewSubmit = function () {
                var request = this.view.params;
                if (Q.isEmptyOrNull(this.sourceLanguage.value))
                    return false;
                request.ItemNo = this.sourceLanguage.value;
                return _super.prototype.onViewSubmit.call(this);
            };
            ItemLotSerialGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ItemLotSerialGrid);
            return ItemLotSerialGrid;
        }(Serenity.EntityGrid));
        Inventory.ItemLotSerialGrid = ItemLotSerialGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockJournalDialog = /** @class */ (function (_super) {
            __extends(StockJournalDialog, _super);
            function StockJournalDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inventory.StockJournalForm(_this.idPrefix);
                return _this;
            }
            StockJournalDialog.prototype.getFormKey = function () { return Inventory.StockJournalForm.formKey; };
            StockJournalDialog.prototype.getIdProperty = function () { return Inventory.StockJournalRow.idProperty; };
            StockJournalDialog.prototype.getLocalTextPrefix = function () { return Inventory.StockJournalRow.localTextPrefix; };
            StockJournalDialog.prototype.getNameProperty = function () { return Inventory.StockJournalRow.nameProperty; };
            StockJournalDialog.prototype.getService = function () { return Inventory.StockJournalService.baseUrl; };
            StockJournalDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            StockJournalDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            StockJournalDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], StockJournalDialog);
            return StockJournalDialog;
        }(Serenity.EntityDialog));
        Inventory.StockJournalDialog = StockJournalDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockJournalGrid = /** @class */ (function (_super) {
            __extends(StockJournalGrid, _super);
            function StockJournalGrid(container) {
                return _super.call(this, container) || this;
            }
            StockJournalGrid.prototype.getColumnsKey = function () { return 'Inventory.StockJournal'; };
            StockJournalGrid.prototype.getDialogType = function () { return Inventory.StockJournalDialog; };
            StockJournalGrid.prototype.getIdProperty = function () { return Inventory.StockJournalRow.idProperty; };
            StockJournalGrid.prototype.getLocalTextPrefix = function () { return Inventory.StockJournalRow.localTextPrefix; };
            StockJournalGrid.prototype.getService = function () { return Inventory.StockJournalService.baseUrl; };
            StockJournalGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            StockJournalGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            StockJournalGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            StockJournalGrid.prototype.refreshGrid = function (param) {
                var request = this.view.params;
                request.Location = param.Location;
                request.ItemNo = param.ItemNo;
                this.refresh();
            };
            StockJournalGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], StockJournalGrid);
            return StockJournalGrid;
        }(Serenity.EntityGrid));
        Inventory.StockJournalGrid = StockJournalGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockLedgerDialog = /** @class */ (function (_super) {
            __extends(StockLedgerDialog, _super);
            function StockLedgerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Inventory.StockLedgerForm(_this.idPrefix);
                return _this;
            }
            StockLedgerDialog.prototype.getFormKey = function () { return Inventory.StockLedgerForm.formKey; };
            StockLedgerDialog.prototype.getIdProperty = function () { return Inventory.StockLedgerRow.idProperty; };
            StockLedgerDialog.prototype.getLocalTextPrefix = function () { return Inventory.StockLedgerRow.localTextPrefix; };
            StockLedgerDialog.prototype.getNameProperty = function () { return Inventory.StockLedgerRow.nameProperty; };
            StockLedgerDialog.prototype.getService = function () { return Inventory.StockLedgerService.baseUrl; };
            StockLedgerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], StockLedgerDialog);
            return StockLedgerDialog;
        }(Serenity.EntityDialog));
        Inventory.StockLedgerDialog = StockLedgerDialog;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Inventory;
    (function (Inventory) {
        var StockLedgerGrid = /** @class */ (function (_super) {
            __extends(StockLedgerGrid, _super);
            function StockLedgerGrid(container) {
                return _super.call(this, container) || this;
            }
            StockLedgerGrid.prototype.getColumnsKey = function () { return 'Inventory.StockLedger'; };
            StockLedgerGrid.prototype.getDialogType = function () { return Inventory.StockLedgerDialog; };
            StockLedgerGrid.prototype.getIdProperty = function () { return Inventory.StockLedgerRow.idProperty; };
            StockLedgerGrid.prototype.getLocalTextPrefix = function () { return Inventory.StockLedgerRow.localTextPrefix; };
            StockLedgerGrid.prototype.getService = function () { return Inventory.StockLedgerService.baseUrl; };
            StockLedgerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], StockLedgerGrid);
            return StockLedgerGrid;
        }(Serenity.EntityGrid));
        Inventory.StockLedgerGrid = StockLedgerGrid;
    })(Inventory = Matrix.Inventory || (Matrix.Inventory = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        //import AccountBudgetRow = Finance.AccountBudgetRow;
        //import AccountBudgetRow = Matrix.Finance.AccountBudgetRow;
        //import AccountBudgetService = Matrix.Finance.AccountBudgetService;
        var AccountBudgetDetailEditor = /** @class */ (function (_super) {
            __extends(AccountBudgetDetailEditor, _super);
            function AccountBudgetDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AccountBudgetDetailEditor.prototype.getColumnsKey = function () { return "MasterData.AccountBudget"; };
            AccountBudgetDetailEditor.prototype.getDialogType = function () { return MasterData.AccountBudgetDialog; };
            AccountBudgetDetailEditor.prototype.getLocalTextPrefix = function () { return MasterData.AccountBudgetRow.localTextPrefix; };
            AccountBudgetDetailEditor.prototype.usePager = function () {
                return true;
            };
            AccountBudgetDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AccountBudgetDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountBudgetDetailEditor);
            return AccountBudgetDetailEditor;
        }(Matrix.Common.GridEditorBase));
        MasterData.AccountBudgetDetailEditor = AccountBudgetDetailEditor;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
///// <reference path="../../../Imports/ServerTypings/Finance.AccountBudgetForm.ts" />
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        //import AccountBudgetRow = Matrix.Finance.AccountBudgetRow;
        //import AccountBudgetService = Matrix.Finance.AccountBudgetService;
        //import AccountBudgetForm = Matrix.Finance.AccountBudgetForm;
        var AccountBudgetDialog = /** @class */ (function (_super) {
            __extends(AccountBudgetDialog, _super);
            function AccountBudgetDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AccountBudgetForm(_this.idPrefix);
                return _this;
            }
            AccountBudgetDialog.prototype.getFormKey = function () { return MasterData.AccountBudgetForm.formKey; };
            AccountBudgetDialog.prototype.getIdProperty = function () { return MasterData.AccountBudgetRow.idProperty; };
            AccountBudgetDialog.prototype.getLocalTextPrefix = function () { return MasterData.AccountBudgetRow.localTextPrefix; };
            AccountBudgetDialog.prototype.getNameProperty = function () { return MasterData.AccountBudgetRow.nameProperty; };
            AccountBudgetDialog.prototype.getService = function () { return MasterData.AccountBudgetService.baseUrl; };
            AccountBudgetDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountBudgetDialog);
            return AccountBudgetDialog;
        }(Serenity.EntityDialog));
        MasterData.AccountBudgetDialog = AccountBudgetDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        //import AccountBudgetRow = Matrix.Finance.AccountBudgetRow;
        //import AccountBudgetService = Matrix.Finance.AccountBudgetService;
        var AccountBudgetGrid = /** @class */ (function (_super) {
            __extends(AccountBudgetGrid, _super);
            function AccountBudgetGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountBudgetGrid.prototype.getColumnsKey = function () { return 'Finance.AccountBudget'; };
            AccountBudgetGrid.prototype.getDialogType = function () { return MasterData.AccountBudgetDialog; };
            AccountBudgetGrid.prototype.getIdProperty = function () { return MasterData.AccountBudgetRow.idProperty; };
            AccountBudgetGrid.prototype.getLocalTextPrefix = function () { return MasterData.AccountBudgetRow.localTextPrefix; };
            AccountBudgetGrid.prototype.getService = function () { return MasterData.AccountBudgetService.baseUrl; };
            AccountBudgetGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountBudgetGrid);
            return AccountBudgetGrid;
        }(Serenity.EntityGrid));
        MasterData.AccountBudgetGrid = AccountBudgetGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountDialog = /** @class */ (function (_super) {
            __extends(AccountDialog, _super);
            function AccountDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AccountForm(_this.idPrefix);
                return _this;
            }
            AccountDialog.prototype.getFormKey = function () { return MasterData.AccountForm.formKey; };
            AccountDialog.prototype.getIdProperty = function () { return MasterData.AccountRow.idProperty; };
            AccountDialog.prototype.getLocalTextPrefix = function () { return MasterData.AccountRow.localTextPrefix; };
            AccountDialog.prototype.getNameProperty = function () { return MasterData.AccountRow.nameProperty; };
            AccountDialog.prototype.getService = function () { return MasterData.AccountService.baseUrl; };
            AccountDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AccountDialog);
            return AccountDialog;
        }(Serenity.EntityDialog));
        MasterData.AccountDialog = AccountDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AccountGrid = /** @class */ (function (_super) {
            __extends(AccountGrid, _super);
            function AccountGrid(container) {
                return _super.call(this, container) || this;
            }
            AccountGrid.prototype.getColumnsKey = function () { return 'MasterData.Account'; };
            AccountGrid.prototype.getDialogType = function () { return MasterData.AccountDialog; };
            AccountGrid.prototype.getIdProperty = function () { return MasterData.AccountRow.idProperty; };
            AccountGrid.prototype.getLocalTextPrefix = function () { return MasterData.AccountRow.localTextPrefix; };
            AccountGrid.prototype.getService = function () { return MasterData.AccountService.baseUrl; };
            AccountGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            AccountGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            AccountGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AccountGrid);
            return AccountGrid;
        }(Serenity.EntityGrid));
        MasterData.AccountGrid = AccountGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AddressTypeDialog = /** @class */ (function (_super) {
            __extends(AddressTypeDialog, _super);
            function AddressTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AddressTypeForm(_this.idPrefix);
                return _this;
            }
            AddressTypeDialog.prototype.getFormKey = function () { return MasterData.AddressTypeForm.formKey; };
            AddressTypeDialog.prototype.getIdProperty = function () { return MasterData.AddressTypeRow.idProperty; };
            AddressTypeDialog.prototype.getLocalTextPrefix = function () { return MasterData.AddressTypeRow.localTextPrefix; };
            AddressTypeDialog.prototype.getNameProperty = function () { return MasterData.AddressTypeRow.nameProperty; };
            AddressTypeDialog.prototype.getService = function () { return MasterData.AddressTypeService.baseUrl; };
            AddressTypeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AddressTypeDialog);
            return AddressTypeDialog;
        }(Serenity.EntityDialog));
        MasterData.AddressTypeDialog = AddressTypeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AddressTypeGrid = /** @class */ (function (_super) {
            __extends(AddressTypeGrid, _super);
            function AddressTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            AddressTypeGrid.prototype.getColumnsKey = function () { return 'MasterData.AddressType'; };
            AddressTypeGrid.prototype.getDialogType = function () { return MasterData.AddressTypeDialog; };
            AddressTypeGrid.prototype.getIdProperty = function () { return MasterData.AddressTypeRow.idProperty; };
            AddressTypeGrid.prototype.getLocalTextPrefix = function () { return MasterData.AddressTypeRow.localTextPrefix; };
            AddressTypeGrid.prototype.getService = function () { return MasterData.AddressTypeService.baseUrl; };
            AddressTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AddressTypeGrid);
            return AddressTypeGrid;
        }(Serenity.EntityGrid));
        MasterData.AddressTypeGrid = AddressTypeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCategoryDetailEditor = /** @class */ (function (_super) {
            __extends(AnalysisCategoryDetailEditor, _super);
            function AnalysisCategoryDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AnalysisCategoryDetailEditor.prototype.getColumnsKey = function () { return "MasterData.AnalysisCode"; };
            AnalysisCategoryDetailEditor.prototype.getDialogType = function () { return MasterData.AnalysisCodeDialog; };
            AnalysisCategoryDetailEditor.prototype.getLocalTextPrefix = function () { return MasterData.AnalysisCodeRow.localTextPrefix; };
            AnalysisCategoryDetailEditor.prototype.usePager = function () {
                return true;
            };
            AnalysisCategoryDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AnalysisCategoryDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AnalysisCategoryDetailEditor);
            return AnalysisCategoryDetailEditor;
        }(Matrix.Common.GridEditorBase));
        MasterData.AnalysisCategoryDetailEditor = AnalysisCategoryDetailEditor;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCategoryDialog = /** @class */ (function (_super) {
            __extends(AnalysisCategoryDialog, _super);
            function AnalysisCategoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AnalysisCategoryForm(_this.idPrefix);
                return _this;
            }
            AnalysisCategoryDialog.prototype.getFormKey = function () { return MasterData.AnalysisCategoryForm.formKey; };
            AnalysisCategoryDialog.prototype.getIdProperty = function () { return MasterData.AnalysisCategoryRow.idProperty; };
            AnalysisCategoryDialog.prototype.getLocalTextPrefix = function () { return MasterData.AnalysisCategoryRow.localTextPrefix; };
            AnalysisCategoryDialog.prototype.getNameProperty = function () { return MasterData.AnalysisCategoryRow.nameProperty; };
            AnalysisCategoryDialog.prototype.getService = function () { return MasterData.AnalysisCategoryService.baseUrl; };
            AnalysisCategoryDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AnalysisCategoryDialog);
            return AnalysisCategoryDialog;
        }(Serenity.EntityDialog));
        MasterData.AnalysisCategoryDialog = AnalysisCategoryDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCategoryGrid = /** @class */ (function (_super) {
            __extends(AnalysisCategoryGrid, _super);
            function AnalysisCategoryGrid(container) {
                return _super.call(this, container) || this;
            }
            AnalysisCategoryGrid.prototype.getColumnsKey = function () { return 'MasterData.AnalysisCategory'; };
            AnalysisCategoryGrid.prototype.getDialogType = function () { return MasterData.AnalysisCategoryDialog; };
            AnalysisCategoryGrid.prototype.getIdProperty = function () { return MasterData.AnalysisCategoryRow.idProperty; };
            AnalysisCategoryGrid.prototype.getLocalTextPrefix = function () { return MasterData.AnalysisCategoryRow.localTextPrefix; };
            AnalysisCategoryGrid.prototype.getService = function () { return MasterData.AnalysisCategoryService.baseUrl; };
            AnalysisCategoryGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            AnalysisCategoryGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            AnalysisCategoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AnalysisCategoryGrid);
            return AnalysisCategoryGrid;
        }(Serenity.EntityGrid));
        MasterData.AnalysisCategoryGrid = AnalysisCategoryGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCodeDialog = /** @class */ (function (_super) {
            __extends(AnalysisCodeDialog, _super);
            function AnalysisCodeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AnalysisCodeForm(_this.idPrefix);
                return _this;
            }
            AnalysisCodeDialog.prototype.getFormKey = function () { return MasterData.AnalysisCodeForm.formKey; };
            AnalysisCodeDialog.prototype.getIdProperty = function () { return MasterData.AnalysisCodeRow.idProperty; };
            AnalysisCodeDialog.prototype.getLocalTextPrefix = function () { return MasterData.AnalysisCodeRow.localTextPrefix; };
            AnalysisCodeDialog.prototype.getNameProperty = function () { return MasterData.AnalysisCodeRow.nameProperty; };
            AnalysisCodeDialog.prototype.getService = function () { return MasterData.AnalysisCodeService.baseUrl; };
            AnalysisCodeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AnalysisCodeDialog);
            return AnalysisCodeDialog;
        }(Serenity.EntityDialog));
        MasterData.AnalysisCodeDialog = AnalysisCodeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AnalysisCodeGrid = /** @class */ (function (_super) {
            __extends(AnalysisCodeGrid, _super);
            function AnalysisCodeGrid(container) {
                return _super.call(this, container) || this;
            }
            AnalysisCodeGrid.prototype.getColumnsKey = function () { return 'MasterData.AnalysisCode'; };
            AnalysisCodeGrid.prototype.getDialogType = function () { return MasterData.AnalysisCodeDialog; };
            AnalysisCodeGrid.prototype.getIdProperty = function () { return MasterData.AnalysisCodeRow.idProperty; };
            AnalysisCodeGrid.prototype.getLocalTextPrefix = function () { return MasterData.AnalysisCodeRow.localTextPrefix; };
            AnalysisCodeGrid.prototype.getService = function () { return MasterData.AnalysisCodeService.baseUrl; };
            AnalysisCodeGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            AnalysisCodeGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            AnalysisCodeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AnalysisCodeGrid);
            return AnalysisCodeGrid;
        }(Serenity.EntityGrid));
        MasterData.AnalysisCodeGrid = AnalysisCodeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineDialog = /** @class */ (function (_super) {
            __extends(AssemblyLineDialog, _super);
            function AssemblyLineDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AssemblyLineForm(_this.idPrefix);
                return _this;
            }
            AssemblyLineDialog.prototype.getFormKey = function () { return MasterData.AssemblyLineForm.formKey; };
            AssemblyLineDialog.prototype.getIdProperty = function () { return MasterData.AssemblyLineRow.idProperty; };
            AssemblyLineDialog.prototype.getLocalTextPrefix = function () { return MasterData.AssemblyLineRow.localTextPrefix; };
            AssemblyLineDialog.prototype.getNameProperty = function () { return MasterData.AssemblyLineRow.nameProperty; };
            AssemblyLineDialog.prototype.getService = function () { return MasterData.AssemblyLineService.baseUrl; };
            AssemblyLineDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AssemblyLineDialog);
            return AssemblyLineDialog;
        }(Serenity.EntityDialog));
        MasterData.AssemblyLineDialog = AssemblyLineDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineGrid = /** @class */ (function (_super) {
            __extends(AssemblyLineGrid, _super);
            function AssemblyLineGrid(container) {
                return _super.call(this, container) || this;
            }
            AssemblyLineGrid.prototype.getColumnsKey = function () { return 'MasterData.AssemblyLine'; };
            AssemblyLineGrid.prototype.getDialogType = function () { return MasterData.AssemblyLineDialog; };
            AssemblyLineGrid.prototype.getIdProperty = function () { return MasterData.AssemblyLineRow.idProperty; };
            AssemblyLineGrid.prototype.getLocalTextPrefix = function () { return MasterData.AssemblyLineRow.localTextPrefix; };
            AssemblyLineGrid.prototype.getService = function () { return MasterData.AssemblyLineService.baseUrl; };
            AssemblyLineGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AssemblyLineGrid);
            return AssemblyLineGrid;
        }(Serenity.EntityGrid));
        MasterData.AssemblyLineGrid = AssemblyLineGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineWorkCentreDetailDialog = /** @class */ (function (_super) {
            __extends(AssemblyLineWorkCentreDetailDialog, _super);
            function AssemblyLineWorkCentreDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AssemblyLineWorkCentreDetailForm(_this.idPrefix);
                return _this;
            }
            AssemblyLineWorkCentreDetailDialog.prototype.getFormKey = function () { return MasterData.AssemblyLineWorkCentreDetailForm.formKey; };
            AssemblyLineWorkCentreDetailDialog.prototype.getIdProperty = function () { return MasterData.AssemblyLineWorkCentreDetailRow.idProperty; };
            AssemblyLineWorkCentreDetailDialog.prototype.getLocalTextPrefix = function () { return MasterData.AssemblyLineWorkCentreDetailRow.localTextPrefix; };
            AssemblyLineWorkCentreDetailDialog.prototype.getNameProperty = function () { return MasterData.AssemblyLineWorkCentreDetailRow.nameProperty; };
            AssemblyLineWorkCentreDetailDialog.prototype.getService = function () { return MasterData.AssemblyLineWorkCentreDetailService.baseUrl; };
            AssemblyLineWorkCentreDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AssemblyLineWorkCentreDetailDialog);
            return AssemblyLineWorkCentreDetailDialog;
        }(Serenity.EntityDialog));
        MasterData.AssemblyLineWorkCentreDetailDialog = AssemblyLineWorkCentreDetailDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineWorkCentreDetailEditor = /** @class */ (function (_super) {
            __extends(AssemblyLineWorkCentreDetailEditor, _super);
            function AssemblyLineWorkCentreDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            AssemblyLineWorkCentreDetailEditor.prototype.getColumnsKey = function () { return "MasterData.AssemblyLineWorkCentreDetail"; };
            AssemblyLineWorkCentreDetailEditor.prototype.getDialogType = function () { return MasterData.AnalysisCodeDialog; };
            AssemblyLineWorkCentreDetailEditor.prototype.getLocalTextPrefix = function () { return MasterData.AnalysisCodeRow.localTextPrefix; };
            AssemblyLineWorkCentreDetailEditor.prototype.usePager = function () {
                return true;
            };
            AssemblyLineWorkCentreDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            AssemblyLineWorkCentreDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], AssemblyLineWorkCentreDetailEditor);
            return AssemblyLineWorkCentreDetailEditor;
        }(Matrix.Common.GridEditorBase));
        MasterData.AssemblyLineWorkCentreDetailEditor = AssemblyLineWorkCentreDetailEditor;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AssemblyLineWorkCentreDetailGrid = /** @class */ (function (_super) {
            __extends(AssemblyLineWorkCentreDetailGrid, _super);
            function AssemblyLineWorkCentreDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            AssemblyLineWorkCentreDetailGrid.prototype.getColumnsKey = function () { return 'MasterData.AssemblyLineWorkCentreDetail'; };
            AssemblyLineWorkCentreDetailGrid.prototype.getDialogType = function () { return MasterData.AssemblyLineWorkCentreDetailDialog; };
            AssemblyLineWorkCentreDetailGrid.prototype.getIdProperty = function () { return MasterData.AssemblyLineWorkCentreDetailRow.idProperty; };
            AssemblyLineWorkCentreDetailGrid.prototype.getLocalTextPrefix = function () { return MasterData.AssemblyLineWorkCentreDetailRow.localTextPrefix; };
            AssemblyLineWorkCentreDetailGrid.prototype.getService = function () { return MasterData.AssemblyLineWorkCentreDetailService.baseUrl; };
            AssemblyLineWorkCentreDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AssemblyLineWorkCentreDetailGrid);
            return AssemblyLineWorkCentreDetailGrid;
        }(Serenity.EntityGrid));
        MasterData.AssemblyLineWorkCentreDetailGrid = AssemblyLineWorkCentreDetailGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AttachmentFileTypeDialog = /** @class */ (function (_super) {
            __extends(AttachmentFileTypeDialog, _super);
            function AttachmentFileTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.AttachmentFileTypeForm(_this.idPrefix);
                return _this;
            }
            AttachmentFileTypeDialog.prototype.getFormKey = function () { return MasterData.AttachmentFileTypeForm.formKey; };
            AttachmentFileTypeDialog.prototype.getIdProperty = function () { return MasterData.AttachmentFileTypeRow.idProperty; };
            AttachmentFileTypeDialog.prototype.getLocalTextPrefix = function () { return MasterData.AttachmentFileTypeRow.localTextPrefix; };
            AttachmentFileTypeDialog.prototype.getNameProperty = function () { return MasterData.AttachmentFileTypeRow.nameProperty; };
            AttachmentFileTypeDialog.prototype.getService = function () { return MasterData.AttachmentFileTypeService.baseUrl; };
            AttachmentFileTypeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], AttachmentFileTypeDialog);
            return AttachmentFileTypeDialog;
        }(Serenity.EntityDialog));
        MasterData.AttachmentFileTypeDialog = AttachmentFileTypeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var AttachmentFileTypeGrid = /** @class */ (function (_super) {
            __extends(AttachmentFileTypeGrid, _super);
            function AttachmentFileTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            AttachmentFileTypeGrid.prototype.getColumnsKey = function () { return 'MasterData.AttachmentFileType'; };
            AttachmentFileTypeGrid.prototype.getDialogType = function () { return MasterData.AttachmentFileTypeDialog; };
            AttachmentFileTypeGrid.prototype.getIdProperty = function () { return MasterData.AttachmentFileTypeRow.idProperty; };
            AttachmentFileTypeGrid.prototype.getLocalTextPrefix = function () { return MasterData.AttachmentFileTypeRow.localTextPrefix; };
            AttachmentFileTypeGrid.prototype.getService = function () { return MasterData.AttachmentFileTypeService.baseUrl; };
            AttachmentFileTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], AttachmentFileTypeGrid);
            return AttachmentFileTypeGrid;
        }(Serenity.EntityGrid));
        MasterData.AttachmentFileTypeGrid = AttachmentFileTypeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BalanceSheetLayoutDialog = /** @class */ (function (_super) {
            __extends(BalanceSheetLayoutDialog, _super);
            function BalanceSheetLayoutDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.BalanceSheetLayoutForm(_this.idPrefix);
                return _this;
            }
            BalanceSheetLayoutDialog.prototype.getFormKey = function () { return MasterData.BalanceSheetLayoutForm.formKey; };
            BalanceSheetLayoutDialog.prototype.getIdProperty = function () { return MasterData.BalanceSheetLayoutRow.idProperty; };
            BalanceSheetLayoutDialog.prototype.getLocalTextPrefix = function () { return MasterData.BalanceSheetLayoutRow.localTextPrefix; };
            BalanceSheetLayoutDialog.prototype.getNameProperty = function () { return MasterData.BalanceSheetLayoutRow.nameProperty; };
            BalanceSheetLayoutDialog.prototype.getService = function () { return MasterData.BalanceSheetLayoutService.baseUrl; };
            BalanceSheetLayoutDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], BalanceSheetLayoutDialog);
            return BalanceSheetLayoutDialog;
        }(Serenity.EntityDialog));
        MasterData.BalanceSheetLayoutDialog = BalanceSheetLayoutDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BalanceSheetLayoutGrid = /** @class */ (function (_super) {
            __extends(BalanceSheetLayoutGrid, _super);
            function BalanceSheetLayoutGrid(container) {
                return _super.call(this, container) || this;
            }
            BalanceSheetLayoutGrid.prototype.getColumnsKey = function () { return 'MasterData.BalanceSheetLayout'; };
            BalanceSheetLayoutGrid.prototype.getDialogType = function () { return MasterData.BalanceSheetLayoutDialog; };
            BalanceSheetLayoutGrid.prototype.getIdProperty = function () { return MasterData.BalanceSheetLayoutRow.idProperty; };
            BalanceSheetLayoutGrid.prototype.getLocalTextPrefix = function () { return MasterData.BalanceSheetLayoutRow.localTextPrefix; };
            BalanceSheetLayoutGrid.prototype.getService = function () { return MasterData.BalanceSheetLayoutService.baseUrl; };
            BalanceSheetLayoutGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BalanceSheetLayoutGrid);
            return BalanceSheetLayoutGrid;
        }(Serenity.EntityGrid));
        MasterData.BalanceSheetLayoutGrid = BalanceSheetLayoutGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerControlDialog = /** @class */ (function (_super) {
            __extends(BuyerControlDialog, _super);
            function BuyerControlDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.BuyerControlForm(_this.idPrefix);
                return _this;
            }
            BuyerControlDialog.prototype.getFormKey = function () { return MasterData.BuyerControlForm.formKey; };
            BuyerControlDialog.prototype.getIdProperty = function () { return MasterData.BuyerControlRow.idProperty; };
            BuyerControlDialog.prototype.getLocalTextPrefix = function () { return MasterData.BuyerControlRow.localTextPrefix; };
            BuyerControlDialog.prototype.getNameProperty = function () { return MasterData.BuyerControlRow.nameProperty; };
            BuyerControlDialog.prototype.getService = function () { return MasterData.BuyerControlService.baseUrl; };
            BuyerControlDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], BuyerControlDialog);
            return BuyerControlDialog;
        }(Serenity.EntityDialog));
        MasterData.BuyerControlDialog = BuyerControlDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerControlGrid = /** @class */ (function (_super) {
            __extends(BuyerControlGrid, _super);
            function BuyerControlGrid(container) {
                return _super.call(this, container) || this;
            }
            BuyerControlGrid.prototype.getColumnsKey = function () { return 'MasterData.BuyerControl'; };
            BuyerControlGrid.prototype.getDialogType = function () { return MasterData.BuyerControlDialog; };
            BuyerControlGrid.prototype.getIdProperty = function () { return MasterData.BuyerControlRow.idProperty; };
            BuyerControlGrid.prototype.getLocalTextPrefix = function () { return MasterData.BuyerControlRow.localTextPrefix; };
            BuyerControlGrid.prototype.getService = function () { return MasterData.BuyerControlService.baseUrl; };
            BuyerControlGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BuyerControlGrid);
            return BuyerControlGrid;
        }(Serenity.EntityGrid));
        MasterData.BuyerControlGrid = BuyerControlGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerDialog = /** @class */ (function (_super) {
            __extends(BuyerDialog, _super);
            function BuyerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.BuyerForm(_this.idPrefix);
                return _this;
            }
            BuyerDialog.prototype.getFormKey = function () { return MasterData.BuyerForm.formKey; };
            BuyerDialog.prototype.getIdProperty = function () { return MasterData.BuyerRow.idProperty; };
            BuyerDialog.prototype.getLocalTextPrefix = function () { return MasterData.BuyerRow.localTextPrefix; };
            BuyerDialog.prototype.getNameProperty = function () { return MasterData.BuyerRow.nameProperty; };
            BuyerDialog.prototype.getService = function () { return MasterData.BuyerService.baseUrl; };
            BuyerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], BuyerDialog);
            return BuyerDialog;
        }(Serenity.EntityDialog));
        MasterData.BuyerDialog = BuyerDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var BuyerGrid = /** @class */ (function (_super) {
            __extends(BuyerGrid, _super);
            function BuyerGrid(container) {
                return _super.call(this, container) || this;
            }
            BuyerGrid.prototype.getColumnsKey = function () { return 'MasterData.Buyer'; };
            BuyerGrid.prototype.getDialogType = function () { return MasterData.BuyerDialog; };
            BuyerGrid.prototype.getIdProperty = function () { return MasterData.BuyerRow.idProperty; };
            BuyerGrid.prototype.getLocalTextPrefix = function () { return MasterData.BuyerRow.localTextPrefix; };
            BuyerGrid.prototype.getService = function () { return MasterData.BuyerService.baseUrl; };
            BuyerGrid.prototype.usePager = function () {
                return false;
            };
            BuyerGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            BuyerGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            BuyerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BuyerGrid);
            return BuyerGrid;
        }(Serenity.EntityGrid));
        MasterData.BuyerGrid = BuyerGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarDetailDialog = /** @class */ (function (_super) {
            __extends(CalendarDetailDialog, _super);
            function CalendarDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.CalendarDetailForm(_this.idPrefix);
                return _this;
            }
            CalendarDetailDialog.prototype.getFormKey = function () { return MasterData.CalendarDetailForm.formKey; };
            CalendarDetailDialog.prototype.getIdProperty = function () { return MasterData.CalendarDetailRow.idProperty; };
            CalendarDetailDialog.prototype.getLocalTextPrefix = function () { return MasterData.CalendarDetailRow.localTextPrefix; };
            CalendarDetailDialog.prototype.getNameProperty = function () { return MasterData.CalendarDetailRow.nameProperty; };
            CalendarDetailDialog.prototype.getService = function () { return MasterData.CalendarDetailService.baseUrl; };
            CalendarDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CalendarDetailDialog);
            return CalendarDetailDialog;
        }(Serenity.EntityDialog));
        MasterData.CalendarDetailDialog = CalendarDetailDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarDetailGrid = /** @class */ (function (_super) {
            __extends(CalendarDetailGrid, _super);
            function CalendarDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            CalendarDetailGrid.prototype.getColumnsKey = function () { return 'MasterData.CalendarDetail'; };
            CalendarDetailGrid.prototype.getDialogType = function () { return MasterData.CalendarDetailDialog; };
            CalendarDetailGrid.prototype.getIdProperty = function () { return MasterData.CalendarDetailRow.idProperty; };
            CalendarDetailGrid.prototype.getLocalTextPrefix = function () { return MasterData.CalendarDetailRow.localTextPrefix; };
            CalendarDetailGrid.prototype.getService = function () { return MasterData.CalendarDetailService.baseUrl; };
            CalendarDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CalendarDetailGrid);
            return CalendarDetailGrid;
        }(Serenity.EntityGrid));
        MasterData.CalendarDetailGrid = CalendarDetailGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarDialog = /** @class */ (function (_super) {
            __extends(CalendarDialog, _super);
            function CalendarDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.CalendarForm(_this.idPrefix);
                return _this;
            }
            CalendarDialog.prototype.getFormKey = function () { return MasterData.CalendarForm.formKey; };
            CalendarDialog.prototype.getIdProperty = function () { return MasterData.CalendarRow.idProperty; };
            CalendarDialog.prototype.getLocalTextPrefix = function () { return MasterData.CalendarRow.localTextPrefix; };
            CalendarDialog.prototype.getNameProperty = function () { return MasterData.CalendarRow.nameProperty; };
            CalendarDialog.prototype.getService = function () { return MasterData.CalendarService.baseUrl; };
            CalendarDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CalendarDialog);
            return CalendarDialog;
        }(Serenity.EntityDialog));
        MasterData.CalendarDialog = CalendarDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarGrid = /** @class */ (function (_super) {
            __extends(CalendarGrid, _super);
            function CalendarGrid(container) {
                return _super.call(this, container) || this;
            }
            CalendarGrid.prototype.getColumnsKey = function () { return 'MasterData.Calendar'; };
            CalendarGrid.prototype.getDialogType = function () { return MasterData.CalendarDialog; };
            CalendarGrid.prototype.getIdProperty = function () { return MasterData.CalendarRow.idProperty; };
            CalendarGrid.prototype.getLocalTextPrefix = function () { return MasterData.CalendarRow.localTextPrefix; };
            CalendarGrid.prototype.getService = function () { return MasterData.CalendarService.baseUrl; };
            CalendarGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CalendarGrid);
            return CalendarGrid;
        }(Serenity.EntityGrid));
        MasterData.CalendarGrid = CalendarGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarNoteDialog = /** @class */ (function (_super) {
            __extends(CalendarNoteDialog, _super);
            function CalendarNoteDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.CalendarNoteForm(_this.idPrefix);
                return _this;
            }
            CalendarNoteDialog.prototype.getFormKey = function () { return MasterData.CalendarNoteForm.formKey; };
            CalendarNoteDialog.prototype.getIdProperty = function () { return MasterData.CalendarNoteRow.idProperty; };
            CalendarNoteDialog.prototype.getLocalTextPrefix = function () { return MasterData.CalendarNoteRow.localTextPrefix; };
            CalendarNoteDialog.prototype.getNameProperty = function () { return MasterData.CalendarNoteRow.nameProperty; };
            CalendarNoteDialog.prototype.getService = function () { return MasterData.CalendarNoteService.baseUrl; };
            CalendarNoteDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CalendarNoteDialog);
            return CalendarNoteDialog;
        }(Serenity.EntityDialog));
        MasterData.CalendarNoteDialog = CalendarNoteDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CalendarNoteGrid = /** @class */ (function (_super) {
            __extends(CalendarNoteGrid, _super);
            function CalendarNoteGrid(container) {
                return _super.call(this, container) || this;
            }
            CalendarNoteGrid.prototype.getColumnsKey = function () { return 'MasterData.CalendarNote'; };
            CalendarNoteGrid.prototype.getDialogType = function () { return MasterData.CalendarNoteDialog; };
            CalendarNoteGrid.prototype.getIdProperty = function () { return MasterData.CalendarNoteRow.idProperty; };
            CalendarNoteGrid.prototype.getLocalTextPrefix = function () { return MasterData.CalendarNoteRow.localTextPrefix; };
            CalendarNoteGrid.prototype.getService = function () { return MasterData.CalendarNoteService.baseUrl; };
            CalendarNoteGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CalendarNoteGrid);
            return CalendarNoteGrid;
        }(Serenity.EntityGrid));
        MasterData.CalendarNoteGrid = CalendarNoteGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ChargeTypeDialog = /** @class */ (function (_super) {
            __extends(ChargeTypeDialog, _super);
            function ChargeTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ChargeTypeForm(_this.idPrefix);
                return _this;
            }
            ChargeTypeDialog.prototype.getFormKey = function () { return MasterData.ChargeTypeForm.formKey; };
            ChargeTypeDialog.prototype.getIdProperty = function () { return MasterData.ChargeTypeRow.idProperty; };
            ChargeTypeDialog.prototype.getLocalTextPrefix = function () { return MasterData.ChargeTypeRow.localTextPrefix; };
            ChargeTypeDialog.prototype.getNameProperty = function () { return MasterData.ChargeTypeRow.nameProperty; };
            ChargeTypeDialog.prototype.getService = function () { return MasterData.ChargeTypeService.baseUrl; };
            ChargeTypeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ChargeTypeDialog);
            return ChargeTypeDialog;
        }(Serenity.EntityDialog));
        MasterData.ChargeTypeDialog = ChargeTypeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ChargeTypeGrid = /** @class */ (function (_super) {
            __extends(ChargeTypeGrid, _super);
            function ChargeTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            ChargeTypeGrid.prototype.getColumnsKey = function () { return 'MasterData.ChargeType'; };
            ChargeTypeGrid.prototype.getDialogType = function () { return MasterData.ChargeTypeDialog; };
            ChargeTypeGrid.prototype.getIdProperty = function () { return MasterData.ChargeTypeRow.idProperty; };
            ChargeTypeGrid.prototype.getLocalTextPrefix = function () { return MasterData.ChargeTypeRow.localTextPrefix; };
            ChargeTypeGrid.prototype.getService = function () { return MasterData.ChargeTypeService.baseUrl; };
            ChargeTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ChargeTypeGrid);
            return ChargeTypeGrid;
        }(Serenity.EntityGrid));
        MasterData.ChargeTypeGrid = ChargeTypeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CollectionDialog = /** @class */ (function (_super) {
            __extends(CollectionDialog, _super);
            function CollectionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.CollectionForm(_this.idPrefix);
                return _this;
            }
            CollectionDialog.prototype.getFormKey = function () { return MasterData.CollectionForm.formKey; };
            CollectionDialog.prototype.getIdProperty = function () { return MasterData.CollectionRow.idProperty; };
            CollectionDialog.prototype.getLocalTextPrefix = function () { return MasterData.CollectionRow.localTextPrefix; };
            CollectionDialog.prototype.getNameProperty = function () { return MasterData.CollectionRow.nameProperty; };
            CollectionDialog.prototype.getService = function () { return MasterData.CollectionService.baseUrl; };
            CollectionDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CollectionDialog);
            return CollectionDialog;
        }(Serenity.EntityDialog));
        MasterData.CollectionDialog = CollectionDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CollectionGrid = /** @class */ (function (_super) {
            __extends(CollectionGrid, _super);
            function CollectionGrid(container) {
                return _super.call(this, container) || this;
            }
            CollectionGrid.prototype.getColumnsKey = function () { return 'MasterData.Collection'; };
            CollectionGrid.prototype.getDialogType = function () { return MasterData.CollectionDialog; };
            CollectionGrid.prototype.getIdProperty = function () { return MasterData.CollectionRow.idProperty; };
            CollectionGrid.prototype.getLocalTextPrefix = function () { return MasterData.CollectionRow.localTextPrefix; };
            CollectionGrid.prototype.getService = function () { return MasterData.CollectionService.baseUrl; };
            CollectionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CollectionGrid);
            return CollectionGrid;
        }(Serenity.EntityGrid));
        MasterData.CollectionGrid = CollectionGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ColorDialog = /** @class */ (function (_super) {
            __extends(ColorDialog, _super);
            function ColorDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ColorForm(_this.idPrefix);
                return _this;
            }
            ColorDialog.prototype.getFormKey = function () { return MasterData.ColorForm.formKey; };
            ColorDialog.prototype.getIdProperty = function () { return MasterData.ColorRow.idProperty; };
            ColorDialog.prototype.getLocalTextPrefix = function () { return MasterData.ColorRow.localTextPrefix; };
            ColorDialog.prototype.getNameProperty = function () { return MasterData.ColorRow.nameProperty; };
            ColorDialog.prototype.getService = function () { return MasterData.ColorService.baseUrl; };
            ColorDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ColorDialog);
            return ColorDialog;
        }(Serenity.EntityDialog));
        MasterData.ColorDialog = ColorDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ColorGrid = /** @class */ (function (_super) {
            __extends(ColorGrid, _super);
            function ColorGrid(container) {
                return _super.call(this, container) || this;
            }
            ColorGrid.prototype.getColumnsKey = function () { return 'MasterData.Color'; };
            ColorGrid.prototype.getDialogType = function () { return MasterData.ColorDialog; };
            ColorGrid.prototype.getIdProperty = function () { return MasterData.ColorRow.idProperty; };
            ColorGrid.prototype.getLocalTextPrefix = function () { return MasterData.ColorRow.localTextPrefix; };
            ColorGrid.prototype.getService = function () { return MasterData.ColorService.baseUrl; };
            ColorGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                opt.forceFitColumns = true;
                opt.enableColumnReorder = false;
                return opt;
            };
            ColorGrid.prototype.createSlickGrid = function () {
                var self = this;
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                var headerMenuPlugin = new Slick.Plugins.HeaderMenu({});
                headerMenuPlugin.onBeforeMenuShow.subscribe(function (e, args) {
                    var menu = args.menu;
                    // We can add or modify the menu here, or cancel it by returning false.
                    //return false;
                    //var i = menu.items.length;
                    //menu.items.push({
                    //    title: "Menu item " + i,
                    //    command: "item" + i
                    //});
                });
                headerMenuPlugin.onCommand.subscribe(function (e, args) {
                    console.log("command", e, args);
                    Q.notifyInfo("Command: " + args.command);
                    if (args.comand === "group") {
                        self.view.setGrouping([
                            {
                                getter: args.column.field
                            }
                        ]);
                    }
                });
                grid.registerPlugin(headerMenuPlugin);
                //group
                grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                return grid;
            };
            ColorGrid.prototype.getColumns = function () {
                var columns = _super.prototype.getColumns.call(this);
                for (var i = 0; i < columns.length; i++) {
                    columns[i].header = {
                        menu: {
                            items: [
                                {
                                    iconImage: "/content/images/sort-asc.gif",
                                    title: "Sort Ascending",
                                    command: "sort-asc"
                                },
                                {
                                    iconImage: "/content/images/sort-desc.gif",
                                    title: "Sort Descending",
                                    command: "sort-desc"
                                },
                                {
                                    title: "Group By",
                                    command: "group",
                                    disabled: false,
                                    tooltip: "Can't hide this column"
                                },
                                {
                                    iconCssClass: "/content/images/icon-help",
                                    title: "Help",
                                    command: "help"
                                }
                            ]
                        }
                    };
                }
                return columns;
            };
            ColorGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ColorGrid);
            return ColorGrid;
        }(Serenity.EntityGrid));
        MasterData.ColorGrid = ColorGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CommodityDialog = /** @class */ (function (_super) {
            __extends(CommodityDialog, _super);
            function CommodityDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.CommodityForm(_this.idPrefix);
                return _this;
            }
            CommodityDialog.prototype.getFormKey = function () { return MasterData.CommodityForm.formKey; };
            CommodityDialog.prototype.getIdProperty = function () { return MasterData.CommodityRow.idProperty; };
            CommodityDialog.prototype.getLocalTextPrefix = function () { return MasterData.CommodityRow.localTextPrefix; };
            CommodityDialog.prototype.getNameProperty = function () { return MasterData.CommodityRow.nameProperty; };
            CommodityDialog.prototype.getService = function () { return MasterData.CommodityService.baseUrl; };
            CommodityDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CommodityDialog);
            return CommodityDialog;
        }(Serenity.EntityDialog));
        MasterData.CommodityDialog = CommodityDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CommodityGrid = /** @class */ (function (_super) {
            __extends(CommodityGrid, _super);
            function CommodityGrid(container) {
                return _super.call(this, container) || this;
            }
            CommodityGrid.prototype.getColumnsKey = function () { return 'MasterData.Commodity'; };
            CommodityGrid.prototype.getDialogType = function () { return MasterData.CommodityDialog; };
            CommodityGrid.prototype.getIdProperty = function () { return MasterData.CommodityRow.idProperty; };
            CommodityGrid.prototype.getLocalTextPrefix = function () { return MasterData.CommodityRow.localTextPrefix; };
            CommodityGrid.prototype.getService = function () { return MasterData.CommodityService.baseUrl; };
            CommodityGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CommodityGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CommodityGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CommodityGrid);
            return CommodityGrid;
        }(Serenity.EntityGrid));
        MasterData.CommodityGrid = CommodityGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanyParameterDialog = /** @class */ (function (_super) {
            __extends(CompanyParameterDialog, _super);
            function CompanyParameterDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Basic.CompanyParameterForm(_this.idPrefix);
                return _this;
            }
            CompanyParameterDialog.prototype.getFormKey = function () { return Basic.CompanyParameterForm.formKey; };
            CompanyParameterDialog.prototype.getIdProperty = function () { return Basic.CompanyParameterRow.idProperty; };
            CompanyParameterDialog.prototype.getLocalTextPrefix = function () { return Basic.CompanyParameterRow.localTextPrefix; };
            CompanyParameterDialog.prototype.getNameProperty = function () { return Basic.CompanyParameterRow.nameProperty; };
            CompanyParameterDialog.prototype.getService = function () { return Basic.CompanyParameterService.baseUrl; };
            CompanyParameterDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                this.deleteButton.hide();
                this.applyChangesButton.hide();
            };
            CompanyParameterDialog.prototype.onSaveSuccess = function (response) {
                this.showSaveSuccessMessage(response);
            };
            CompanyParameterDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CompanyParameterDialog);
            return CompanyParameterDialog;
        }(Serenity.EntityDialog));
        Basic.CompanyParameterDialog = CompanyParameterDialog;
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanyParameterGrid = /** @class */ (function (_super) {
            __extends(CompanyParameterGrid, _super);
            function CompanyParameterGrid(container) {
                return _super.call(this, container) || this;
            }
            CompanyParameterGrid.prototype.getColumnsKey = function () { return 'Basic.CompanyParameter'; };
            CompanyParameterGrid.prototype.getDialogType = function () { return Basic.CompanyParameterDialog; };
            CompanyParameterGrid.prototype.getIdProperty = function () { return Basic.CompanyParameterRow.idProperty; };
            CompanyParameterGrid.prototype.getLocalTextPrefix = function () { return Basic.CompanyParameterRow.localTextPrefix; };
            CompanyParameterGrid.prototype.getService = function () { return Basic.CompanyParameterService.baseUrl; };
            CompanyParameterGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CompanyParameterGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CompanyParameterGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CompanyParameterGrid);
            return CompanyParameterGrid;
        }(Serenity.EntityGrid));
        Basic.CompanyParameterGrid = CompanyParameterGrid;
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanySettingDialog = /** @class */ (function (_super) {
            __extends(CompanySettingDialog, _super);
            function CompanySettingDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Basic.CompanySettingForm(_this.idPrefix);
                return _this;
            }
            CompanySettingDialog.prototype.getFormKey = function () { return Basic.CompanySettingForm.formKey; };
            CompanySettingDialog.prototype.getIdProperty = function () { return Basic.CompanySettingRow.idProperty; };
            CompanySettingDialog.prototype.getLocalTextPrefix = function () { return Basic.CompanySettingRow.localTextPrefix; };
            CompanySettingDialog.prototype.getNameProperty = function () { return Basic.CompanySettingRow.nameProperty; };
            CompanySettingDialog.prototype.getService = function () { return Basic.CompanySettingService.baseUrl; };
            CompanySettingDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], CompanySettingDialog);
            return CompanySettingDialog;
        }(Serenity.EntityDialog));
        Basic.CompanySettingDialog = CompanySettingDialog;
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Basic;
    (function (Basic) {
        var CompanySettingGrid = /** @class */ (function (_super) {
            __extends(CompanySettingGrid, _super);
            function CompanySettingGrid(container) {
                return _super.call(this, container) || this;
            }
            CompanySettingGrid.prototype.getColumnsKey = function () { return 'Basic.CompanySetting'; };
            CompanySettingGrid.prototype.getDialogType = function () { return Basic.CompanySettingDialog; };
            CompanySettingGrid.prototype.getIdProperty = function () { return Basic.CompanySettingRow.idProperty; };
            CompanySettingGrid.prototype.getLocalTextPrefix = function () { return Basic.CompanySettingRow.localTextPrefix; };
            CompanySettingGrid.prototype.getService = function () { return Basic.CompanySettingService.baseUrl; };
            CompanySettingGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CompanySettingGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CompanySettingGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CompanySettingGrid);
            return CompanySettingGrid;
        }(Serenity.EntityGrid));
        Basic.CompanySettingGrid = CompanySettingGrid;
    })(Basic = Matrix.Basic || (Matrix.Basic = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ContactTypeDialog = /** @class */ (function (_super) {
            __extends(ContactTypeDialog, _super);
            function ContactTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ContactTypeForm(_this.idPrefix);
                return _this;
            }
            ContactTypeDialog.prototype.getFormKey = function () { return MasterData.ContactTypeForm.formKey; };
            ContactTypeDialog.prototype.getIdProperty = function () { return MasterData.ContactTypeRow.idProperty; };
            ContactTypeDialog.prototype.getLocalTextPrefix = function () { return MasterData.ContactTypeRow.localTextPrefix; };
            ContactTypeDialog.prototype.getNameProperty = function () { return MasterData.ContactTypeRow.nameProperty; };
            ContactTypeDialog.prototype.getService = function () { return MasterData.ContactTypeService.baseUrl; };
            ContactTypeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ContactTypeDialog);
            return ContactTypeDialog;
        }(Serenity.EntityDialog));
        MasterData.ContactTypeDialog = ContactTypeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ContactTypeGrid = /** @class */ (function (_super) {
            __extends(ContactTypeGrid, _super);
            function ContactTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            ContactTypeGrid.prototype.getColumnsKey = function () { return 'MasterData.ContactType'; };
            ContactTypeGrid.prototype.getDialogType = function () { return MasterData.ContactTypeDialog; };
            ContactTypeGrid.prototype.getIdProperty = function () { return MasterData.ContactTypeRow.idProperty; };
            ContactTypeGrid.prototype.getLocalTextPrefix = function () { return MasterData.ContactTypeRow.localTextPrefix; };
            ContactTypeGrid.prototype.getService = function () { return MasterData.ContactTypeService.baseUrl; };
            ContactTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ContactTypeGrid);
            return ContactTypeGrid;
        }(Serenity.EntityGrid));
        MasterData.ContactTypeGrid = ContactTypeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CurrencyDialog = /** @class */ (function (_super) {
            __extends(CurrencyDialog, _super);
            function CurrencyDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Enterprise.CurrencyForm(_this.idPrefix);
                return _this;
            }
            CurrencyDialog.prototype.getFormKey = function () { return Enterprise.CurrencyForm.formKey; };
            CurrencyDialog.prototype.getIdProperty = function () { return Enterprise.CurrencyRow.idProperty; };
            CurrencyDialog.prototype.getLocalTextPrefix = function () { return Enterprise.CurrencyRow.localTextPrefix; };
            CurrencyDialog.prototype.getNameProperty = function () { return Enterprise.CurrencyRow.nameProperty; };
            CurrencyDialog.prototype.getService = function () { return Enterprise.CurrencyService.baseUrl; };
            CurrencyDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], CurrencyDialog);
            return CurrencyDialog;
        }(Serenity.EntityDialog));
        Enterprise.CurrencyDialog = CurrencyDialog;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CurrencyGrid = /** @class */ (function (_super) {
            __extends(CurrencyGrid, _super);
            function CurrencyGrid(container) {
                return _super.call(this, container) || this;
            }
            CurrencyGrid.prototype.getColumnsKey = function () { return 'Enterprise.Currency'; };
            CurrencyGrid.prototype.getDialogType = function () { return Enterprise.CurrencyDialog; };
            CurrencyGrid.prototype.getIdProperty = function () { return Enterprise.CurrencyRow.idProperty; };
            CurrencyGrid.prototype.getLocalTextPrefix = function () { return Enterprise.CurrencyRow.localTextPrefix; };
            CurrencyGrid.prototype.getService = function () { return Enterprise.CurrencyService.baseUrl; };
            CurrencyGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CurrencyGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CurrencyGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CurrencyGrid);
            return CurrencyGrid;
        }(Serenity.EntityGrid));
        Enterprise.CurrencyGrid = CurrencyGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ExchangeRateDetailEditor = /** @class */ (function (_super) {
            __extends(ExchangeRateDetailEditor, _super);
            function ExchangeRateDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            ExchangeRateDetailEditor.prototype.getColumnsKey = function () { return "MasterData.ExchangeRate"; };
            ExchangeRateDetailEditor.prototype.getDialogType = function () { return MasterData.AnalysisCodeDialog; };
            ExchangeRateDetailEditor.prototype.getLocalTextPrefix = function () { return MasterData.AnalysisCodeRow.localTextPrefix; };
            ExchangeRateDetailEditor.prototype.usePager = function () {
                return true;
            };
            ExchangeRateDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            ExchangeRateDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], ExchangeRateDetailEditor);
            return ExchangeRateDetailEditor;
        }(Matrix.Common.GridEditorBase));
        MasterData.ExchangeRateDetailEditor = ExchangeRateDetailEditor;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ExchangeRateDialog = /** @class */ (function (_super) {
            __extends(ExchangeRateDialog, _super);
            function ExchangeRateDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ExchangeRateForm(_this.idPrefix);
                return _this;
            }
            ExchangeRateDialog.prototype.getFormKey = function () { return MasterData.ExchangeRateForm.formKey; };
            ExchangeRateDialog.prototype.getIdProperty = function () { return MasterData.ExchangeRateRow.idProperty; };
            ExchangeRateDialog.prototype.getLocalTextPrefix = function () { return MasterData.ExchangeRateRow.localTextPrefix; };
            ExchangeRateDialog.prototype.getNameProperty = function () { return MasterData.ExchangeRateRow.nameProperty; };
            ExchangeRateDialog.prototype.getService = function () { return MasterData.ExchangeRateService.baseUrl; };
            ExchangeRateDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], ExchangeRateDialog);
            return ExchangeRateDialog;
        }(Serenity.EntityDialog));
        MasterData.ExchangeRateDialog = ExchangeRateDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ExchangeRateGrid = /** @class */ (function (_super) {
            __extends(ExchangeRateGrid, _super);
            function ExchangeRateGrid(container) {
                return _super.call(this, container) || this;
            }
            ExchangeRateGrid.prototype.getColumnsKey = function () { return 'MasterData.ExchangeRate'; };
            ExchangeRateGrid.prototype.getDialogType = function () { return MasterData.ExchangeRateDialog; };
            ExchangeRateGrid.prototype.getIdProperty = function () { return MasterData.ExchangeRateRow.idProperty; };
            ExchangeRateGrid.prototype.getLocalTextPrefix = function () { return MasterData.ExchangeRateRow.localTextPrefix; };
            ExchangeRateGrid.prototype.getService = function () { return MasterData.ExchangeRateService.baseUrl; };
            ExchangeRateGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ExchangeRateGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ExchangeRateGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ExchangeRateGrid);
            return ExchangeRateGrid;
        }(Serenity.EntityGrid));
        MasterData.ExchangeRateGrid = ExchangeRateGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerDialog = /** @class */ (function (_super) {
            __extends(CustomerDialog, _super);
            function CustomerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.CustomerForm(_this.idPrefix);
                return _this;
            }
            CustomerDialog.prototype.getFormKey = function () { return MasterData.CustomerForm.formKey; };
            CustomerDialog.prototype.getIdProperty = function () { return MasterData.CustomerRow.idProperty; };
            CustomerDialog.prototype.getLocalTextPrefix = function () { return MasterData.CustomerRow.localTextPrefix; };
            CustomerDialog.prototype.getNameProperty = function () { return MasterData.CustomerRow.nameProperty; };
            CustomerDialog.prototype.getService = function () { return MasterData.CustomerService.baseUrl; };
            CustomerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], CustomerDialog);
            return CustomerDialog;
        }(Serenity.EntityDialog));
        MasterData.CustomerDialog = CustomerDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerGrid = /** @class */ (function (_super) {
            __extends(CustomerGrid, _super);
            function CustomerGrid(container) {
                return _super.call(this, container) || this;
            }
            CustomerGrid.prototype.getColumnsKey = function () { return 'MasterData.Customer'; };
            CustomerGrid.prototype.getDialogType = function () { return MasterData.CustomerDialog; };
            CustomerGrid.prototype.getIdProperty = function () { return MasterData.CustomerRow.idProperty; };
            CustomerGrid.prototype.getLocalTextPrefix = function () { return MasterData.CustomerRow.localTextPrefix; };
            CustomerGrid.prototype.getService = function () { return MasterData.CustomerService.baseUrl; };
            CustomerGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CustomerGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CustomerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomerGrid);
            return CustomerGrid;
        }(Serenity.EntityGrid));
        MasterData.CustomerGrid = CustomerGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CustomerGroupDialog = /** @class */ (function (_super) {
            __extends(CustomerGroupDialog, _super);
            function CustomerGroupDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Enterprise.CustomerGroupForm(_this.idPrefix);
                return _this;
            }
            CustomerGroupDialog.prototype.getFormKey = function () { return Enterprise.CustomerGroupForm.formKey; };
            CustomerGroupDialog.prototype.getIdProperty = function () { return Enterprise.CustomerGroupRow.idProperty; };
            CustomerGroupDialog.prototype.getLocalTextPrefix = function () { return Enterprise.CustomerGroupRow.localTextPrefix; };
            CustomerGroupDialog.prototype.getNameProperty = function () { return Enterprise.CustomerGroupRow.nameProperty; };
            CustomerGroupDialog.prototype.getService = function () { return Enterprise.CustomerGroupService.baseUrl; };
            CustomerGroupDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], CustomerGroupDialog);
            return CustomerGroupDialog;
        }(Serenity.EntityDialog));
        Enterprise.CustomerGroupDialog = CustomerGroupDialog;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var CustomerGroupGrid = /** @class */ (function (_super) {
            __extends(CustomerGroupGrid, _super);
            function CustomerGroupGrid(container) {
                return _super.call(this, container) || this;
            }
            CustomerGroupGrid.prototype.getColumnsKey = function () { return 'Enterprise.CustomerGroup'; };
            CustomerGroupGrid.prototype.getDialogType = function () { return Enterprise.CustomerGroupDialog; };
            CustomerGroupGrid.prototype.getIdProperty = function () { return Enterprise.CustomerGroupRow.idProperty; };
            CustomerGroupGrid.prototype.getLocalTextPrefix = function () { return Enterprise.CustomerGroupRow.localTextPrefix; };
            CustomerGroupGrid.prototype.getService = function () { return Enterprise.CustomerGroupService.baseUrl; };
            CustomerGroupGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            CustomerGroupGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            CustomerGroupGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomerGroupGrid);
            return CustomerGroupGrid;
        }(Serenity.EntityGrid));
        Enterprise.CustomerGroupGrid = CustomerGroupGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerLinkTypeDialog = /** @class */ (function (_super) {
            __extends(CustomerLinkTypeDialog, _super);
            function CustomerLinkTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.CustomerLinkTypeForm(_this.idPrefix);
                return _this;
            }
            CustomerLinkTypeDialog.prototype.getFormKey = function () { return MasterData.CustomerLinkTypeForm.formKey; };
            CustomerLinkTypeDialog.prototype.getIdProperty = function () { return MasterData.CustomerLinkTypeRow.idProperty; };
            CustomerLinkTypeDialog.prototype.getLocalTextPrefix = function () { return MasterData.CustomerLinkTypeRow.localTextPrefix; };
            CustomerLinkTypeDialog.prototype.getNameProperty = function () { return MasterData.CustomerLinkTypeRow.nameProperty; };
            CustomerLinkTypeDialog.prototype.getService = function () { return MasterData.CustomerLinkTypeService.baseUrl; };
            CustomerLinkTypeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], CustomerLinkTypeDialog);
            return CustomerLinkTypeDialog;
        }(Serenity.EntityDialog));
        MasterData.CustomerLinkTypeDialog = CustomerLinkTypeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var CustomerLinkTypeGrid = /** @class */ (function (_super) {
            __extends(CustomerLinkTypeGrid, _super);
            function CustomerLinkTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            CustomerLinkTypeGrid.prototype.getColumnsKey = function () { return 'MasterData.CustomerLinkType'; };
            CustomerLinkTypeGrid.prototype.getDialogType = function () { return MasterData.CustomerLinkTypeDialog; };
            CustomerLinkTypeGrid.prototype.getIdProperty = function () { return MasterData.CustomerLinkTypeRow.idProperty; };
            CustomerLinkTypeGrid.prototype.getLocalTextPrefix = function () { return MasterData.CustomerLinkTypeRow.localTextPrefix; };
            CustomerLinkTypeGrid.prototype.getService = function () { return MasterData.CustomerLinkTypeService.baseUrl; };
            CustomerLinkTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], CustomerLinkTypeGrid);
            return CustomerLinkTypeGrid;
        }(Serenity.EntityGrid));
        MasterData.CustomerLinkTypeGrid = CustomerLinkTypeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var DepartmentDialog = /** @class */ (function (_super) {
            __extends(DepartmentDialog, _super);
            function DepartmentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Enterprise.DepartmentForm(_this.idPrefix);
                return _this;
            }
            DepartmentDialog.prototype.getFormKey = function () { return Enterprise.DepartmentForm.formKey; };
            DepartmentDialog.prototype.getIdProperty = function () { return Enterprise.DepartmentRow.idProperty; };
            DepartmentDialog.prototype.getLocalTextPrefix = function () { return Enterprise.DepartmentRow.localTextPrefix; };
            DepartmentDialog.prototype.getNameProperty = function () { return Enterprise.DepartmentRow.nameProperty; };
            DepartmentDialog.prototype.getService = function () { return Enterprise.DepartmentService.baseUrl; };
            DepartmentDialog.prototype.afterLoadEntity = function () {
                _super.prototype.afterLoadEntity.call(this);
                // these fields are only required in new record mode
                //this.form.Password.element.toggleClass('required', this.isNew())
                //    .closest('.field').find('sup').toggle(this.isNew());
                //this.form.PasswordConfirm.element.toggleClass('required', this.isNew())
                //    .closest('.field').find('sup').toggle(this.isNew());
                new Matrix.Administration.LookupDialogController(jQuery(".inputLookup")).InitiaizeLookupUI();
                new Matrix.Administration.LookupDialogController(jQuery(".buttonLookup")).InitiaizeLookupExecution();
            };
            DepartmentDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], DepartmentDialog);
            return DepartmentDialog;
        }(Serenity.EntityDialog));
        Enterprise.DepartmentDialog = DepartmentDialog;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var DepartmentGrid = /** @class */ (function (_super) {
            __extends(DepartmentGrid, _super);
            function DepartmentGrid(container) {
                return _super.call(this, container) || this;
            }
            DepartmentGrid.prototype.getColumnsKey = function () { return 'Enterprise.Department'; };
            DepartmentGrid.prototype.getDialogType = function () { return Enterprise.DepartmentDialog; };
            DepartmentGrid.prototype.getIdProperty = function () { return Enterprise.DepartmentRow.idProperty; };
            DepartmentGrid.prototype.getLocalTextPrefix = function () { return Enterprise.DepartmentRow.localTextPrefix; };
            DepartmentGrid.prototype.getService = function () { return Enterprise.DepartmentService.baseUrl; };
            DepartmentGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            DepartmentGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            DepartmentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], DepartmentGrid);
            return DepartmentGrid;
        }(Serenity.EntityGrid));
        Enterprise.DepartmentGrid = DepartmentGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var EmployeeDialog = /** @class */ (function (_super) {
            __extends(EmployeeDialog, _super);
            function EmployeeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.EmployeeForm(_this.idPrefix);
                return _this;
            }
            EmployeeDialog.prototype.getFormKey = function () { return MasterData.EmployeeForm.formKey; };
            EmployeeDialog.prototype.getIdProperty = function () { return MasterData.EmployeeRow.idProperty; };
            EmployeeDialog.prototype.getLocalTextPrefix = function () { return MasterData.EmployeeRow.localTextPrefix; };
            EmployeeDialog.prototype.getNameProperty = function () { return MasterData.EmployeeRow.nameProperty; };
            EmployeeDialog.prototype.getService = function () { return MasterData.EmployeeService.baseUrl; };
            EmployeeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], EmployeeDialog);
            return EmployeeDialog;
        }(Serenity.EntityDialog));
        MasterData.EmployeeDialog = EmployeeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var EmployeeGrid = /** @class */ (function (_super) {
            __extends(EmployeeGrid, _super);
            function EmployeeGrid(container) {
                return _super.call(this, container) || this;
            }
            EmployeeGrid.prototype.getColumnsKey = function () { return 'MasterData.Employee'; };
            EmployeeGrid.prototype.getDialogType = function () { return MasterData.EmployeeDialog; };
            EmployeeGrid.prototype.getIdProperty = function () { return MasterData.EmployeeRow.idProperty; };
            EmployeeGrid.prototype.getLocalTextPrefix = function () { return MasterData.EmployeeRow.localTextPrefix; };
            EmployeeGrid.prototype.getService = function () { return MasterData.EmployeeService.baseUrl; };
            EmployeeGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            EmployeeGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            EmployeeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], EmployeeGrid);
            return EmployeeGrid;
        }(Serenity.EntityGrid));
        MasterData.EmployeeGrid = EmployeeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalPeriodDialog = /** @class */ (function (_super) {
            __extends(FiscalPeriodDialog, _super);
            function FiscalPeriodDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.FiscalPeriodForm(_this.idPrefix);
                return _this;
            }
            FiscalPeriodDialog.prototype.getFormKey = function () { return MasterData.FiscalPeriodForm.formKey; };
            FiscalPeriodDialog.prototype.getIdProperty = function () { return MasterData.FiscalPeriodRow.idProperty; };
            FiscalPeriodDialog.prototype.getLocalTextPrefix = function () { return MasterData.FiscalPeriodRow.localTextPrefix; };
            FiscalPeriodDialog.prototype.getNameProperty = function () { return MasterData.FiscalPeriodRow.nameProperty; };
            FiscalPeriodDialog.prototype.getService = function () { return MasterData.FiscalPeriodService.baseUrl; };
            FiscalPeriodDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], FiscalPeriodDialog);
            return FiscalPeriodDialog;
        }(Serenity.EntityDialog));
        MasterData.FiscalPeriodDialog = FiscalPeriodDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalPeriodGrid = /** @class */ (function (_super) {
            __extends(FiscalPeriodGrid, _super);
            function FiscalPeriodGrid(container) {
                return _super.call(this, container) || this;
            }
            FiscalPeriodGrid.prototype.getColumnsKey = function () { return 'MasterData.FiscalPeriod'; };
            FiscalPeriodGrid.prototype.getDialogType = function () { return MasterData.FiscalPeriodDialog; };
            FiscalPeriodGrid.prototype.getIdProperty = function () { return MasterData.FiscalPeriodRow.idProperty; };
            FiscalPeriodGrid.prototype.getLocalTextPrefix = function () { return MasterData.FiscalPeriodRow.localTextPrefix; };
            FiscalPeriodGrid.prototype.getService = function () { return MasterData.FiscalPeriodService.baseUrl; };
            FiscalPeriodGrid.prototype.createToolbarExtensions = function () {
                var _this = this;
                _super.prototype.createToolbarExtensions.call(this);
                var opt = {
                    lookupKey: 'MasterData.FiscalYearRow'
                };
                this.sourceLanguage = Serenity.Widget.create({
                    type: Serenity.LookupEditor,
                    element: function (el) { return el.appendTo(_this.toolbar.element).attr('placeholder', 'Fiscal Year'); },
                    options: opt
                });
                this.sourceLanguage.changeSelect2(function (e) {
                    _this.refresh();
                });
            };
            FiscalPeriodGrid.prototype.onViewSubmit = function () {
                var request = this.view.params;
                if (Q.isEmptyOrNull(this.sourceLanguage.value))
                    return false;
                request.FiscalYear = this.sourceLanguage.value;
                return _super.prototype.onViewSubmit.call(this);
            };
            FiscalPeriodGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], FiscalPeriodGrid);
            return FiscalPeriodGrid;
        }(Serenity.EntityGrid));
        MasterData.FiscalPeriodGrid = FiscalPeriodGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalYearDialog = /** @class */ (function (_super) {
            __extends(FiscalYearDialog, _super);
            function FiscalYearDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.FiscalYearForm(_this.idPrefix);
                return _this;
            }
            FiscalYearDialog.prototype.getFormKey = function () { return MasterData.FiscalYearForm.formKey; };
            FiscalYearDialog.prototype.getIdProperty = function () { return MasterData.FiscalYearRow.idProperty; };
            FiscalYearDialog.prototype.getLocalTextPrefix = function () { return MasterData.FiscalYearRow.localTextPrefix; };
            FiscalYearDialog.prototype.getNameProperty = function () { return MasterData.FiscalYearRow.nameProperty; };
            FiscalYearDialog.prototype.getService = function () { return MasterData.FiscalYearService.baseUrl; };
            FiscalYearDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], FiscalYearDialog);
            return FiscalYearDialog;
        }(Serenity.EntityDialog));
        MasterData.FiscalYearDialog = FiscalYearDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FiscalYearGrid = /** @class */ (function (_super) {
            __extends(FiscalYearGrid, _super);
            function FiscalYearGrid(container) {
                return _super.call(this, container) || this;
            }
            FiscalYearGrid.prototype.getColumnsKey = function () { return 'MasterData.FiscalYear'; };
            FiscalYearGrid.prototype.getDialogType = function () { return MasterData.FiscalYearDialog; };
            FiscalYearGrid.prototype.getIdProperty = function () { return MasterData.FiscalYearRow.idProperty; };
            FiscalYearGrid.prototype.getLocalTextPrefix = function () { return MasterData.FiscalYearRow.localTextPrefix; };
            FiscalYearGrid.prototype.getService = function () { return MasterData.FiscalYearService.baseUrl; };
            FiscalYearGrid.prototype.getButtons = function () {
                var _this = this;
                // call base method to get list of buttons
                var buttons = _super.prototype.getButtons.call(this);
                // add our import button
                var button = {
                    title: 'Fiscal Year',
                    cssClass: 'send-button',
                    onClick: function () {
                        if (!_this.onViewSubmit()) {
                            return;
                        }
                        Q.notifySuccess("Allright!");
                        //var action = new OrderBulkAction();
                        //action.done = () => this.rowSelection.resetCheckedAndRefresh();
                        //action.execute(this.rowSelection.getSelectedKeys());
                    }
                };
                buttons.splice(0, 0, button);
                return buttons;
            };
            FiscalYearGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], FiscalYearGrid);
            return FiscalYearGrid;
        }(Serenity.EntityGrid));
        MasterData.FiscalYearGrid = FiscalYearGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FundCodeDialog = /** @class */ (function (_super) {
            __extends(FundCodeDialog, _super);
            function FundCodeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.FundCodeForm(_this.idPrefix);
                return _this;
            }
            FundCodeDialog.prototype.getFormKey = function () { return MasterData.FundCodeForm.formKey; };
            FundCodeDialog.prototype.getIdProperty = function () { return MasterData.FundCodeRow.idProperty; };
            FundCodeDialog.prototype.getLocalTextPrefix = function () { return MasterData.FundCodeRow.localTextPrefix; };
            FundCodeDialog.prototype.getNameProperty = function () { return MasterData.FundCodeRow.nameProperty; };
            FundCodeDialog.prototype.getService = function () { return MasterData.FundCodeService.baseUrl; };
            FundCodeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], FundCodeDialog);
            return FundCodeDialog;
        }(Serenity.EntityDialog));
        MasterData.FundCodeDialog = FundCodeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var FundCodeGrid = /** @class */ (function (_super) {
            __extends(FundCodeGrid, _super);
            function FundCodeGrid(container) {
                return _super.call(this, container) || this;
            }
            FundCodeGrid.prototype.getColumnsKey = function () { return 'MasterData.FundCode'; };
            FundCodeGrid.prototype.getDialogType = function () { return MasterData.FundCodeDialog; };
            FundCodeGrid.prototype.getIdProperty = function () { return MasterData.FundCodeRow.idProperty; };
            FundCodeGrid.prototype.getLocalTextPrefix = function () { return MasterData.FundCodeRow.localTextPrefix; };
            FundCodeGrid.prototype.getService = function () { return MasterData.FundCodeService.baseUrl; };
            FundCodeGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            FundCodeGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            FundCodeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], FundCodeGrid);
            return FundCodeGrid;
        }(Serenity.EntityGrid));
        MasterData.FundCodeGrid = FundCodeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ItemDialog = /** @class */ (function (_super) {
            __extends(ItemDialog, _super);
            function ItemDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ItemForm(_this.idPrefix);
                return _this;
            }
            ItemDialog.prototype.getFormKey = function () { return MasterData.ItemForm.formKey; };
            ItemDialog.prototype.getIdProperty = function () { return MasterData.ItemRow.idProperty; };
            ItemDialog.prototype.getLocalTextPrefix = function () { return MasterData.ItemRow.localTextPrefix; };
            ItemDialog.prototype.getNameProperty = function () { return MasterData.ItemRow.nameProperty; };
            ItemDialog.prototype.getService = function () { return MasterData.ItemService.baseUrl; };
            ItemDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], ItemDialog);
            return ItemDialog;
        }(Serenity.EntityDialog));
        MasterData.ItemDialog = ItemDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ItemGrid = /** @class */ (function (_super) {
            __extends(ItemGrid, _super);
            function ItemGrid(container) {
                return _super.call(this, container) || this;
            }
            ItemGrid.prototype.getColumnsKey = function () { return 'MasterData.Item'; };
            ItemGrid.prototype.getDialogType = function () { return MasterData.ItemDialog; };
            ItemGrid.prototype.getIdProperty = function () { return MasterData.ItemRow.idProperty; };
            ItemGrid.prototype.getLocalTextPrefix = function () { return MasterData.ItemRow.localTextPrefix; };
            ItemGrid.prototype.getService = function () { return MasterData.ItemService.baseUrl; };
            ItemGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ItemGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ItemGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ItemGrid);
            return ItemGrid;
        }(Serenity.EntityGrid));
        MasterData.ItemGrid = ItemGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var AllocationMethodFormatter = /** @class */ (function () {
            function AllocationMethodFormatter() {
            }
            AllocationMethodFormatter.prototype.format = function (ctx) {
                var allocationMethod = ctx.value;
                if (!allocationMethod)
                    return "";
                var dic = new Matrix.AllocationMethodOption();
                return dic.Mapping.Item(allocationMethod);
            };
            AllocationMethodFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], AllocationMethodFormatter);
            return AllocationMethodFormatter;
        }());
        Enterprise.AllocationMethodFormatter = AllocationMethodFormatter;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var ItemGroupDialog = /** @class */ (function (_super) {
            __extends(ItemGroupDialog, _super);
            function ItemGroupDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Enterprise.ItemGroupForm(_this.idPrefix);
                return _this;
            }
            ItemGroupDialog.prototype.getFormKey = function () { return Enterprise.ItemGroupForm.formKey; };
            ItemGroupDialog.prototype.getIdProperty = function () { return Enterprise.ItemGroupRow.idProperty; };
            ItemGroupDialog.prototype.getLocalTextPrefix = function () { return Enterprise.ItemGroupRow.localTextPrefix; };
            ItemGroupDialog.prototype.getNameProperty = function () { return Enterprise.ItemGroupRow.nameProperty; };
            ItemGroupDialog.prototype.getService = function () { return Enterprise.ItemGroupService.baseUrl; };
            ItemGroupDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ItemGroupDialog);
            return ItemGroupDialog;
        }(Serenity.EntityDialog));
        Enterprise.ItemGroupDialog = ItemGroupDialog;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var ItemGroupGrid = /** @class */ (function (_super) {
            __extends(ItemGroupGrid, _super);
            function ItemGroupGrid(container) {
                return _super.call(this, container) || this;
            }
            ItemGroupGrid.prototype.getColumnsKey = function () { return 'Enterprise.ItemGroup'; };
            ItemGroupGrid.prototype.getDialogType = function () { return Enterprise.ItemGroupDialog; };
            ItemGroupGrid.prototype.getIdProperty = function () { return Enterprise.ItemGroupRow.idProperty; };
            ItemGroupGrid.prototype.getLocalTextPrefix = function () { return Enterprise.ItemGroupRow.localTextPrefix; };
            ItemGroupGrid.prototype.getService = function () { return Enterprise.ItemGroupService.baseUrl; };
            ItemGroupGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ItemGroupGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ItemGroupGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ItemGroupGrid);
            return ItemGroupGrid;
        }(Serenity.EntityGrid));
        Enterprise.ItemGroupGrid = ItemGroupGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var ItemTypeFormatter = /** @class */ (function () {
            function ItemTypeFormatter() {
            }
            ItemTypeFormatter.prototype.format = function (ctx) {
                var allocationMethod = ctx.value;
                if (!allocationMethod)
                    return "";
                var dic = new Matrix.ItemTypeOption();
                return dic.Mapping.Item(allocationMethod);
            };
            ItemTypeFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], ItemTypeFormatter);
            return ItemTypeFormatter;
        }());
        Enterprise.ItemTypeFormatter = ItemTypeFormatter;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var JobCategoryDialog = /** @class */ (function (_super) {
            __extends(JobCategoryDialog, _super);
            function JobCategoryDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Enterprise.JobCategoryForm(_this.idPrefix);
                return _this;
            }
            JobCategoryDialog.prototype.getFormKey = function () { return Enterprise.JobCategoryForm.formKey; };
            JobCategoryDialog.prototype.getIdProperty = function () { return Enterprise.JobCategoryRow.idProperty; };
            JobCategoryDialog.prototype.getLocalTextPrefix = function () { return Enterprise.JobCategoryRow.localTextPrefix; };
            JobCategoryDialog.prototype.getNameProperty = function () { return Enterprise.JobCategoryRow.nameProperty; };
            JobCategoryDialog.prototype.getService = function () { return Enterprise.JobCategoryService.baseUrl; };
            JobCategoryDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], JobCategoryDialog);
            return JobCategoryDialog;
        }(Serenity.EntityDialog));
        Enterprise.JobCategoryDialog = JobCategoryDialog;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var JobCategoryGrid = /** @class */ (function (_super) {
            __extends(JobCategoryGrid, _super);
            function JobCategoryGrid(container) {
                return _super.call(this, container) || this;
            }
            JobCategoryGrid.prototype.getColumnsKey = function () { return 'Enterprise.JobCategory'; };
            JobCategoryGrid.prototype.getDialogType = function () { return Enterprise.JobCategoryDialog; };
            JobCategoryGrid.prototype.getIdProperty = function () { return Enterprise.JobCategoryRow.idProperty; };
            JobCategoryGrid.prototype.getLocalTextPrefix = function () { return Enterprise.JobCategoryRow.localTextPrefix; };
            JobCategoryGrid.prototype.getService = function () { return Enterprise.JobCategoryService.baseUrl; };
            JobCategoryGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            JobCategoryGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            JobCategoryGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], JobCategoryGrid);
            return JobCategoryGrid;
        }(Serenity.EntityGrid));
        Enterprise.JobCategoryGrid = JobCategoryGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var LocationDialog = /** @class */ (function (_super) {
            __extends(LocationDialog, _super);
            function LocationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.LocationForm(_this.idPrefix);
                return _this;
            }
            LocationDialog.prototype.getFormKey = function () { return MasterData.LocationForm.formKey; };
            LocationDialog.prototype.getIdProperty = function () { return MasterData.LocationRow.idProperty; };
            LocationDialog.prototype.getLocalTextPrefix = function () { return MasterData.LocationRow.localTextPrefix; };
            LocationDialog.prototype.getNameProperty = function () { return MasterData.LocationRow.nameProperty; };
            LocationDialog.prototype.getService = function () { return MasterData.LocationService.baseUrl; };
            LocationDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], LocationDialog);
            return LocationDialog;
        }(Serenity.EntityDialog));
        MasterData.LocationDialog = LocationDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var LocationGrid = /** @class */ (function (_super) {
            __extends(LocationGrid, _super);
            function LocationGrid(container) {
                return _super.call(this, container) || this;
            }
            LocationGrid.prototype.getColumnsKey = function () { return 'MasterData.Location'; };
            LocationGrid.prototype.getDialogType = function () { return MasterData.LocationDialog; };
            LocationGrid.prototype.getIdProperty = function () { return MasterData.LocationRow.idProperty; };
            LocationGrid.prototype.getLocalTextPrefix = function () { return MasterData.LocationRow.localTextPrefix; };
            LocationGrid.prototype.getService = function () { return MasterData.LocationService.baseUrl; };
            LocationGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            LocationGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            LocationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], LocationGrid);
            return LocationGrid;
        }(Serenity.EntityGrid));
        MasterData.LocationGrid = LocationGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MachineDialog = /** @class */ (function (_super) {
            __extends(MachineDialog, _super);
            function MachineDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.MachineForm(_this.idPrefix);
                return _this;
            }
            MachineDialog.prototype.getFormKey = function () { return MasterData.MachineForm.formKey; };
            MachineDialog.prototype.getIdProperty = function () { return MasterData.MachineRow.idProperty; };
            MachineDialog.prototype.getLocalTextPrefix = function () { return MasterData.MachineRow.localTextPrefix; };
            MachineDialog.prototype.getNameProperty = function () { return MasterData.MachineRow.nameProperty; };
            MachineDialog.prototype.getService = function () { return MasterData.MachineService.baseUrl; };
            MachineDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], MachineDialog);
            return MachineDialog;
        }(Serenity.EntityDialog));
        MasterData.MachineDialog = MachineDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MachineGrid = /** @class */ (function (_super) {
            __extends(MachineGrid, _super);
            function MachineGrid(container) {
                return _super.call(this, container) || this;
            }
            MachineGrid.prototype.getColumnsKey = function () { return 'MasterData.Machine'; };
            MachineGrid.prototype.getDialogType = function () { return MasterData.MachineDialog; };
            MachineGrid.prototype.getIdProperty = function () { return MasterData.MachineRow.idProperty; };
            MachineGrid.prototype.getLocalTextPrefix = function () { return MasterData.MachineRow.localTextPrefix; };
            MachineGrid.prototype.getService = function () { return MasterData.MachineService.baseUrl; };
            MachineGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            MachineGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            MachineGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MachineGrid);
            return MachineGrid;
        }(Serenity.EntityGrid));
        MasterData.MachineGrid = MachineGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageAttachmentDialog = /** @class */ (function (_super) {
            __extends(MessageAttachmentDialog, _super);
            function MessageAttachmentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.MessageAttachmentForm(_this.idPrefix);
                return _this;
            }
            MessageAttachmentDialog.prototype.getFormKey = function () { return MasterData.MessageAttachmentForm.formKey; };
            MessageAttachmentDialog.prototype.getIdProperty = function () { return MasterData.MessageAttachmentRow.idProperty; };
            MessageAttachmentDialog.prototype.getLocalTextPrefix = function () { return MasterData.MessageAttachmentRow.localTextPrefix; };
            MessageAttachmentDialog.prototype.getNameProperty = function () { return MasterData.MessageAttachmentRow.nameProperty; };
            MessageAttachmentDialog.prototype.getService = function () { return MasterData.MessageAttachmentService.baseUrl; };
            MessageAttachmentDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], MessageAttachmentDialog);
            return MessageAttachmentDialog;
        }(Serenity.EntityDialog));
        MasterData.MessageAttachmentDialog = MessageAttachmentDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageAttachmentGrid = /** @class */ (function (_super) {
            __extends(MessageAttachmentGrid, _super);
            function MessageAttachmentGrid(container) {
                return _super.call(this, container) || this;
            }
            MessageAttachmentGrid.prototype.getColumnsKey = function () { return 'MasterData.MessageAttachment'; };
            MessageAttachmentGrid.prototype.getDialogType = function () { return MasterData.MessageAttachmentDialog; };
            MessageAttachmentGrid.prototype.getIdProperty = function () { return MasterData.MessageAttachmentRow.idProperty; };
            MessageAttachmentGrid.prototype.getLocalTextPrefix = function () { return MasterData.MessageAttachmentRow.localTextPrefix; };
            MessageAttachmentGrid.prototype.getService = function () { return MasterData.MessageAttachmentService.baseUrl; };
            MessageAttachmentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MessageAttachmentGrid);
            return MessageAttachmentGrid;
        }(Serenity.EntityGrid));
        MasterData.MessageAttachmentGrid = MessageAttachmentGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageDialog = /** @class */ (function (_super) {
            __extends(MessageDialog, _super);
            function MessageDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.MessageForm(_this.idPrefix);
                return _this;
            }
            MessageDialog.prototype.getFormKey = function () { return MasterData.MessageForm.formKey; };
            MessageDialog.prototype.getIdProperty = function () { return MasterData.MessageRow.idProperty; };
            MessageDialog.prototype.getLocalTextPrefix = function () { return MasterData.MessageRow.localTextPrefix; };
            MessageDialog.prototype.getNameProperty = function () { return MasterData.MessageRow.nameProperty; };
            MessageDialog.prototype.getService = function () { return MasterData.MessageService.baseUrl; };
            MessageDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], MessageDialog);
            return MessageDialog;
        }(Serenity.EntityDialog));
        MasterData.MessageDialog = MessageDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MessageGrid = /** @class */ (function (_super) {
            __extends(MessageGrid, _super);
            function MessageGrid(container) {
                return _super.call(this, container) || this;
            }
            MessageGrid.prototype.getColumnsKey = function () { return 'MasterData.Message'; };
            MessageGrid.prototype.getDialogType = function () { return MasterData.MessageDialog; };
            MessageGrid.prototype.getIdProperty = function () { return MasterData.MessageRow.idProperty; };
            MessageGrid.prototype.getLocalTextPrefix = function () { return MasterData.MessageRow.localTextPrefix; };
            MessageGrid.prototype.getService = function () { return MasterData.MessageService.baseUrl; };
            MessageGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MessageGrid);
            return MessageGrid;
        }(Serenity.EntityGrid));
        MasterData.MessageGrid = MessageGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MoldDialog = /** @class */ (function (_super) {
            __extends(MoldDialog, _super);
            function MoldDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.MoldForm(_this.idPrefix);
                return _this;
            }
            MoldDialog.prototype.getFormKey = function () { return MasterData.MoldForm.formKey; };
            MoldDialog.prototype.getIdProperty = function () { return MasterData.MoldRow.idProperty; };
            MoldDialog.prototype.getLocalTextPrefix = function () { return MasterData.MoldRow.localTextPrefix; };
            MoldDialog.prototype.getNameProperty = function () { return MasterData.MoldRow.nameProperty; };
            MoldDialog.prototype.getService = function () { return MasterData.MoldService.baseUrl; };
            MoldDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], MoldDialog);
            return MoldDialog;
        }(Serenity.EntityDialog));
        MasterData.MoldDialog = MoldDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var MoldGrid = /** @class */ (function (_super) {
            __extends(MoldGrid, _super);
            function MoldGrid(container) {
                return _super.call(this, container) || this;
            }
            MoldGrid.prototype.getColumnsKey = function () { return 'MasterData.Mold'; };
            MoldGrid.prototype.getDialogType = function () { return MasterData.MoldDialog; };
            MoldGrid.prototype.getIdProperty = function () { return MasterData.MoldRow.idProperty; };
            MoldGrid.prototype.getLocalTextPrefix = function () { return MasterData.MoldRow.localTextPrefix; };
            MoldGrid.prototype.getService = function () { return MasterData.MoldService.baseUrl; };
            MoldGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], MoldGrid);
            return MoldGrid;
        }(Serenity.EntityGrid));
        MasterData.MoldGrid = MoldGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var OperationDialog = /** @class */ (function (_super) {
            __extends(OperationDialog, _super);
            function OperationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.OperationForm(_this.idPrefix);
                return _this;
            }
            OperationDialog.prototype.getFormKey = function () { return MasterData.OperationForm.formKey; };
            OperationDialog.prototype.getIdProperty = function () { return MasterData.OperationRow.idProperty; };
            OperationDialog.prototype.getLocalTextPrefix = function () { return MasterData.OperationRow.localTextPrefix; };
            OperationDialog.prototype.getNameProperty = function () { return MasterData.OperationRow.nameProperty; };
            OperationDialog.prototype.getService = function () { return MasterData.OperationService.baseUrl; };
            OperationDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], OperationDialog);
            return OperationDialog;
        }(Serenity.EntityDialog));
        MasterData.OperationDialog = OperationDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var OperationGrid = /** @class */ (function (_super) {
            __extends(OperationGrid, _super);
            function OperationGrid(container) {
                return _super.call(this, container) || this;
            }
            OperationGrid.prototype.getColumnsKey = function () { return 'MasterData.Operation'; };
            OperationGrid.prototype.getDialogType = function () { return MasterData.OperationDialog; };
            OperationGrid.prototype.getIdProperty = function () { return MasterData.OperationRow.idProperty; };
            OperationGrid.prototype.getLocalTextPrefix = function () { return MasterData.OperationRow.localTextPrefix; };
            OperationGrid.prototype.getService = function () { return MasterData.OperationService.baseUrl; };
            OperationGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            OperationGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            OperationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], OperationGrid);
            return OperationGrid;
        }(Serenity.EntityGrid));
        MasterData.OperationGrid = OperationGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PanelDialog = /** @class */ (function (_super) {
            __extends(PanelDialog, _super);
            function PanelDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.PanelForm(_this.idPrefix);
                return _this;
            }
            PanelDialog.prototype.getFormKey = function () { return MasterData.PanelForm.formKey; };
            PanelDialog.prototype.getIdProperty = function () { return MasterData.PanelRow.idProperty; };
            PanelDialog.prototype.getLocalTextPrefix = function () { return MasterData.PanelRow.localTextPrefix; };
            PanelDialog.prototype.getNameProperty = function () { return MasterData.PanelRow.nameProperty; };
            PanelDialog.prototype.getService = function () { return MasterData.PanelService.baseUrl; };
            PanelDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PanelDialog);
            return PanelDialog;
        }(Serenity.EntityDialog));
        MasterData.PanelDialog = PanelDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PanelGrid = /** @class */ (function (_super) {
            __extends(PanelGrid, _super);
            function PanelGrid(container) {
                return _super.call(this, container) || this;
            }
            PanelGrid.prototype.getColumnsKey = function () { return 'MasterData.Panel'; };
            PanelGrid.prototype.getDialogType = function () { return MasterData.PanelDialog; };
            PanelGrid.prototype.getIdProperty = function () { return MasterData.PanelRow.idProperty; };
            PanelGrid.prototype.getLocalTextPrefix = function () { return MasterData.PanelRow.localTextPrefix; };
            PanelGrid.prototype.getService = function () { return MasterData.PanelService.baseUrl; };
            PanelGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                //disable column reorder
                opt.enableCellNavigation = true;
                opt.enableColumnReorder = false;
                return opt;
            };
            PanelGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PanelGrid);
            return PanelGrid;
        }(Serenity.EntityGrid));
        MasterData.PanelGrid = PanelGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PayTermDialog = /** @class */ (function (_super) {
            __extends(PayTermDialog, _super);
            function PayTermDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.PayTermForm(_this.idPrefix);
                return _this;
            }
            PayTermDialog.prototype.getFormKey = function () { return MasterData.PayTermForm.formKey; };
            PayTermDialog.prototype.getIdProperty = function () { return MasterData.PayTermRow.idProperty; };
            PayTermDialog.prototype.getLocalTextPrefix = function () { return MasterData.PayTermRow.localTextPrefix; };
            PayTermDialog.prototype.getNameProperty = function () { return MasterData.PayTermRow.nameProperty; };
            PayTermDialog.prototype.getService = function () { return MasterData.PayTermService.baseUrl; };
            PayTermDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PayTermDialog);
            return PayTermDialog;
        }(Serenity.EntityDialog));
        MasterData.PayTermDialog = PayTermDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PayTermGrid = /** @class */ (function (_super) {
            __extends(PayTermGrid, _super);
            function PayTermGrid(container) {
                return _super.call(this, container) || this;
            }
            PayTermGrid.prototype.getColumnsKey = function () { return 'MasterData.PayTerm'; };
            PayTermGrid.prototype.getDialogType = function () { return MasterData.PayTermDialog; };
            PayTermGrid.prototype.getIdProperty = function () { return MasterData.PayTermRow.idProperty; };
            PayTermGrid.prototype.getLocalTextPrefix = function () { return MasterData.PayTermRow.localTextPrefix; };
            PayTermGrid.prototype.getService = function () { return MasterData.PayTermService.baseUrl; };
            PayTermGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            PayTermGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            PayTermGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PayTermGrid);
            return PayTermGrid;
        }(Serenity.EntityGrid));
        MasterData.PayTermGrid = PayTermGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PlannerDialog = /** @class */ (function (_super) {
            __extends(PlannerDialog, _super);
            function PlannerDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.PlannerForm(_this.idPrefix);
                return _this;
            }
            PlannerDialog.prototype.getFormKey = function () { return MasterData.PlannerForm.formKey; };
            PlannerDialog.prototype.getIdProperty = function () { return MasterData.PlannerRow.idProperty; };
            PlannerDialog.prototype.getLocalTextPrefix = function () { return MasterData.PlannerRow.localTextPrefix; };
            PlannerDialog.prototype.getNameProperty = function () { return MasterData.PlannerRow.nameProperty; };
            PlannerDialog.prototype.getService = function () { return MasterData.PlannerService.baseUrl; };
            PlannerDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PlannerDialog);
            return PlannerDialog;
        }(Serenity.EntityDialog));
        MasterData.PlannerDialog = PlannerDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PlannerGrid = /** @class */ (function (_super) {
            __extends(PlannerGrid, _super);
            function PlannerGrid(container) {
                return _super.call(this, container) || this;
            }
            PlannerGrid.prototype.getColumnsKey = function () { return 'MasterData.Planner'; };
            PlannerGrid.prototype.getDialogType = function () { return MasterData.PlannerDialog; };
            PlannerGrid.prototype.getIdProperty = function () { return MasterData.PlannerRow.idProperty; };
            PlannerGrid.prototype.getLocalTextPrefix = function () { return MasterData.PlannerRow.localTextPrefix; };
            PlannerGrid.prototype.getService = function () { return MasterData.PlannerService.baseUrl; };
            PlannerGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PlannerGrid);
            return PlannerGrid;
        }(Serenity.EntityGrid));
        MasterData.PlannerGrid = PlannerGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PortCodeDialog = /** @class */ (function (_super) {
            __extends(PortCodeDialog, _super);
            function PortCodeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.PortCodeForm(_this.idPrefix);
                return _this;
            }
            PortCodeDialog.prototype.getFormKey = function () { return MasterData.PortCodeForm.formKey; };
            PortCodeDialog.prototype.getIdProperty = function () { return MasterData.PortCodeRow.idProperty; };
            PortCodeDialog.prototype.getLocalTextPrefix = function () { return MasterData.PortCodeRow.localTextPrefix; };
            PortCodeDialog.prototype.getNameProperty = function () { return MasterData.PortCodeRow.nameProperty; };
            PortCodeDialog.prototype.getService = function () { return MasterData.PortCodeService.baseUrl; };
            PortCodeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PortCodeDialog);
            return PortCodeDialog;
        }(Serenity.EntityDialog));
        MasterData.PortCodeDialog = PortCodeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var PortCodeGrid = /** @class */ (function (_super) {
            __extends(PortCodeGrid, _super);
            function PortCodeGrid(container) {
                return _super.call(this, container) || this;
            }
            PortCodeGrid.prototype.getColumnsKey = function () { return 'MasterData.PortCode'; };
            PortCodeGrid.prototype.getDialogType = function () { return MasterData.PortCodeDialog; };
            PortCodeGrid.prototype.getIdProperty = function () { return MasterData.PortCodeRow.idProperty; };
            PortCodeGrid.prototype.getLocalTextPrefix = function () { return MasterData.PortCodeRow.localTextPrefix; };
            PortCodeGrid.prototype.getService = function () { return MasterData.PortCodeService.baseUrl; };
            PortCodeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PortCodeGrid);
            return PortCodeGrid;
        }(Serenity.EntityGrid));
        MasterData.PortCodeGrid = PortCodeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ProfitAndLossLayoutDialog = /** @class */ (function (_super) {
            __extends(ProfitAndLossLayoutDialog, _super);
            function ProfitAndLossLayoutDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ProfitAndLossLayoutForm(_this.idPrefix);
                return _this;
            }
            ProfitAndLossLayoutDialog.prototype.getFormKey = function () { return MasterData.ProfitAndLossLayoutForm.formKey; };
            ProfitAndLossLayoutDialog.prototype.getIdProperty = function () { return MasterData.ProfitAndLossLayoutRow.idProperty; };
            ProfitAndLossLayoutDialog.prototype.getLocalTextPrefix = function () { return MasterData.ProfitAndLossLayoutRow.localTextPrefix; };
            ProfitAndLossLayoutDialog.prototype.getNameProperty = function () { return MasterData.ProfitAndLossLayoutRow.nameProperty; };
            ProfitAndLossLayoutDialog.prototype.getService = function () { return MasterData.ProfitAndLossLayoutService.baseUrl; };
            ProfitAndLossLayoutDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ProfitAndLossLayoutDialog);
            return ProfitAndLossLayoutDialog;
        }(Serenity.EntityDialog));
        MasterData.ProfitAndLossLayoutDialog = ProfitAndLossLayoutDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ProfitAndLossLayoutGrid = /** @class */ (function (_super) {
            __extends(ProfitAndLossLayoutGrid, _super);
            function ProfitAndLossLayoutGrid(container) {
                return _super.call(this, container) || this;
            }
            ProfitAndLossLayoutGrid.prototype.getColumnsKey = function () { return 'MasterData.ProfitAndLossLayout'; };
            ProfitAndLossLayoutGrid.prototype.getDialogType = function () { return MasterData.ProfitAndLossLayoutDialog; };
            ProfitAndLossLayoutGrid.prototype.getIdProperty = function () { return MasterData.ProfitAndLossLayoutRow.idProperty; };
            ProfitAndLossLayoutGrid.prototype.getLocalTextPrefix = function () { return MasterData.ProfitAndLossLayoutRow.localTextPrefix; };
            ProfitAndLossLayoutGrid.prototype.getService = function () { return MasterData.ProfitAndLossLayoutService.baseUrl; };
            ProfitAndLossLayoutGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ProfitAndLossLayoutGrid);
            return ProfitAndLossLayoutGrid;
        }(Serenity.EntityGrid));
        MasterData.ProfitAndLossLayoutGrid = ProfitAndLossLayoutGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ReasonCodeDialog = /** @class */ (function (_super) {
            __extends(ReasonCodeDialog, _super);
            function ReasonCodeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ReasonCodeForm(_this.idPrefix);
                return _this;
            }
            ReasonCodeDialog.prototype.getFormKey = function () { return MasterData.ReasonCodeForm.formKey; };
            ReasonCodeDialog.prototype.getIdProperty = function () { return MasterData.ReasonCodeRow.idProperty; };
            ReasonCodeDialog.prototype.getLocalTextPrefix = function () { return MasterData.ReasonCodeRow.localTextPrefix; };
            ReasonCodeDialog.prototype.getNameProperty = function () { return MasterData.ReasonCodeRow.nameProperty; };
            ReasonCodeDialog.prototype.getService = function () { return MasterData.ReasonCodeService.baseUrl; };
            ReasonCodeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ReasonCodeDialog);
            return ReasonCodeDialog;
        }(Serenity.EntityDialog));
        MasterData.ReasonCodeDialog = ReasonCodeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ReasonCodeGrid = /** @class */ (function (_super) {
            __extends(ReasonCodeGrid, _super);
            function ReasonCodeGrid(container) {
                return _super.call(this, container) || this;
            }
            ReasonCodeGrid.prototype.getColumnsKey = function () { return 'MasterData.ReasonCode'; };
            ReasonCodeGrid.prototype.getDialogType = function () { return MasterData.ReasonCodeDialog; };
            ReasonCodeGrid.prototype.getIdProperty = function () { return MasterData.ReasonCodeRow.idProperty; };
            ReasonCodeGrid.prototype.getLocalTextPrefix = function () { return MasterData.ReasonCodeRow.localTextPrefix; };
            ReasonCodeGrid.prototype.getService = function () { return MasterData.ReasonCodeService.baseUrl; };
            ReasonCodeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ReasonCodeGrid);
            return ReasonCodeGrid;
        }(Serenity.EntityGrid));
        MasterData.ReasonCodeGrid = ReasonCodeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SalesmanDialog = /** @class */ (function (_super) {
            __extends(SalesmanDialog, _super);
            function SalesmanDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.SalesmanForm(_this.idPrefix);
                return _this;
            }
            SalesmanDialog.prototype.getFormKey = function () { return MasterData.SalesmanForm.formKey; };
            SalesmanDialog.prototype.getIdProperty = function () { return MasterData.SalesmanRow.idProperty; };
            SalesmanDialog.prototype.getLocalTextPrefix = function () { return MasterData.SalesmanRow.localTextPrefix; };
            SalesmanDialog.prototype.getNameProperty = function () { return MasterData.SalesmanRow.nameProperty; };
            SalesmanDialog.prototype.getService = function () { return MasterData.SalesmanService.baseUrl; };
            SalesmanDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], SalesmanDialog);
            return SalesmanDialog;
        }(Serenity.EntityDialog));
        MasterData.SalesmanDialog = SalesmanDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SalesmanGrid = /** @class */ (function (_super) {
            __extends(SalesmanGrid, _super);
            function SalesmanGrid(container) {
                return _super.call(this, container) || this;
            }
            SalesmanGrid.prototype.getColumnsKey = function () { return 'MasterData.Salesman'; };
            SalesmanGrid.prototype.getDialogType = function () { return MasterData.SalesmanDialog; };
            SalesmanGrid.prototype.getIdProperty = function () { return MasterData.SalesmanRow.idProperty; };
            SalesmanGrid.prototype.getLocalTextPrefix = function () { return MasterData.SalesmanRow.localTextPrefix; };
            SalesmanGrid.prototype.getService = function () { return MasterData.SalesmanService.baseUrl; };
            SalesmanGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SalesmanGrid);
            return SalesmanGrid;
        }(Serenity.EntityGrid));
        MasterData.SalesmanGrid = SalesmanGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ShipViaCodeDialog = /** @class */ (function (_super) {
            __extends(ShipViaCodeDialog, _super);
            function ShipViaCodeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.ShipViaCodeForm(_this.idPrefix);
                return _this;
            }
            ShipViaCodeDialog.prototype.getFormKey = function () { return MasterData.ShipViaCodeForm.formKey; };
            ShipViaCodeDialog.prototype.getIdProperty = function () { return MasterData.ShipViaCodeRow.idProperty; };
            ShipViaCodeDialog.prototype.getLocalTextPrefix = function () { return MasterData.ShipViaCodeRow.localTextPrefix; };
            ShipViaCodeDialog.prototype.getNameProperty = function () { return MasterData.ShipViaCodeRow.nameProperty; };
            ShipViaCodeDialog.prototype.getService = function () { return MasterData.ShipViaCodeService.baseUrl; };
            ShipViaCodeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], ShipViaCodeDialog);
            return ShipViaCodeDialog;
        }(Serenity.EntityDialog));
        MasterData.ShipViaCodeDialog = ShipViaCodeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var ShipViaCodeGrid = /** @class */ (function (_super) {
            __extends(ShipViaCodeGrid, _super);
            function ShipViaCodeGrid(container) {
                return _super.call(this, container) || this;
            }
            ShipViaCodeGrid.prototype.getColumnsKey = function () { return 'MasterData.ShipViaCode'; };
            ShipViaCodeGrid.prototype.getDialogType = function () { return MasterData.ShipViaCodeDialog; };
            ShipViaCodeGrid.prototype.getIdProperty = function () { return MasterData.ShipViaCodeRow.idProperty; };
            ShipViaCodeGrid.prototype.getLocalTextPrefix = function () { return MasterData.ShipViaCodeRow.localTextPrefix; };
            ShipViaCodeGrid.prototype.getService = function () { return MasterData.ShipViaCodeService.baseUrl; };
            ShipViaCodeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ShipViaCodeGrid);
            return ShipViaCodeGrid;
        }(Serenity.EntityGrid));
        MasterData.ShipViaCodeGrid = ShipViaCodeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SizeDialog = /** @class */ (function (_super) {
            __extends(SizeDialog, _super);
            function SizeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.SizeForm(_this.idPrefix);
                return _this;
            }
            SizeDialog.prototype.getFormKey = function () { return MasterData.SizeForm.formKey; };
            SizeDialog.prototype.getIdProperty = function () { return MasterData.SizeRow.idProperty; };
            SizeDialog.prototype.getLocalTextPrefix = function () { return MasterData.SizeRow.localTextPrefix; };
            SizeDialog.prototype.getNameProperty = function () { return MasterData.SizeRow.nameProperty; };
            SizeDialog.prototype.getService = function () { return MasterData.SizeService.baseUrl; };
            SizeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], SizeDialog);
            return SizeDialog;
        }(Serenity.EntityDialog));
        MasterData.SizeDialog = SizeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var SizeGrid = /** @class */ (function (_super) {
            __extends(SizeGrid, _super);
            function SizeGrid(container) {
                return _super.call(this, container) || this;
            }
            SizeGrid.prototype.getColumnsKey = function () { return 'MasterData.Size'; };
            SizeGrid.prototype.getDialogType = function () { return MasterData.SizeDialog; };
            SizeGrid.prototype.getIdProperty = function () { return MasterData.SizeRow.idProperty; };
            SizeGrid.prototype.getLocalTextPrefix = function () { return MasterData.SizeRow.localTextPrefix; };
            SizeGrid.prototype.getService = function () { return MasterData.SizeService.baseUrl; };
            SizeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SizeGrid);
            return SizeGrid;
        }(Serenity.EntityGrid));
        MasterData.SizeGrid = SizeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var StyleDialog = /** @class */ (function (_super) {
            __extends(StyleDialog, _super);
            function StyleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.StyleForm(_this.idPrefix);
                return _this;
            }
            StyleDialog.prototype.getFormKey = function () { return MasterData.StyleForm.formKey; };
            StyleDialog.prototype.getIdProperty = function () { return MasterData.StyleRow.idProperty; };
            StyleDialog.prototype.getLocalTextPrefix = function () { return MasterData.StyleRow.localTextPrefix; };
            StyleDialog.prototype.getNameProperty = function () { return MasterData.StyleRow.nameProperty; };
            StyleDialog.prototype.getService = function () { return MasterData.StyleService.baseUrl; };
            StyleDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], StyleDialog);
            return StyleDialog;
        }(Serenity.EntityDialog));
        MasterData.StyleDialog = StyleDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var StyleGrid = /** @class */ (function (_super) {
            __extends(StyleGrid, _super);
            function StyleGrid(container) {
                return _super.call(this, container) || this;
            }
            StyleGrid.prototype.getColumnsKey = function () { return 'MasterData.Style'; };
            StyleGrid.prototype.getDialogType = function () { return MasterData.StyleDialog; };
            StyleGrid.prototype.getIdProperty = function () { return MasterData.StyleRow.idProperty; };
            StyleGrid.prototype.getLocalTextPrefix = function () { return MasterData.StyleRow.localTextPrefix; };
            StyleGrid.prototype.getService = function () { return MasterData.StyleService.baseUrl; };
            StyleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], StyleGrid);
            return StyleGrid;
        }(Serenity.EntityGrid));
        MasterData.StyleGrid = StyleGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabDetailDialog = /** @class */ (function (_super) {
            __extends(TabDetailDialog, _super);
            function TabDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.TabDetailForm(_this.idPrefix);
                return _this;
            }
            TabDetailDialog.prototype.getFormKey = function () { return MasterData.TabDetailForm.formKey; };
            TabDetailDialog.prototype.getIdProperty = function () { return MasterData.TabDetailRow.idProperty; };
            TabDetailDialog.prototype.getLocalTextPrefix = function () { return MasterData.TabDetailRow.localTextPrefix; };
            TabDetailDialog.prototype.getNameProperty = function () { return MasterData.TabDetailRow.nameProperty; };
            TabDetailDialog.prototype.getService = function () { return MasterData.TabDetailService.baseUrl; };
            TabDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], TabDetailDialog);
            return TabDetailDialog;
        }(Serenity.EntityDialog));
        MasterData.TabDetailDialog = TabDetailDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabDetailGrid = /** @class */ (function (_super) {
            __extends(TabDetailGrid, _super);
            function TabDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            TabDetailGrid.prototype.getColumnsKey = function () { return 'MasterData.TabDetail'; };
            TabDetailGrid.prototype.getDialogType = function () { return MasterData.TabDetailDialog; };
            TabDetailGrid.prototype.getIdProperty = function () { return MasterData.TabDetailRow.idProperty; };
            TabDetailGrid.prototype.getLocalTextPrefix = function () { return MasterData.TabDetailRow.localTextPrefix; };
            TabDetailGrid.prototype.getService = function () { return MasterData.TabDetailService.baseUrl; };
            TabDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TabDetailGrid);
            return TabDetailGrid;
        }(Serenity.EntityGrid));
        MasterData.TabDetailGrid = TabDetailGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabDialog = /** @class */ (function (_super) {
            __extends(TabDialog, _super);
            function TabDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.TabForm(_this.idPrefix);
                return _this;
            }
            TabDialog.prototype.getFormKey = function () { return MasterData.TabForm.formKey; };
            TabDialog.prototype.getIdProperty = function () { return MasterData.TabRow.idProperty; };
            TabDialog.prototype.getLocalTextPrefix = function () { return MasterData.TabRow.localTextPrefix; };
            TabDialog.prototype.getNameProperty = function () { return MasterData.TabRow.nameProperty; };
            TabDialog.prototype.getService = function () { return MasterData.TabService.baseUrl; };
            TabDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], TabDialog);
            return TabDialog;
        }(Serenity.EntityDialog));
        MasterData.TabDialog = TabDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TabGrid = /** @class */ (function (_super) {
            __extends(TabGrid, _super);
            function TabGrid(container) {
                return _super.call(this, container) || this;
            }
            TabGrid.prototype.getColumnsKey = function () { return 'MasterData.Tab'; };
            TabGrid.prototype.getDialogType = function () { return MasterData.TabDialog; };
            TabGrid.prototype.getIdProperty = function () { return MasterData.TabRow.idProperty; };
            TabGrid.prototype.getLocalTextPrefix = function () { return MasterData.TabRow.localTextPrefix; };
            TabGrid.prototype.getService = function () { return MasterData.TabService.baseUrl; };
            TabGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TabGrid);
            return TabGrid;
        }(Serenity.EntityGrid));
        MasterData.TabGrid = TabGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TextTypeDialog = /** @class */ (function (_super) {
            __extends(TextTypeDialog, _super);
            function TextTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.TextTypeForm(_this.idPrefix);
                return _this;
            }
            TextTypeDialog.prototype.getFormKey = function () { return MasterData.TextTypeForm.formKey; };
            TextTypeDialog.prototype.getIdProperty = function () { return MasterData.TextTypeRow.idProperty; };
            TextTypeDialog.prototype.getLocalTextPrefix = function () { return MasterData.TextTypeRow.localTextPrefix; };
            TextTypeDialog.prototype.getNameProperty = function () { return MasterData.TextTypeRow.nameProperty; };
            TextTypeDialog.prototype.getService = function () { return MasterData.TextTypeService.baseUrl; };
            TextTypeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], TextTypeDialog);
            return TextTypeDialog;
        }(Serenity.EntityDialog));
        MasterData.TextTypeDialog = TextTypeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var TextTypeGrid = /** @class */ (function (_super) {
            __extends(TextTypeGrid, _super);
            function TextTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            TextTypeGrid.prototype.getColumnsKey = function () { return 'MasterData.TextType'; };
            TextTypeGrid.prototype.getDialogType = function () { return MasterData.TextTypeDialog; };
            TextTypeGrid.prototype.getIdProperty = function () { return MasterData.TextTypeRow.idProperty; };
            TextTypeGrid.prototype.getLocalTextPrefix = function () { return MasterData.TextTypeRow.localTextPrefix; };
            TextTypeGrid.prototype.getService = function () { return MasterData.TextTypeService.baseUrl; };
            TextTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], TextTypeGrid);
            return TextTypeGrid;
        }(Serenity.EntityGrid));
        MasterData.TextTypeGrid = TextTypeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var UnitDialog = /** @class */ (function (_super) {
            __extends(UnitDialog, _super);
            function UnitDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.UnitForm(_this.idPrefix);
                return _this;
            }
            UnitDialog.prototype.getFormKey = function () { return MasterData.UnitForm.formKey; };
            UnitDialog.prototype.getIdProperty = function () { return MasterData.UnitRow.idProperty; };
            UnitDialog.prototype.getLocalTextPrefix = function () { return MasterData.UnitRow.localTextPrefix; };
            UnitDialog.prototype.getNameProperty = function () { return MasterData.UnitRow.nameProperty; };
            UnitDialog.prototype.getService = function () { return MasterData.UnitService.baseUrl; };
            UnitDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], UnitDialog);
            return UnitDialog;
        }(Serenity.EntityDialog));
        MasterData.UnitDialog = UnitDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var UnitGrid = /** @class */ (function (_super) {
            __extends(UnitGrid, _super);
            function UnitGrid(container) {
                return _super.call(this, container) || this;
            }
            UnitGrid.prototype.getColumnsKey = function () { return 'MasterData.Unit'; };
            UnitGrid.prototype.getDialogType = function () { return MasterData.UnitDialog; };
            UnitGrid.prototype.getIdProperty = function () { return MasterData.UnitRow.idProperty; };
            UnitGrid.prototype.getLocalTextPrefix = function () { return MasterData.UnitRow.localTextPrefix; };
            UnitGrid.prototype.getService = function () { return MasterData.UnitService.baseUrl; };
            UnitGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            UnitGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            UnitGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], UnitGrid);
            return UnitGrid;
        }(Serenity.EntityGrid));
        MasterData.UnitGrid = UnitGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorControlGrid = /** @class */ (function (_super) {
            __extends(VendorControlGrid, _super);
            function VendorControlGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorControlGrid.prototype.getColumnsKey = function () { return 'Enterprise.VendorControl'; };
            VendorControlGrid.prototype.getDialogType = function () { return Enterprise.VendorDialog; };
            VendorControlGrid.prototype.getIdProperty = function () { return Enterprise.VendorRow.idProperty; };
            VendorControlGrid.prototype.getLocalTextPrefix = function () { return Enterprise.VendorRow.localTextPrefix; };
            VendorControlGrid.prototype.getService = function () { return Enterprise.VendorService.baseUrl; };
            VendorControlGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            VendorControlGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            VendorControlGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorControlGrid);
            return VendorControlGrid;
        }(Serenity.EntityGrid));
        Enterprise.VendorControlGrid = VendorControlGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorDialog = /** @class */ (function (_super) {
            __extends(VendorDialog, _super);
            function VendorDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Enterprise.VendorForm(_this.idPrefix);
                return _this;
            }
            VendorDialog.prototype.getFormKey = function () { return Enterprise.VendorForm.formKey; };
            VendorDialog.prototype.getIdProperty = function () { return Enterprise.VendorRow.idProperty; };
            VendorDialog.prototype.getLocalTextPrefix = function () { return Enterprise.VendorRow.localTextPrefix; };
            VendorDialog.prototype.getNameProperty = function () { return Enterprise.VendorRow.nameProperty; };
            VendorDialog.prototype.getService = function () { return Enterprise.VendorService.baseUrl; };
            VendorDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], VendorDialog);
            return VendorDialog;
        }(Serenity.EntityDialog));
        Enterprise.VendorDialog = VendorDialog;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorGrid = /** @class */ (function (_super) {
            __extends(VendorGrid, _super);
            function VendorGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorGrid.prototype.getColumnsKey = function () { return 'Enterprise.Vendor'; };
            VendorGrid.prototype.getDialogType = function () { return Enterprise.VendorDialog; };
            VendorGrid.prototype.getIdProperty = function () { return Enterprise.VendorRow.idProperty; };
            VendorGrid.prototype.getLocalTextPrefix = function () { return Enterprise.VendorRow.localTextPrefix; };
            VendorGrid.prototype.getService = function () { return Enterprise.VendorService.baseUrl; };
            VendorGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            VendorGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            VendorGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorGrid);
            return VendorGrid;
        }(Serenity.EntityGrid));
        Enterprise.VendorGrid = VendorGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorGroupDialog = /** @class */ (function (_super) {
            __extends(VendorGroupDialog, _super);
            function VendorGroupDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Enterprise.VendorGroupForm(_this.idPrefix);
                return _this;
            }
            VendorGroupDialog.prototype.getFormKey = function () { return Enterprise.VendorGroupForm.formKey; };
            VendorGroupDialog.prototype.getIdProperty = function () { return Enterprise.VendorGroupRow.idProperty; };
            VendorGroupDialog.prototype.getLocalTextPrefix = function () { return Enterprise.VendorGroupRow.localTextPrefix; };
            VendorGroupDialog.prototype.getNameProperty = function () { return Enterprise.VendorGroupRow.nameProperty; };
            VendorGroupDialog.prototype.getService = function () { return Enterprise.VendorGroupService.baseUrl; };
            VendorGroupDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VendorGroupDialog);
            return VendorGroupDialog;
        }(Serenity.EntityDialog));
        Enterprise.VendorGroupDialog = VendorGroupDialog;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var VendorGroupGrid = /** @class */ (function (_super) {
            __extends(VendorGroupGrid, _super);
            function VendorGroupGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorGroupGrid.prototype.getColumnsKey = function () { return 'Enterprise.VendorGroup'; };
            VendorGroupGrid.prototype.getDialogType = function () { return Enterprise.VendorGroupDialog; };
            VendorGroupGrid.prototype.getIdProperty = function () { return Enterprise.VendorGroupRow.idProperty; };
            VendorGroupGrid.prototype.getLocalTextPrefix = function () { return Enterprise.VendorGroupRow.localTextPrefix; };
            VendorGroupGrid.prototype.getService = function () { return Enterprise.VendorGroupService.baseUrl; };
            VendorGroupGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            VendorGroupGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            VendorGroupGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorGroupGrid);
            return VendorGroupGrid;
        }(Serenity.EntityGrid));
        Enterprise.VendorGroupGrid = VendorGroupGrid;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var VoucherTypeDialog = /** @class */ (function (_super) {
            __extends(VoucherTypeDialog, _super);
            function VoucherTypeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.VoucherTypeForm(_this.idPrefix);
                return _this;
            }
            VoucherTypeDialog.prototype.getFormKey = function () { return MasterData.VoucherTypeForm.formKey; };
            VoucherTypeDialog.prototype.getIdProperty = function () { return MasterData.VoucherTypeRow.idProperty; };
            VoucherTypeDialog.prototype.getLocalTextPrefix = function () { return MasterData.VoucherTypeRow.localTextPrefix; };
            VoucherTypeDialog.prototype.getNameProperty = function () { return MasterData.VoucherTypeRow.nameProperty; };
            VoucherTypeDialog.prototype.getService = function () { return MasterData.VoucherTypeService.baseUrl; };
            VoucherTypeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VoucherTypeDialog);
            return VoucherTypeDialog;
        }(Serenity.EntityDialog));
        MasterData.VoucherTypeDialog = VoucherTypeDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var VoucherTypeGrid = /** @class */ (function (_super) {
            __extends(VoucherTypeGrid, _super);
            function VoucherTypeGrid(container) {
                return _super.call(this, container) || this;
            }
            VoucherTypeGrid.prototype.getColumnsKey = function () { return 'MasterData.VoucherType'; };
            VoucherTypeGrid.prototype.getDialogType = function () { return MasterData.VoucherTypeDialog; };
            VoucherTypeGrid.prototype.getIdProperty = function () { return MasterData.VoucherTypeRow.idProperty; };
            VoucherTypeGrid.prototype.getLocalTextPrefix = function () { return MasterData.VoucherTypeRow.localTextPrefix; };
            VoucherTypeGrid.prototype.getService = function () { return MasterData.VoucherTypeService.baseUrl; };
            VoucherTypeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VoucherTypeGrid);
            return VoucherTypeGrid;
        }(Serenity.EntityGrid));
        MasterData.VoucherTypeGrid = VoucherTypeGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkCentreDialog = /** @class */ (function (_super) {
            __extends(WorkCentreDialog, _super);
            function WorkCentreDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.WorkCentreForm(_this.idPrefix);
                return _this;
            }
            WorkCentreDialog.prototype.getFormKey = function () { return MasterData.WorkCentreForm.formKey; };
            WorkCentreDialog.prototype.getIdProperty = function () { return MasterData.WorkCentreRow.idProperty; };
            WorkCentreDialog.prototype.getLocalTextPrefix = function () { return MasterData.WorkCentreRow.localTextPrefix; };
            WorkCentreDialog.prototype.getNameProperty = function () { return MasterData.WorkCentreRow.nameProperty; };
            WorkCentreDialog.prototype.getService = function () { return MasterData.WorkCentreService.baseUrl; };
            WorkCentreDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], WorkCentreDialog);
            return WorkCentreDialog;
        }(Serenity.EntityDialog));
        MasterData.WorkCentreDialog = WorkCentreDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkCentreGrid = /** @class */ (function (_super) {
            __extends(WorkCentreGrid, _super);
            function WorkCentreGrid(container) {
                return _super.call(this, container) || this;
            }
            WorkCentreGrid.prototype.getColumnsKey = function () { return 'MasterData.WorkCentre'; };
            WorkCentreGrid.prototype.getDialogType = function () { return MasterData.WorkCentreDialog; };
            WorkCentreGrid.prototype.getIdProperty = function () { return MasterData.WorkCentreRow.idProperty; };
            WorkCentreGrid.prototype.getLocalTextPrefix = function () { return MasterData.WorkCentreRow.localTextPrefix; };
            WorkCentreGrid.prototype.getService = function () { return MasterData.WorkCentreService.baseUrl; };
            WorkCentreGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            WorkCentreGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            WorkCentreGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], WorkCentreGrid);
            return WorkCentreGrid;
        }(Serenity.EntityGrid));
        MasterData.WorkCentreGrid = WorkCentreGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkflowDialog = /** @class */ (function (_super) {
            __extends(WorkflowDialog, _super);
            function WorkflowDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new MasterData.WorkflowForm(_this.idPrefix);
                return _this;
            }
            WorkflowDialog.prototype.getFormKey = function () { return MasterData.WorkflowForm.formKey; };
            WorkflowDialog.prototype.getIdProperty = function () { return MasterData.WorkflowRow.idProperty; };
            WorkflowDialog.prototype.getLocalTextPrefix = function () { return MasterData.WorkflowRow.localTextPrefix; };
            WorkflowDialog.prototype.getNameProperty = function () { return MasterData.WorkflowRow.nameProperty; };
            WorkflowDialog.prototype.getService = function () { return MasterData.WorkflowService.baseUrl; };
            WorkflowDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], WorkflowDialog);
            return WorkflowDialog;
        }(Serenity.EntityDialog));
        MasterData.WorkflowDialog = WorkflowDialog;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var MasterData;
    (function (MasterData) {
        var WorkflowGrid = /** @class */ (function (_super) {
            __extends(WorkflowGrid, _super);
            function WorkflowGrid(container) {
                return _super.call(this, container) || this;
            }
            WorkflowGrid.prototype.getColumnsKey = function () { return 'MasterData.Workflow'; };
            WorkflowGrid.prototype.getDialogType = function () { return MasterData.WorkflowDialog; };
            WorkflowGrid.prototype.getIdProperty = function () { return MasterData.WorkflowRow.idProperty; };
            WorkflowGrid.prototype.getLocalTextPrefix = function () { return MasterData.WorkflowRow.localTextPrefix; };
            WorkflowGrid.prototype.getService = function () { return MasterData.WorkflowService.baseUrl; };
            WorkflowGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], WorkflowGrid);
            return WorkflowGrid;
        }(Serenity.EntityGrid));
        MasterData.WorkflowGrid = WorkflowGrid;
    })(MasterData = Matrix.MasterData || (Matrix.MasterData = {}));
})(Matrix || (Matrix = {}));
// <reference path="../../../Scripts/site/Application.Web.d.ts" />  
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        //import LoginRequest = Matrix.Membership.LoginRequest;
        //import LoginForm = Matrix.Membership.LoginForm;
        var LoginPanel = /** @class */ (function (_super) {
            __extends(LoginPanel, _super);
            function LoginPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.LoginForm(_this.idPrefix);
                _this.byId('LoginButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/Login'),
                        request: request,
                        onSuccess: function (response) {
                            var q = Q.parseQueryString();
                            var returnUrl = q['returnUrl'] || q['ReturnUrl'];
                            if (returnUrl) {
                                window.location.href = returnUrl;
                            }
                            else {
                                window.location.href = Q.resolveUrl('~/');
                            }
                        }
                    });
                });
                return _this;
            }
            LoginPanel.prototype.getFormKey = function () {
                return Membership.LoginForm.formKey;
            };
            LoginPanel.prototype.getTemplateName = function () {
                return 'LoginPanel';
            };
            LoginPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], LoginPanel);
            return LoginPanel;
        }(Serenity.PropertyPanel));
        Membership.LoginPanel = LoginPanel;
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomDialog = /** @class */ (function (_super) {
            __extends(BomDialog, _super);
            function BomDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Production.BomForm(_this.idPrefix);
                return _this;
            }
            BomDialog.prototype.getFormKey = function () { return Production.BomForm.formKey; };
            BomDialog.prototype.getIdProperty = function () { return Production.BomRow.idProperty; };
            BomDialog.prototype.getLocalTextPrefix = function () { return Production.BomRow.localTextPrefix; };
            BomDialog.prototype.getNameProperty = function () { return Production.BomRow.nameProperty; };
            BomDialog.prototype.getService = function () { return Production.BomService.baseUrl; };
            BomDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], BomDialog);
            return BomDialog;
        }(Serenity.EntityDialog));
        Production.BomDialog = BomDialog;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomGrid = /** @class */ (function (_super) {
            __extends(BomGrid, _super);
            function BomGrid(container) {
                return _super.call(this, container) || this;
            }
            BomGrid.prototype.getColumnsKey = function () { return 'Production.Bom'; };
            BomGrid.prototype.getDialogType = function () { return Production.BomDialog; };
            BomGrid.prototype.getIdProperty = function () { return Production.BomRow.idProperty; };
            BomGrid.prototype.getLocalTextPrefix = function () { return Production.BomRow.localTextPrefix; };
            BomGrid.prototype.getService = function () { return Production.BomService.baseUrl; };
            BomGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BomGrid);
            return BomGrid;
        }(Serenity.EntityGrid));
        Production.BomGrid = BomGrid;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomMaterialDialog = /** @class */ (function (_super) {
            __extends(BomMaterialDialog, _super);
            function BomMaterialDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Production.BomMaterialForm(_this.idPrefix);
                return _this;
            }
            BomMaterialDialog.prototype.getFormKey = function () { return Production.BomMaterialForm.formKey; };
            BomMaterialDialog.prototype.getIdProperty = function () { return Production.BomMaterialRow.idProperty; };
            BomMaterialDialog.prototype.getLocalTextPrefix = function () { return Production.BomMaterialRow.localTextPrefix; };
            BomMaterialDialog.prototype.getNameProperty = function () { return Production.BomMaterialRow.nameProperty; };
            BomMaterialDialog.prototype.getService = function () { return Production.BomMaterialService.baseUrl; };
            BomMaterialDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], BomMaterialDialog);
            return BomMaterialDialog;
        }(Serenity.EntityDialog));
        Production.BomMaterialDialog = BomMaterialDialog;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomMaterialGrid = /** @class */ (function (_super) {
            __extends(BomMaterialGrid, _super);
            function BomMaterialGrid(container) {
                return _super.call(this, container) || this;
            }
            BomMaterialGrid.prototype.getColumnsKey = function () { return 'Production.BomMaterial'; };
            BomMaterialGrid.prototype.getDialogType = function () { return Production.BomMaterialDialog; };
            BomMaterialGrid.prototype.getIdProperty = function () { return Production.BomMaterialRow.idProperty; };
            BomMaterialGrid.prototype.getLocalTextPrefix = function () { return Production.BomMaterialRow.localTextPrefix; };
            BomMaterialGrid.prototype.getService = function () { return Production.BomMaterialService.baseUrl; };
            BomMaterialGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BomMaterialGrid);
            return BomMaterialGrid;
        }(Serenity.EntityGrid));
        Production.BomMaterialGrid = BomMaterialGrid;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomRoutingStepDialog = /** @class */ (function (_super) {
            __extends(BomRoutingStepDialog, _super);
            function BomRoutingStepDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Production.BomRoutingStepForm(_this.idPrefix);
                return _this;
            }
            BomRoutingStepDialog.prototype.getFormKey = function () { return Production.BomRoutingStepForm.formKey; };
            BomRoutingStepDialog.prototype.getIdProperty = function () { return Production.BomRoutingStepRow.idProperty; };
            BomRoutingStepDialog.prototype.getLocalTextPrefix = function () { return Production.BomRoutingStepRow.localTextPrefix; };
            BomRoutingStepDialog.prototype.getNameProperty = function () { return Production.BomRoutingStepRow.nameProperty; };
            BomRoutingStepDialog.prototype.getService = function () { return Production.BomRoutingStepService.baseUrl; };
            BomRoutingStepDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], BomRoutingStepDialog);
            return BomRoutingStepDialog;
        }(Serenity.EntityDialog));
        Production.BomRoutingStepDialog = BomRoutingStepDialog;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var BomRoutingStepGrid = /** @class */ (function (_super) {
            __extends(BomRoutingStepGrid, _super);
            function BomRoutingStepGrid(container) {
                return _super.call(this, container) || this;
            }
            BomRoutingStepGrid.prototype.getColumnsKey = function () { return 'Production.BomRoutingStep'; };
            BomRoutingStepGrid.prototype.getDialogType = function () { return Production.BomRoutingStepDialog; };
            BomRoutingStepGrid.prototype.getIdProperty = function () { return Production.BomRoutingStepRow.idProperty; };
            BomRoutingStepGrid.prototype.getLocalTextPrefix = function () { return Production.BomRoutingStepRow.localTextPrefix; };
            BomRoutingStepGrid.prototype.getService = function () { return Production.BomRoutingStepService.baseUrl; };
            BomRoutingStepGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], BomRoutingStepGrid);
            return BomRoutingStepGrid;
        }(Serenity.EntityGrid));
        Production.BomRoutingStepGrid = BomRoutingStepGrid;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderDialog = /** @class */ (function (_super) {
            __extends(JobOrderDialog, _super);
            function JobOrderDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Production.JobOrderForm(_this.idPrefix);
                return _this;
            }
            JobOrderDialog.prototype.getFormKey = function () { return Production.JobOrderForm.formKey; };
            JobOrderDialog.prototype.getIdProperty = function () { return Production.JobOrderRow.idProperty; };
            JobOrderDialog.prototype.getLocalTextPrefix = function () { return Production.JobOrderRow.localTextPrefix; };
            JobOrderDialog.prototype.getNameProperty = function () { return Production.JobOrderRow.nameProperty; };
            JobOrderDialog.prototype.getService = function () { return Production.JobOrderService.baseUrl; };
            JobOrderDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], JobOrderDialog);
            return JobOrderDialog;
        }(Serenity.EntityDialog));
        Production.JobOrderDialog = JobOrderDialog;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderGrid = /** @class */ (function (_super) {
            __extends(JobOrderGrid, _super);
            function JobOrderGrid(container) {
                return _super.call(this, container) || this;
            }
            JobOrderGrid.prototype.getColumnsKey = function () { return 'Production.JobOrder'; };
            JobOrderGrid.prototype.getDialogType = function () { return Production.JobOrderDialog; };
            JobOrderGrid.prototype.getIdProperty = function () { return Production.JobOrderRow.idProperty; };
            JobOrderGrid.prototype.getLocalTextPrefix = function () { return Production.JobOrderRow.localTextPrefix; };
            JobOrderGrid.prototype.getService = function () { return Production.JobOrderService.baseUrl; };
            JobOrderGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], JobOrderGrid);
            return JobOrderGrid;
        }(Serenity.EntityGrid));
        Production.JobOrderGrid = JobOrderGrid;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderMaterialDialog = /** @class */ (function (_super) {
            __extends(JobOrderMaterialDialog, _super);
            function JobOrderMaterialDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Production.JobOrderMaterialForm(_this.idPrefix);
                return _this;
            }
            JobOrderMaterialDialog.prototype.getFormKey = function () { return Production.JobOrderMaterialForm.formKey; };
            JobOrderMaterialDialog.prototype.getIdProperty = function () { return Production.JobOrderMaterialRow.idProperty; };
            JobOrderMaterialDialog.prototype.getLocalTextPrefix = function () { return Production.JobOrderMaterialRow.localTextPrefix; };
            JobOrderMaterialDialog.prototype.getNameProperty = function () { return Production.JobOrderMaterialRow.nameProperty; };
            JobOrderMaterialDialog.prototype.getService = function () { return Production.JobOrderMaterialService.baseUrl; };
            JobOrderMaterialDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], JobOrderMaterialDialog);
            return JobOrderMaterialDialog;
        }(Serenity.EntityDialog));
        Production.JobOrderMaterialDialog = JobOrderMaterialDialog;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderMaterialGrid = /** @class */ (function (_super) {
            __extends(JobOrderMaterialGrid, _super);
            function JobOrderMaterialGrid(container) {
                return _super.call(this, container) || this;
            }
            JobOrderMaterialGrid.prototype.getColumnsKey = function () { return 'Production.JobOrderMaterial'; };
            JobOrderMaterialGrid.prototype.getDialogType = function () { return Production.JobOrderMaterialDialog; };
            JobOrderMaterialGrid.prototype.getIdProperty = function () { return Production.JobOrderMaterialRow.idProperty; };
            JobOrderMaterialGrid.prototype.getLocalTextPrefix = function () { return Production.JobOrderMaterialRow.localTextPrefix; };
            JobOrderMaterialGrid.prototype.getService = function () { return Production.JobOrderMaterialService.baseUrl; };
            JobOrderMaterialGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], JobOrderMaterialGrid);
            return JobOrderMaterialGrid;
        }(Serenity.EntityGrid));
        Production.JobOrderMaterialGrid = JobOrderMaterialGrid;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderRoutingStepDialog = /** @class */ (function (_super) {
            __extends(JobOrderRoutingStepDialog, _super);
            function JobOrderRoutingStepDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Production.JobOrderRoutingStepForm(_this.idPrefix);
                return _this;
            }
            JobOrderRoutingStepDialog.prototype.getFormKey = function () { return Production.JobOrderRoutingStepForm.formKey; };
            JobOrderRoutingStepDialog.prototype.getIdProperty = function () { return Production.JobOrderRoutingStepRow.idProperty; };
            JobOrderRoutingStepDialog.prototype.getLocalTextPrefix = function () { return Production.JobOrderRoutingStepRow.localTextPrefix; };
            JobOrderRoutingStepDialog.prototype.getNameProperty = function () { return Production.JobOrderRoutingStepRow.nameProperty; };
            JobOrderRoutingStepDialog.prototype.getService = function () { return Production.JobOrderRoutingStepService.baseUrl; };
            JobOrderRoutingStepDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], JobOrderRoutingStepDialog);
            return JobOrderRoutingStepDialog;
        }(Serenity.EntityDialog));
        Production.JobOrderRoutingStepDialog = JobOrderRoutingStepDialog;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Production;
    (function (Production) {
        var JobOrderRoutingStepGrid = /** @class */ (function (_super) {
            __extends(JobOrderRoutingStepGrid, _super);
            function JobOrderRoutingStepGrid(container) {
                return _super.call(this, container) || this;
            }
            JobOrderRoutingStepGrid.prototype.getColumnsKey = function () { return 'Production.JobOrderRoutingStep'; };
            JobOrderRoutingStepGrid.prototype.getDialogType = function () { return Production.JobOrderRoutingStepDialog; };
            JobOrderRoutingStepGrid.prototype.getIdProperty = function () { return Production.JobOrderRoutingStepRow.idProperty; };
            JobOrderRoutingStepGrid.prototype.getLocalTextPrefix = function () { return Production.JobOrderRoutingStepRow.localTextPrefix; };
            JobOrderRoutingStepGrid.prototype.getService = function () { return Production.JobOrderRoutingStepService.baseUrl; };
            JobOrderRoutingStepGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], JobOrderRoutingStepGrid);
            return JobOrderRoutingStepGrid;
        }(Serenity.EntityGrid));
        Production.JobOrderRoutingStepGrid = JobOrderRoutingStepGrid;
    })(Production = Matrix.Production || (Matrix.Production = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionDetailDialog = /** @class */ (function (_super) {
            __extends(PurchaseInspectionDetailDialog, _super);
            function PurchaseInspectionDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseInspectionDetailForm(_this.idPrefix);
                return _this;
            }
            PurchaseInspectionDetailDialog.prototype.getFormKey = function () { return Purchasing.PurchaseInspectionDetailForm.formKey; };
            PurchaseInspectionDetailDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseInspectionDetailRow.idProperty; };
            PurchaseInspectionDetailDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseInspectionDetailRow.localTextPrefix; };
            PurchaseInspectionDetailDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseInspectionDetailRow.nameProperty; };
            PurchaseInspectionDetailDialog.prototype.getService = function () { return Purchasing.PurchaseInspectionDetailService.baseUrl; };
            PurchaseInspectionDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PurchaseInspectionDetailDialog);
            return PurchaseInspectionDetailDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseInspectionDetailDialog = PurchaseInspectionDetailDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionDetailGrid = /** @class */ (function (_super) {
            __extends(PurchaseInspectionDetailGrid, _super);
            function PurchaseInspectionDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseInspectionDetailGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseInspectionDetail'; };
            PurchaseInspectionDetailGrid.prototype.getDialogType = function () { return Purchasing.PurchaseInspectionDetailDialog; };
            PurchaseInspectionDetailGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseInspectionDetailRow.idProperty; };
            PurchaseInspectionDetailGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseInspectionDetailRow.localTextPrefix; };
            PurchaseInspectionDetailGrid.prototype.getService = function () { return Purchasing.PurchaseInspectionDetailService.baseUrl; };
            PurchaseInspectionDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseInspectionDetailGrid);
            return PurchaseInspectionDetailGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseInspectionDetailGrid = PurchaseInspectionDetailGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionDialog = /** @class */ (function (_super) {
            __extends(PurchaseInspectionDialog, _super);
            function PurchaseInspectionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseInspectionForm(_this.idPrefix);
                return _this;
            }
            PurchaseInspectionDialog.prototype.getFormKey = function () { return Purchasing.PurchaseInspectionForm.formKey; };
            PurchaseInspectionDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseInspectionRow.idProperty; };
            PurchaseInspectionDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseInspectionRow.localTextPrefix; };
            PurchaseInspectionDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseInspectionRow.nameProperty; };
            PurchaseInspectionDialog.prototype.getService = function () { return Purchasing.PurchaseInspectionService.baseUrl; };
            PurchaseInspectionDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PurchaseInspectionDialog);
            return PurchaseInspectionDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseInspectionDialog = PurchaseInspectionDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionGrid = /** @class */ (function (_super) {
            __extends(PurchaseInspectionGrid, _super);
            function PurchaseInspectionGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseInspectionGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseInspection'; };
            PurchaseInspectionGrid.prototype.getDialogType = function () { return Purchasing.PurchaseInspectionDialog; };
            PurchaseInspectionGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseInspectionRow.idProperty; };
            PurchaseInspectionGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseInspectionRow.localTextPrefix; };
            PurchaseInspectionGrid.prototype.getService = function () { return Purchasing.PurchaseInspectionService.baseUrl; };
            PurchaseInspectionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseInspectionGrid);
            return PurchaseInspectionGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseInspectionGrid = PurchaseInspectionGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionInstructionDialog = /** @class */ (function (_super) {
            __extends(PurchaseInspectionInstructionDialog, _super);
            function PurchaseInspectionInstructionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseInspectionInstructionForm(_this.idPrefix);
                return _this;
            }
            PurchaseInspectionInstructionDialog.prototype.getFormKey = function () { return Purchasing.PurchaseInspectionInstructionForm.formKey; };
            PurchaseInspectionInstructionDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseInspectionInstructionRow.idProperty; };
            PurchaseInspectionInstructionDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseInspectionInstructionRow.localTextPrefix; };
            PurchaseInspectionInstructionDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseInspectionInstructionRow.nameProperty; };
            PurchaseInspectionInstructionDialog.prototype.getService = function () { return Purchasing.PurchaseInspectionInstructionService.baseUrl; };
            PurchaseInspectionInstructionDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PurchaseInspectionInstructionDialog);
            return PurchaseInspectionInstructionDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseInspectionInstructionDialog = PurchaseInspectionInstructionDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseInspectionInstructionGrid = /** @class */ (function (_super) {
            __extends(PurchaseInspectionInstructionGrid, _super);
            function PurchaseInspectionInstructionGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseInspectionInstructionGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseInspectionInstruction'; };
            PurchaseInspectionInstructionGrid.prototype.getDialogType = function () { return Purchasing.PurchaseInspectionInstructionDialog; };
            PurchaseInspectionInstructionGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseInspectionInstructionRow.idProperty; };
            PurchaseInspectionInstructionGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseInspectionInstructionRow.localTextPrefix; };
            PurchaseInspectionInstructionGrid.prototype.getService = function () { return Purchasing.PurchaseInspectionInstructionService.baseUrl; };
            PurchaseInspectionInstructionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseInspectionInstructionGrid);
            return PurchaseInspectionInstructionGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseInspectionInstructionGrid = PurchaseInspectionInstructionGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderDetailDialog = /** @class */ (function (_super) {
            __extends(PurchaseOrderDetailDialog, _super);
            function PurchaseOrderDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseOrderDetailForm(_this.idPrefix);
                return _this;
            }
            PurchaseOrderDetailDialog.prototype.getFormKey = function () { return Purchasing.PurchaseOrderDetailForm.formKey; };
            PurchaseOrderDetailDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseOrderDetailRow.idProperty; };
            PurchaseOrderDetailDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseOrderDetailRow.localTextPrefix; };
            PurchaseOrderDetailDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseOrderDetailRow.nameProperty; };
            PurchaseOrderDetailDialog.prototype.getService = function () { return Purchasing.PurchaseOrderDetailService.baseUrl; };
            PurchaseOrderDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            PurchaseOrderDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            PurchaseOrderDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], PurchaseOrderDetailDialog);
            return PurchaseOrderDetailDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseOrderDetailDialog = PurchaseOrderDetailDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderDetailEditor = /** @class */ (function (_super) {
            __extends(PurchaseOrderDetailEditor, _super);
            function PurchaseOrderDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            PurchaseOrderDetailEditor.prototype.getColumnsKey = function () { return "Purchasing.PurchaseOrderDetail"; };
            PurchaseOrderDetailEditor.prototype.getDialogType = function () { return Purchasing.PurchaseOrderDetailDialog; };
            PurchaseOrderDetailEditor.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseOrderDetailRow.localTextPrefix; };
            PurchaseOrderDetailEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            PurchaseOrderDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            PurchaseOrderDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseOrderDetailEditor);
            return PurchaseOrderDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Purchasing.PurchaseOrderDetailEditor = PurchaseOrderDetailEditor;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderDetailGrid = /** @class */ (function (_super) {
            __extends(PurchaseOrderDetailGrid, _super);
            function PurchaseOrderDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseOrderDetailGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseOrderDetail'; };
            PurchaseOrderDetailGrid.prototype.getDialogType = function () { return Purchasing.PurchaseOrderDetailDialog; };
            PurchaseOrderDetailGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseOrderDetailRow.idProperty; };
            PurchaseOrderDetailGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseOrderDetailRow.localTextPrefix; };
            PurchaseOrderDetailGrid.prototype.getService = function () { return Purchasing.PurchaseOrderDetailService.baseUrl; };
            PurchaseOrderDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            PurchaseOrderDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            PurchaseOrderDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            PurchaseOrderDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseOrderDetailGrid);
            return PurchaseOrderDetailGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseOrderDetailGrid = PurchaseOrderDetailGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderDialog = /** @class */ (function (_super) {
            __extends(PurchaseOrderDialog, _super);
            function PurchaseOrderDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseOrderForm(_this.idPrefix);
                return _this;
            }
            PurchaseOrderDialog.prototype.getFormKey = function () { return Purchasing.PurchaseOrderForm.formKey; };
            PurchaseOrderDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseOrderRow.idProperty; };
            PurchaseOrderDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseOrderRow.localTextPrefix; };
            PurchaseOrderDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseOrderRow.nameProperty; };
            PurchaseOrderDialog.prototype.getService = function () { return Purchasing.PurchaseOrderService.baseUrl; };
            PurchaseOrderDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            PurchaseOrderDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            PurchaseOrderDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], PurchaseOrderDialog);
            return PurchaseOrderDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseOrderDialog = PurchaseOrderDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseOrderGrid = /** @class */ (function (_super) {
            __extends(PurchaseOrderGrid, _super);
            function PurchaseOrderGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseOrderGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseOrder'; };
            PurchaseOrderGrid.prototype.getDialogType = function () { return Purchasing.PurchaseOrderDialog; };
            PurchaseOrderGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseOrderRow.idProperty; };
            PurchaseOrderGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseOrderRow.localTextPrefix; };
            PurchaseOrderGrid.prototype.getService = function () { return Purchasing.PurchaseOrderService.baseUrl; };
            PurchaseOrderGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            PurchaseOrderGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            PurchaseOrderGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            PurchaseOrderGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseOrderGrid);
            return PurchaseOrderGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseOrderGrid = PurchaseOrderGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionDetailDialog = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionDetailDialog, _super);
            function PurchaseRequisitionDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseRequisitionDetailForm(_this.idPrefix);
                return _this;
            }
            PurchaseRequisitionDetailDialog.prototype.getFormKey = function () { return Purchasing.PurchaseRequisitionDetailForm.formKey; };
            PurchaseRequisitionDetailDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseRequisitionDetailRow.idProperty; };
            PurchaseRequisitionDetailDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseRequisitionDetailRow.localTextPrefix; };
            PurchaseRequisitionDetailDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseRequisitionDetailRow.nameProperty; };
            PurchaseRequisitionDetailDialog.prototype.getService = function () { return Purchasing.PurchaseRequisitionDetailService.baseUrl; };
            PurchaseRequisitionDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            PurchaseRequisitionDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            PurchaseRequisitionDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], PurchaseRequisitionDetailDialog);
            return PurchaseRequisitionDetailDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseRequisitionDetailDialog = PurchaseRequisitionDetailDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionDetailEditor = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionDetailEditor, _super);
            function PurchaseRequisitionDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            PurchaseRequisitionDetailEditor.prototype.getColumnsKey = function () { return "Purchasing.PurchaseRequisitionDetail"; };
            PurchaseRequisitionDetailEditor.prototype.getDialogType = function () { return Purchasing.PurchaseRequisitionDetailDialog; };
            PurchaseRequisitionDetailEditor.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseRequisitionDetailRow.localTextPrefix; };
            PurchaseRequisitionDetailEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            PurchaseRequisitionDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            PurchaseRequisitionDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseRequisitionDetailEditor);
            return PurchaseRequisitionDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Purchasing.PurchaseRequisitionDetailEditor = PurchaseRequisitionDetailEditor;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionDetailGrid = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionDetailGrid, _super);
            function PurchaseRequisitionDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseRequisitionDetailGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseRequisitionDetail'; };
            PurchaseRequisitionDetailGrid.prototype.getDialogType = function () { return Purchasing.PurchaseRequisitionDetailDialog; };
            PurchaseRequisitionDetailGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseRequisitionDetailRow.idProperty; };
            PurchaseRequisitionDetailGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseRequisitionDetailRow.localTextPrefix; };
            PurchaseRequisitionDetailGrid.prototype.getService = function () { return Purchasing.PurchaseRequisitionDetailService.baseUrl; };
            PurchaseRequisitionDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            PurchaseRequisitionDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            PurchaseRequisitionDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            PurchaseRequisitionDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseRequisitionDetailGrid);
            return PurchaseRequisitionDetailGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseRequisitionDetailGrid = PurchaseRequisitionDetailGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionDialog = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionDialog, _super);
            function PurchaseRequisitionDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseRequisitionForm(_this.idPrefix);
                return _this;
            }
            PurchaseRequisitionDialog.prototype.getFormKey = function () { return Purchasing.PurchaseRequisitionForm.formKey; };
            PurchaseRequisitionDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseRequisitionRow.idProperty; };
            PurchaseRequisitionDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseRequisitionRow.localTextPrefix; };
            PurchaseRequisitionDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseRequisitionRow.nameProperty; };
            PurchaseRequisitionDialog.prototype.getService = function () { return Purchasing.PurchaseRequisitionService.baseUrl; };
            PurchaseRequisitionDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            PurchaseRequisitionDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            PurchaseRequisitionDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], PurchaseRequisitionDialog);
            return PurchaseRequisitionDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseRequisitionDialog = PurchaseRequisitionDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseRequisitionGrid = /** @class */ (function (_super) {
            __extends(PurchaseRequisitionGrid, _super);
            function PurchaseRequisitionGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseRequisitionGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseRequisition'; };
            PurchaseRequisitionGrid.prototype.getDialogType = function () { return Purchasing.PurchaseRequisitionDialog; };
            PurchaseRequisitionGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseRequisitionRow.idProperty; };
            PurchaseRequisitionGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseRequisitionRow.localTextPrefix; };
            PurchaseRequisitionGrid.prototype.getService = function () { return Purchasing.PurchaseRequisitionService.baseUrl; };
            PurchaseRequisitionGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            /*
            When constructing your options, you can use forceFitColumns: true
            var options = {
            enableCellNavigation: true,
            forceFitColumns: true
            };
        
           This will make the columns fill the entire width of your grid div.
    
    
    slickgrid-column-data-autosize
    
    This plug-in is for slickgrid to handle auto size columns based on the header size, data size, cell-formats and max data length.
    
    ######Single column auto size Double click on a column resize handle.
    
    ######All columns auto size Select a cell or row => Ctrl-Shift-a
    
    ######How it works
    
    1.Column will auto fit to given/default max width if cell data width is more than given max width. Slick.AutoColumnSize(100) or default :200
    
    OR
    
    
    2.Column will auto fit to max data width in the row if header width is lesser than data width.
    
    OR
    
    
    3.Column will auto fit to header width if header width is greater than data width.
    
    
    ######Browser <script src="../src/slick.autocolumnsize.js"></script>
    
    ######Bower npm install slickgrid-column-data-autosize
    
    ######Usage
      grid = new Slick.Grid("#myGrid", data, columns, options);
      grid.registerPlugin( new Slick.AutoColumnSize());
      [OR]
      grid.registerPlugin( new Slick.AutoColumnSize(200));
    
    
           */
            PurchaseRequisitionGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                //opt.forceFitColumns = true;
                opt.enableColumnReorder = false;
                return opt;
            };
            //protected createSlickGrid() {
            //    var grid = super.createSlickGrid();
            //    // need to register this plugin for grouping or you'll have errors
            //    this.view.setSummaryOptions({
            //        aggregators: [
            //            new Slick.Aggregators.Avg('UnitPrice'),
            //            new Slick.Aggregators.Sum('UnitsInStock'),
            //            new Slick.Aggregators.Max('UnitsOnOrder'),
            //            new Slick.Aggregators.Avg('ReorderLevel')
            //        ]
            //    });
            //    return grid;
            //}
            PurchaseRequisitionGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                //grid.registerPlugin(new Slick.Data.GroupItemMetadataProvider());
                //grid.registerPlugin(new Slick.AutoColumnSize());
                // *** If you want to make it autoresize when grid is loaded, use: new Slick.AutoColumnSize(true);
                //let autoSize = new Slick.AutoColumnSize(true);
                //grid.registerPlugin(autoSize);
                return grid;
            };
            PurchaseRequisitionGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseRequisitionGrid);
            return PurchaseRequisitionGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseRequisitionGrid = PurchaseRequisitionGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnChargeDialog = /** @class */ (function (_super) {
            __extends(PurchaseReturnChargeDialog, _super);
            function PurchaseReturnChargeDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseReturnChargeForm(_this.idPrefix);
                return _this;
            }
            PurchaseReturnChargeDialog.prototype.getFormKey = function () { return Purchasing.PurchaseReturnChargeForm.formKey; };
            PurchaseReturnChargeDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseReturnChargeRow.idProperty; };
            PurchaseReturnChargeDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseReturnChargeRow.localTextPrefix; };
            PurchaseReturnChargeDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseReturnChargeRow.nameProperty; };
            PurchaseReturnChargeDialog.prototype.getService = function () { return Purchasing.PurchaseReturnChargeService.baseUrl; };
            PurchaseReturnChargeDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PurchaseReturnChargeDialog);
            return PurchaseReturnChargeDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseReturnChargeDialog = PurchaseReturnChargeDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnChargeGrid = /** @class */ (function (_super) {
            __extends(PurchaseReturnChargeGrid, _super);
            function PurchaseReturnChargeGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseReturnChargeGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseReturnCharge'; };
            PurchaseReturnChargeGrid.prototype.getDialogType = function () { return Purchasing.PurchaseReturnChargeDialog; };
            PurchaseReturnChargeGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseReturnChargeRow.idProperty; };
            PurchaseReturnChargeGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseReturnChargeRow.localTextPrefix; };
            PurchaseReturnChargeGrid.prototype.getService = function () { return Purchasing.PurchaseReturnChargeService.baseUrl; };
            PurchaseReturnChargeGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseReturnChargeGrid);
            return PurchaseReturnChargeGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseReturnChargeGrid = PurchaseReturnChargeGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnDetailDialog = /** @class */ (function (_super) {
            __extends(PurchaseReturnDetailDialog, _super);
            function PurchaseReturnDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseReturnDetailForm(_this.idPrefix);
                return _this;
            }
            PurchaseReturnDetailDialog.prototype.getFormKey = function () { return Purchasing.PurchaseReturnDetailForm.formKey; };
            PurchaseReturnDetailDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseReturnDetailRow.idProperty; };
            PurchaseReturnDetailDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseReturnDetailRow.localTextPrefix; };
            PurchaseReturnDetailDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseReturnDetailRow.nameProperty; };
            PurchaseReturnDetailDialog.prototype.getService = function () { return Purchasing.PurchaseReturnDetailService.baseUrl; };
            PurchaseReturnDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PurchaseReturnDetailDialog);
            return PurchaseReturnDetailDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseReturnDetailDialog = PurchaseReturnDetailDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnDetailGrid = /** @class */ (function (_super) {
            __extends(PurchaseReturnDetailGrid, _super);
            function PurchaseReturnDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseReturnDetailGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseReturnDetail'; };
            PurchaseReturnDetailGrid.prototype.getDialogType = function () { return Purchasing.PurchaseReturnDetailDialog; };
            PurchaseReturnDetailGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseReturnDetailRow.idProperty; };
            PurchaseReturnDetailGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseReturnDetailRow.localTextPrefix; };
            PurchaseReturnDetailGrid.prototype.getService = function () { return Purchasing.PurchaseReturnDetailService.baseUrl; };
            PurchaseReturnDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseReturnDetailGrid);
            return PurchaseReturnDetailGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseReturnDetailGrid = PurchaseReturnDetailGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnDialog = /** @class */ (function (_super) {
            __extends(PurchaseReturnDialog, _super);
            function PurchaseReturnDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.PurchaseReturnForm(_this.idPrefix);
                return _this;
            }
            PurchaseReturnDialog.prototype.getFormKey = function () { return Purchasing.PurchaseReturnForm.formKey; };
            PurchaseReturnDialog.prototype.getIdProperty = function () { return Purchasing.PurchaseReturnRow.idProperty; };
            PurchaseReturnDialog.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseReturnRow.localTextPrefix; };
            PurchaseReturnDialog.prototype.getNameProperty = function () { return Purchasing.PurchaseReturnRow.nameProperty; };
            PurchaseReturnDialog.prototype.getService = function () { return Purchasing.PurchaseReturnService.baseUrl; };
            PurchaseReturnDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], PurchaseReturnDialog);
            return PurchaseReturnDialog;
        }(Serenity.EntityDialog));
        Purchasing.PurchaseReturnDialog = PurchaseReturnDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var PurchaseReturnGrid = /** @class */ (function (_super) {
            __extends(PurchaseReturnGrid, _super);
            function PurchaseReturnGrid(container) {
                return _super.call(this, container) || this;
            }
            PurchaseReturnGrid.prototype.getColumnsKey = function () { return 'Purchasing.PurchaseReturn'; };
            PurchaseReturnGrid.prototype.getDialogType = function () { return Purchasing.PurchaseReturnDialog; };
            PurchaseReturnGrid.prototype.getIdProperty = function () { return Purchasing.PurchaseReturnRow.idProperty; };
            PurchaseReturnGrid.prototype.getLocalTextPrefix = function () { return Purchasing.PurchaseReturnRow.localTextPrefix; };
            PurchaseReturnGrid.prototype.getService = function () { return Purchasing.PurchaseReturnService.baseUrl; };
            PurchaseReturnGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], PurchaseReturnGrid);
            return PurchaseReturnGrid;
        }(Serenity.EntityGrid));
        Purchasing.PurchaseReturnGrid = PurchaseReturnGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnDialog = /** @class */ (function (_super) {
            __extends(GrnDialog, _super);
            function GrnDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.GrnForm(_this.idPrefix);
                return _this;
            }
            GrnDialog.prototype.getFormKey = function () { return Purchasing.GrnForm.formKey; };
            GrnDialog.prototype.getIdProperty = function () { return Purchasing.GrnRow.idProperty; };
            GrnDialog.prototype.getLocalTextPrefix = function () { return Purchasing.GrnRow.localTextPrefix; };
            GrnDialog.prototype.getNameProperty = function () { return Purchasing.GrnRow.nameProperty; };
            GrnDialog.prototype.getService = function () { return Purchasing.GrnService.baseUrl; };
            GrnDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            GrnDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            GrnDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive(),
                Serenity.Decorators.panel()
            ], GrnDialog);
            return GrnDialog;
        }(Serenity.EntityDialog));
        Purchasing.GrnDialog = GrnDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnGrid = /** @class */ (function (_super) {
            __extends(GrnGrid, _super);
            function GrnGrid(container) {
                return _super.call(this, container) || this;
            }
            GrnGrid.prototype.getColumnsKey = function () { return 'Purchasing.Grn'; };
            GrnGrid.prototype.getDialogType = function () { return Purchasing.GrnDialog; };
            GrnGrid.prototype.getIdProperty = function () { return Purchasing.GrnRow.idProperty; };
            GrnGrid.prototype.getLocalTextPrefix = function () { return Purchasing.GrnRow.localTextPrefix; };
            GrnGrid.prototype.getService = function () { return Purchasing.GrnService.baseUrl; };
            GrnGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            GrnGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            GrnGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            GrnGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], GrnGrid);
            return GrnGrid;
        }(Serenity.EntityGrid));
        Purchasing.GrnGrid = GrnGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderDetailDialog = /** @class */ (function (_super) {
            __extends(GrnOrderDetailDialog, _super);
            function GrnOrderDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.GrnOrderDetailForm(_this.idPrefix);
                return _this;
            }
            GrnOrderDetailDialog.prototype.getFormKey = function () { return Purchasing.GrnOrderDetailForm.formKey; };
            GrnOrderDetailDialog.prototype.getIdProperty = function () { return Purchasing.GrnOrderDetailRow.idProperty; };
            GrnOrderDetailDialog.prototype.getLocalTextPrefix = function () { return Purchasing.GrnOrderDetailRow.localTextPrefix; };
            GrnOrderDetailDialog.prototype.getNameProperty = function () { return Purchasing.GrnOrderDetailRow.nameProperty; };
            GrnOrderDetailDialog.prototype.getService = function () { return Purchasing.GrnOrderDetailService.baseUrl; };
            GrnOrderDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            GrnOrderDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            GrnOrderDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], GrnOrderDetailDialog);
            return GrnOrderDetailDialog;
        }(Serenity.EntityDialog));
        Purchasing.GrnOrderDetailDialog = GrnOrderDetailDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderDetailEditor = /** @class */ (function (_super) {
            __extends(GrnOrderDetailEditor, _super);
            function GrnOrderDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            GrnOrderDetailEditor.prototype.getColumnsKey = function () { return "Purchasing.GrnOrderDetail"; };
            GrnOrderDetailEditor.prototype.getDialogType = function () { return Purchasing.GrnOrderDetailDialog; };
            GrnOrderDetailEditor.prototype.getLocalTextPrefix = function () { return Purchasing.GrnOrderDetailRow.localTextPrefix; };
            GrnOrderDetailEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            GrnOrderDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            GrnOrderDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], GrnOrderDetailEditor);
            return GrnOrderDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Purchasing.GrnOrderDetailEditor = GrnOrderDetailEditor;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderDetailGrid = /** @class */ (function (_super) {
            __extends(GrnOrderDetailGrid, _super);
            function GrnOrderDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            GrnOrderDetailGrid.prototype.getColumnsKey = function () { return 'Purchasing.GrnOrderDetail'; };
            GrnOrderDetailGrid.prototype.getDialogType = function () { return Purchasing.GrnOrderDetailDialog; };
            GrnOrderDetailGrid.prototype.getIdProperty = function () { return Purchasing.GrnOrderDetailRow.idProperty; };
            GrnOrderDetailGrid.prototype.getLocalTextPrefix = function () { return Purchasing.GrnOrderDetailRow.localTextPrefix; };
            GrnOrderDetailGrid.prototype.getService = function () { return Purchasing.GrnOrderDetailService.baseUrl; };
            GrnOrderDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            GrnOrderDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            GrnOrderDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            GrnOrderDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], GrnOrderDetailGrid);
            return GrnOrderDetailGrid;
        }(Serenity.EntityGrid));
        Purchasing.GrnOrderDetailGrid = GrnOrderDetailGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderDialog = /** @class */ (function (_super) {
            __extends(GrnOrderDialog, _super);
            function GrnOrderDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.GrnOrderForm(_this.idPrefix);
                return _this;
            }
            GrnOrderDialog.prototype.getFormKey = function () { return Purchasing.GrnOrderForm.formKey; };
            GrnOrderDialog.prototype.getIdProperty = function () { return Purchasing.GrnOrderRow.idProperty; };
            GrnOrderDialog.prototype.getLocalTextPrefix = function () { return Purchasing.GrnOrderRow.localTextPrefix; };
            GrnOrderDialog.prototype.getNameProperty = function () { return Purchasing.GrnOrderRow.nameProperty; };
            GrnOrderDialog.prototype.getService = function () { return Purchasing.GrnOrderService.baseUrl; };
            GrnOrderDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            GrnOrderDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            GrnOrderDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], GrnOrderDialog);
            return GrnOrderDialog;
        }(Serenity.EntityDialog));
        Purchasing.GrnOrderDialog = GrnOrderDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderEditor = /** @class */ (function (_super) {
            __extends(GrnOrderEditor, _super);
            function GrnOrderEditor(container) {
                return _super.call(this, container) || this;
            }
            GrnOrderEditor.prototype.getColumnsKey = function () { return "Purchasing.GrnOrder"; };
            GrnOrderEditor.prototype.getDialogType = function () { return Purchasing.GrnOrderDialog; };
            GrnOrderEditor.prototype.getLocalTextPrefix = function () { return Purchasing.GrnOrderRow.localTextPrefix; };
            GrnOrderEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            GrnOrderEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            GrnOrderEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], GrnOrderEditor);
            return GrnOrderEditor;
        }(Matrix.Common.GridEditorBase));
        Purchasing.GrnOrderEditor = GrnOrderEditor;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var GrnOrderGrid = /** @class */ (function (_super) {
            __extends(GrnOrderGrid, _super);
            function GrnOrderGrid(container) {
                return _super.call(this, container) || this;
            }
            GrnOrderGrid.prototype.getColumnsKey = function () { return 'Purchasing.GrnOrder'; };
            GrnOrderGrid.prototype.getDialogType = function () { return Purchasing.GrnOrderDialog; };
            GrnOrderGrid.prototype.getIdProperty = function () { return Purchasing.GrnOrderRow.idProperty; };
            GrnOrderGrid.prototype.getLocalTextPrefix = function () { return Purchasing.GrnOrderRow.localTextPrefix; };
            GrnOrderGrid.prototype.getService = function () { return Purchasing.GrnOrderService.baseUrl; };
            GrnOrderGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            GrnOrderGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            GrnOrderGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            GrnOrderGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], GrnOrderGrid);
            return GrnOrderGrid;
        }(Serenity.EntityGrid));
        Purchasing.GrnOrderGrid = GrnOrderGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationDialog = /** @class */ (function (_super) {
            __extends(VendorQuotationDialog, _super);
            function VendorQuotationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.VendorQuotationForm(_this.idPrefix);
                return _this;
            }
            VendorQuotationDialog.prototype.getFormKey = function () { return Purchasing.VendorQuotationForm.formKey; };
            VendorQuotationDialog.prototype.getIdProperty = function () { return Purchasing.VendorQuotationRow.idProperty; };
            VendorQuotationDialog.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationRow.localTextPrefix; };
            VendorQuotationDialog.prototype.getNameProperty = function () { return Purchasing.VendorQuotationRow.nameProperty; };
            VendorQuotationDialog.prototype.getService = function () { return Purchasing.VendorQuotationService.baseUrl; };
            VendorQuotationDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VendorQuotationDialog);
            return VendorQuotationDialog;
        }(Serenity.EntityDialog));
        Purchasing.VendorQuotationDialog = VendorQuotationDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationGrid = /** @class */ (function (_super) {
            __extends(VendorQuotationGrid, _super);
            function VendorQuotationGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorQuotationGrid.prototype.getColumnsKey = function () { return 'Purchasing.VendorQuotation'; };
            VendorQuotationGrid.prototype.getDialogType = function () { return Purchasing.VendorQuotationDialog; };
            VendorQuotationGrid.prototype.getIdProperty = function () { return Purchasing.VendorQuotationRow.idProperty; };
            VendorQuotationGrid.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationRow.localTextPrefix; };
            VendorQuotationGrid.prototype.getService = function () { return Purchasing.VendorQuotationService.baseUrl; };
            VendorQuotationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorQuotationGrid);
            return VendorQuotationGrid;
        }(Serenity.EntityGrid));
        Purchasing.VendorQuotationGrid = VendorQuotationGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationItemAdditionalInfoDialog = /** @class */ (function (_super) {
            __extends(VendorQuotationItemAdditionalInfoDialog, _super);
            function VendorQuotationItemAdditionalInfoDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.VendorQuotationItemAdditionalInfoForm(_this.idPrefix);
                return _this;
            }
            VendorQuotationItemAdditionalInfoDialog.prototype.getFormKey = function () { return Purchasing.VendorQuotationItemAdditionalInfoForm.formKey; };
            VendorQuotationItemAdditionalInfoDialog.prototype.getIdProperty = function () { return Purchasing.VendorQuotationItemAdditionalInfoRow.idProperty; };
            VendorQuotationItemAdditionalInfoDialog.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationItemAdditionalInfoRow.localTextPrefix; };
            VendorQuotationItemAdditionalInfoDialog.prototype.getNameProperty = function () { return Purchasing.VendorQuotationItemAdditionalInfoRow.nameProperty; };
            VendorQuotationItemAdditionalInfoDialog.prototype.getService = function () { return Purchasing.VendorQuotationItemAdditionalInfoService.baseUrl; };
            VendorQuotationItemAdditionalInfoDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VendorQuotationItemAdditionalInfoDialog);
            return VendorQuotationItemAdditionalInfoDialog;
        }(Serenity.EntityDialog));
        Purchasing.VendorQuotationItemAdditionalInfoDialog = VendorQuotationItemAdditionalInfoDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationItemAdditionalInfoGrid = /** @class */ (function (_super) {
            __extends(VendorQuotationItemAdditionalInfoGrid, _super);
            function VendorQuotationItemAdditionalInfoGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorQuotationItemAdditionalInfoGrid.prototype.getColumnsKey = function () { return 'Purchasing.VendorQuotationItemAdditionalInfo'; };
            VendorQuotationItemAdditionalInfoGrid.prototype.getDialogType = function () { return Purchasing.VendorQuotationItemAdditionalInfoDialog; };
            VendorQuotationItemAdditionalInfoGrid.prototype.getIdProperty = function () { return Purchasing.VendorQuotationItemAdditionalInfoRow.idProperty; };
            VendorQuotationItemAdditionalInfoGrid.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationItemAdditionalInfoRow.localTextPrefix; };
            VendorQuotationItemAdditionalInfoGrid.prototype.getService = function () { return Purchasing.VendorQuotationItemAdditionalInfoService.baseUrl; };
            VendorQuotationItemAdditionalInfoGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorQuotationItemAdditionalInfoGrid);
            return VendorQuotationItemAdditionalInfoGrid;
        }(Serenity.EntityGrid));
        Purchasing.VendorQuotationItemAdditionalInfoGrid = VendorQuotationItemAdditionalInfoGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationRemarkDialog = /** @class */ (function (_super) {
            __extends(VendorQuotationRemarkDialog, _super);
            function VendorQuotationRemarkDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.VendorQuotationRemarkForm(_this.idPrefix);
                return _this;
            }
            VendorQuotationRemarkDialog.prototype.getFormKey = function () { return Purchasing.VendorQuotationRemarkForm.formKey; };
            VendorQuotationRemarkDialog.prototype.getIdProperty = function () { return Purchasing.VendorQuotationRemarkRow.idProperty; };
            VendorQuotationRemarkDialog.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationRemarkRow.localTextPrefix; };
            VendorQuotationRemarkDialog.prototype.getNameProperty = function () { return Purchasing.VendorQuotationRemarkRow.nameProperty; };
            VendorQuotationRemarkDialog.prototype.getService = function () { return Purchasing.VendorQuotationRemarkService.baseUrl; };
            VendorQuotationRemarkDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VendorQuotationRemarkDialog);
            return VendorQuotationRemarkDialog;
        }(Serenity.EntityDialog));
        Purchasing.VendorQuotationRemarkDialog = VendorQuotationRemarkDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationRemarkGrid = /** @class */ (function (_super) {
            __extends(VendorQuotationRemarkGrid, _super);
            function VendorQuotationRemarkGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorQuotationRemarkGrid.prototype.getColumnsKey = function () { return 'Purchasing.VendorQuotationRemark'; };
            VendorQuotationRemarkGrid.prototype.getDialogType = function () { return Purchasing.VendorQuotationRemarkDialog; };
            VendorQuotationRemarkGrid.prototype.getIdProperty = function () { return Purchasing.VendorQuotationRemarkRow.idProperty; };
            VendorQuotationRemarkGrid.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationRemarkRow.localTextPrefix; };
            VendorQuotationRemarkGrid.prototype.getService = function () { return Purchasing.VendorQuotationRemarkService.baseUrl; };
            VendorQuotationRemarkGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorQuotationRemarkGrid);
            return VendorQuotationRemarkGrid;
        }(Serenity.EntityGrid));
        Purchasing.VendorQuotationRemarkGrid = VendorQuotationRemarkGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationScheduleDialog = /** @class */ (function (_super) {
            __extends(VendorQuotationScheduleDialog, _super);
            function VendorQuotationScheduleDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Purchasing.VendorQuotationScheduleForm(_this.idPrefix);
                return _this;
            }
            VendorQuotationScheduleDialog.prototype.getFormKey = function () { return Purchasing.VendorQuotationScheduleForm.formKey; };
            VendorQuotationScheduleDialog.prototype.getIdProperty = function () { return Purchasing.VendorQuotationScheduleRow.idProperty; };
            VendorQuotationScheduleDialog.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationScheduleRow.localTextPrefix; };
            VendorQuotationScheduleDialog.prototype.getNameProperty = function () { return Purchasing.VendorQuotationScheduleRow.nameProperty; };
            VendorQuotationScheduleDialog.prototype.getService = function () { return Purchasing.VendorQuotationScheduleService.baseUrl; };
            VendorQuotationScheduleDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.responsive()
            ], VendorQuotationScheduleDialog);
            return VendorQuotationScheduleDialog;
        }(Serenity.EntityDialog));
        Purchasing.VendorQuotationScheduleDialog = VendorQuotationScheduleDialog;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Purchasing;
    (function (Purchasing) {
        var VendorQuotationScheduleGrid = /** @class */ (function (_super) {
            __extends(VendorQuotationScheduleGrid, _super);
            function VendorQuotationScheduleGrid(container) {
                return _super.call(this, container) || this;
            }
            VendorQuotationScheduleGrid.prototype.getColumnsKey = function () { return 'Purchasing.VendorQuotationSchedule'; };
            VendorQuotationScheduleGrid.prototype.getDialogType = function () { return Purchasing.VendorQuotationScheduleDialog; };
            VendorQuotationScheduleGrid.prototype.getIdProperty = function () { return Purchasing.VendorQuotationScheduleRow.idProperty; };
            VendorQuotationScheduleGrid.prototype.getLocalTextPrefix = function () { return Purchasing.VendorQuotationScheduleRow.localTextPrefix; };
            VendorQuotationScheduleGrid.prototype.getService = function () { return Purchasing.VendorQuotationScheduleService.baseUrl; };
            VendorQuotationScheduleGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], VendorQuotationScheduleGrid);
            return VendorQuotationScheduleGrid;
        }(Serenity.EntityGrid));
        Purchasing.VendorQuotationScheduleGrid = VendorQuotationScheduleGrid;
    })(Purchasing = Matrix.Purchasing || (Matrix.Purchasing = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationDetailDialog = /** @class */ (function (_super) {
            __extends(QuotationDetailDialog, _super);
            function QuotationDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.QuotationDetailForm(_this.idPrefix);
                return _this;
                //protected getToolbarButtons(): Serenity.ToolButton[] {
                //    let buttons = super.getToolbarButtons();
                //    //buttons.splice(Q.indexOf(buttons, x => x.cssClass === "save-and-close-button"), 1);
                //    //buttons.splice(Q.indexOf(buttons, x => x.cssClass === "apply-changes-button"), 1);
                //    //buttons.splice(Q.indexOf(buttons, x => x.cssClass === "delete-button"), 1);
                //    return buttons;
                //}
                //protected updateInterface(): void {
                //    super.updateInterface();
                //    Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                //    this.element.find('sup').hide();
                //    this.deleteButton.hide();
                //    this.applyChangesButton.hide();
                //    this.saveAndCloseButton.hide();
                //}
            }
            QuotationDetailDialog.prototype.getFormKey = function () { return Sales.QuotationDetailForm.formKey; };
            QuotationDetailDialog.prototype.getIdProperty = function () { return Sales.QuotationDetailRow.idProperty; };
            QuotationDetailDialog.prototype.getLocalTextPrefix = function () { return Sales.QuotationDetailRow.localTextPrefix; };
            QuotationDetailDialog.prototype.getNameProperty = function () { return Sales.QuotationDetailRow.nameProperty; };
            QuotationDetailDialog.prototype.getService = function () { return Sales.QuotationDetailService.baseUrl; };
            QuotationDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], QuotationDetailDialog);
            return QuotationDetailDialog;
        }(Serenity.EntityDialog));
        Sales.QuotationDetailDialog = QuotationDetailDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationDetailEditor = /** @class */ (function (_super) {
            __extends(QuotationDetailEditor, _super);
            function QuotationDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            QuotationDetailEditor.prototype.getColumnsKey = function () { return "Sales.QuotationDetail"; };
            QuotationDetailEditor.prototype.getDialogType = function () { return Sales.QuotationDetailDialog; };
            QuotationDetailEditor.prototype.getLocalTextPrefix = function () { return Sales.QuotationDetailRow.localTextPrefix; };
            QuotationDetailEditor.prototype.usePager = function () {
                return true;
            };
            QuotationDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], QuotationDetailEditor);
            return QuotationDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Sales.QuotationDetailEditor = QuotationDetailEditor;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationDetailGrid = /** @class */ (function (_super) {
            __extends(QuotationDetailGrid, _super);
            function QuotationDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            QuotationDetailGrid.prototype.getColumnsKey = function () { return 'Sales.QuotationDetail'; };
            QuotationDetailGrid.prototype.getDialogType = function () { return Sales.QuotationDetailDialog; };
            QuotationDetailGrid.prototype.getIdProperty = function () { return Sales.QuotationDetailRow.idProperty; };
            QuotationDetailGrid.prototype.getLocalTextPrefix = function () { return Sales.QuotationDetailRow.localTextPrefix; };
            QuotationDetailGrid.prototype.getService = function () { return Sales.QuotationDetailService.baseUrl; };
            //protected getButtons(): Serenity.ToolButton[] {
            //    var buttons = super.getButtons();
            //    buttons.splice(Q.indexOf(buttons, x => x.cssClass === "add-button"), 1);
            //    return buttons;
            //}
            QuotationDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            QuotationDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            QuotationDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], QuotationDetailGrid);
            return QuotationDetailGrid;
        }(Serenity.EntityGrid));
        Sales.QuotationDetailGrid = QuotationDetailGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationDialog = /** @class */ (function (_super) {
            __extends(QuotationDialog, _super);
            function QuotationDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.QuotationForm(_this.idPrefix);
                return _this;
            }
            QuotationDialog.prototype.getFormKey = function () { return Sales.QuotationForm.formKey; };
            QuotationDialog.prototype.getIdProperty = function () { return Sales.QuotationRow.idProperty; };
            QuotationDialog.prototype.getLocalTextPrefix = function () { return Sales.QuotationRow.localTextPrefix; };
            QuotationDialog.prototype.getNameProperty = function () { return Sales.QuotationRow.nameProperty; };
            QuotationDialog.prototype.getService = function () { return Sales.QuotationService.baseUrl; };
            QuotationDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            QuotationDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
                this.element.find('.s-DialogToolbar').hide();
            };
            QuotationDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], QuotationDialog);
            return QuotationDialog;
        }(Serenity.EntityDialog));
        Sales.QuotationDialog = QuotationDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var QuotationGrid = /** @class */ (function (_super) {
            __extends(QuotationGrid, _super);
            function QuotationGrid(container) {
                return _super.call(this, container) || this;
            }
            QuotationGrid.prototype.getColumnsKey = function () { return 'Sales.Quotation'; };
            QuotationGrid.prototype.getDialogType = function () { return Sales.QuotationDialog; };
            QuotationGrid.prototype.getIdProperty = function () { return Sales.QuotationRow.idProperty; };
            QuotationGrid.prototype.getLocalTextPrefix = function () { return Sales.QuotationRow.localTextPrefix; };
            QuotationGrid.prototype.getService = function () { return Sales.QuotationService.baseUrl; };
            QuotationGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            QuotationGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            QuotationGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            QuotationGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], QuotationGrid);
            return QuotationGrid;
        }(Serenity.EntityGrid));
        Sales.QuotationGrid = QuotationGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderDetailDialog = /** @class */ (function (_super) {
            __extends(SalesOrderDetailDialog, _super);
            function SalesOrderDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.SalesOrderDetailForm(_this.idPrefix);
                return _this;
            }
            SalesOrderDetailDialog.prototype.getFormKey = function () { return Sales.SalesOrderDetailForm.formKey; };
            SalesOrderDetailDialog.prototype.getIdProperty = function () { return Sales.SalesOrderDetailRow.idProperty; };
            SalesOrderDetailDialog.prototype.getLocalTextPrefix = function () { return Sales.SalesOrderDetailRow.localTextPrefix; };
            SalesOrderDetailDialog.prototype.getNameProperty = function () { return Sales.SalesOrderDetailRow.nameProperty; };
            SalesOrderDetailDialog.prototype.getService = function () { return Sales.SalesOrderDetailService.baseUrl; };
            SalesOrderDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            SalesOrderDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            SalesOrderDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], SalesOrderDetailDialog);
            return SalesOrderDetailDialog;
        }(Serenity.EntityDialog));
        Sales.SalesOrderDetailDialog = SalesOrderDetailDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderDetailEditor = /** @class */ (function (_super) {
            __extends(SalesOrderDetailEditor, _super);
            function SalesOrderDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            SalesOrderDetailEditor.prototype.getColumnsKey = function () { return "Sales.SalesOrderDetail"; };
            SalesOrderDetailEditor.prototype.getDialogType = function () { return Sales.SalesOrderDetailDialog; };
            SalesOrderDetailEditor.prototype.getLocalTextPrefix = function () { return Sales.SalesOrderDetailRow.localTextPrefix; };
            SalesOrderDetailEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            SalesOrderDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            SalesOrderDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], SalesOrderDetailEditor);
            return SalesOrderDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Sales.SalesOrderDetailEditor = SalesOrderDetailEditor;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderDetailGrid = /** @class */ (function (_super) {
            __extends(SalesOrderDetailGrid, _super);
            function SalesOrderDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            SalesOrderDetailGrid.prototype.getColumnsKey = function () { return 'Sales.SalesOrderDetail'; };
            SalesOrderDetailGrid.prototype.getDialogType = function () { return Sales.SalesOrderDetailDialog; };
            SalesOrderDetailGrid.prototype.getIdProperty = function () { return Sales.SalesOrderDetailRow.idProperty; };
            SalesOrderDetailGrid.prototype.getLocalTextPrefix = function () { return Sales.SalesOrderDetailRow.localTextPrefix; };
            SalesOrderDetailGrid.prototype.getService = function () { return Sales.SalesOrderDetailService.baseUrl; };
            SalesOrderDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            SalesOrderDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            SalesOrderDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            SalesOrderDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SalesOrderDetailGrid);
            return SalesOrderDetailGrid;
        }(Serenity.EntityGrid));
        Sales.SalesOrderDetailGrid = SalesOrderDetailGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderDialog = /** @class */ (function (_super) {
            __extends(SalesOrderDialog, _super);
            function SalesOrderDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.SalesOrderForm(_this.idPrefix);
                return _this;
            }
            SalesOrderDialog.prototype.getFormKey = function () { return Sales.SalesOrderForm.formKey; };
            SalesOrderDialog.prototype.getIdProperty = function () { return Sales.SalesOrderRow.idProperty; };
            SalesOrderDialog.prototype.getLocalTextPrefix = function () { return Sales.SalesOrderRow.localTextPrefix; };
            SalesOrderDialog.prototype.getNameProperty = function () { return Sales.SalesOrderRow.nameProperty; };
            SalesOrderDialog.prototype.getService = function () { return Sales.SalesOrderService.baseUrl; };
            SalesOrderDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            SalesOrderDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            SalesOrderDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], SalesOrderDialog);
            return SalesOrderDialog;
        }(Serenity.EntityDialog));
        Sales.SalesOrderDialog = SalesOrderDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesOrderGrid = /** @class */ (function (_super) {
            __extends(SalesOrderGrid, _super);
            function SalesOrderGrid(container) {
                return _super.call(this, container) || this;
            }
            SalesOrderGrid.prototype.getColumnsKey = function () { return 'Sales.SalesOrder'; };
            SalesOrderGrid.prototype.getDialogType = function () { return Sales.SalesOrderDialog; };
            SalesOrderGrid.prototype.getIdProperty = function () { return Sales.SalesOrderRow.idProperty; };
            SalesOrderGrid.prototype.getLocalTextPrefix = function () { return Sales.SalesOrderRow.localTextPrefix; };
            SalesOrderGrid.prototype.getService = function () { return Sales.SalesOrderService.baseUrl; };
            SalesOrderGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            SalesOrderGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            SalesOrderGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            SalesOrderGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SalesOrderGrid);
            return SalesOrderGrid;
        }(Serenity.EntityGrid));
        Sales.SalesOrderGrid = SalesOrderGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Enterprise;
    (function (Enterprise) {
        var SalesOrderTypeFormatter = /** @class */ (function () {
            function SalesOrderTypeFormatter() {
            }
            SalesOrderTypeFormatter.prototype.format = function (ctx) {
                var allocationMethod = ctx.value;
                if (!allocationMethod)
                    return "";
                var dic = new Matrix.SalesOrderTypeOption();
                return dic.Mapping.Item(allocationMethod);
            };
            SalesOrderTypeFormatter = __decorate([
                Serenity.Decorators.registerFormatter()
            ], SalesOrderTypeFormatter);
            return SalesOrderTypeFormatter;
        }());
        Enterprise.SalesOrderTypeFormatter = SalesOrderTypeFormatter;
    })(Enterprise = Matrix.Enterprise || (Matrix.Enterprise = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnDetailDialog = /** @class */ (function (_super) {
            __extends(SalesReturnDetailDialog, _super);
            function SalesReturnDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.SalesReturnDetailForm(_this.idPrefix);
                return _this;
            }
            SalesReturnDetailDialog.prototype.getFormKey = function () { return Sales.SalesReturnDetailForm.formKey; };
            SalesReturnDetailDialog.prototype.getIdProperty = function () { return Sales.SalesReturnDetailRow.idProperty; };
            SalesReturnDetailDialog.prototype.getLocalTextPrefix = function () { return Sales.SalesReturnDetailRow.localTextPrefix; };
            SalesReturnDetailDialog.prototype.getNameProperty = function () { return Sales.SalesReturnDetailRow.nameProperty; };
            SalesReturnDetailDialog.prototype.getService = function () { return Sales.SalesReturnDetailService.baseUrl; };
            SalesReturnDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            SalesReturnDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            SalesReturnDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], SalesReturnDetailDialog);
            return SalesReturnDetailDialog;
        }(Serenity.EntityDialog));
        Sales.SalesReturnDetailDialog = SalesReturnDetailDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnDetailEditor = /** @class */ (function (_super) {
            __extends(SalesReturnDetailEditor, _super);
            function SalesReturnDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            SalesReturnDetailEditor.prototype.getColumnsKey = function () { return "Sales.SalesReturnDetail"; };
            SalesReturnDetailEditor.prototype.getDialogType = function () { return Sales.SalesReturnDetailDialog; };
            SalesReturnDetailEditor.prototype.getLocalTextPrefix = function () { return Sales.SalesReturnDetailRow.localTextPrefix; };
            SalesReturnDetailEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            SalesReturnDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            SalesReturnDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], SalesReturnDetailEditor);
            return SalesReturnDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Sales.SalesReturnDetailEditor = SalesReturnDetailEditor;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnDetailGrid = /** @class */ (function (_super) {
            __extends(SalesReturnDetailGrid, _super);
            function SalesReturnDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            SalesReturnDetailGrid.prototype.getColumnsKey = function () { return 'Sales.SalesReturnDetail'; };
            SalesReturnDetailGrid.prototype.getDialogType = function () { return Sales.SalesReturnDetailDialog; };
            SalesReturnDetailGrid.prototype.getIdProperty = function () { return Sales.SalesReturnDetailRow.idProperty; };
            SalesReturnDetailGrid.prototype.getLocalTextPrefix = function () { return Sales.SalesReturnDetailRow.localTextPrefix; };
            SalesReturnDetailGrid.prototype.getService = function () { return Sales.SalesReturnDetailService.baseUrl; };
            SalesReturnDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            SalesReturnDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            SalesReturnDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            SalesReturnDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SalesReturnDetailGrid);
            return SalesReturnDetailGrid;
        }(Serenity.EntityGrid));
        Sales.SalesReturnDetailGrid = SalesReturnDetailGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnDialog = /** @class */ (function (_super) {
            __extends(SalesReturnDialog, _super);
            function SalesReturnDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.SalesReturnForm(_this.idPrefix);
                return _this;
            }
            SalesReturnDialog.prototype.getFormKey = function () { return Sales.SalesReturnForm.formKey; };
            SalesReturnDialog.prototype.getIdProperty = function () { return Sales.SalesReturnRow.idProperty; };
            SalesReturnDialog.prototype.getLocalTextPrefix = function () { return Sales.SalesReturnRow.localTextPrefix; };
            SalesReturnDialog.prototype.getNameProperty = function () { return Sales.SalesReturnRow.nameProperty; };
            SalesReturnDialog.prototype.getService = function () { return Sales.SalesReturnService.baseUrl; };
            SalesReturnDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            SalesReturnDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            SalesReturnDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], SalesReturnDialog);
            return SalesReturnDialog;
        }(Serenity.EntityDialog));
        Sales.SalesReturnDialog = SalesReturnDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var SalesReturnGrid = /** @class */ (function (_super) {
            __extends(SalesReturnGrid, _super);
            function SalesReturnGrid(container) {
                return _super.call(this, container) || this;
            }
            SalesReturnGrid.prototype.getColumnsKey = function () { return 'Sales.SalesReturn'; };
            SalesReturnGrid.prototype.getDialogType = function () { return Sales.SalesReturnDialog; };
            SalesReturnGrid.prototype.getIdProperty = function () { return Sales.SalesReturnRow.idProperty; };
            SalesReturnGrid.prototype.getLocalTextPrefix = function () { return Sales.SalesReturnRow.localTextPrefix; };
            SalesReturnGrid.prototype.getService = function () { return Sales.SalesReturnService.baseUrl; };
            SalesReturnGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            SalesReturnGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            SalesReturnGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            SalesReturnGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], SalesReturnGrid);
            return SalesReturnGrid;
        }(Serenity.EntityGrid));
        Sales.SalesReturnGrid = SalesReturnGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentDetailDialog = /** @class */ (function (_super) {
            __extends(ShipmentDetailDialog, _super);
            function ShipmentDetailDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.ShipmentDetailForm(_this.idPrefix);
                return _this;
            }
            ShipmentDetailDialog.prototype.getFormKey = function () { return Sales.ShipmentDetailForm.formKey; };
            ShipmentDetailDialog.prototype.getIdProperty = function () { return Sales.ShipmentDetailRow.idProperty; };
            ShipmentDetailDialog.prototype.getLocalTextPrefix = function () { return Sales.ShipmentDetailRow.localTextPrefix; };
            ShipmentDetailDialog.prototype.getNameProperty = function () { return Sales.ShipmentDetailRow.nameProperty; };
            ShipmentDetailDialog.prototype.getService = function () { return Sales.ShipmentDetailService.baseUrl; };
            ShipmentDetailDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            ShipmentDetailDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            ShipmentDetailDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], ShipmentDetailDialog);
            return ShipmentDetailDialog;
        }(Serenity.EntityDialog));
        Sales.ShipmentDetailDialog = ShipmentDetailDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
/// <reference path="../../AdminLTE/Helpers/GridEditorBase.ts" />
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentDetailEditor = /** @class */ (function (_super) {
            __extends(ShipmentDetailEditor, _super);
            function ShipmentDetailEditor(container) {
                return _super.call(this, container) || this;
            }
            ShipmentDetailEditor.prototype.getColumnsKey = function () { return "Sales.ShipmentDetail"; };
            ShipmentDetailEditor.prototype.getDialogType = function () { return Sales.ShipmentDetailDialog; };
            ShipmentDetailEditor.prototype.getLocalTextPrefix = function () { return Sales.ShipmentDetailRow.localTextPrefix; };
            ShipmentDetailEditor.prototype.validateEntity = function (row, id) {
                return true;
            };
            ShipmentDetailEditor.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons = [];
                return buttons;
            };
            ShipmentDetailEditor = __decorate([
                Serenity.Decorators.registerClass()
            ], ShipmentDetailEditor);
            return ShipmentDetailEditor;
        }(Matrix.Common.GridEditorBase));
        Sales.ShipmentDetailEditor = ShipmentDetailEditor;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentDetailGrid = /** @class */ (function (_super) {
            __extends(ShipmentDetailGrid, _super);
            function ShipmentDetailGrid(container) {
                return _super.call(this, container) || this;
            }
            ShipmentDetailGrid.prototype.getColumnsKey = function () { return 'Sales.ShipmentDetail'; };
            ShipmentDetailGrid.prototype.getDialogType = function () { return Sales.ShipmentDetailDialog; };
            ShipmentDetailGrid.prototype.getIdProperty = function () { return Sales.ShipmentDetailRow.idProperty; };
            ShipmentDetailGrid.prototype.getLocalTextPrefix = function () { return Sales.ShipmentDetailRow.localTextPrefix; };
            ShipmentDetailGrid.prototype.getService = function () { return Sales.ShipmentDetailService.baseUrl; };
            ShipmentDetailGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            ShipmentDetailGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ShipmentDetailGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ShipmentDetailGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ShipmentDetailGrid);
            return ShipmentDetailGrid;
        }(Serenity.EntityGrid));
        Sales.ShipmentDetailGrid = ShipmentDetailGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentDialog = /** @class */ (function (_super) {
            __extends(ShipmentDialog, _super);
            function ShipmentDialog() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.form = new Sales.ShipmentForm(_this.idPrefix);
                return _this;
            }
            ShipmentDialog.prototype.getFormKey = function () { return Sales.ShipmentForm.formKey; };
            ShipmentDialog.prototype.getIdProperty = function () { return Sales.ShipmentRow.idProperty; };
            ShipmentDialog.prototype.getLocalTextPrefix = function () { return Sales.ShipmentRow.localTextPrefix; };
            ShipmentDialog.prototype.getNameProperty = function () { return Sales.ShipmentRow.nameProperty; };
            ShipmentDialog.prototype.getService = function () { return Sales.ShipmentService.baseUrl; };
            ShipmentDialog.prototype.getToolbarButtons = function () {
                var buttons = _super.prototype.getToolbarButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "save-and-close-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "apply-changes-button"; }), 1);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "delete-button"; }), 1);
                return buttons;
            };
            ShipmentDialog.prototype.updateInterface = function () {
                _super.prototype.updateInterface.call(this);
                Serenity.EditorUtils.setReadonly(this.element.find('.editor'), true);
                this.element.find('sup').hide();
                this.deleteButton.hide();
                this.applyChangesButton.hide();
                this.saveAndCloseButton.hide();
            };
            ShipmentDialog = __decorate([
                Serenity.Decorators.registerClass(),
                Serenity.Decorators.panel(),
                Serenity.Decorators.responsive()
            ], ShipmentDialog);
            return ShipmentDialog;
        }(Serenity.EntityDialog));
        Sales.ShipmentDialog = ShipmentDialog;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Sales;
    (function (Sales) {
        var ShipmentGrid = /** @class */ (function (_super) {
            __extends(ShipmentGrid, _super);
            function ShipmentGrid(container) {
                return _super.call(this, container) || this;
            }
            ShipmentGrid.prototype.getColumnsKey = function () { return 'Sales.Shipment'; };
            ShipmentGrid.prototype.getDialogType = function () { return Sales.ShipmentDialog; };
            ShipmentGrid.prototype.getIdProperty = function () { return Sales.ShipmentRow.idProperty; };
            ShipmentGrid.prototype.getLocalTextPrefix = function () { return Sales.ShipmentRow.localTextPrefix; };
            ShipmentGrid.prototype.getService = function () { return Sales.ShipmentService.baseUrl; };
            ShipmentGrid.prototype.getButtons = function () {
                var buttons = _super.prototype.getButtons.call(this);
                buttons.splice(Q.indexOf(buttons, function (x) { return x.cssClass === "add-button"; }), 1);
                return buttons;
            };
            ShipmentGrid.prototype.getSlickOptions = function () {
                var opt = _super.prototype.getSlickOptions.call(this);
                opt.enableTextSelectionOnCells = true;
                opt.selectedCellCssClass = "slick-row-selected";
                opt.enableCellNavigation = true;
                return opt;
            };
            ShipmentGrid.prototype.createSlickGrid = function () {
                var grid = _super.prototype.createSlickGrid.call(this);
                grid.setSelectionModel(new Slick.RowSelectionModel());
                return grid;
            };
            ShipmentGrid = __decorate([
                Serenity.Decorators.registerClass()
            ], ShipmentGrid);
            return ShipmentGrid;
        }(Serenity.EntityGrid));
        Sales.ShipmentGrid = ShipmentGrid;
    })(Sales = Matrix.Sales || (Matrix.Sales = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Authorization;
    (function (Authorization) {
        Object.defineProperty(Authorization, 'userDefinition', {
            get: function () {
                return Q.getRemoteData('UserData');
            }
        });
        function hasPermission(permissionKey) {
            var ud = Authorization.userDefinition;
            return ud.Username === 'admin' || !!ud.Permissions[permissionKey];
        }
        Authorization.hasPermission = hasPermission;
    })(Authorization = Matrix.Authorization || (Matrix.Authorization = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var LanguageSelection = /** @class */ (function (_super) {
            __extends(LanguageSelection, _super);
            function LanguageSelection(select, currentLanguage) {
                var _this = _super.call(this, select) || this;
                currentLanguage = Q.coalesce(currentLanguage, 'en');
                _this.change(function (e) {
                    $.cookie('LanguagePreference', select.val(), {
                        path: Q.Config.applicationPath,
                        expires: 365
                    });
                    window.location.reload(true);
                });
                return _this;
                //Q.getLookupAsync<Administration.LanguageRow>('Administration.Language').then(x => {
                //    if (!Q.any(x.items, z => z.LanguageId === currentLanguage)) {
                //        var idx = currentLanguage.lastIndexOf('-');
                //        if (idx >= 0) {
                //            currentLanguage = currentLanguage.substr(0, idx);
                //            if (!Q.any(x.items, y => y.LanguageId === currentLanguage)) {
                //                currentLanguage = 'en';
                //            }
                //        }
                //        else {
                //            currentLanguage = 'en';
                //        }
                //    }
                //    for (var l of x.items) {
                //        Q.addOption(select, l.LanguageId, l.LanguageName);
                //    }
                //    select.val(currentLanguage);
                //});
            }
            return LanguageSelection;
        }(Serenity.Widget));
        Common.LanguageSelection = LanguageSelection;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var SidebarSearch = /** @class */ (function (_super) {
            __extends(SidebarSearch, _super);
            function SidebarSearch(input, menuUL) {
                var _this = _super.call(this, input) || this;
                new Serenity.QuickSearchInput(input, {
                    onSearch: function (field, text, success) {
                        _this.updateMatchFlags(text);
                        success(true);
                    }
                });
                _this.menuUL = menuUL;
                return _this;
            }
            SidebarSearch.prototype.updateMatchFlags = function (text) {
                var liList = this.menuUL.find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (text == null) {
                    liList.show();
                    liList.removeClass('expanded');
                    return;
                }
                var parts = text.replace(',', ' ').split(' ').filter(function (x) { return !Q.isTrimmedEmpty(x); });
                for (var i = 0; i < parts.length; i++) {
                    parts[i] = Q.trimToNull(Select2.util.stripDiacritics(parts[i]).toUpperCase());
                }
                var items = liList;
                items.each(function (idx, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
                        var p = parts_1[_i];
                        if (p != null && !(title.indexOf(p) !== -1)) {
                            x.addClass('non-match');
                            break;
                        }
                    }
                });
                var matchingItems = items.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                liList.addClass('expanded');
            };
            return SidebarSearch;
        }(Serenity.Widget));
        Common.SidebarSearch = SidebarSearch;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var ThemeSelection = /** @class */ (function (_super) {
            __extends(ThemeSelection, _super);
            function ThemeSelection(select) {
                var _this = _super.call(this, select) || this;
                _this.change(function (e) {
                    $.cookie('ThemePreference', select.val(), {
                        path: Q.Config.applicationPath,
                        expires: 365
                    });
                    $('body').removeClass('skin-' + _this.getCurrentTheme());
                    $('body').addClass('skin-' + select.val());
                });
                Q.addOption(select, 'blue', Q.text('Site.Layout.ThemeBlue'));
                Q.addOption(select, 'blue-light', Q.text('Site.Layout.ThemeBlueLight'));
                Q.addOption(select, 'purple', Q.text('Site.Layout.ThemePurple'));
                Q.addOption(select, 'purple-light', Q.text('Site.Layout.ThemePurpleLight'));
                Q.addOption(select, 'red', Q.text('Site.Layout.ThemeRed'));
                Q.addOption(select, 'red-light', Q.text('Site.Layout.ThemeRedLight'));
                Q.addOption(select, 'green', Q.text('Site.Layout.ThemeGreen'));
                Q.addOption(select, 'green-light', Q.text('Site.Layout.ThemeGreenLight'));
                Q.addOption(select, 'yellow', Q.text('Site.Layout.ThemeYellow'));
                Q.addOption(select, 'yellow-light', Q.text('Site.Layout.ThemeYellowLight'));
                Q.addOption(select, 'black', Q.text('Site.Layout.ThemeBlack'));
                Q.addOption(select, 'black-light', Q.text('Site.Layout.ThemeBlackLight'));
                select.val(_this.getCurrentTheme());
                return _this;
            }
            ThemeSelection.prototype.getCurrentTheme = function () {
                var skinClass = Q.first(($('body').attr('class') || '').split(' '), function (x) { return Q.startsWith(x, 'skin-'); });
                if (skinClass) {
                    return skinClass.substr(5);
                }
                return 'blue';
            };
            return ThemeSelection;
        }(Serenity.Widget));
        Common.ThemeSelection = ThemeSelection;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var PdfExportHelper;
        (function (PdfExportHelper) {
            function toAutoTableColumns(srcColumns, columnStyles, columnTitles) {
                return srcColumns.map(function (src) {
                    var col = {
                        dataKey: src.id || src.field,
                        title: src.name || ''
                    };
                    if (columnTitles && columnTitles[col.dataKey] != null)
                        col.title = columnTitles[col.dataKey];
                    var style = {};
                    if ((src.cssClass || '').indexOf("align-right") >= 0)
                        style.halign = 'right';
                    else if ((src.cssClass || '').indexOf("align-center") >= 0)
                        style.halign = 'center';
                    columnStyles[col.dataKey] = style;
                    return col;
                });
            }
            function toAutoTableData(entities, keys, srcColumns) {
                var el = document.createElement('span');
                var row = 0;
                return entities.map(function (item) {
                    var dst = {};
                    for (var cell = 0; cell < srcColumns.length; cell++) {
                        var src = srcColumns[cell];
                        var fld = src.field || '';
                        var key = keys[cell];
                        var txt = void 0;
                        var html = void 0;
                        if (src.formatter) {
                            html = src.formatter(row, cell, item[fld], src, item);
                        }
                        else if (src.format) {
                            html = src.format({ row: row, cell: cell, item: item, value: item[fld] });
                        }
                        else {
                            dst[key] = item[fld];
                            continue;
                        }
                        if (!html || (html.indexOf('<') < 0 && html.indexOf('&') < 0))
                            dst[key] = html;
                        else {
                            el.innerHTML = html;
                            if (el.children.length == 1 &&
                                $(el.children[0]).is(":input")) {
                                dst[key] = $(el.children[0]).val();
                            }
                            else if (el.children.length == 1 &&
                                $(el.children).is('.check-box')) {
                                dst[key] = $(el.children).hasClass("checked") ? "X" : "";
                            }
                            else
                                dst[key] = el.textContent || '';
                        }
                    }
                    row++;
                    return dst;
                });
            }
            function exportToPdf(options) {
                var g = options.grid;
                if (!options.onViewSubmit())
                    return;
                includeAutoTable();
                var request = Q.deepClone(g.view.params);
                request.Take = 0;
                request.Skip = 0;
                var sortBy = g.view.sortBy;
                if (sortBy != null)
                    request.Sort = sortBy;
                var gridColumns = g.slickGrid.getColumns();
                gridColumns = gridColumns.filter(function (x) { return x.id !== "__select__"; });
                request.IncludeColumns = [];
                for (var _i = 0, gridColumns_1 = gridColumns; _i < gridColumns_1.length; _i++) {
                    var column = gridColumns_1[_i];
                    request.IncludeColumns.push(column.id || column.field);
                }
                Q.serviceCall({
                    url: g.view.url,
                    request: request,
                    onSuccess: function (response) {
                        var doc = new jsPDF('l', 'pt');
                        var srcColumns = gridColumns;
                        var columnStyles = {};
                        var columns = toAutoTableColumns(srcColumns, columnStyles, options.columnTitles);
                        var keys = columns.map(function (x) { return x.dataKey; });
                        var entities = response.Entities || [];
                        var data = toAutoTableData(entities, keys, srcColumns);
                        doc.setFontSize(options.titleFontSize || 10);
                        doc.setFontStyle('bold');
                        var reportTitle = options.reportTitle || g.getTitle() || "Report";
                        doc.autoTableText(reportTitle, doc.internal.pageSize.width / 2, options.titleTop || 25, { halign: 'center' });
                        var totalPagesExp = "{{T}}";
                        var pageNumbers = options.pageNumbers == null || options.pageNumbers;
                        var autoOptions = $.extend({
                            margin: { top: 25, left: 25, right: 25, bottom: pageNumbers ? 25 : 30 },
                            startY: 60,
                            styles: {
                                fontSize: 8,
                                overflow: 'linebreak',
                                cellPadding: 2,
                                valign: 'middle'
                            },
                            columnStyles: columnStyles
                        }, options.tableOptions);
                        if (pageNumbers) {
                            var footer = function (data) {
                                var str = data.pageCount;
                                // Total page number plugin only available in jspdf v1.0+
                                if (typeof doc.putTotalPages === 'function') {
                                    str = str + " / " + totalPagesExp;
                                }
                                doc.autoTableText(str, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - autoOptions.margin.bottom, {
                                    halign: 'center'
                                });
                            };
                            autoOptions.afterPageContent = footer;
                        }
                        // Print header of page
                        if (options.printDateTimeHeader == null || options.printDateTimeHeader) {
                            var beforePage = function (data) {
                                doc.setFontStyle('normal');
                                doc.setFontSize(8);
                                // Date and time of the report
                                doc.autoTableText(Q.formatDate(new Date(), "dd-MM-yyyy HH:mm"), doc.internal.pageSize.width - autoOptions.margin.right, 13, {
                                    halign: 'right'
                                });
                            };
                            autoOptions.beforePageContent = beforePage;
                        }
                        doc.autoTable(columns, data, autoOptions);
                        if (typeof doc.putTotalPages === 'function') {
                            doc.putTotalPages(totalPagesExp);
                        }
                        if (!options.output || options.output == "file") {
                            var fileName = options.fileName || options.reportTitle || "{0}_{1}.pdf";
                            fileName = Q.format(fileName, g.getTitle() || "report", Q.formatDate(new Date(), "yyyyMMdd_HHmm"));
                            doc.save(fileName);
                            return;
                        }
                        if (options.autoPrint)
                            doc.autoPrint();
                        var output = options.output;
                        if (output == 'newwindow' || '_blank')
                            output = 'dataurlnewwindow';
                        else if (output == 'window')
                            output = 'datauri';
                        doc.output(output);
                    }
                });
            }
            PdfExportHelper.exportToPdf = exportToPdf;
            function createToolButton(options) {
                return {
                    title: options.title || '',
                    hint: options.hint || 'PDF',
                    cssClass: 'export-pdf-button',
                    onClick: function () { return exportToPdf(options); },
                    separator: options.separator
                };
            }
            PdfExportHelper.createToolButton = createToolButton;
            function includeJsPDF() {
                if (typeof jsPDF !== "undefined")
                    return;
                var script = $("jsPDFScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.min.js"))
                    .appendTo(document.head);
            }
            function includeAutoTable() {
                includeJsPDF();
                if (typeof jsPDF === "undefined" ||
                    typeof jsPDF.API == "undefined" ||
                    typeof jsPDF.API.autoTable !== "undefined")
                    return;
                var script = $("jsPDFAutoTableScript");
                if (script.length > 0)
                    return;
                $("<script/>")
                    .attr("type", "text/javascript")
                    .attr("id", "jsPDFAutoTableScript")
                    .attr("src", Q.resolveUrl("~/Scripts/jspdf.plugin.autotable.min.js"))
                    .appendTo(document.head);
            }
        })(PdfExportHelper = Common.PdfExportHelper || (Common.PdfExportHelper = {}));
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var ReportDialog = /** @class */ (function (_super) {
            __extends(ReportDialog, _super);
            function ReportDialog(options) {
                var _this = _super.call(this, options) || this;
                _this.updateInterface();
                _this.loadReport(_this.options.reportKey);
                return _this;
            }
            ReportDialog.prototype.getDialogButtons = function () {
                return null;
            };
            ReportDialog.prototype.createPropertyGrid = function () {
                this.propertyGrid && this.byId('PropertyGrid').html('').attr('class', '');
                this.propertyGrid = new Serenity.PropertyGrid(this.byId('PropertyGrid'), {
                    idPrefix: this.idPrefix,
                    useCategories: true,
                    items: this.report.Properties
                }).init(null);
            };
            ReportDialog.prototype.loadReport = function (reportKey) {
                var _this = this;
                Q.serviceCall({
                    url: Q.resolveUrl('~/Report/Retrieve'),
                    request: {
                        ReportKey: reportKey
                    },
                    onSuccess: function (response) {
                        _this.report = response;
                        _this.element.dialog().dialog('option', 'title', _this.report.Title);
                        _this.createPropertyGrid();
                        _this.propertyGrid.load(_this.report.InitialSettings || {});
                        _this.updateInterface();
                        _this.dialogOpen();
                    }
                });
            };
            ReportDialog.prototype.updateInterface = function () {
                this.toolbar.findButton('print-preview-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-pdf-button')
                    .toggle(this.report && !this.report.IsDataOnlyReport);
                this.toolbar.findButton('export-xlsx-button')
                    .toggle(this.report && this.report.IsDataOnlyReport);
            };
            ReportDialog.prototype.executeReport = function (target, ext, download) {
                if (!this.validateForm()) {
                    return;
                }
                var opt = {};
                this.propertyGrid.save(opt);
                Common.ReportHelper.execute({
                    download: download,
                    reportKey: this.report.ReportKey,
                    extension: ext,
                    target: target,
                    params: opt
                });
            };
            ReportDialog.prototype.getToolbarButtons = function () {
                var _this = this;
                return [
                    {
                        title: 'Preview',
                        cssClass: 'print-preview-button',
                        onClick: function () { return _this.executeReport('_blank', null, false); }
                    },
                    {
                        title: 'PDF',
                        cssClass: 'export-pdf-button',
                        onClick: function () { return _this.executeReport('_blank', 'pdf', true); }
                    },
                    {
                        title: 'Excel',
                        cssClass: 'export-xlsx-button',
                        onClick: function () { return _this.executeReport('_blank', 'xlsx', true); }
                    }
                ];
            };
            return ReportDialog;
        }(Serenity.TemplatedDialog));
        Common.ReportDialog = ReportDialog;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var ReportHelper;
        (function (ReportHelper) {
            function createToolButton(options) {
                return {
                    title: Q.coalesce(options.title, 'Report'),
                    cssClass: Q.coalesce(options.cssClass, 'print-button'),
                    icon: options.icon,
                    onClick: function () {
                        ReportHelper.execute(options);
                    }
                };
            }
            ReportHelper.createToolButton = createToolButton;
            function execute(options) {
                var opt = options.getParams ? options.getParams() : options.params;
                Q.postToUrl({
                    url: '~/Report/' + (options.download ? 'Download' : 'Render'),
                    params: {
                        key: options.reportKey,
                        ext: Q.coalesce(options.extension, 'pdf'),
                        opt: opt ? $.toJSON(opt) : ''
                    },
                    target: Q.coalesce(options.target, '_blank')
                });
            }
            ReportHelper.execute = execute;
        })(ReportHelper = Common.ReportHelper || (Common.ReportHelper = {}));
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Common;
    (function (Common) {
        var ReportPage = /** @class */ (function (_super) {
            __extends(ReportPage, _super);
            function ReportPage(element) {
                var _this = _super.call(this, element) || this;
                $('.report-link', element).click(function (e) { return _this.reportLinkClick(e); });
                $('div.line', element).click(function (e) { return _this.categoryClick(e); });
                new Serenity.QuickSearchInput($('.s-QuickSearchBar input', element), {
                    onSearch: function (field, text, done) {
                        _this.updateMatchFlags(text);
                        done(true);
                    }
                });
                return _this;
            }
            ReportPage.prototype.updateMatchFlags = function (text) {
                var liList = $('.report-list', this.element).find('li').removeClass('non-match');
                text = Q.trimToNull(text);
                if (!text) {
                    liList.children('ul').hide();
                    liList.show().removeClass('expanded');
                    return;
                }
                text = Select2.util.stripDiacritics(text).toUpperCase();
                var reportItems = liList.filter('.report-item');
                reportItems.each(function (ix, e) {
                    var x = $(e);
                    var title = Select2.util.stripDiacritics(Q.coalesce(x.text(), '').toUpperCase());
                    if (title.indexOf(text) < 0) {
                        x.addClass('non-match');
                    }
                });
                var matchingItems = reportItems.not('.non-match');
                var visibles = matchingItems.parents('li').add(matchingItems);
                var nonVisibles = liList.not(visibles);
                nonVisibles.hide().addClass('non-match');
                visibles.show();
                if (visibles.length <= 100) {
                    liList.children('ul').show();
                    liList.addClass('expanded');
                }
            };
            ReportPage.prototype.categoryClick = function (e) {
                var li = $(e.target).closest('li');
                if (li.hasClass('expanded')) {
                    li.find('ul').hide('fast');
                    li.removeClass('expanded');
                    li.find('li').removeClass('expanded');
                }
                else {
                    li.addClass('expanded');
                    li.children('ul').show('fast');
                    if (li.children('ul').children('li').length === 1 && !li.children('ul').children('li').hasClass('expanded')) {
                        li.children('ul').children('li').children('.line').click();
                    }
                }
            };
            ReportPage.prototype.reportLinkClick = function (e) {
                e.preventDefault();
                new Common.ReportDialog({
                    reportKey: $(e.target).data('key')
                }).dialogOpen();
            };
            return ReportPage;
        }(Serenity.Widget));
        Common.ReportPage = ReportPage;
    })(Common = Matrix.Common || (Matrix.Common = {}));
})(Matrix || (Matrix = {}));
var Enterprise;
(function (Enterprise) {
    var String = /** @class */ (function () {
        function String() {
        }
        String.IsNullOrWhiteSpace = function (value) {
            try {
                if (value == null || value == 'undefined')
                    return true;
                return value.toString().replace(/\s/g, '').length < 1;
            }
            catch (e) {
                console.log(e);
                return false;
            }
        };
        String.Join = function (delimiter) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            try {
                var firstArg = args[0];
                if (Array.isArray(firstArg) || firstArg instanceof Array) {
                    var tempString = String.Empty;
                    var count = 0;
                    for (var i = 0; i < firstArg.length; i++) {
                        var current = firstArg[i];
                        if (i < firstArg.length - 1)
                            tempString += current + delimiter;
                        else
                            tempString += current;
                    }
                    return tempString;
                }
                else if (typeof firstArg === 'object') {
                    var tempString_1 = String.Empty;
                    var objectArg_1 = firstArg;
                    var keys = Object.keys(firstArg); //get all Properties of the Object as Array
                    keys.forEach(function (element) { tempString_1 += objectArg_1[element] + delimiter; });
                    tempString_1 = tempString_1.slice(0, tempString_1.length - delimiter.length); //remove last delimiter
                    return tempString_1;
                }
                var stringArray = args;
                return String.join.apply(String, [delimiter].concat(stringArray));
            }
            catch (e) {
                console.log(e);
                return String.Empty;
            }
        };
        String.Format = function (format) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            try {
                return format.replace(/{(\d+(:\w*)?)}/g, function (match, i) {
                    var s = match.split(':');
                    if (s.length > 1) {
                        i = i[0];
                        match = s[1].replace('}', ''); //U
                    }
                    var arg = args[i];
                    if (arg == null || arg == undefined || match.match(/{d+}/))
                        return arg;
                    arg = String.parsePattern(match, arg);
                    return typeof arg != 'undefined' && arg != null ? arg : String.Empty;
                });
            }
            catch (e) {
                console.log(e);
                return String.Empty;
            }
        };
        String.parsePattern = function (match, arg) {
            switch (match) {
                case 'L':
                    arg = arg.toLowerCase();
                    return arg;
                case 'U':
                    arg = arg.toUpperCase();
                    return arg;
                case 'd':
                    if (typeof (arg) === 'string') {
                        return String.getDisplayDateFromString(arg);
                    }
                    else if (arg instanceof Date) {
                        return String.Format('{0:00}.{1:00}.{2:0000}', arg.getDate(), arg.getMonth(), arg.getFullYear());
                    }
                    break;
                case 's':
                    if (typeof (arg) === 'string') {
                        return String.getSortableDateFromString(arg);
                    }
                    else if (arg instanceof Date) {
                        return String.Format('{0:0000}-{1:00}-{2:00}', arg.getFullYear(), arg.getMonth(), arg.getDate());
                    }
                    break;
                case 'n'://Tausender Trennzeichen
                    var replacedString = arg.replace(/,/g, '.');
                    if (isNaN(parseFloat(replacedString)) || replacedString.length <= 3)
                        break;
                    var numberparts = replacedString.split(/[^0-9]+/g);
                    var parts = numberparts;
                    if (numberparts.length > 1) {
                        parts = [
                            String.join.apply(String, [''].concat((numberparts.splice(0, numberparts.length - 1)))),
                            numberparts[numberparts.length - 1]
                        ];
                    }
                    var integer = parts[0];
                    var mod = integer.length % 3;
                    var output = (mod > 0 ? (integer.substring(0, mod)) : String.Empty);
                    var firstGroup = output;
                    var remainingGroups = integer.substring(mod).match(/.{3}/g);
                    output = output + '.' + String.Join('.', remainingGroups);
                    arg = output + (parts.length > 1 ? ',' + parts[1] : '');
                    return arg;
                default:
                    break;
            }
            if ((typeof (arg) === 'number' || !isNaN(arg)) && !isNaN(+match) && !String.IsNullOrWhiteSpace(arg))
                return String.formatNumber(arg, match);
            return arg;
        };
        String.getDisplayDateFromString = function (input) {
            var splitted;
            splitted = input.split('-');
            if (splitted.length <= 1)
                return input;
            var day = splitted[splitted.length - 1];
            var month = splitted[splitted.length - 2];
            var year = splitted[splitted.length - 3];
            day = day.split('T')[0];
            day = day.split(' ')[0];
            return day + "." + month + "." + year;
        };
        String.getSortableDateFromString = function (input) {
            var splitted = input.replace(',', '').split('.');
            if (splitted.length <= 1)
                return input;
            var times = splitted[splitted.length - 1].split(' ');
            var time = String.Empty;
            if (times.length > 1)
                time = times[times.length - 1];
            var year = splitted[splitted.length - 1].split(' ')[0];
            var month = splitted[splitted.length - 2];
            var day = splitted[splitted.length - 3];
            var result = year + "-" + month + "-" + day;
            if (!String.IsNullOrWhiteSpace(time) && time.length > 1)
                result += "T" + time;
            else
                result += "T00:00:00";
            return result;
        };
        String.formatNumber = function (input, formatTemplate) {
            var count = formatTemplate.length;
            var stringValue = input.toString();
            if (count <= stringValue.length)
                return stringValue;
            var remainingCount = count - stringValue.length;
            remainingCount += 1; //Das Array muss einen Eintrag mehr als die benötigten Nullen besitzen
            return new Array(remainingCount).join('0') + stringValue;
        };
        String.join = function (delimiter) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var temp = String.Empty;
            for (var i = 0; i < args.length; i++) {
                if ((typeof args[i] == 'string' && String.IsNullOrWhiteSpace(args[i])) ||
                    (typeof args[i] != "number" && typeof args[i] != "string"))
                    continue;
                var arg = "" + args[i];
                temp += arg;
                for (var i2 = i + 1; i2 < args.length; i2++) {
                    if (String.IsNullOrWhiteSpace(args[i2]))
                        continue;
                    temp += delimiter;
                    i = i2 - 1;
                    break;
                }
            }
            return temp;
        };
        String.Empty = "";
        return String;
    }());
    Enterprise.String = String;
    var StringBuilder = /** @class */ (function () {
        function StringBuilder(value) {
            if (value === void 0) { value = String.Empty; }
            this.Values = [];
            this.Values = new Array(value);
        }
        StringBuilder.prototype.ToString = function () {
            return this.Values.join('');
        };
        StringBuilder.prototype.Append = function (value) {
            this.Values.push(value);
        };
        StringBuilder.prototype.AppendFormat = function (format) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            this.Values.push(String.Format.apply(String, [format].concat(args)));
        };
        StringBuilder.prototype.Clear = function () {
            this.Values = [];
        };
        return StringBuilder;
    }());
    Enterprise.StringBuilder = StringBuilder;
})(Enterprise || (Enterprise = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var ChangePasswordPanel = /** @class */ (function (_super) {
            __extends(ChangePasswordPanel, _super);
            function ChangePasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ChangePasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.w('ConfirmPassword', Serenity.PasswordEditor).value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ChangePassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ChangePassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ChangePasswordPanel.prototype.getFormKey = function () { return Membership.ChangePasswordForm.formKey; };
            ChangePasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ChangePasswordPanel);
            return ChangePasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ChangePasswordPanel = ChangePasswordPanel;
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var ForgotPasswordPanel = /** @class */ (function (_super) {
            __extends(ForgotPasswordPanel, _super);
            function ForgotPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ForgotPasswordForm(_this.idPrefix);
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ForgotPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ForgotPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            ForgotPasswordPanel.prototype.getFormKey = function () { return Membership.ForgotPasswordForm.formKey; };
            ForgotPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ForgotPasswordPanel);
            return ForgotPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ForgotPasswordPanel = ForgotPasswordPanel;
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var ResetPasswordPanel = /** @class */ (function (_super) {
            __extends(ResetPasswordPanel, _super);
            function ResetPasswordPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.ResetPasswordForm(_this.idPrefix);
                _this.form.NewPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value.length < 7) {
                        return Q.format(Q.text('Validation.MinRequiredPasswordLength'), 7);
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.NewPassword.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    var request = _this.getSaveEntity();
                    request.Token = _this.byId('Token').val();
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/ResetPassword'),
                        request: request,
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.ResetPassword.Success'), function () {
                                window.location.href = Q.resolveUrl('~/Account/Login');
                            });
                        }
                    });
                });
                return _this;
            }
            ResetPasswordPanel.prototype.getFormKey = function () { return Membership.ResetPasswordForm.formKey; };
            ResetPasswordPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], ResetPasswordPanel);
            return ResetPasswordPanel;
        }(Serenity.PropertyPanel));
        Membership.ResetPasswordPanel = ResetPasswordPanel;
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
var Matrix;
(function (Matrix) {
    var Membership;
    (function (Membership) {
        var SignUpPanel = /** @class */ (function (_super) {
            __extends(SignUpPanel, _super);
            function SignUpPanel(container) {
                var _this = _super.call(this, container) || this;
                _this.form = new Membership.SignUpForm(_this.idPrefix);
                _this.form.ConfirmEmail.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmEmail.value !== _this.form.Email.value) {
                        return Q.text('Validation.EmailConfirm');
                    }
                });
                _this.form.ConfirmPassword.addValidationRule(_this.uniqueName, function (e) {
                    if (_this.form.ConfirmPassword.value !== _this.form.Password.value) {
                        return Q.text('Validation.PasswordConfirm');
                    }
                });
                _this.byId('SubmitButton').click(function (e) {
                    e.preventDefault();
                    if (!_this.validateForm()) {
                        return;
                    }
                    Q.serviceCall({
                        url: Q.resolveUrl('~/Account/SignUp'),
                        request: {
                            DisplayName: _this.form.DisplayName.value,
                            Email: _this.form.Email.value,
                            Password: _this.form.Password.value
                        },
                        onSuccess: function (response) {
                            Q.information(Q.text('Forms.Membership.SignUp.Success'), function () {
                                window.location.href = Q.resolveUrl('~/');
                            });
                        }
                    });
                });
                return _this;
            }
            SignUpPanel.prototype.getFormKey = function () { return Membership.SignUpForm.formKey; };
            SignUpPanel = __decorate([
                Serenity.Decorators.registerClass()
            ], SignUpPanel);
            return SignUpPanel;
        }(Serenity.PropertyPanel));
        Membership.SignUpPanel = SignUpPanel;
    })(Membership = Matrix.Membership || (Matrix.Membership = {}));
})(Matrix || (Matrix = {}));
//# sourceMappingURL=Application.Web.js.map